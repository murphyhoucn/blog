<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MayThink</title>
    <link href="/blog/post/MyLife/MayThink/"/>
    <url>/blog/post/MyLife/MayThink/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unclassified</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AprilRest</title>
    <link href="/blog/post/MyLife/AprilRest/"/>
    <url>/blog/post/MyLife/AprilRest/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unclassified</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JanuaryThink</title>
    <link href="/blog/post/MyLife/JanuaryThink/"/>
    <url>/blog/post/MyLife/JanuaryThink/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unclassified</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书影音2025</title>
    <link href="/blog/post/MyLife/BookMovieMusic2025/"/>
    <url>/blog/post/MyLife/BookMovieMusic2025/</url>
    
    <content type="html"><![CDATA[<h1 id="📚《腰背维修师》"><a href="#📚《腰背维修师》" class="headerlink" title="📚《腰背维修师》"></a>📚《腰背维修师》</h1><table><thead><tr><th align="center"><strong>🧑作者</strong></th><th align="center"><strong>🧑译者</strong></th><th align="center"><strong>📌体裁</strong></th><th align="center"><strong>🌏地区</strong></th><th align="center"><strong>🏫出版社</strong></th><th align="center"><strong>✒字数</strong></th><th align="center"><strong>📚载体</strong></th><th align="center"><strong>💖评分</strong></th><th align="center"><strong>✅时间</strong></th></tr></thead><tbody><tr><td align="center">斯图亚特·麦吉尔</td><td align="center">郑念军</td><td align="center">科普-医学</td><td align="center">美国</td><td align="center">北京科技出版社</td><td align="center">11.01</td><td align="center">微信读书</td><td align="center"></td><td align="center">2025.05</td></tr></tbody></table><h1 id="📚《杀死一只知更鸟》"><a href="#📚《杀死一只知更鸟》" class="headerlink" title="📚《杀死一只知更鸟》"></a>📚《杀死一只知更鸟》</h1><table><thead><tr><th align="center"><strong>🧑作者</strong></th><th align="center"><strong>🧑译者</strong></th><th align="center"><strong>📌体裁</strong></th><th align="center"><strong>🌏地区</strong></th><th align="center"><strong>🏫出版社</strong></th><th align="center"><strong>✒字数</strong></th><th align="center"><strong>📚载体</strong></th><th align="center"><strong>💖评分</strong></th><th align="center"><strong>✅时间</strong></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center">小说-剧情</td><td align="center">中国</td><td align="center">北京幻想工场</td><td align="center">30.7</td><td align="center">微信读书</td><td align="center"></td><td align="center">2024.12</td></tr></tbody></table><p>最近热播剧的同名小说，没有看完！</p><h1 id="🎬《黑镜》"><a href="#🎬《黑镜》" class="headerlink" title="🎬《黑镜》"></a>🎬《黑镜》</h1><table><thead><tr><th align="center">🧑导演：</th><th align="center">📌类别：科幻、剧情</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2025</td></tr></tbody></table><h2 id="第一季"><a href="#第一季" class="headerlink" title="第一季"></a>第一季</h2><p>　　《天佑吾主》：首相Michael Callow（罗里·金奈尔 Rory Kinnear 饰）被熟睡中的紧急电话召回办公室，得知广受喜爱的王室 成员Susannah公主遭人劫持，绑匪提出的交换条件匪夷所思。备感受辱的首相诸般尝试解救公主未果，最终在强大的社交网络民意压力下就范。</p><p>　　《一千五百万的价值》：在未来世界，衣着统一的人们只通过虚拟网络交流，依靠日复一日骑自行车赚取赖以为生的消费点数。不甘做行尸走肉的Bing（丹尼尔·卡卢亚 Daniel Kaluuya 饰）倾尽自己所有点数帮助天籁般歌声的Abi（杰西卡·布朗-芬德利 Jessica Brown-Findlay 饰）登上选秀舞台，却被Abi沦为艳星的事实深深打击。</p><p>　　《你的全部历史》：人人都植入内置芯片的时代，记忆影像可以被随时翻查。多疑的律师Liam（托比·凯贝尔 Toby Kebbell 饰）非常敏感妻子Fi（茱蒂·威泰克 Jodie Whittaker 饰）与前男友Jonas的关系。他歇斯底里的在三人记忆中搜查Fi不忠的证据，终于导致Fi崩溃离去。</p><h2 id="第二季"><a href="#第二季" class="headerlink" title="第二季"></a>第二季</h2><p>　　《马上回来》：一次车祸夺走了玛莎（海莉·阿特维尔 Hayley Atwell 饰）的男友艾什（多姆纳尔·格利森 Domhnall Gleeson 饰）的生命。在朋友的推荐下，玛莎利用艾什在社交网络上留下的信息塑造了一个具有人工智能的假艾什。刚开始玛莎只能通过手机听到合成的艾什的声音，不久之后，那个声音告诉玛莎，有一个方法可以让艾什“真正”的回到她的身边。</p><p>　　《白熊》：托尼（勒诺拉·克里奇洛 Lenora Crichlow 饰）从昏迷中醒来，发现自己在一间陌生的房间里并且失去了记忆。在她昏迷的这段时间中，世界显然发生了翻天覆地的变化，街道上充斥着无情的看客，而她竟然成为了杀人狂追杀的猎物。</p><p>　　《沃尔多一刻》：沃尔多是一只虚拟的蓝熊，出现在深夜的喜剧节目中，而站在它背后的，是配音演员杰米（丹尼尔·里格比 Daniel Rigby 饰）。沃尔多极高的人气让节目组产生了以它的形象参加国会竞选，而杰米发现自己逐渐变成了被操控的傀儡。</p><h2 id="第三季"><a href="#第三季" class="headerlink" title="第三季"></a>第三季</h2><p>《急转直下》：社交评分系统主导了人们的生活。获得高评分，例如 4.8 分的人受人尊重；而低评分，例如 3.2 分的人则被众人排挤。蕾茜为了搬到心仪的公寓，需要短时间获得更多“点赞”。</p><p>《游戏测试》：库伯应聘某游戏测试员，进入了一个VR 升级版的恐怖生存游戏中。电脑所制造的恐怖，全部来自你自己的记忆。</p><p>《闭嘴跳舞》：肯尼的电脑摄像头被黑客入侵，一个神秘组织以此要挟他。</p><p>《圣朱尼佩罗》：圣朱尼佩罗是一座“城市”。</p><p>《人与武器的对抗》：士兵在体内植入“感知封闭系统”来增强作战能力。</p><p>《为国所恨》：一系列谋杀案发生了，警察发现凶手的灵感来自一系列推特的标签。随着调查的深入，卡琳发现事情远没有那么简单</p><h2 id="第四季"><a href="#第四季" class="headerlink" title="第四季"></a>第四季</h2><p>《卡里斯特号》：罗伯特（杰西·普莱蒙 Jesse Plemons 饰）是一家游戏公司的技术总监，却因为内向怯懦的性格而无法得到同事和下属们的尊重。然而这一切都无关紧要，因为在家里，有一个甜美而又邪恶的秘密等待着他去享用。</p><p>《大天使》：马莉（罗丝玛丽·德薇特 Rosemarie DeWitt 饰）为了保护自己的女儿不受伤害而加入了“大天使”计划。</p><p>《鳄鱼》：面对曾经犯下的错误，是勇敢的面对，还是不惜一切手段消灭所有会导致秘密曝光的可能性？</p><p>《DJ下台》：当人们的相爱分离全部交由精密的科学计算和管理软件来定夺，我们会迎来一个更好的世界吗？</p><p>《铁头》：在一个人类快要被机器狗赶尽杀绝的世界里，为了得到唯一的希望，你愿意付出什么？</p><p>《黑色博物馆》：妮希（莱蒂希娅·赖特 Letitia Wright 饰）步入了一间神秘而又古怪的博物馆之中，在那里，一件曾经人人趋之若鹜的稀世藏品等待着她。</p><h2 id="第五季"><a href="#第五季" class="headerlink" title="第五季"></a>第五季</h2><h2 id="第六季"><a href="#第六季" class="headerlink" title="第六季"></a>第六季</h2><h2 id="第七季"><a href="#第七季" class="headerlink" title="第七季"></a>第七季</h2><h2 id="黑镜：圣诞特别篇-Black-Mirror-White-Christmas"><a href="#黑镜：圣诞特别篇-Black-Mirror-White-Christmas" class="headerlink" title="黑镜：圣诞特别篇 Black Mirror: White Christmas"></a>黑镜：圣诞特别篇 Black Mirror: White Christmas</h2><p>　　圣诞节将至，一间地处偏远的小木屋里，波特（拉菲·斯波 Rafe Spall 饰）和马特（乔恩·哈姆 Jon Hamm 饰）同坐一桌，用红酒和烤土豆庆祝这个银装素裹的节日。波特沉默寡言，无精打采，而马特却恰恰相反，为了逗波特讲话，他向波特讲述了自己的过去。<br>　　曾经的马特是一名“恋爱导师”，他通过摄像头和网络“远程操控”他的客户，让这些平日里无人问津的“宅男”们能够在派对山成功抱得美人归。然而，一场意外让马特决定永远离开这个他经营得风生水起的行当，此间究竟发生了什么？听了马特的叙述，波特终于决定向马特讲述自己的故事，这个故事关乎于他和他的女友，但并不完全关乎于爱情。</p><h1 id="🎬《孤单又灿烂的神：鬼怪》"><a href="#🎬《孤单又灿烂的神：鬼怪》" class="headerlink" title="🎬《孤单又灿烂的神：鬼怪》"></a>🎬《孤单又灿烂的神：鬼怪》</h1><table><thead><tr><th align="center">🧑导演：李应福</th><th align="center">📌类别：剧情、爱情</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2025.03.10</td></tr></tbody></table><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181541072.webp" alt="img"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181541580.webp" alt="img"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181541711.webp" alt="img"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181541614.webp" alt="img"></p><h1 id="🎥《哪吒之魔童闹海》"><a href="#🎥《哪吒之魔童闹海》" class="headerlink" title="🎥《哪吒之魔童闹海》"></a>🎥《哪吒之魔童闹海》</h1><table><thead><tr><th align="center">🧑导演： 饺子</th><th align="center">📌类别：动画</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2025.02.09</td></tr></tbody></table><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181540593.webp" alt="img"></p><p>过年，陪小孩儿去电影院看的。</p><h1 id="🎥《辩护人》"><a href="#🎥《辩护人》" class="headerlink" title="🎥《辩护人》"></a>🎥《辩护人》</h1><table><thead><tr><th align="center">🧑导演： 杨宇硕</th><th align="center">📌类别：剧情、历史</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2025.02.03</td></tr></tbody></table><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181156189.webp" alt="img"></p><h1 id="🎥《首尔之春》"><a href="#🎥《首尔之春》" class="headerlink" title="🎥《首尔之春》"></a>🎥《首尔之春》</h1><table><thead><tr><th align="center">🧑导演： 金成洙</th><th align="center">📌类别：剧情、历史</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2025.02.02</td></tr></tbody></table><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181155785.png" alt="img"></p><h1 id="🎥《南山的部长们》"><a href="#🎥《南山的部长们》" class="headerlink" title="🎥《南山的部长们》"></a>🎥《南山的部长们》</h1><table><thead><tr><th align="center">🧑导演： 禹民镐</th><th align="center">📌类别：剧情、惊悚、历史</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2025.02.02</td></tr></tbody></table><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181543812.png" alt="image-20250518154356751"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>读书</tag>
      
      <tag>电影</tag>
      
      <tag>音乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MY YEAR 2024</title>
    <link href="/blog/post/MyLife/MYYEAR2024/"/>
    <url>/blog/post/MyLife/MYYEAR2024/</url>
    
    <content type="html"><![CDATA[<h1 id="前路漫漫亦灿灿"><a href="#前路漫漫亦灿灿" class="headerlink" title="前路漫漫亦灿灿"></a>前路漫漫亦灿灿</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/MY%20YEAR%202024.jpg" alt="MY YEAR 2024"></p><h1 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h1><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><h1 id="反思与展望"><a href="#反思与展望" class="headerlink" title="反思与展望"></a>反思与展望</h1>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青岛之行2024</title>
    <link href="/blog/post/MyLife/TripToQingdao2024/"/>
    <url>/blog/post/MyLife/TripToQingdao2024/</url>
    
    <content type="html"><![CDATA[<p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181617716.jpg" alt="IMG_20240802_222812"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181618911.jpg" alt="IMG_20240803_091519"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181618393.jpg" alt="IMG_20240803_143650"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181618180.jpg" alt="IMG_20240804_134241"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181618401.jpg" alt="IMG_20240804_142747"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上海之行2024</title>
    <link href="/blog/post/MyLife/TripToShangHai2024/"/>
    <url>/blog/post/MyLife/TripToShangHai2024/</url>
    
    <content type="html"><![CDATA[<p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181615357.jpg" alt="IMG_20240729_200154"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181615208.jpg" alt="IMG_20240729_233530"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181615562.jpg" alt="IMG_20240730_064309"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181615604.jpg" alt="IMG_20240730_082441"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181615805.jpg" alt="IMG_20240730_194855"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181615589.jpeg"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181616502.jpg" alt="IMG_20240730_202105"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181616105.jpg" alt="IMG_20240731_094910"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181616367.jpg" alt="IMG_20240731_102528"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181616870.jpg" alt="IMG_20240731_162755"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181616183.jpg" alt="IMG_20240801_110217"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181616337.jpg" alt="IMG_20240801_115247"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181617043.jpg" alt="IMG_20240801_190116"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181617776.jpg" alt="IMG_20240801_192131"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>沈阳之行2024</title>
    <link href="/blog/post/MyLife/TripToShenYang2024/"/>
    <url>/blog/post/MyLife/TripToShenYang2024/</url>
    
    <content type="html"><![CDATA[<p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181614399.jpg" alt="IMG_20240707_161330"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181614787.jpg" alt="IMG_20240707_212856"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181614310.jpg" alt="IMG_20240708_042408"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMU 15-213 CSAPP</title>
    <link href="/blog/post/Knowledge/CSAPP/"/>
    <url>/blog/post/Knowledge/CSAPP/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1iW411d7hd/?vd_source=6d46640a443a49f050af078d1f65143e">https://www.bilibili.com/video/BV1iW411d7hd/?vd_source=6d46640a443a49f050af078d1f65143e</a></p><p><a href="http://csapp.cs.cmu.edu/">http://csapp.cs.cmu.edu/</a></p><p><a href="http://www.cs.cmu.edu/~213/">http://www.cs.cmu.edu/~213/</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUDA C Programming</title>
    <link href="/blog/post/Knowledge/CUDACProgramming/"/>
    <url>/blog/post/Knowledge/CUDACProgramming/</url>
    
    <content type="html"><![CDATA[<h1 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h1><p>CUDA明确了线程层次抽象的概念以便于组织线程，这是一个两层的线程层次结构，由<strong>线程块</strong>和<strong>线程块网格</strong>构成。</p><p>关系：</p><ol><li>由一个内核启动所产生的所有线程统称为一个网格。同一个网格中的所有线程共享相同的内存空间。</li><li>一个网格由多个线程块构成，一个线程块包含一组线程，同一个线程块内的线程协作通过：“同步”，“共享内存”的方式来实现，不同块内的线程不能协作。</li><li>线程依靠两个坐标变量来区分彼此</li></ol><ul><li>blockIdx : 线程块在线程网格内的索引</li><li>threadIdx : 块内的线程索引</li></ul><ol start="4"><li>CUDA可以组织三维的网格和块。网格和块的维度由两个内置变量指定。</li></ol><ul><li>gridDim : 线程格的维度，用每个线程格中的<strong>线程数</strong>来表示</li><li>blockDim : 线程块的维度，用每个线程块中的<strong>线程数</strong>来表示</li></ul><ol start="5"><li>一个<strong>线程格</strong>会被组织成<strong>线程块</strong>的<strong>二维数组</strong>形式，一个<strong>线程块</strong>会被组织成<strong>线程</strong>的<strong>三维数组</strong>形式。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs CUDA">#include &lt;cuda_runtime.h&gt;<br>#include &lt;stdio.h&gt;<br><br>__global__ void CheckIndex()<br>&#123;<br>    // 核函数中，每个线程都输出自己的线程索引，块索引，块维度，网格维度<br>    printf(&quot;threadIdx: (%d, %d, %d) \tblockIdx: (%d, %d, %d) \t\<br>            blockDim: (%d, %d, %d) \tgridDim: (%d, %d, %d)\n&quot;,<br>            threadIdx.x, threadIdx.y, threadIdx.z, <br>            blockIdx.x, blockIdx.y, blockIdx.z, <br>            blockDim.x, blockDim.y, blockDim.z, <br>            gridDim.x, gridDim.y, gridDim.z);<br>&#125;<br><br>int main()<br>&#123;<br>    int n_element = 6;<br><br>    dim3 block = 3;<br>    dim3 grid = ((n_element + block.x - 1) / block.x);<br><br>    // 主机端，检查块和网格维度<br>    printf(&quot;block.x = %d, block.y = %d, block.z = %d\n&quot;, block.x, block.y, block.z);<br>    printf(&quot;grid.x =  %d, grid.y =  %d, grid.z =  %d\n&quot;, grid.x, grid.y, grid.z);<br><br>    CheckIndex&lt;&lt;&lt;grid, block&gt;&gt;&gt;();<br>    cudaDeviceReset();<br><br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">block.x = 3, block.y = 1, block.z = 1<br>grid.x =  2, grid.y =  1, grid.z =  1<br>threadIdx: (0, 0, 0)  blockIdx: (0, 0, 0)               blockDim: (3, 1, 1)   gridDim: (2, 1, 1)<br>threadIdx: (1, 0, 0)  blockIdx: (0, 0, 0)               blockDim: (3, 1, 1)   gridDim: (2, 1, 1)<br>threadIdx: (2, 0, 0)  blockIdx: (0, 0, 0)               blockDim: (3, 1, 1)   gridDim: (2, 1, 1)<br>threadIdx: (0, 0, 0)  blockIdx: (1, 0, 0)               blockDim: (3, 1, 1)   gridDim: (2, 1, 1)<br>threadIdx: (1, 0, 0)  blockIdx: (1, 0, 0)               blockDim: (3, 1, 1)   gridDim: (2, 1, 1)<br>threadIdx: (2, 0, 0)  blockIdx: (1, 0, 0)               blockDim: (3, 1, 1)   gridDim: (2, 1, 1)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>HPC</tag>
      
      <tag>CUDA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FixLinuxGrub</title>
    <link href="/blog/post/Knowledge/FixLinuxGrub/"/>
    <url>/blog/post/Knowledge/FixLinuxGrub/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;事情是这样的！听我缓缓道来……</p><p>&emsp;&emsp;一时心血来潮想要折腾一下NVIDIA Jetson TX2这块边缘计算的板子，但到手后发现这个板子上面的Ubuntu用户不知道是谁的，密码也不知道是什么，所以没办法只能重装系统了。NVIDIA Jetson TX2的重装需要在Linux系统上使用SDK Manager这个软件，而TX2能安装的JetPack的版本不能用Ubuntu 20.04，所以之前安装的双系统不能用！得安装第三个系统Ubuntu 18.04！这是一切问题的开端！</p><p><a href="https://developer.nvidia.com/sdk-manager">SDK Manager | NVIDIA Developer</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423135756627.png" alt="image-20240423135756627"></p><p><a href="https://developer.nvidia.com/embedded/jetpack-archive">JetPack Archive | NVIDIA Developer</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423140127658.png" alt="image-20240423140127658"></p><p>&emsp;&emsp;LabPC之前的双系统是Windows 10和Ubuntu 20.04 LTS，这次再安装Ubuntu 18.04 LTS的话，电脑上就三个系统了！安装了三个系统的电脑虽然风险有点儿大，但其实情况也还好，不算什么大问题！而问题是第三个系统安装的硬盘是移动硬盘，这个硬盘是通过USB口接的一个硬盘盒，硬盘盒里是一个M2的固态硬盘。最关键的问题在这种硬盘的连接方式上，这将对整个系统的稳定性带来了极大的隐患。因此这个Ubuntu 18.04 LTS的系统不能久留，用完后得把这个移动硬盘和系统给移除掉！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423141505822.png" alt="image-20240423141505822"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423141529129.png" alt="image-20240423141529129"></p><p>&emsp;&emsp;在我用完Ubuntu 18.04 LTS之后，我本来以为直接把这个移动硬盘拔掉就好了，但事实并不是这么简单的！拔掉硬盘后再开机系统进入了<code>Grub</code>的界面，我人傻了，这种情况是我从来没遇到过的，我不知道怎么下手，网上搜了搜相关信息是说<code>系统启动引导文件</code>出错了，但我不敢贸然行动，害怕把另外的两个系统给搞坏了，所以先连接上了这个移动硬盘，然这个“三系统”的”高危”电脑就这样运行着。面对埋下的这颗不稳定的“雷”，还是有些恐惧的，得想办法把这颗“雷”排掉！在查阅了一下参考资料之后，动手！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423141605167.png" alt="image-20240423141605167"></p><p>先用ls命令查看一下当地设备中的硬盘和分区，如果能知道自己的系统是安装在哪个硬盘下那就太好了。如果不知道的话就用ls命令一个看，看看分区内文件就大概能推算出来是哪块儿硬盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub&gt; <span class="hljs-built_in">ls</span><br>(hd0),(hd0,gpt1),(hd0,gpt2),(hd0,gpt3),(hd0,gpt4),... ...,(hd1),(hd1,gpt1),... ...,(hd2),(hd2,gpt1),... ...,(hd3),(hd3,gpt1),... ...<br><br></code></pre></td></tr></table></figure><p>查看当前grub的设置，下面的<code>?</code>是指的是某个数字，我这里是只想的Windows系统所在的那个硬盘，这就解释通了为什么开机进入不了引导界面，而是进入了<code>Grub</code>命令界面，因为当前设置的硬盘里并并没有grub的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub&gt; <span class="hljs-built_in">set</span><br>... ...<br><span class="hljs-comment"># 只需要关注这两行内容</span><br>prefix=(hd?,gpt?)/grub/<br>root=hd?,gpt?<br>... ...<br></code></pre></td></tr></table></figure><p>在移除了硬盘盒之后，我台电脑是是有四块硬盘：</p><ul><li><p>(hd0)：480GB SSD: Ubuntu 18.04</p></li><li><p>(hd1)：256GB SSD</p></li><li><p>(hd2)：1TB HDD</p></li><li><p>(hd3)：480GB SSD: Windows 10</p></li></ul><p>在确定了Ubuntu所在的硬盘之后，下面就找<code>grub.cfg</code>这个文件！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423142604050.png" alt="image-20240423142604050"></p><p>我<code>grub.cfg</code>文件文件在这个目录下，下面就把这个目录设置到<code>Grub</code>的设置之中。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423143633868.png" alt="image-20240423143633868"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置</span><br>grub&gt; <span class="hljs-built_in">set</span> root=(hd0,gpt2)<br>grub&gt; <span class="hljs-built_in">set</span> prefix=(hd0,gpt2)/grub<br></code></pre></td></tr></table></figure><p>用set命令可以修改成功了</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423143655129.png" alt="image-20240423143655129"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动Grub启动引导界面</span><br>grub&gt; insmod normal<br>grub&gt; normal<br></code></pre></td></tr></table></figure><p>终于又见到了熟悉的双系统的界面了，第一个Ubuntu是20.04 LTS版本的，所以一切正常了！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423143740595.png" alt="image-20240423143740595"></p><p>选择第一项进入Ubuntu 20.04 LTS系统中，然后继续下面的操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npu481@npu481-H310M:~$ <span class="hljs-built_in">sudo</span> update-grub<br>npu481@npu481-H310M:~$ <span class="hljs-built_in">sudo</span> grub-install /dev/sda<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240423144020376.png" alt="image-20240423144020376"></p><p>好了，就这样操作完成了！</p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>InitJetsonTX2</title>
    <link href="/blog/post/Knowledge/InitJetsonTX2/"/>
    <url>/blog/post/Knowledge/InitJetsonTX2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/580836187">https://zhuanlan.zhihu.com/p/580836187</a><br><a href="https://www.cnblogs.com/masbay/p/10718514.html">https://www.cnblogs.com/masbay/p/10718514.html</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>边缘计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>南京之行2024</title>
    <link href="/blog/post/MyLife/TripToNanJing2024/"/>
    <url>/blog/post/MyLife/TripToNanJing2024/</url>
    
    <content type="html"><![CDATA[<p>南京很好！下次还来！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181612039.jpg" alt="IMG_20240416_200243"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181612838.jpg" alt="IMG_20240416_234813_1"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181612000.jpg" alt="IMG_20240417_112900"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181612111.jpg" alt="IMG_20240417_121959"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>成都之行2024</title>
    <link href="/blog/post/MyLife/TripToChengDu2024/"/>
    <url>/blog/post/MyLife/TripToChengDu2024/</url>
    
    <content type="html"><![CDATA[<p>成都很好！下次还来！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181609664.JPG" alt="IMG_1607"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181610149.jpg" alt="IMG_20240405_115424"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181610492.jpg" alt="IMG_20240405_140215"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181610051.jpg" alt="IMG_20240405_160442"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181610653.jpg" alt="IMG_20240405_210541"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181611931.jpg" alt="IMG_20240406_180448"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181611438.jpg" alt="IMG_20240406_183523"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181620049.jpg" alt="IMG_20240406_185536"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181611485.jpg" alt="IMG_20240407_002917"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>直面恐惧</title>
    <link href="/blog/post/MyLife/FacingYourFears/"/>
    <url>/blog/post/MyLife/FacingYourFears/</url>
    
    <content type="html"><![CDATA[<p>改变自己最快的方法，就是做你自己害怕做的事情。</p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>改变</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Murphy-LeetCode</title>
    <link href="/blog/post/Knowledge/Murphy-LeetCode/"/>
    <url>/blog/post/Knowledge/Murphy-LeetCode/</url>
    
    <content type="html"><![CDATA[<p>传送门: <a href="https://cosmicdusty.cc/Murphy-LeetCode/">Murphy-LeetCode (cosmicdusty.cc)</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Material for MkDocs</title>
    <link href="/blog/post/Knowledge/MaterialforMkDocs/"/>
    <url>/blog/post/Knowledge/MaterialforMkDocs/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install mkdocs mkdocs-material<br>mkdocs --version<br>mkdocs new my-project<br>mkdocs serve<br>mkdocs build<br>mkdocs gh-deploy<br></code></pre></td></tr></table></figure><p>参考</p><p><a href="https://squidfunk.github.io/mkdocs-material/">Material for MkDocs (squidfunk.github.io)</a></p><p><a href="https://github.com/Nagi-ovo/Cherno-CPP-Notes">Nagi-ovo&#x2F;Cherno-CPP-Notes: Cherno C++课程个人笔记 (github.com)</a></p><p><a href="https://walkccc.me/LeetCode/">LeetCode Solutions (walkccc.me)</a></p><p><a href="https://zjdoc-docguide.readthedocs.io/zh-cn/latest/">DocGuide (zjdoc-docguide.readthedocs.io)</a></p><p><a href="https://derrors.github.io/%E4%BB%8B%E7%BB%8D/">https://derrors.github.io/%E4%BB%8B%E7%BB%8D/</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MkDocs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT</title>
    <link href="/blog/post/Knowledge/QT/"/>
    <url>/blog/post/Knowledge/QT/</url>
    
    <content type="html"><![CDATA[<p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/qt_page_pic.png" alt="qt_page_pic"></p><p><a href="https://qtguide.ustclug.org/">Qt编程指南，Qt新手教程，Qt Programming Guide (ustclug.org)</a></p><p><a href="https://lug.ustc.edu.cn/">LUG @ USTC - LUG @ USTC</a></p><p><a href="https://www.devbean.net/category/qt-study-road-2/">Qt 学习之路 2 - DevBean Tech World</a></p><h1 id="Visual-Studio-2022-QT-开发环境配置"><a href="#Visual-Studio-2022-QT-开发环境配置" class="headerlink" title="Visual Studio 2022 QT 开发环境配置"></a>Visual Studio 2022 QT 开发环境配置</h1><table><thead><tr><th>序号</th><th>软件</th><th>下载链接</th></tr></thead><tbody><tr><td>1</td><td>Visual Studio 2022</td><td><a href="https://visualstudio.microsoft.com/vs/">Visual Studio 2022 IDE - Programming Tool for Software Developers (microsoft.com)</a></td></tr><tr><td>2</td><td>QT</td><td><a href="https://www.qt.io/download-qt-installer-oss">Download Qt OSS: Get Qt Online Installer</a></td></tr><tr><td>3</td><td>Qt VS Tools for Visual Studio</td><td><a href="https://marketplace.visualstudio.com/items?itemName=TheQtCompany.QtVisualStudioTools2022">Qt Visual Studio Tools - Visual Studio Marketplace</a></td></tr></tbody></table><h2 id="Visual-Studio-2022"><a href="#Visual-Studio-2022" class="headerlink" title="Visual Studio 2022"></a>Visual Studio 2022</h2><p>宇宙最强IDE，不解释！</p><p>VS与QT的配置教程：</p><ul><li><a href="https://www.cnblogs.com/yapingxin/p/16891160.html">Visual Studio 2022 QT 开发环境配置 - 辛亚平 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/qq_33867131/article/details/129747751">Visual Studio 2022 配置 Qt 开发环境（Qt 5.15.2）_vscode qt5.15.2-CSDN博客</a></li><li><a href="https://blog.csdn.net/yanchenyu365/article/details/121355571">vs2022 qt环境搭建调试_vs2022可以用2019的qt插件吗-CSDN博客</a></li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240119123753931.png" alt="image-20240119123753931"></p><h2 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h2><p>安装参考教程：<a href="https://www.bilibili.com/read/cv18934012/">QT安装教程(保姆级) - 哔哩哔哩 (bilibili.com)</a></p><p>起初我安装的QT版本是QT 6.6.1，但是后来在QT的文档中看到了，QT 6.5是一个LTS的版本，所以我又把QT 6.6.1删了，重新下载了6.5.3版本。通过<code>MaintenanceTool</code>可以实现当前安装组件的维护，类似于Viusal Studio安装时的<code>Visual Studio Installer</code>。</p><p>在这个网站<a href="https://wiki.qt.io/Main">Qt Wiki</a>中，可以看到Qt各个版本的介绍，查看是否是LTS还是Beta或是已经结束支持的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">    目录: D:\Dev\QT<br><br><br>Mode                 LastWriteTime         Length Name<br>----                 -------------         ------ ----<br>d-----        2023/11/21     13:28                6.6.1<br>d-----         2023/8/23     20:36                dist<br>d-----        2023/11/21     15:19                Docs<br>d-----        2023/11/21     15:19                Examples<br>d-----         2024/1/18     11:36                installerResources<br>d-----         2024/1/18     11:37                Licenses<br>d-----        2023/12/11     11:35                Tools<br>d-----         2022/6/10     16:14                vcredist<br>-a----         2024/1/18     11:37         258467 components.xml<br>-a----         2024/1/18     12:25        3093683 InstallationLog.txt<br>-a----         2024/1/18     11:37             48 installer.dat<br>-a----         2024/1/18     11:37             28 licenseInfo.txt<br>-a----         2024/1/18     11:37        1057733 MaintenanceTool.dat<br>-a----         2024/1/18     11:37       40430224 MaintenanceTool.exe<br>-a----         2024/1/18     11:37         197660 MaintenanceTool.ini<br>-a----         2024/1/18     11:37            461 network.xml<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/qt540installdir.png" alt="INSTALLDIR"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/qt540qtdir.png" alt="QTDIR"></p><h2 id="Qt-VS-Tools-for-Visual-Studio"><a href="#Qt-VS-Tools-for-Visual-Studio" class="headerlink" title="Qt VS Tools for Visual Studio"></a>Qt VS Tools for Visual Studio</h2><p>Visual Studio的QT插件</p><p>QT VS Tools使用手册：<a href="https://doc.qt.io/qtvstools/index.html">Qt VS Tools</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCVCpp</title>
    <link href="/blog/post/Knowledge/OpenCVCpp/"/>
    <url>/blog/post/Knowledge/OpenCVCpp/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.murtazahassan.com/">Murtaza Hassan</a></p><p><a href="https://www.bilibili.com/video/BV11A411T7rL/?vd_source=6d46640a443a49f050af078d1f65143e">4h上手C++版Opencv_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/483604320">数字图像处理(c++ opencv)入门学习 - 知乎 (zhihu.com)</a></p><h1 id="Installing-OpenCV-on-Windows-for-C"><a href="#Installing-OpenCV-on-Windows-for-C" class="headerlink" title="Installing OpenCV on Windows for C++"></a>Installing OpenCV on Windows for C++</h1><h2 id="Step-1-Download-and-Install-OpenCV"><a href="#Step-1-Download-and-Install-OpenCV" class="headerlink" title="Step 1 Download and Install OpenCV"></a>Step 1 Download and Install OpenCV</h2><p>Downloading and Installing OpenCV: <a href="https://opencv.org/releases/">Releases - OpenCV</a></p><p>2024年1月11日，最新版的OpenCV是4.9.0，我下载了的版本是OpenCV-4.8.0。下载解压到一个文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) PS D:\Dev\opencv480&gt; <span class="hljs-built_in">dir</span><br>    目录: D:\Dev\opencv480<br>Mode                 LastWriteTime         Length Name<br>----                 -------------         ------ ----<br>d-----         2024/1/11     14:14                build<br>d-----         2024/1/11     14:14                sources<br>-a----         2023/6/28     20:57          11560 LICENSE.txt<br>-a----         2023/6/28     20:57          27913 LICENSE_FFMPEG.txt<br>-a----         2023/6/28     20:57            868 README.md.txt<br></code></pre></td></tr></table></figure><h2 id="Step-2-Environment-Variables"><a href="#Step-2-Environment-Variables" class="headerlink" title="Step 2 Environment Variables"></a>Step 2 Environment Variables</h2><p>Add <code>bin folder</code> to Environment Variables path: <code>D:\Dev\opencv480\build\x64\vc16\bin</code>, then <strong>restart</strong> the PC.s</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240111171607051.png" alt="image-20240111171607051"></p><h2 id="Step3-New-Visual-Studio-Project"><a href="#Step3-New-Visual-Studio-Project" class="headerlink" title="Step3 New Visual Studio Project"></a>Step3 New Visual Studio Project</h2><ol><li>Best VS setting(Cherno)</li></ol><ul><li>Output Directory: $(SolutionDir)bin$(Platform)$(Configuration)\</li><li>Intermediate Directory: $(SolutionDir)bin\intermediate$(Platform)$(Configuration)\</li></ul><blockquote><p>D:\userCode\IntroOpenCV\bin\Win32\Debug\</p><p>D:\userCode\IntroOpenCV\bin\intermediate\Win32\Debug\</p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240111172341038.png" alt="image-20240111172341038"></p><ol start="2"><li>Set the platform target to x64</li></ol><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240111172118484.png" alt="image-20240111172118484"><br>on</p><h2 id="Step-4-OpenCV-configuration"><a href="#Step-4-OpenCV-configuration" class="headerlink" title="Step 4 OpenCV configuration"></a>Step 4 OpenCV configuration</h2><p>Add Directories by going to Project-Properties-Configuration Properties</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">VC++ Directories<br><span class="hljs-bullet">1.</span> Add Build Directories: D:\Dev\opencv480\build\include<br><span class="hljs-bullet">2.</span> Add Library Directories: D:\Dev\opencv480\build\x64\vc16\lib<br>Linker Input<br><span class="hljs-bullet">1.</span> Add Linker input: opencv<span class="hljs-emphasis">_world480d.lib</span><br><span class="hljs-emphasis">** d(opencv_</span>world480d.lib) for debug <br><span class="hljs-code">** without d(opencv_world480.lib) for release</span><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240111181709454.png" alt="image-20240111181709454"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240111181842738.png" alt="image-20240111181842738"></p><h2 id="Step-5-Test"><a href="#Step-5-Test" class="headerlink" title="Step 5 Test"></a>Step 5 Test</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::string path = <span class="hljs-string">&quot;./Resources/test.png&quot;</span>;<br>cv::Mat img = cv::<span class="hljs-built_in">imread</span>(path);<br>cv::<span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br>cv::<span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Using-VSCode-and-OpenCV-in-Windows"><a href="#Using-VSCode-and-OpenCV-in-Windows" class="headerlink" title="Using VSCode and OpenCV in Windows"></a>Using VSCode and OpenCV in Windows</h1><h1 id="Installing-OpenCV-4-8-0-on-Ubuntu-20-04-for-C"><a href="#Installing-OpenCV-4-8-0-on-Ubuntu-20-04-for-C" class="headerlink" title="Installing OpenCV 4.8.0 on Ubuntu 20.04 for C++"></a>Installing OpenCV 4.8.0 on Ubuntu 20.04 for C++</h1><p>reference: </p><ul><li><a href="https://docs.opencv.org/4.x/d7/d9f/tutorial_linux_install.html">https://docs.opencv.org/4.x/d7/d9f/tutorial_linux_install.html</a></li><li><a href="https://blog.csdn.net/KIK9973/article/details/118830187">https://blog.csdn.net/KIK9973/article/details/118830187</a></li><li><a href="https://www.cnblogs.com/booturbo/p/17399215.html">https://www.cnblogs.com/booturbo/p/17399215.html</a></li></ul><h2 id="Source-code-downloading"><a href="#Source-code-downloading" class="headerlink" title="Source code downloading"></a>Source code downloading</h2><ol><li>Download <code>opencv-4.8.0.zip</code> Sources in <a href="https://opencv.org/releases/">https://opencv.org/releases/</a> or <a href="https://github.com/opencv/opencv/releases/tag/4.8.0">https://github.com/opencv/opencv/releases/tag/4.8.0</a></li><li>Download <code>opencv_contrib-4.8.0.zip</code> Sources in <a href="https://github.com/opencv/opencv_contrib/releases/tag/4.8.0">https://github.com/opencv/opencv_contrib/releases/tag/4.8.0</a></li><li>unzip opencv-4.8.0.zip &amp;&amp; unzip opencv_contrib-4.8.0.zip</li></ol><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><ol start="4"><li>build opencv</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先安装依赖环境</span><br>npu481@npu481-H310M:~/userdoc/mydownload$ <span class="hljs-built_in">sudo</span> apt-get install build-essential<br>npu481@npu481-H310M:~/userdoc/mydownload$ <span class="hljs-built_in">sudo</span> apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev <br><br><span class="hljs-comment"># 编译opencv</span><br>npu481@npu481-H310M:~/userdoc/mydownload$ <span class="hljs-built_in">mkdir</span> -p build &amp;&amp; <span class="hljs-built_in">cd</span> build<br><br>npu481@npu481-H310M:~/userdoc/mydownload/build$ cmake -D CMAKE_INSTALL_PREFIX=/usr/local -D CMAKE_BUILD_TYPE=Release -D OPENCV_GENERATE_PKGCONFIG=ON -D OPENCV_ENABLE_NONFREE=True -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.8.0/modules ../opencv-4.8.0<br><br>npu481@npu481-H310M:~/userdoc/mydownload/build$ <span class="hljs-built_in">sudo</span> make -j6 <span class="hljs-comment"># 6表示运行命令的个数</span><br><br>npu481@npu481-H310M:~/userdoc/mydownload/build$ <span class="hljs-built_in">sudo</span> make install <span class="hljs-comment"># 编译成功后，在build目录下执行安装命令，等待安装完成</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> CMAKE<span class="hljs-emphasis">_INSTALL_</span>PREFIX 是opencv的安装地址 默认安装在 <span class="hljs-code">`/usr/local`</span><br><span class="hljs-bullet">-</span> CMAKE<span class="hljs-emphasis">_BUILD_</span>TYPE 是opencv安装的版本，Release和Debug两种可选，默认安装Release<br><span class="hljs-bullet">-</span> OPENCV<span class="hljs-emphasis">_ENABLE_</span>NONFREE 是否使用部分被申请了专利的算方法 这里选True的话就可以使用了<br><span class="hljs-bullet">-</span> OPENCV<span class="hljs-emphasis">_GENERATE_</span>PKGCONFIG 强烈建议开启这个 设置为ON。OPENCV<span class="hljs-emphasis">_GENERATE_</span>PKGCONFIG因为opencv4默认不生成.pc文件，所以加上这句用于生成opencv4.pc文件，支持pkg-config功能。opencv4版本及以上，这里用ON。OpenCV安装后的各种头文件和库文件的路径信息都在这个配置文件中。<br><span class="hljs-bullet">-</span> OPENCV<span class="hljs-emphasis">_EXTRA_</span>MODULES<span class="hljs-emphasis">_PATH: opencv_</span>contrib-4.8.0/modules<br><span class="hljs-bullet">-</span> <span class="hljs-code">`../opencv-4.8.0`</span>: 制定OpenCV源文件目录<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> <span class="hljs-code">`/usr/local`</span>: 安装位置<br><span class="hljs-bullet">-</span> <span class="hljs-code">`/usr/local/bin`</span>: 可执行文件<br><span class="hljs-bullet">-</span> <span class="hljs-code">`/usr/local/lib`</span>: 库文件（.so）<br><span class="hljs-bullet">-</span> <span class="hljs-code">`/usr/local/lib/cmake/opencv4`</span>: camke包<br><span class="hljs-bullet">-</span> <span class="hljs-code">`/usr/local/lib/pkgconfig`</span>: opencv4.pc的位置<br><span class="hljs-bullet">-</span> <span class="hljs-code">`/usr/local/include/opencv4/opencv2`</span>: 头文件<br><span class="hljs-bullet">-</span> <span class="hljs-code">`/usr/local/share/opencv4`</span>: 其他文件<br><span class="hljs-bullet">-</span> <span class="hljs-code">`/usr/local/share/licenses/opencv4`</span>: 其他文件<br></code></pre></td></tr></table></figure><ol start="5"><li>environment config</li></ol><ul><li>修改etc&#x2F;bash.bashrc</li></ul><p>我们之前安装的时候 OPENCV_GENERATE_PKGCONFIG&#x3D;ON 所以在&#x2F;usr&#x2F;local&#x2F;lib&#x2F;pkgconfig下生成了opencv4.pc文件，里面记录了OpenCV头文件、库文件的路径。需要进行如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">npu481@npu481-H310M:~/userdoc/mydownload/build$ <span class="hljs-built_in">sudo</span> find / -iname opencv4.pc<br>/usr/local/lib/pkgconfig/opencv4.pc<br><br><br>npu481@npu481-H310M:~/userdoc/mydownload/build$ <span class="hljs-built_in">sudo</span> gedit /etc/bash.bashrc<br><br><span class="hljs-comment">#在bash.bashrc文件末尾添加以下内容 并保存</span><br>PKG_CONFIG_PATH=<span class="hljs-variable">$PKG_CONFIG_PATH</span>:/usr/local/lib/pkgconfig<br><span class="hljs-built_in">export</span> PKG_CONFIG_PATH<br><br><span class="hljs-comment">#更新</span><br>npu481@npu481-H310M:~/userdoc/mydownload/build$ <span class="hljs-built_in">source</span> /etc/bash.bashrc<br></code></pre></td></tr></table></figure><ul><li>check</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npu481@npu481-H310M:~/userdoc/mydownload/build$ pkg-config --modversion opencv4<br>4.8.0<br><br>npu481@npu481-H310M:~/userdoc/mydownload/build$ pkg-config --libs opencv4<br>-L/usr/local/lib -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_face -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_intensity_transform -lopencv_line_descriptor -lopencv_mcc -lopencv_quality -lopencv_rapid -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_highgui -lopencv_datasets -lopencv_text -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_wechat_qrcode -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_dnn -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core<br></code></pre></td></tr></table></figure><ul><li>配置OpenCV的动态库环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">npu481@npu481-H310M:~/userdoc/mydownload/build$ <span class="hljs-built_in">sudo</span> gedit /etc/ld.so.conf.d/opencv.conf<br><br><span class="hljs-comment"># 添加lib路径 在 末尾 保存退出</span><br>/usr/local/lib<br> <br><span class="hljs-comment"># 刷新动态库环境</span><br>npu481@npu481-H310M:~/userdoc/mydownload/build$ <span class="hljs-built_in">sudo</span> ldconfig<br></code></pre></td></tr></table></figure><ol start="6"><li>测试OpenCV</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npu481@npu481-H310M:~/userdoc/mydownload$ <span class="hljs-built_in">cd</span> opencv-4.8.0/samples/cpp/example_cmake/<br>npu481@npu481-H310M:~/userdoc/mydownload/opencv-4.8.0/samples/cpp/example_cmake$ <span class="hljs-built_in">mkdir</span> build &amp;&amp; <span class="hljs-built_in">cd</span> build<br>npu481@npu481-H310M:~/userdoc/mydownload/opencv-4.8.0/samples/cpp/example_cmake/build$ cmake ..<br>npu481@npu481-H310M:~/userdoc/mydownload/opencv-4.8.0/samples/cpp/example_cmake/build$ make<br>npu481@npu481-H310M:~/userdoc/mydownload/opencv-4.8.0/samples/cpp/example_cmake/build$ ./opencv_example <br></code></pre></td></tr></table></figure><h2 id="VSCode中配置OpenCV"><a href="#VSCode中配置OpenCV" class="headerlink" title="VSCode中配置OpenCV"></a>VSCode中配置OpenCV</h2><p>reference: <a href="https://zhuanlan.zhihu.com/p/363035298">https://zhuanlan.zhihu.com/p/363035298</a></p><p>tasks.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span><br>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span><br>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br>        <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build active file&quot;</span><span class="hljs-punctuation">,</span>   <br>                    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++&quot;</span><span class="hljs-punctuation">,</span>       <br>                    <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>       <br>                        <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span>       <br>                        <span class="hljs-string">&quot;-std=c++11&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 指定C++版本</span><br>                        <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span>     <br>                        <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span>     <br>                        <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/main&quot;</span><span class="hljs-punctuation">,</span>       <br>                        <span class="hljs-string">&quot;`pkg-config&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;--cflags&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;--libs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv4`&quot;</span><span class="hljs-punctuation">,</span>       <br>                        <span class="hljs-string">&quot;-I&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/usr/local/include&quot;</span><span class="hljs-punctuation">,</span>        <br>                        <span class="hljs-string">&quot;-I&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/usr/local/include/opencv4&quot;</span><span class="hljs-punctuation">,</span>       <br>                        <span class="hljs-string">&quot;-I&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/usr/local/include/opencv4/opencv2&quot;</span><span class="hljs-punctuation">,</span>       <br>                        <span class="hljs-string">&quot;-L&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/usr/local/lib&quot;</span><span class="hljs-punctuation">,</span>        <br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_core&quot;</span><span class="hljs-punctuation">,</span>        <br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_imgproc&quot;</span><span class="hljs-punctuation">,</span>        <br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_imgcodecs&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_video&quot;</span><span class="hljs-punctuation">,</span>        <br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_ml&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_highgui&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_objdetect&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_flann&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_imgcodecs&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_photo&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;opencv_videoio&quot;</span><br>                    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>                        <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span>       <br>                        <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>        <br>                    <span class="hljs-punctuation">&#125;</span>        <br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>c_cpp_properties.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Linux&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;includePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/usr/local/include/opencv4&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;defines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;_DEBUG&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;UNICODE&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;_UNICODE&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;compilerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/g++&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c11&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cppStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c++11&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;intelliSenseMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linux-gcc-x64&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>launch.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span><br>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span><br>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build and debug active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/main&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ChernoOpenGL</title>
    <link href="/blog/post/Knowledge/ChernoOpenGL/"/>
    <url>/blog/post/Knowledge/ChernoOpenGL/</url>
    
    <content type="html"><![CDATA[<h1 id="Back-to-Top"><a href="#Back-to-Top" class="headerlink" title="Back to Top"></a>Back to Top</h1><h2 id="Video-Links"><a href="#Video-Links" class="headerlink" title="Video Links"></a>Video Links</h2><div align = center>    <iframe width="560" height="315" src="https://www.youtube.com/embed/W3gAzLwfIP0?si=sZLuN8kLPbniNWvx" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><h2 id="Notebook-Links"><a href="#Notebook-Links" class="headerlink" title="Notebook Links"></a>Notebook Links</h2><ul><li><a href="https://thecherno.com/">Cherno (thecherno.com)</a></li><li><a href="https://nagi.fun/Cherno-CPP-Notes/">📘 The Cherno’s C++ Course Notes 📘</a></li><li><a href="https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5">cppreference.com</a></li><li><a href="https://www.bilibili.com/video/BV1Ni4y1o7Au/?spm_id_from=333.999.0.0&vd_source=6d46640a443a49f050af078d1f65143e">【双语】【TheCherno】OpenGL_哔哩哔哩_bilibili</a></li><li><a href="https://www.opengl.org/">OpenGL - The Industry Standard for High Performance Graphics</a></li><li><a href="https://en.wikipedia.org/wiki/OpenGL">OpenGL - Wikipedia</a></li><li><a href="https://learnopengl.com/">https://learnopengl.com/</a></li><li><a href="https://learnopengl-cn.github.io/">https://learnopengl-cn.github.io/</a></li></ul><h1 id="1-Welcome-to-OpenGL"><a href="#1-Welcome-to-OpenGL" class="headerlink" title="1. Welcome to OpenGL"></a>1. Welcome to OpenGL</h1>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>OpenGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书影音2024</title>
    <link href="/blog/post/MyLife/BookMovieMusic2024/"/>
    <url>/blog/post/MyLife/BookMovieMusic2024/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Todo List</p><ul><li>📚《湖畔》 【日本】东野圭吾 (在读)</li><li>📚《抗生素的故事：一颗改变人类命运的药丸》 【美国】威廉·罗森 (在读)</li><li>📚《平原上的摩西》 【中国】双雪涛 (在读)</li><li>🎬《疑犯追踪(POI) 第一季》【美国】乔纳森·诺兰（在看)</li><li>📚《明朝那些事》</li></ul></blockquote><h1 id="📚《小巷人家》"><a href="#📚《小巷人家》" class="headerlink" title="📚《小巷人家》"></a>📚《小巷人家》</h1><table><thead><tr><th align="center"><strong>🧑作者</strong></th><th align="center"><strong>🧑译者</strong></th><th align="center"><strong>📌体裁</strong></th><th align="center"><strong>🌏地区</strong></th><th align="center"><strong>🏫出版社</strong></th><th align="center"><strong>✒字数</strong></th><th align="center"><strong>📚载体</strong></th><th align="center"><strong>💖评分</strong></th><th align="center"><strong>✅时间</strong></th></tr></thead><tbody><tr><td align="center">大米</td><td align="center"></td><td align="center">小说-剧情</td><td align="center">中国</td><td align="center">北京幻想工场</td><td align="center">30.7</td><td align="center">微信读书</td><td align="center"></td><td align="center">2024.12</td></tr></tbody></table><p>最近热播剧的同名小说，没有看完！</p><h1 id="📚《长安的荔枝》"><a href="#📚《长安的荔枝》" class="headerlink" title="📚《长安的荔枝》"></a>📚《长安的荔枝》</h1><table><thead><tr><th align="center"><strong>🧑作者</strong></th><th align="center"><strong>🧑译者</strong></th><th align="center"><strong>📌体裁</strong></th><th align="center"><strong>🌏地区</strong></th><th align="center"><strong>🏫出版社</strong></th><th align="center"><strong>✒字数</strong></th><th align="center"><strong>📚载体</strong></th><th align="center"><strong>💖评分</strong></th><th align="center"><strong>✅时间</strong></th></tr></thead><tbody><tr><td align="center">马伯庸</td><td align="center"></td><td align="center">小说-文学</td><td align="center">中国</td><td align="center">湖南文艺出版社</td><td align="center">9.3</td><td align="center">微信读书</td><td align="center">⭐⭐⭐⭐⭐</td><td align="center">2024.12.25</td></tr></tbody></table><p>大部分时间都是在听这本书的。</p><h1 id="📚《被嫌弃的松子的一生》"><a href="#📚《被嫌弃的松子的一生》" class="headerlink" title="📚《被嫌弃的松子的一生》"></a>📚《被嫌弃的松子的一生》</h1><table><thead><tr><th align="center"><strong>🧑作者</strong></th><th align="center"><strong>🧑译者</strong></th><th align="center"><strong>📌体裁</strong></th><th align="center"><strong>🌏地区</strong></th><th align="center"><strong>🏫出版社</strong></th><th align="center"><strong>✒字数</strong></th><th align="center"><strong>📚载体</strong></th><th align="center"><strong>💖评分</strong></th><th align="center"><strong>✅时间</strong></th></tr></thead><tbody><tr><td align="center">山田宗树</td><td align="center">王蕴洁，刘珮瑄</td><td align="center">小说-文学</td><td align="center">日本</td><td align="center">四川文艺出版社</td><td align="center">22.1</td><td align="center">微信读书</td><td align="center">⭐⭐⭐⭐</td><td align="center">2024.08.23</td></tr></tbody></table><p>好久没有静下心来读一本书了😞<br>不过本书有点儿揪心，压抑😞<br>读完这本书，最大的感想就是：无论身在何时，无论身处何地！一定要记得，我是为自己而活着，我不需要在别人身上去找所谓的自己的存在。</p><h1 id="🎬《9号秘事》"><a href="#🎬《9号秘事》" class="headerlink" title="🎬《9号秘事》"></a>🎬《9号秘事》</h1><table><thead><tr><th align="center">🧑导演：大卫·科尔</th><th align="center">📌类别：喜剧、悬疑、恐怖</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024、2025</td></tr></tbody></table><h2 id="第一季"><a href="#第一季" class="headerlink" title="第一季"></a>第一季</h2><ul><li>S1E1 沙丁鱼游戏 Sardines</li></ul><p>第一季的第一集鲜明地表现出了本系列故事的最大特色——反转！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181557337.webp" alt="img"></p><ul><li>S1E2 静夜 A Quiet Night in</li></ul><p>全片只有哑巴最后说了唯一句台词，默剧的形式很新颖，故事很搞笑。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181557875.webp" alt="img"></p><ul><li>S1E3 汤姆和洁瑞 Tom &amp; Gerri</li></ul><p>这一集很精彩，超级喜欢这一集。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181556145.webp" alt="img"></p><p>S1E4 最后一口气  Last Gasp</p><ul><li>讽刺味很重的一出闹剧。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181556100.webp" alt="img"></p><p>S1E5 替角 The Understudy</p><p>这一集得结合莎士比亚的《麦克白》才能更好的理解，这一集的故事也很精彩。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181556941.webp" alt="img"></p><ul><li>S1E6 地狱折磨 The Harrowing</li></ul><p>阴森森的，有点儿吓人。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181556252.webp" alt="img"></p><h2 id="第二季"><a href="#第二季" class="headerlink" title="第二季"></a>第二季</h2><ul><li>S2E1 卧铺 La Couchette</li></ul><p>医生在卧铺车厢内休息，打算第二天一早精神满满的参加期待了一年半的重要面试。醉醺醺的酒鬼、准备参加女儿婚礼的夫妇、环游世界的流浪女孩和未知炮友等人屡屡吵得医生睡不好。大家争吵之时，突然对面跌落一具尸体。</p><p>这一集作为这一季的开篇很合适，非常符合9号密室的风格，最后两分钟来一个惊天大反转！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181556188.webp" alt="img"></p><ul><li>S2E2 克里斯汀的12天  The 12 Days of Christine</li></ul><p>克里斯汀在化装舞会上认识消防员装扮的男友，直至谈婚论嫁生子。克里斯汀不断闪现室友、结婚生子、父亲生病去世、和丈夫离婚、孩子受伤、和丈夫和解的片段。</p><p>本来以为是恐怖故事，并且看得稀里糊涂的，直到最后几分钟的反转，原来这是个温情故事，看哭了😭！超爱这集啊！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181556813.webp" alt="img"></p><ul><li>S2E3 伊·盖审判案 The Trial of Elizabeth Gadge<br>《伊丽莎白·盖齐审判案》（The Trial of Elizabeth Gadge）：年轻夫妇为占领房产，投诉自己母亲伊丽莎白是女巫，村长马上找了有威信的女巫判决者进行审判。</li></ul><p>讽刺的味道太重了！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181556580.webp" alt="img"></p><ul><li>S2E4 冰冷的安慰 Cold Comfort</li></ul><p>安迪在“帮助热线”得到了新的工作，负责接听电话给有困惑的人们安慰或答疑。接过几通电话后，安迪从低落到自责再到愤怒。</p><p>全片都是以监控的视角展开。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181556450.webp" alt="img"></p><ul><li>S2E5 外婆的派对 Nana’s Party</li></ul><p>有洁癖的安吉拉在准备母亲的79岁生日派对，丈夫吉宝躲在蛋糕下想搞个恶作剧。随后外婆带着小女儿卡洛和女婿帕特来了。一系列的混乱平息后，从女儿嘴里知道真相的安吉拉决定离开。</p><p>有点儿搞笑哈哈哈。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181555942.webp" alt="img"></p><ul><li>S2E6 降神会 Séance Time</li></ul><p>女孩被带到通灵会参加通灵游戏，鬼上身后要伤害女孩，女孩尖叫，才发现这是恐怖节目的拍摄。主持人泰瑞的这档节目曾遭禁播，泰瑞很希望以此翻盘。</p><p>在晚上睡觉之前关灯看的这集，刚开始的恐怖情节给我吓得半死，直接放下手机睡觉，虽然中间有一些搞笑的情节，但到最后还是有点儿吓人的。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181555725.webp" alt="img"></p><h2 id="第三季"><a href="#第三季" class="headerlink" title="第三季"></a>第三季</h2><ul><li>S3E1 圣诞恶魔 The Devil of Christmas<br>朱利安带母亲、儿子托比以及继妻到圣诞小屋度假，却听管理员讲述了圣诞恶魔的故事。</li></ul><p>看这集的时候感觉有点儿无聊，感觉就是一个恐怖故事，但又觉得肯定没这么简单，剧中时不时的出现像是导演的画外音，一直没想到反转到底会以怎么样的方式出现，直到最后一分钟，甚至是最后一句台词！才搞懂这到底是一个怎么样的故事！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181555308.webp" alt="img"></p><ul><li>S3E2 餐馆演戏诈骗 The Bill<br>一群伙伴们在晚上去了当地的一家饭店，最后因为由谁来付账单发生了争执。</li></ul><p>这期有点儿搞笑，看的过程中能猜到大概是怎么回事，但最后的反转还是比较有惊喜的。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181555121.webp" alt="img"></p><ul><li>S3E3 斯芬克斯的谜语 The Riddle of the Sphinx</li></ul><p>剑桥大学的一个教授想教一个学生怎么去做难解的填字游戏。</p><p>这期的反转了好多次，好爽！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181555559.webp" alt="img"></p><ul><li>S3E4 卡拉OK Empty Orchestra</li></ul><p>额。。。这集怎么说呢？感觉跟九号秘事的风格不太搭啊。</p><p>为了庆祝同事的晋升在卡拉OK办了一个聚会，所有的办公室员工都想用歌声来表达祝福。</p><p>但看的过程中我就知道所唱的歌肯定不是随便选的，肯定有什么含义的。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181555571.webp" alt="img"></p><ul><li>S3E5 摇啊摇 Diddle Diddle Dumpling<br>男子在晨跑时捡到一只单只的男式皮鞋，并且崭新几乎没被穿过，他决定找找这个鞋的主人是谁。</li></ul><p>一开始感觉跟S1E3的汤姆和洁瑞相似的故事情节，后来发现不一样，完全不一样，这是一个让人落泪的故事。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181555382.webp" alt="img"></p><ul><li>S3E6 预展 Private View<br>著名艺术家准备举办艺术展，并只邀请了几个人来参加预展，但是没有人知道这是为什么。朱利安带母亲、儿子托比以及继妻到圣诞小屋度假，却听管理员讲述了圣诞恶魔的故事。<br>！！！好看！！！！</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181554678.webp" alt="img"></p><h2 id="第四季"><a href="#第四季" class="headerlink" title="第四季"></a>第四季</h2><ul><li>S4E1 桑给巴尔酒店 Zanzibar<br>一群互不知情的客人，他们预订了伦敦桑给巴尔酒店九楼相邻的房间，期间上演了各种奇怪搞笑的闹剧。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181554122.webp" alt="img"></p><ul><li>S4E2 化装间 Bernie Clifton’s Dressing Room<br>《伯尼·克里夫顿的化装间》（Bernie Clifton’s Dressing Room）：自双簧演员莱恩（Len）和汤米（Tommy）上一次一起登台以来已经30年了。在上演《奶酪和饼干》这一幕之后，汤米就离开了莱恩，直到现在——这场在受邀观众面前的最后一次演出。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181554964.webp" alt="img"></p><ul><li>S4E3 一劳永逸 Once Removed<br>根据霍尔姆斯和拉赫的压力评定量表，生活中压力最大的三个经历是丧偶、离婚和坐牢，搬家仅仅只排在第32位。但是从十分钟前到现在，任何事情都可能发生。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181554321.webp" alt="img"></p><ul><li>S4E4 相扶相持 To Have and to Hold<br>当阿德里安（Adrian）担任婚礼摄影师的职业开始妨碍到他自己的婚姻时，他的妻子哈莉特（Harriet）决定要找出原因。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181554387.webp" alt="img"></p><ul><li>S4E5 花落谁家 And the Winner Is…<br>电视颁奖公司的评审团正在决定谁将赢得最佳女演员奖，但是八位候选女演员中只有一位能当选。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181554168.webp" alt="img"></p><ul><li>S4E6 幸运死神 Tempting Fate<br>三个市政承包商的人要去清理一个死去囤积狂的公寓。但当他们发现沾满鲜血的地板时，他们的人生将就此不同。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181554471.webp" alt="img"></p><h2 id="第五季"><a href="#第五季" class="headerlink" title="第五季"></a>第五季</h2><ul><li>S5E1 裁判是个xxx The Referee’s A Wxxxner<br>足球赛季的最后一天，这要从最后一场比赛说起——联合队和流浪者队之间的至关重要的对决，而所有的一切都牢牢掌握在四名裁判的手中。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181554733.webp" alt="img"></p><ul><li>S5E2 死神你莫骄傲 Death Be Not Proud<br>年轻夫妇比蒂（Beattie）和山姆（Sam）终于成功开始了置业。但是他们唯一负担得起的公寓有一个黑暗而邪恶的过去，需要被聆听的过去。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181553115.webp" alt="img"></p><ul><li>S5E3 爱的大冒险 Love’s Great Adventure<br>特雷弗（Trevor）和茱莉亚（Julia）一直希望能把他们家的圣诞节过得特别些，但因为生活拮据，这绝对不是件易事。随着圣诞日历上的门被一扇扇打开，每个人也都为圣诞节作出了自己的贡献。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181553263.webp" alt="img"></p><ul><li>S5E4 错误引导 Misdirection</li></ul><p>世界著名魔术师内维尔·格里芬（Neville Griffin）极度保护他的秘密，尽管如此，学生记者加百列（Gabriel）还是决心去采访他。<br>实际上，格里芬认为窃取魔术可能比谋杀更糟。他怎么会知道呢？</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181553854.webp" alt="img"></p><ul><li>S5E5 放声思考 Thinking Out Loud<br>七个完全不同的人物在相机前分享他们的故事，他们的命运不可避免地、不可分割地、在不知情的情况下发生正面冲突。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181553828.webp" alt="img"></p><ul><li>S5E6 盯梢 The Stakeout</li></ul><p>两名警察在上夜班时有空互相了解。但不到一个月前，汤普森警员（PC Thompson）的前搭档死于一次残酷的袭击，法医证据丢失，瓦尔尼警员（PC Varney）提出了许多不好回答的问题。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181552488.webp" alt="img"></p><h2 id="第六季"><a href="#第六季" class="headerlink" title="第六季"></a>第六季</h2><ul><li>S6E1 Wuthering Heist（《呼啸劫案》）<br>Pantalone有一个大胆的计划，要偷一批价值1200万美元的钻石。但他雇了一大群变戏法的小丑来做这件事。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181552246.webp" alt="img"></p><ul><li>S6E2 Simon says（西蒙说）<br>每个人都说奇幻史诗《第九圈》第七季的大结局非常令人失望–就连节目主持人斯潘塞·马奎尔也渴望进入新的项目。但并不是每个人都认为这必须是事情的结束。事实上，痴迷《第九圈》的西蒙·斯梅瑟斯特决定拜访他的英雄来帮助纠正错误。因为这是粉丝们想要的…</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181552816.webp" alt="img"></p><ul><li>S6E3 Lip Service（唇语服务）<br>以为近在咫尺的援手与第二春，背后又是阴谋。“将这场谋杀与政治搅合在一起是阴谋论……”，想起《金色梦乡》里的青柳。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181552428.webp" alt="img"></p><ul><li>S6E4 Hurry up and wait（快点等等）<br>演员詹姆斯正在一辆静态大篷车里等待他在独立电视台新犯罪剧中的重要时刻，这辆大篷车由一个奇怪的家庭拥有，显然有什么要隐藏的。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181552920.webp" alt="img"></p><ul><li>S6E5 How do you plead?（你要怎么为我辩护？）<br>著名的律师韦伯斯特身体不好，不是一个容易照顾的人。他的看护人厄本知道如何以柔克刚，分发药物或迎合老人的虚荣心。但在这个特殊的夜晚，一些事情将考验韦伯斯特的决心和法律技能到最后。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181552312.webp" alt="img"></p><ul><li>S6E6 Last Night of the Proms（《逍遥音乐节的最后一晚》）</li></ul><p>道恩和米克正在举办一年一度的舞会最后一夜派对，作为后英国退出欧盟时代英国的完美解毒剂，每个人都应该挥舞着他们的工会杰克，跟着希望和荣耀的土地唱歌，但是道恩的妹妹彭妮看到了一个神秘的陌生人潜伏在附近，她的丈夫布莱恩并不觉得特别爱国，当胖夫人唱歌的时候，每个人的生活都将永远改变。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181551429.webp" alt="img"></p><h2 id="第七季"><a href="#第七季" class="headerlink" title="第七季"></a>第七季</h2><ul><li>S7E1 《欢聚如梦》（Merrily, Merrily）<br>本集是一个温情中带着伤感的故事，讲述了Lawrence在妻子过世后，约老友Darren、Callum齐聚当年向妻子求婚的地方，却发生了一系列阴差阳错的事件。最终，Lawrence似乎离世，被渡向彼岸，结尾处他眼神中似乎看到了亡妻。<br>本集走的是深情奇幻路线，编剧犀利、曲折，演员演技可靠，整体非常符合《9号秘事》的风格。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181551063.webp" alt="img"></p><ul><li>S7E2 《金老师》（Mr. King）<br>本集聚焦恐怖的民间故事，讲述了一位来自伦敦的老师艾伦·柯蒂斯来到威尔士村庄担任小学教师，却逐渐发现这里的诡异之处，最终被孩子们和校长强制献祭给“神圣”的土地。<br>本集光线明媚，但故事本身阴森恐怖，形成了鲜明对比，细思极恐。</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181551082.webp" alt="img"></p><ul><li>S7E3 《九条命的凯特》（Nine Lives Kat）</li></ul><p>我们的真实存在的吗？或者只是别人虚构的故事。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181551307.webp" alt="img"></p><ul><li>S7E4  绑架 Kid&#x2F;Nap</li></ul><p>轻松愉快，有点儿搞笑，分屏很有意思，但是悬疑和反转的意思不是很强。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181551946.webp" alt="img"></p><ul><li>S7E5 随手行善 A random act of kindness</li></ul><p>科幻故事的背后是一个温情、令人动容的故事。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181551179.webp" alt="img"></p><ul><li>S7E6 聪明的猫头鹰 Wise owl</li></ul><p>童年阴影了，wok!</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181551889.webp" alt="img"></p><h2 id="第八季"><a href="#第八季" class="headerlink" title="第八季"></a>第八季</h2><ul><li>S8E1 The bones of St. Nicholas 遗骨迷踪</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181551153.webp" alt="img"></p><ul><li>S8E2 母亲的遗产</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181551800.webp" alt="img"></p><ul><li>S8E3 十三号星期五恐惧症</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181550597.webp" alt="img"></p><ul><li>S8E4 爱情是陌生人</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181550755.webp" alt="img"></p><ul><li>S8E5 3 by 3</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181550881.webp" alt="img"></p><ul><li>S8E6 最后的周末</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181550093.webp" alt="img"></p><h2 id="第九季"><a href="#第九季" class="headerlink" title="第九季"></a>第九季</h2><ul><li>S9E1 沉默的大多数</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181550453.webp" alt="img"></p><ul><li>S9E2 电车难题</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181550408.webp" alt="img"></p><ul><li>S9E3 桑园街系列谋杀案</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181550280.webp" alt="img"></p><ul><li>S9E4 重启密室</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181549272.webp" alt="img"></p><ul><li>S9E5 第九交响曲之咒</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181549841.webp" alt="img"></p><ul><li>S9E6 步履维艰</li></ul><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181549557.webp" alt="img"></p><h2 id="特辑"><a href="#特辑" class="headerlink" title="特辑"></a>特辑</h2><ul><li>万圣节特别篇 Inside No. 9 Dead Line (2018)</li></ul><p>很奇特的直播互动形式，要是当时能在看直播就好了。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181549484.webp" alt="img"></p><p>全季都看完了，花了很长时间！九号秘事太好看了！</p><h1 id="🎥《平原上的夏洛克》"><a href="#🎥《平原上的夏洛克》" class="headerlink" title="🎥《平原上的夏洛克》"></a>🎥《平原上的夏洛克》</h1><table><thead><tr><th align="center">🧑导演： 徐磊</th><th align="center">📌类别：文艺、喜剧</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.06.15</td></tr></tbody></table><p>周末看电影！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181120652.webp" alt="img"></p><h1 id="🎥《深空失忆》"><a href="#🎥《深空失忆》" class="headerlink" title="🎥《深空失忆》"></a>🎥《深空失忆》</h1><table><thead><tr><th align="center">🧑导演： 克里斯蒂安·阿瓦特</th><th align="center">📌类别：科幻、恐怖</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2024.06.08</td></tr></tbody></table><p>周末看电影。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181119833.webp" alt="img"></p><h1 id="🎥《深海浩劫》"><a href="#🎥《深海浩劫》" class="headerlink" title="🎥《深海浩劫》"></a>🎥《深海浩劫》</h1><table><thead><tr><th align="center">🧑导演： 彼得·博格</th><th align="center">📌类别：灾难</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2024.06.02</td></tr></tbody></table><p>周末看电影。<br>总得感觉就是太绝望了！这是根据真实事件改变！灾难无情啊！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181119730.webp" alt="img"></p><h1 id="🎬《辐射-第一季》"><a href="#🎬《辐射-第一季》" class="headerlink" title="🎬《辐射 第一季》"></a>🎬《辐射 第一季》</h1><table><thead><tr><th align="center">🧑导演：乔纳森·诺兰</th><th align="center">📌类别：剧情、动作、科幻</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2024.05.03</td></tr></tbody></table><p>几天时间把这部热播剧刷完了，感觉还不错吧。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181118628.webp" alt="img"></p><h1 id="🎥《你的名字》"><a href="#🎥《你的名字》" class="headerlink" title="🎥《你的名字》"></a>🎥《你的名字》</h1><table><thead><tr><th align="center">🧑导演： 新海诚</th><th align="center">📌类别：爱情、剧情、动画</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2024.03.30</td></tr></tbody></table><p>周末在教研室看的电影。</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181549037.webp" alt="img"></p><h1 id="📚《我不是教你诈（1-5合集）》"><a href="#📚《我不是教你诈（1-5合集）》" class="headerlink" title="📚《我不是教你诈（1-5合集）》"></a>📚《我不是教你诈（1-5合集）》</h1><table><thead><tr><th align="center"><strong>🧑作者</strong></th><th align="center"><strong>🧑译者</strong></th><th align="center"><strong>📌体裁</strong></th><th align="center"><strong>🌏地区</strong></th><th align="center"><strong>🏫出版社</strong></th><th align="center"><strong>✒字数</strong></th><th align="center"><strong>📚载体</strong></th><th align="center"><strong>💖评分</strong></th><th align="center"><strong>✅时间</strong></th></tr></thead><tbody><tr><td align="center">刘墉</td><td align="center">无</td><td align="center">社会-处世学</td><td align="center">中国</td><td align="center">北京联合出版社</td><td align="center">19.3</td><td align="center">Kindle</td><td align="center">⭐⭐⭐⭐⭐</td><td align="center">2024.03.24</td></tr></tbody></table><p>《我不是教你诈》这本书给我这个涉世未深的大学生一点儿“小小的心灵震撼”，原来人性是这么的复杂！</p><p>因为看的是网络上下载的资源，所以书中有很多的错别字！！</p><p><strong>摘抄</strong></p><blockquote><ul><li>您在位置 #173-174的标注 | 添加于 2024年2月26日星期一 下午10:54:50</li></ul><p><strong>记住，这世界上许多人会问你对第三者的看法。他的目的，可能是调查，也可能是”套你的话”。当你发现别人来套话的时候，一个字也不能说。</strong></p><ul><li>您在位置 #177-179的标注 | 添加于 2024年2月26日星期一 下午10:56:04</li></ul><p>总之，能不传话，最好不要传话；能不套话，最好不要套话；能不涉入”背后的批评”，最好不要涉入。<strong>让自己像沙滩，多大的浪来了，也是轻抚着沙滩，一波波地退去。而不要像岩石，使小小的浪，也激起高高的水花。</strong></p><ul><li>您在位置 #210-211的标注 | 添加于 2024年2月26日星期一 下午11:01:41</li></ul><p>年轻人失败，常败在不知道及时表现自己，也常败在过度表现自己。愈表现，愈得意，得意忘形地忘了别人的存在。</p><ul><li>您在位置 #213 的笔记 | 添加于 2024年2月26日星期一 下午11:04:37</li></ul><p>趣味,品味,人情味：做人的三昧。</p><ul><li>您在位置 #231-233的标注 | 添加于 2024年2月26日星期一 下午11:11:33</li></ul><p>在这儿，我特别要对初入社会的年轻朋友强调，这个社会好像许多果园，当你进去，果园的主人可能说:”好!那片地，交给你种!”当你种出最丰硕，甚至远超过果园主人以前种出的果实的时候，<strong>永远不要忘记，是谁让你进来，又是谁给你这块地。</strong>我们自鸣得意的时候，千万不能忘本。</p><ul><li>您在位置 #270-271的标注 | 添加于 2024年2月26日星期一 下午11:18:49</li></ul><p>人都要面子，你的礼物再实用，如果不把面子做足，只怕收到的会是反效果</p><ul><li>您在位置 #303-305的标注 | 添加于 2024年2月26日星期一 下午11:24:49</li></ul><p>中国人是节俭的民族，东西自己用不了，又舍不得扔，觉得暴殄天物是罪过，于是拿去送人。送什么人?常送不如自己的人。岂知这样做，稍稍不注意，就伤了情。</p><ul><li>您在位置 #312-314的标注 | 添加于 2024年2月26日星期一 下午11:26:12</li></ul><p>送礼，有个原则，就是看对象。生活上短缺的朋友，你最好送他有实值的礼物；生活优裕的人，你可以送个有情趣的东西。送礼给前者，你的”姿态”要低，才不伤人；送礼给后者，你的”姿态”要平，才不显得谄媚。</p><ul><li>您在位置 #317-317的标注 | 添加于 2024年2月26日星期一 下午11:27:11</li></ul><p>送礼，就是表示敬意、表示礼貌、表示尊重。</p><ul><li>您在位置 #318-319的标注 | 添加于 2024年2月26日星期一 下午11:27:52</li></ul><p>对方是怎样的身份，你要送怎样的礼。怎样的礼，也正可以表示受礼者在送礼者心中的分量。</p><ul><li>您在位置 #319-320的标注 | 添加于 2024年2月26日星期一 下午11:28:08</li></ul><p>相对地，有多少能力，送多少礼。如果你没有那个分量、那个心胸，就不要勉强自己。因为，如果送礼显示了你的”优越感”,或让对方感到”自卑”,都失去了送礼的意义。</p><ul><li>您在位置 #376-378的标注 | 添加于 2024年2月26日星期一 下午11:35:56</li></ul><p>鱼不能离开水，如果你靠群众起家，就不能离开群众。如果你靠某样专业起家，最好不要被”调离”你的专业。即使被调开，也要保持联系，不能落伍。</p><ul><li>您在位置 #453-454的标注 | 添加于 2024年2月27日星期二 下午10:44:58</li></ul><p>先得到你的信任，再做你的生意。</p><ul><li>您在位置 #477-478的标注 | 添加于 2024年2月27日星期二 下午11:09:52</li></ul><p>愈是靠豪爽、海派，起来快的人，也可能很快地倒下。</p><ul><li>您在位置 #481-483的标注 | 添加于 2024年2月27日星期二 下午11:10:46</li></ul><p><strong>我们不必去假设人人都是坏人。但要知道，这世上不合理的好处，是不能拿的。不合理地去信任别人，是危险的。即使你因此得到好处，也可能是不道德的。</strong></p><ul><li>您在位置 #570-571的标注 | 添加于 2024年2月27日星期二 下午11:26:25</li></ul><p>当原先的”互利”变成”互害”,在利益上有了冲突，则原来的朋友可以变成敌人。</p><ul><li>您在位置 #580-582的标注 | 添加于 2024年2月27日星期二 下午11:27:46</li></ul><p><strong>每个人都有良知，每个人也都有眼睛会看，有耳朵会听。一个人似乎没了良知，也似乎不看不听，很可能不是”他”的原因，而是因为他处的”位置”。</strong></p><ul><li>您在位置 #588-588的标注 | 添加于 2024年2月27日星期二 下午11:30:05</li></ul><p>在这世界上，每个人的立场都可能随时改变。</p><ul><li>您在位置 #619-620的标注 | 添加于 2024年2月27日星期二 下午11:35:44</li></ul><p><strong>你绝不要以为站在今天的职位上，所获得的椎崇，当你换了职位，依然能够保有。</strong></p><ul><li>您在位置 #683-684的标注 | 添加于 2024年2月27日星期二 下午11:46:29</li></ul><p>送礼人的高明，就在这儿了!他知道你不会接受，所以送出你不得不接受的东西。</p><ul><li>您在位置 #700-701的标注 | 添加于 2024年2月27日星期二 下午11:52:57</li></ul><p>最毒的礼，是当对方想拒绝时，已经来不及的东西。</p><ul><li>您在位置 #703-704的标注 | 添加于 2024年2月27日星期二 下午11:53:15</li></ul><p>这世上送”有形礼物”给你的人，并不可怕。真正可怕的，是那以一种莫名其妙、毫不合理的方式，奉上礼物，又使你不得不接，即使不接，也不得不百分之百领情的人!</p><ul><li>您在位置 #708-708的标注 | 添加于 2024年2月27日星期二 下午11:53:47</li></ul><p>用非常的手段，应付非常的对手!这是千古不易的道理!</p><ul><li>您在位置 #739-741的标注 | 添加于 2024年2月28日星期三 下午10:49:40</li></ul><p>在中国，一般没有给小费的习惯，所以给小费或任何好处，最好先讲明。有处罚和原则，也应该事先说好。前者是”好话说在先”,后者是”丑话说在先”.</p><ul><li>您在位置 #763-764的标注 | 添加于 2024年2月28日星期三 下午10:54:19</li></ul><p>该讲明的事，如果都能早早讲明，事情会完满得多!</p><ul><li>您在位置 #797-798的标注 | 添加于 2024年2月28日星期三 下午11:06:44</li></ul><p>你会发现当双方对立时能办到的事，不对立的时候都办不到了。这是因为，在一个公事公办的组织当中，对立并不代表敌对，而代表各自”相对地直立着”.说得简单一点，就是不偏私。</p><ul><li>您在位置 #800-800的标注 | 添加于 2024年2月28日星期三 下午11:07:34</li></ul><p>监督之下，各种弊端都会浮现；竞争之下，必然产生更大的进步。</p><ul><li>您在位置 #807-809的标注 | 添加于 2024年2月28日星期三 下午11:09:10</li></ul><p>如果你是个没有背景的人，绝对不要因此认为争不过那些”有关系”的。要知道,”没背景”可能正是你的优点，你可能因此而找到”背景”.</p><ul><li>您在位置 #817-817的标注 | 添加于 2024年2月28日星期三 下午11:16:19</li></ul><p>多听少讲</p><ul><li>您在位置 #819-819的标注 | 添加于 2024年2月28日星期三 下午11:16:57</li></ul><p>中国更有句俗话:”不痴不聋，不做家翁.”</p><ul><li>您在位置 #881-881的标注 | 添加于 2024年2月28日星期三 下午11:24:46</li></ul><p>图省事，而把东西完全包出去的做法，经常是最不明智的。因为又贵、又危险。最聪明的方法，是让分工的各厂商和你直接联系，而不让他们在”横向”上有太密切的沟通。这是另一种”对立”政策的运用。</p><ul><li>您在位置 #920-921的标注 | 添加于 2024年2月28日星期三 下午11:28:29</li></ul><p><strong>不要意气用事，不要冲动地去争吵，要冷眼看人生，在那许多人际利害的矛盾中，累积自己的知识。</strong></p><ul><li>您在位置 #948-949的标注 | 添加于 2024年2月28日星期三 下午11:32:14</li></ul><p>你不在乎，并不表示别人不在乎。</p><ul><li>您在位置 #958-959的标注 | 添加于 2024年2月28日星期三 下午11:33:38</li></ul><p>一、电话筒拿起来了，没弄清对方是谁，却在继续说话。 二、电话讲完了，说了再见，还没把电话挂好，就开始批评刚才打电话的人。</p><ul><li>您在位置 #965-965的标注 | 添加于 2024年2月28日星期三 下午11:34:19</li></ul><p><strong>不要把脸扯破，不要把事情当面拆穿，是处世的一门大学问。</strong></p><ul><li>您在位置 #993-993的标注 | 添加于 2024年2月28日星期三 下午11:38:37</li></ul><p>每个人都可能是多心的人。你多用一点心，就会让大家更开心!</p><ul><li>您在位置 #1031-1031的标注 | 添加于 2024年2月29日星期四 下午10:51:48</li></ul><p>“卡位”的技巧很多，最基本的原则，是让自己的人先占着。</p><ul><li>您在位置 #1094-1096的标注 | 添加于 2024年2月29日星期四 下午10:58:00</li></ul><p><strong>年轻人!记住!这世界上处处有古先生，看来把最好的东西交给你，令你感激涕零。但是，你也要想想，凭什么他要给你?你是真年轻干练，足当重任吗?抑或你只是个替死鬼?</strong></p><ul><li>您在位置 #1096-1097的标注 | 添加于 2024年2月29日星期四 下午10:58:28</li></ul><p>天下没有白吃的午餐!</p><ul><li>您在位置 #1117-1118的标注 | 添加于 2024年2月29日星期四 下午11:00:39</li></ul><p>“世事洞明皆学问，人情练达即文章.”</p><ul><li>您在位置 #1134-1135的标注 | 添加于 2024年2月29日星期四 下午11:02:23</li></ul><p>我不是教你诈，是教你看清世事；是教你更技巧地坚守原则；是教你保护自己，且在风雨狂澜中，做个中流砥柱。</p><ul><li>您在位置 #1174-1175的标注 | 添加于 2024年2月29日星期四 下午11:09:21</li></ul><p><strong>每个刚强的背后，都应该有柔情；每个理智的背后，都应该是感性。</strong></p><ul><li>您在位置 #1238-1239的标注 | 添加于 2024年2月29日星期四 下午11:16:23</li></ul><p>民主的第一原则，是每个人要自守分际，在自己有“说话的自由”时，也知道不可因自己的自由，影响到别人的自由和权益。</p><ul><li>您在位置 #1297-1299的标注 | 添加于 2024年2月29日星期四 下午11:23:15</li></ul><p>你必须知道，无论你帮老板管了多少事情，也无论老板多糊涂，甚至依赖你，到了没你在，他连电话都不会拨的程度。他毕竟还是你的老板，也毕竟还是他做主。出了错，他最先承担。有面子，也该由他来卖。</p><ul><li>您在位置 #1357-1357的标注 | 添加于 2024年2月29日星期四 下午11:31:16</li></ul><p>有“格”的职员，可以关起门来，向长官痛陈公司的弊政，但到了外面，绝对维护自己的公司。</p><ul><li>您在位置 #1409-1409的标注 | 添加于 2024年3月1日星期五 下午11:16:09</li></ul><p>设计好，一步步来，这是每个国家、个人，甚至生物都懂的道理。</p><ul><li>您在位置 #1463-1463的标注 | 添加于 2024年3月1日星期五 下午11:21:59</li></ul><p>失败到绝望的时候，就自暴自弃，这是人的天性。</p><ul><li>您在位置 #1476-1477的标注 | 添加于 2024年3月1日星期五 下午11:24:23</li></ul><p>农业时代，那种“一诺千金”的时代过去了，要做长久的朋友、长久的生意，你要有维护对方尊严的技巧，与决不妥协的原则。</p><ul><li>您在位置 #1544-1545的标注 | 添加于 2024年3月3日星期日 下午10:38:31</li></ul><p>见猎心喜，却又因为心喜过度，而丧失了原有的判断力。这是每个人都有的毛病。</p><ul><li>您在位置 #1594-1595的标注 | 添加于 2024年3月3日星期日 下午10:42:47</li></ul><p>人也一样，有人喜欢大场面，有人偏爱小格局。卖牛肉面的人，不一定比卖鱼翅的人赚得少；摆小摊子的，不见得比开大店的寒酸。</p><ul><li>您在位置 #1672-1672的标注 | 添加于 2024年3月3日星期日 下午10:49:51</li></ul><p>人们失败，常因为不能提对方想。</p><ul><li>您在位置 #1685-1685的标注 | 添加于 2024年3月3日星期日 下午10:51:07</li></ul><p>想让自己成功，先得了解人性，为别人着想。</p><ul><li>您在位置 #1732-1733的标注 | 添加于 2024年3月3日星期日 下午11:01:23</li></ul><p>但我必须强调，这世界上有些人是开“合理标”，有些人是开“最低标”。</p><ul><li>您在位置 #1770-1771的标注 | 添加于 2024年3月3日星期日 下午11:04:11</li></ul><p>问题是，谁不喜欢听好听的话呢？每个人都认为自己很理性，能够明辨是非，但是每个人在不知不觉中，也都爱听谗言。</p><ul><li>您在位置 #1779-1780的标注 | 添加于 2024年3月3日星期日 下午11:13:59</li></ul><p>从政的人常说，先不要考虑开出去的政见支票能不能兑现，而要知道，如果得不到位子，就连半个政见也无法兑现。</p><ul><li>您在位置 #1780-1781的标注 | 添加于 2024年3月3日星期日 下午11:14:08</li></ul><p>在人生的战场上，无可否认的：当两个人战斗，只有一把枪，谁先抢到枪，就可以用枪把对方撂倒。</p><ul><li>您在位置 #1823-1824的标注 | 添加于 2024年3月3日星期日 下午11:17:18</li></ul><p>当你不会用人的时候，不但是用错了人，而且会失去人。失去的那人，更可能成为你的敌人。</p><ul><li>您在位置 #1941-1942的标注 | 添加于 2024年3月3日星期日 下午11:29:30</li></ul><p>不要在必输的情况下逞英雄，也不必在无理的环境中讲理否则，你就永远没有讲理的机会了。</p><ul><li>您在位置 #1970-1971的标注 | 添加于 2024年3月3日星期日 下午11:31:42</li></ul><p>孙子兵法上说“围师必阙”就是这个道理。当你把敌人围住的时候，与其让他作“困兽之斗”，跟你正面拼命，不如留个缺口，让他由那里逃跑，在他落荒而逃的时候，从后面追击。</p><ul><li>您在位置 #1998-1998的标注 | 添加于 2024年3月3日星期日 下午11:34:04</li></ul><p>“不识相”就是不懂得看面子，别人给脸的时候不要脸，别人给台阶的时候，又不顺着台阶下。</p><ul><li>您在位置 #1999-1999的标注 | 添加于 2024年3月3日星期日 下午11:34:15</li></ul><p>同样地，当别人要脸、要台阶的时候，你不给他，也是“不识相”，因为你造成彼此的尴尬–</p><ul><li>您在位置 #2010-2011的标注 | 添加于 2024年3月3日星期日 下午11:35:10</li></ul><p><strong>成长，使人能看透谎言，看穿骗局。 成熟，也使人能知道什么时候不戳穿谎言，什么时候不戳穿骗局。</strong></p><ul><li>您在位置 #2013-2013的标注 | 添加于 2024年3月3日星期日 下午11:35:22</li></ul><p>避免正面的冲突，是处事的重要技巧。</p><ul><li>您在位置 #2188-2189的标注 | 添加于 2024年3月6日星期三 下午11:08:48</li></ul><p>人都有这个毛病–心里藏不住话，尤其当自己对别人有恩的时候，更巴不得对方早早知道。</p><ul><li>您在位置 #2260-2261的标注 | 添加于 2024年3月6日星期三 下午11:19:55</li></ul><p>如果你不希望看到下面人见风使舵、一一离开的场面，就绝对不能早早让下面的人感觉到“风向变了”。</p><ul><li>您在位置 #2267-2267的标注 | 添加于 2024年3月6日星期三 下午11:20:36</li></ul><p>“不成熟的事不可说”</p><ul><li>您在位置 #2328-2330的标注 | 添加于 2024年3月6日星期三 下午11:27:11</li></ul><p>由于你是新手，你理当缴学费，从“学习”中避免“上当”，也从“上当”之中“学习”。新手吃一次亏，学一次乖，渐渐变成老油条，又用老油条的本事把新手唬得一愣一愣的。</p><ul><li>您在位置 #2354-2355的标注 | 添加于 2024年3月6日星期三 下午11:33:11</li></ul><p><strong>这世界上，最难改变的是人性，最可信任的是自己。</strong></p><ul><li>您在位置 #2396-2397的标注 | 添加于 2024年3月6日星期三 下午11:37:48</li></ul><p>我不是教你诈，是教你认清每个人，包括你自己的“人性”。</p><ul><li>您在位置 #2454-2455的标注 | 添加于 2024年3月6日星期三 下午11:41:59</li></ul><p>当比你弱小的人决定拼命，即使你的实力强得多，又有一百二十个道理支持你，也最好不要跟他正面冲突。</p><ul><li>您在位置 #2532-2533的标注 | 添加于 2024年3月9日星期六 下午11:20:15</li></ul><p>当你发现对手，不惜牺牲他自己的生命、亲人的生命，或“第二生命”，与你周旋到底的时候，就算你有理，也最好避一避。</p><ul><li>您在位置 #2534-2535的标注 | 添加于 2024年3月9日星期六 下午11:20:32</li></ul><p>当你发现一个人爱你超过爱他自己，甚至为你不惜牺牲自己亲人的时候，也要好好想想，他会不会有一天牺牲你。</p><ul><li>您在位置 #2564-2565的标注 | 添加于 2024年3月9日星期六 下午11:22:54</li></ul><p>当你明知道人性有弱点，却不加防范，而吃亏的时候，除了怨那个人，也应该检讨自己。</p><ul><li>您在位置 #2573-2574的标注 | 添加于 2024年3月9日星期六 下午11:23:53</li></ul><p>我们永远不能因为对方表现的善良，而忘记他也有人性的弱点。更不可由于他一时的卑劣，而否定他可爱的一面。</p><ul><li>您在位置 #2601-2603的标注 | 添加于 2024年3月12日星期二 上午10:11:39</li></ul><p>你得的病，说不定大部分都因为你自己吃坏了，做错了。所以，当你骂别人使诈的时候，先要想想是不是自己出了问题；在你怪别人“多心”的时候，先该想想是不是自己“不小心”。</p><ul><li>您在位置 #2719-2720的标注 | 添加于 2024年3月12日星期二 下午1:59:24</li></ul><p><strong>如果你做中间人，要忠实地传达，不可添油加醋。 如果你做调解人，要不听丑话，只说美言。</strong></p><ul><li>您在位置 #2782-2782的标注 | 添加于 2024年3月15日星期五 下午3:09:19</li></ul><p>你也要记住，向别人打听的价钱，常不可信，信了会吃亏。</p><ul><li>您在位置 #2834-2835的标注 | 添加于 2024年3月15日星期五 下午3:13:16</li></ul><p>人性是：当他买贵了东西，他只希望你一样买贵，因为如果你也买贵了，表示糊涂的不止他一个人。</p><ul><li>您在位置 #2839-2841的标注 | 添加于 2024年3月15日星期五 下午3:13:44</li></ul><p>你要独立思考，不可心存依赖。 你应该用自己的眼睛，而不用别人的眼睛更非别人朋友的眼睛，看这个人生的战场。</p><ul><li>您在位置 #2900-2901的标注 | 添加于 2024年3月15日星期五 下午5:33:19</li></ul><p>因为做坏事的人，都会为自己的“恶行”找个“安心的借口”–</p><ul><li>您在位置 #2930-2931的标注 | 添加于 2024年3月15日星期五 下午5:36:03</li></ul><p>当你已经“站得住”的时候，就别再添油加醋、编织任何谎言，使自己的“理直”成为“理亏”。</p><ul><li>您在位置 #2931-2932的标注 | 添加于 2024年3月15日星期五 下午5:36:28</li></ul><p>你一定要用合法的方式，对付那些犯法的人。而不是自己去执法，造成自己先犯法。</p><ul><li>您在位置 #2932-2933的标注 | 添加于 2024年3月15日星期五 下午5:36:39</li></ul><p>你尤其要防备那些小人，别让把柄落在小人手上。</p><ul><li>您在位置 #3008-3009的标注 | 添加于 2024年3月15日星期五 下午5:44:28</li></ul><p>许多人吃亏，都因为他们事先自认为可以很“无情”，到头来却不能不“有情”。</p><ul><li>您在位置 #3014-3015的标注 | 添加于 2024年3月15日星期五 下午5:45:03</li></ul><p>你辩，只可能给自己找麻烦。</p><ul><li>您在位置 #3019-3019的标注 | 添加于 2024年3月15日星期五 下午5:45:49</li></ul><p>“理直气和”，而非“理直气壮”。尤其对长辈，你越理直气壮，他越可能老羞成怒。</p><ul><li>您在位置 #3040-3041的标注 | 添加于 2024年3月15日星期五 下午5:47:19</li></ul><p>用“积极行动”取代“消极哀叹”；以“勇于改过”取代“善于强辩”；用“低姿态”争取“广大同情”；用“拖延战术”取代“当面对决”。</p><ul><li>您在位置 #3147-3148的标注 | 添加于 2024年3月15日星期五 下午6:08:33</li></ul><p>问题是，这社会上有多少人，就不懂得少说这么“半句话”。</p><ul><li>您在位置 #3148-3149的标注 | 添加于 2024年3月15日星期五 下午6:08:40</li></ul><p>只要说“对不起！他现在不在位子上”的情况，有必要讲“对不起！他去上厕所了”吗？</p><ul><li>您在位置 #3176-3177的标注 | 添加于 2024年3月16日星期六 上午10:28:40</li></ul><p><strong>你要是不说话，别人不会当你是哑巴。 你要是多说话，别人一定知道你是个好骗的傻子。</strong></p><ul><li>您在位置 #3318-3318的标注 | 添加于 2024年3月16日星期六 下午6:42:32</li></ul><p>只是，当人们攀上交情，往往就忘了“调查对方的来历”。</p><ul><li>您在位置 #3339-3340的标注 | 添加于 2024年3月16日星期六 下午6:44:55</li></ul><p>如果你的身价不凡，你必须注意每个“可能的有心人”，你对他说的话，会被他渲染；你与他的交情，会被他夸大。</p><ul><li>您在位置 #3500-3501的标注 | 添加于 2024年3月16日星期六 下午6:58:23</li></ul><p>八字还没一撇，先做承诺，是我们常犯的毛病。本来做承诺的人以为有利于事情的推动，到头来却发现造成更坏的影响–</p><ul><li>您在位置 #3592-3593的标注 | 添加于 2024年3月16日星期六 下午7:05:00</li></ul><p>我处处发现懂得说抱歉的人，到后来占到便宜。这叫“输了面子，赚了里子”。</p><ul><li>您在位置 #3776-3777的标注 | 添加于 2024年3月16日星期六 下午9:40:43</li></ul><p>你买的是东西，不是表现给哪位小姐（先生）或旁边人看的。</p><ul><li>您在位置 #3819-3820的标注 | 添加于 2024年3月16日星期六 下午9:43:25</li></ul><p>人们吃亏上当，常因为他们不在乎。</p><ul><li>您在位置 #3836-3837的标注 | 添加于 2024年3月16日星期六 下午9:46:00</li></ul><p><strong>美国人曾经做过一项调查，发现买大东西，主妇比较容易上当；买小东西，男人比较容易吃亏。</strong></p><ul><li>您在位置 #3842-3842的标注 | 添加于 2024年3月16日星期六 下午9:46:30</li></ul><p>计较的人，总是会得到好的价钱。谁让他花时间讨价还价，一分耕耘一分收获嘛！</p><ul><li>您在位置 #3848-3849的标注 | 添加于 2024年3月16日星期六 下午9:47:21</li></ul><p>无论你多么富有，当你问价钱的时候，总要摆出计较的样子。</p><ul><li>您在位置 #4157-4158的标注 | 添加于 2024年3月17日星期日 下午1:49:16</li></ul><p>这个世界太大了，你要得到人们的注意，就先得获取媒体的青睐；你要媒体青睐，就得先表现得特殊，使他不能不采访你，否则他就是漏新闻。</p><ul><li>您在位置 #4185-4186的标注 | 添加于 2024年3月17日星期日 下午1:50:50</li></ul><p>人生既然像一场戏，就有许多高低起伏的剧情，你要一步一步铺陈故事，一点一点?埋下伏笔?。</p><ul><li>您在位置 #4186-4187的标注 | 添加于 2024年3月17日星期日 下午1:50:55</li></ul><p>人生也像一局棋，你绝对不能只看一步，而要看几步、几十步，你不但自己要算，还得算对方怎么算，才赢得了。</p><ul><li>您在位置 #4289-4290的标注 | 添加于 2024年3月19日星期二 下午12:18:31</li></ul><p>古往今来，多少人都是踩着别人头顶爬上去的。说不定你正在踩，说不定你正被踩，更可怕的是，你很可能被踩了，却没感觉。</p><ul><li>您在位置 #4602-4603的标注 | 添加于 2024年3月19日星期二 下午10:56:04</li></ul><p>统治者对恶霸可以慢慢处理，因为随时一刀毙命；反而是善霸，他最好早早下手。</p><ul><li>您在位置 #4878-4878的标注 | 添加于 2024年3月23日星期六 下午5:01:36</li></ul><p>反而那些能拍马、会扯淡、争功诿过的庸才，一个个你踩我，我踩你，步步高升。</p><ul><li>您在位置 #4894-4895的标注 | 添加于 2024年3月23日星期六 下午5:02:59</li></ul><p><strong>会哭的孩子有糖吃，会争的职员有好处，那些“无争”的人，则可能到最后才被想起。</strong></p><ul><li>您在位置 #4895-4897的标注 | 添加于 2024年3月23日星期六 下午5:03:11</li></ul><p>所以，无论你如何淡泊，无论你如何“不喜欢跟人争”，当你遇到不平的时候，一定要表态，否则你非但不会被尊重，而且可能被歧视。</p><ul><li>您在位置 #4897-4897的标注 | 添加于 2024年3月23日星期六 下午5:03:15</li></ul><p>别做边缘人</p><ul><li>您在位置 #4912-4913的标注 | 添加于 2024年3月23日星期六 下午5:04:34</li></ul><p>我们常说“不平则鸣”。记住!遇到不平，一定要鸣!你不鸣，你就是孬种，就会令人瞧不起，就是怯懦。即使你有能力，也会显得无能。</p><ul><li>您在位置 #4914-4915的标注 | 添加于 2024年3月23日星期六 下午5:05:05</li></ul><p>即使你平常是好好先生，该发怒的时候也要发怒。</p><ul><li>您在位置 #5142-5143的标注 | 添加于 2024年3月23日星期六 下午5:23:38</li></ul><p>在远处坚持你的原则，在近处迂回前进的方法?。</p><ul><li>您在位置 #5215-5215的标注 | 添加于 2024年3月23日星期六 下午6:34:08</li></ul><p>这世上最有理说不清的，就是抽象的东西。这世上最麻烦的事，就是跟你缠个没完的事。</p><ul><li>您在位置 #5265-5266的标注 | 添加于 2024年3月23日星期六 下午7:04:50</li></ul><p>摆脱纠缠，壮士断腕，经常是很痛的事，你要够种、够狠、够智慧，才办得到。</p><ul><li>您在位置 #5429-5431的标注 | 添加于 2024年3月23日星期六 下午7:43:07</li></ul><p><strong>这世界上最了解你的人是谁? 是你自己。 这世上最知道你弱点的人是谁? 当然也是你自己。</strong></p><ul><li>您在位置 #5436-5437的标注 | 添加于 2024年3月23日星期六 下午7:45:26</li></ul><p>人都有传话的毛病，遇到他的 “独家新闻”，他更是要传，表示他神通广大。问题出在，他传的时候可能不传全部，而加油添醋。</p><ul><li>您在位置 #5445-5447的标注 | 添加于 2024年3月23日星期六 下午7:46:16</li></ul><p>人都有个毛病，中国人尤其有这毛病，就是用“自暴己短”的方式，表示自己谦虚。 古人不是说了吗——“无道人之短，无说己之长。” 换句话，就成了“应道人之长，应说己之短。”</p><ul><li>您在位置 #5453-5454的标注 | 添加于 2024年3月23日星期六 下午7:47:16</li></ul><p>无道人之长，无说已之短?，免得你助长了敌人的势力、减少了自己人的信心。</p><ul><li>您在位置 #5574-5575的标注 | 添加于 2024年3月23日星期六 下午7:57:19</li></ul><p>无论从政从商，你都要小心这数字效应。六比四，差的不是二，为只要移去一个，就成为五比五。</p><ul><li>您在位置 #5830-5831的标注 | 添加于 2024年3月23日星期六 下午8:23:37</li></ul><p>所以在动大手术、做大决定之前，你应该多看几位医生、多听不同的意见。医生们常彼此找麻烦，偷偷观察“对手”有没有犯错。</p><ul><li>您在位置 #5958-5959的标注 | 添加于 2024年3月23日星期六 下午9:00:32</li></ul><p>要避免医生马虎，最好有亲人在旁边看着。如果你是病人家属，要警觉、要积极，为病人争取照顾。如果你自己是病人，没人为你争，你在有意识的情况下，千万要为自己争。</p><ul><li>您在位置 #6055-6056的标注 | 添加于 2024年3月23日星期六 下午9:10:14</li></ul><p>别迷信偏方!没病时用中药固本，急病时用西药救命。</p><ul><li>您在位置 #6575-6575的标注 | 添加于 2024年3月24日星期日 下午1:21:22</li></ul><p>这正合了我书里写的，有时候有钱人反而受害。</p></blockquote><h1 id="🎥《哈利·波特与死亡圣器-下-》"><a href="#🎥《哈利·波特与死亡圣器-下-》" class="headerlink" title="🎥《哈利·波特与死亡圣器(下)》"></a>🎥《哈利·波特与死亡圣器(下)》</h1><table><thead><tr><th align="center">🧑导演：大卫·叶茨</th><th align="center">📌类别： 奇幻、冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.03.11</td></tr></tbody></table><p>画面太黑了！！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181115633.webp" alt="img"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181548987.webp" alt="img"></p><h1 id="🎥《周处除三害》"><a href="#🎥《周处除三害》" class="headerlink" title="🎥《周处除三害》"></a>🎥《周处除三害》</h1><table><thead><tr><th align="center">🧑导演：黄精甫</th><th align="center">📌类别： 动作、犯罪</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2024.03.10</td></tr></tbody></table><p>最近很火的一部电影，爽剧！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181114735.webp" alt="img"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181114413.webp" alt="img"></p><h1 id="🎥《哈利·波特与死亡圣器-上-》"><a href="#🎥《哈利·波特与死亡圣器-上-》" class="headerlink" title="🎥《哈利·波特与死亡圣器(上)》"></a>🎥《哈利·波特与死亡圣器(上)》</h1><table><thead><tr><th align="center">🧑导演：大卫·叶茨</th><th align="center">📌类别： 奇幻、冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.03.10</td></tr></tbody></table><p>画面太黑了！！</p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181112722.webp" alt="img"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181112787.webp" alt="img"></p><p><img src="https://murphyimg.oss-cn-beijing.aliyuncs.com/img/202505181545448.png" alt="image-20250518154528543"></p><h1 id="📚《环太平洋》"><a href="#📚《环太平洋》" class="headerlink" title="📚《环太平洋》"></a>📚《环太平洋》</h1><table><thead><tr><th align="center"><strong>🧑作者</strong></th><th align="center"><strong>🧑译者</strong></th><th align="center"><strong>📌体裁</strong></th><th align="center"><strong>🌏地区</strong></th><th align="center"><strong>🏫出版社</strong></th><th align="center"><strong>✒字数</strong></th><th align="center"><strong>📚载体</strong></th><th align="center"><strong>💖评分</strong></th><th align="center"><strong>✅时间</strong></th></tr></thead><tbody><tr><td align="center">阿历克斯·欧文</td><td align="center">无</td><td align="center">小说-科幻</td><td align="center">美国</td><td align="center">北京联合出版社</td><td align="center">15.9</td><td align="center">微信读书</td><td align="center">⭐⭐⭐⭐</td><td align="center">2024.02.19</td></tr></tbody></table><p>在看完电影之后发现还有《环太平洋》这样一部小说，小说的情节和电影完全一样，所以在读这本小说的时候，看到文字就回想到电影的画面。</p><h1 id="🎬《好久没做》"><a href="#🎬《好久没做》" class="headerlink" title="🎬《好久没做》"></a>🎬《好久没做》</h1><table><thead><tr><th align="center">🧑导演：全高云</th><th align="center">📌类别：剧情、喜剧、爱情</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.02.17</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2902480527.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2902480517.webp" alt="img"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2897248513.webp" alt="img"></div></div></div><h1 id="🎬《三体》"><a href="#🎬《三体》" class="headerlink" title="🎬《三体》"></a>🎬《三体》</h1><table><thead><tr><th align="center">🧑导演：杨磊</th><th align="center">📌类别：剧情、科幻</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.02.16</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886619674.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886619675.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886745282.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886397785.webp" alt="img"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886397782.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886397803.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2887803957.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886397784.webp" alt="img"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886895765.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886397800.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2887245216.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2887595874.webp" alt="img"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886653495.webp" alt="img"></div></div></div><h1 id="🎥《哈利·波特与混血王子》"><a href="#🎥《哈利·波特与混血王子》" class="headerlink" title="🎥《哈利·波特与混血王子》"></a>🎥《哈利·波特与混血王子》</h1><table><thead><tr><th align="center">🧑导演：大卫·叶茨</th><th align="center">📌类别： 奇幻、冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.31</td></tr></tbody></table><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p443399554.webp"></p><h1 id="🎬《死期将至》"><a href="#🎬《死期将至》" class="headerlink" title="🎬《死期将至》"></a>🎬《死期将至》</h1><table><thead><tr><th align="center">🧑导演：河炳勋</th><th align="center">📌类别：悬疑、奇幻</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.28</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2902710846.webp" alt="跳下去的那一刻是有多么的绝望"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2901320684.webp" alt="好漂亮呀"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2903717813.webp" alt="泪崩"></div></div></div><blockquote><ul><li>在别人累积学经历的时候，我必须为了还债和求职到处打工。我在这恶性循环中学到了一件事，要和别人在同时期就业还有结婚，想过上那种平凡的生活，其实是最困难的。 </li><li>在只有我停滞不前的日子，以及一成不变的日常生活中，最让我感到害怕的，就是面对不确定的未来 </li><li>为什么你就没有想过要更努力一点生活？你要这样堕落到什么时候？ </li><li>难道你觉得我这段时间都没努力过吗？不管再怎么费力挣扎，我这种人也不会有什么改变，我现在也累了 </li><li>我在自己身上看不到任何希望，活着让我感到害怕，死亡这种小事我一点也不畏惧，死亡只不过是一种能让我终结痛苦的低等手段罢了&gt; &gt;  - 人类真了不起，明明说活着像身处地狱，却还是每天都在那地狱里坚忍地生活 </li><li>你们人类不都是这样吗？总是觉得自己受伤扎到一根小刺，比别人身上受的刀伤还要痛 </li><li>这世上没有什么是应该的，只是你一直以来都把一切视为理所当然罢了。而在你眼里不值一提的生与死，那个孩子却连选择权都没有 </li><li>活在恐惧中的人生，并不算是真正的人生啊。人只有在做自己的时候，才是最幸福的。 </li><li>人要是不能做自己，活着应该也没什么意义了吧？ </li><li>我妈曾经这么告诉过我，罪会自己找上它的主人，所以不要犯罪。但是只要钱够多，就算犯了罪，罪也不会找上它的主人。 </li><li>我现在终于明白了，无论以其他人的身体重新活过来多少次，只要不是作为我自己，就丝毫没有任何意义 </li><li>就算给人类机会，他们也不知道那是机会，总把它一脚踢开。你不是说你有办法，在我创造的规则里赢过我吗？ </li><li>妈妈走过的隧道比我所经历过的更黑暗，更漫长，但是妈妈不曾中途放弃，也不曾回首过去，她只是默默地往前走 </li><li>我是拥有这种妈妈的幸福之人，但是我却愚蠢地让自己过得不幸福。 </li><li>死亡是会传染的，在我从这个世界上消失的期间，我的死亡完完整整地留给了爱我的人们 </li><li>我害怕世界不明白我的价值，害怕落后于人，害怕被人拒绝，我还没有让人生的花朵绽放，就活在恐惧之中，最后了结了自己的生命。 </li><li>生命其实就是机会，还有我原以为占据了人生全部的痛苦，其实只占了一小部分。晴朗的一天，下雨的一天，起风的一天，那样的日子一天天累积起来就成为了人生。即使失败也没关系，失败也必须向前走的理由，我在进入妈的身体里之后，才终于明白过来。<br><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240128171718451.png" alt="你是地球上独一无二的存在"></li></ul></blockquote><h1 id="🎥《触不可及（法国版）》"><a href="#🎥《触不可及（法国版）》" class="headerlink" title="🎥《触不可及（法国版）》"></a>🎥《触不可及（法国版）》</h1><table><thead><tr><th align="center">🧑导演：奥利维埃·纳卡什</th><th align="center">📌类别：剧情、喜剧</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.27</td></tr></tbody></table><blockquote><ul><li>他总是忘记我瘫痪的事实，我要的就是这样的人。没有怜悯，没有特殊对待，没有歧视。&gt;  - 许多的爱不用多说，用心感受。许多的情不用听，时间证明。一生何求，只要有人知冷知暖，哪怕触不可及，爱过即是最好。&gt;  - 其实很多时候，你并不需要做什么，真诚即可。</li></ul></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p1670735663.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p1514909250.webp" alt="img"></div></div></div><h1 id="🎥《哈利·波特与凤凰社》"><a href="#🎥《哈利·波特与凤凰社》" class="headerlink" title="🎥《哈利·波特与凤凰社》"></a>🎥《哈利·波特与凤凰社》</h1><table><thead><tr><th align="center">🧑导演：大卫·叶茨</th><th align="center">📌类别： 奇幻、冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.27</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p443403001-17064405303953.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p443404887.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p443405763.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p443404584-17064405688707.webp" alt="img"></div></div></div><h1 id="🎥《银河护卫队3》"><a href="#🎥《银河护卫队3》" class="headerlink" title="🎥《银河护卫队3》"></a>🎥《银河护卫队3》</h1><table><thead><tr><th align="center">🧑导演：詹姆斯·古恩</th><th align="center">📌类别： 喜剧、科幻、动作、冒险、惊悚</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.25</td></tr></tbody></table><p>《复联4》之后漫威电影一部比一部烂，没有一部有想看的欲望！《银护3》之后，滚导与漫威的合作也结束了，也是《银护》系列的结束，滚导不负众望，最终呈现出的效果还是不错的。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2891629110.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2895373399.webp" alt="img"></div></div></div><h1 id="🎥《哈利·波特与火焰杯》"><a href="#🎥《哈利·波特与火焰杯》" class="headerlink" title="🎥《哈利·波特与火焰杯》"></a>🎥《哈利·波特与火焰杯》</h1><table><thead><tr><th align="center">🧑导演：迈克·内威尔</th><th align="center">📌类别： 奇幻、冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.25</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p443396084-170644030275824.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p443396637.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p443394198.webp" alt="img"></div></div></div><h1 id="🎥《X特遣队：全员集合》"><a href="#🎥《X特遣队：全员集合》" class="headerlink" title="🎥《X特遣队：全员集合》"></a>🎥《X特遣队：全员集合》</h1><table><thead><tr><th align="center">🧑导演：詹姆斯·古恩</th><th align="center">📌类别： 喜剧、科幻、动作</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.24</td></tr></tbody></table><p>滚导拯救DCEU！（当然，能不能拯救还是得看华纳</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2673234800-170644018134518.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2675575162.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2676967595.webp" alt="img"></div></div></div><h1 id="🎥《哈利·波特与阿兹卡班的囚徒》"><a href="#🎥《哈利·波特与阿兹卡班的囚徒》" class="headerlink" title="🎥《哈利·波特与阿兹卡班的囚徒》"></a>🎥《哈利·波特与阿兹卡班的囚徒》</h1><table><thead><tr><th align="center">🧑导演：阿方索·卡隆</th><th align="center">📌类别： 奇幻、冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.24</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPU_2024-01-24_18-33-02.png" alt="NPU_2024-01-24_18-33-02"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2152544344.webp" alt="img"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2152545103.webp" alt="img"></div></div></div><h1 id="🎥《哈利·波特与密室》"><a href="#🎥《哈利·波特与密室》" class="headerlink" title="🎥《哈利·波特与密室》"></a>🎥《哈利·波特与密室》</h1><table><thead><tr><th align="center">🧑导演：克里斯·哥伦布</th><th align="center">📌类别： 奇幻、冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.24</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p443393231.webp" alt="img"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p1098871517.webp" alt="img"></div></div></div><h1 id="🎥《哈利·波特与魔法石》"><a href="#🎥《哈利·波特与魔法石》" class="headerlink" title="🎥《哈利·波特与魔法石》"></a>🎥《哈利·波特与魔法石》</h1><table><thead><tr><th align="center">🧑导演：克里斯·哥伦布</th><th align="center">📌类别： 奇幻、冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.23</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p985584342.webp" alt="img"></div></div></div><h1 id="🎥《环太平洋》"><a href="#🎥《环太平洋》" class="headerlink" title="🎥《环太平洋》"></a>🎥《环太平洋》</h1><table><thead><tr><th align="center">🧑导演：吉尔莫·德尔·托罗</th><th align="center">📌类别：动作、科幻、冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.21</td></tr></tbody></table><p>机械的艺术</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p1808283995-17064395802591.webp" alt="流浪者"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2016116642.webp" alt="流浪者"></div></div></div><h1 id="📚《第七天》"><a href="#📚《第七天》" class="headerlink" title="📚《第七天》"></a>📚《第七天》</h1><table><thead><tr><th align="center"><strong>🧑作者</strong></th><th align="center"><strong>🧑译者</strong></th><th align="center"><strong>📌体裁</strong></th><th align="center"><strong>🌏地区</strong></th><th align="center"><strong>🏫出版社</strong></th><th align="center"><strong>✒字数</strong></th><th align="center"><strong>📚载体</strong></th><th align="center"><strong>💖评分</strong></th><th align="center"><strong>✅时间</strong></th></tr></thead><tbody><tr><td align="center">余华</td><td align="center">无</td><td align="center">小说-文学</td><td align="center">中国</td><td align="center">新星出版社</td><td align="center">10.0</td><td align="center">微信读书</td><td align="center">⭐⭐⭐⭐</td><td align="center">2024.1.14</td></tr></tbody></table><p>余华的作品总是让人想一口气读完！</p><blockquote><ul><li>我的悲伤还来不及出发，就已经到站下车。</li><li>我在情感上的愚钝就像是门窗紧闭的屋子，虽然爱情的脚步在屋前走过去又走过来，我也听到了，可是我觉得那是路过的脚步，那是走向别人的脚步。直到有一天，这个脚步停留在这里，然后门铃响了</li><li>她们的闲言碎语对于她只是无需打伞的稀疏雨点。</li><li>人从哭哭啼啼中降临世界，又从哭哭啼啼中走向死亡。</li><li>我们走在寂静里，这个寂静的名字叫死亡。我们不再说话，那是因为我们的记忆不再前行。这是隔世记忆，斑驳陆离，虚无又真实。</li><li>我走出自己趋向繁复的记忆，如同走出层峦叠嶂的森林。 疲惫的思维躺下休息了，身体仍然向前行走，走在无边无际的混沌和无声无息的空虚里。 空中没有鸟儿飞翔，水中没有鱼儿游弋，大地没有万物生长。</li><li>无论多么美好的体验都会成为过去，无论多么深切的悲哀也会落在昨天，一如时光的流逝毫不留情。生命就像是一个疗伤的过程，我们受伤，痊愈，再受伤，再痊愈。每一次的痊愈好像都是为了迎接下一次的受伤。或许总要彻彻底底的绝望一次，才能重新再活一次。</li><li>他惊讶地向我转过身来，疑惑的表情似乎是在像我询问。我对他说，走过去吧，那里的树叶会向你招手，没有悲伤也没有疼痛，没有仇也没有恨……那里人人死而平等。 他问∶“那是什么地方？” 我说∶“死无葬身之地。”</li><li>阳光是陈旧的黄色，他们穿过闹哄哄的城市，走进宁静之中，迎来银灰色的月光，他们在宁静里越走越深。</li><li>“你的殓衣拖在地上，看上去像婚纱”</li><li>我这样胆小慢热的人，需要别人千百次的主动和回应才愿意相信那是真的。</li><li>希望大家都要相信爱情 那句话怎么说来着 是汪先生的“一定要爱着点儿什么，恰似草木对光阴的钟情。”</li><li>我感到自己像是一棵回到森林的树，一滴回到河流的水，一粒回到泥土的尘埃。</li><li>“你想我吗？” “我一直在努力忘记你。” “忘记了吗？” “没有完全忘记。”</li><li>宽广的沉默里暗暗涌动千言万语，那是很多的卑微人生在自我诉说</li><li>当金钱站起来说话时，所有真理都沉默了；当权力站起来说话时，金钱都自惭形秽了。</li><li>我在静默的围坐里听到火的声音，是舞动声；听到水的声音，是敲击声；听到草的声音，是摇曳声；听到树的声音，是呼唤声；听到风的声音，是沙沙声；听到云的声音，是漂浮声。</li><li>我不怕死，一点都不怕死，我怕的是再也见不到你。</li><li>听说人这辈子一共会死三次。第一次是你的心脏停止跳动，从生物的角度来说，你死了；第二次是在葬礼上，认识你的人都来祭奠，那么你在社会上的地位就死了；第三次是在最后一个记得你的人死后，那你就真的死了。</li><li>我走遍从小到大的村子，眼睛里集满了那些个熟悉的身影，唯独没有父亲的脸庞。我才意识到他原来真的回不来了</li><li>如果你的世界，没有痛苦的害怕，没有尊严的担忧，没有富贵的贫贱，没有暖寒的交替，没有外貌的困扰，没有男女的区别，没有你我之分，没有生死顾虑，你才会离”真正的活着”越来越近。</li><li>原来以为爱的反义词是不爱，直到现在我才明白，爱的反义词是遗忘，我不会忘了你，因为我一直爱着你。</li><li>她是一个能够改变自己命运的人，而我只会在自己的命运里随波逐流。</li><li>我走出自己趋向繁复的记忆，如同走出层峦叠翠的森林。疲惫的思维躺下休息了，身体仍然向前行走，走在无边无际的混沌和无声无息的空虚里。空中没有鸟儿飞翔，水中没有鱼儿游弋，大地没有万物生长。</li><li>这些声音仿佛是在向我们倾诉，它们也是命运多舛，它们也是不愿回首。然后，我听到夜莺般的歌声飞来了，飞过来一段，停顿一下，又飞过来一段……</li><li>这是弥留之际，他沉没在黑暗里，像是沉没在井水里，四周寂静无声。高楼上的灯光熄灭了，天上的星星和月亮也熄灭了。随即突然出现一片灿烂光芒，当初他丢弃我的情景在光芒里再现了。他看见四岁的我坐在石头上，穿着一身蓝白相间的小水手服，这是他决定丢弃我时给我买来的。一个小水手坐在青色的石头上，快乐地摇晃着两条小腿。他悲哀地对我说，我去买点吃的；我快乐地说，爸爸，多买点吃的。</li></ul></blockquote><h1 id="🎬《狂飙》"><a href="#🎬《狂飙》" class="headerlink" title="🎬《狂飙》"></a>🎬《狂飙》</h1><table><thead><tr><th align="center">🧑作者：徐纪周</th><th align="center">📌类别： 剧情&#x2F;犯罪</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.12</td></tr></tbody></table><p>追一追去年的热播剧</p><blockquote><ul><li>你不知道我踏入怎样一个深渊，这城市另一面的黑暗，让我始料未及，支撑我坚持下去的，是谭思言身上像你一样的执拗，就像黑暗里闪光的萤火虫。可如今，这一缕光也熄灭了。&gt;  - 一个人做一件好事并不难，难的是一辈子做好事，不做坏事。&gt;  - 这世界上不缺少梦想，有本事你就去实现它。&gt;  - 难受就是看得少，看多了，就习惯了。&gt;  - 人后的苦尚且还能克服，人前的尊严却无比脆弱。&gt;  - 有压力就要吃棒棒糖。心里甜了，就没那么苦了。</li></ul></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886992347.webp" alt="这张照片太有感觉了！"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2886485057.webp" alt="高启强这个角色塑造的太成功了！"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240128185045724.png" alt="大嫂的这个造型我好喜欢呀，哈哈哈哈"></div></div></div><h1 id="🎥《边境杀手》"><a href="#🎥《边境杀手》" class="headerlink" title="🎥《边境杀手》"></a>🎥《边境杀手》</h1><table><thead><tr><th align="center">🧑导演： 丹尼斯·维伦纽瓦</th><th align="center">📌类别：剧情、惊悚、犯罪</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.02</td></tr></tbody></table><p>维伦纽瓦导演独享的moment</p><blockquote><p> 你应该搬去小镇上，那种还有法律存在的地方。你在这活不下去的，你不是一匹狼，而这里已是群狼之地。</p></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2298959596.webp" alt="罗杰·狄金斯的这场日转夜的画面太有感觉了"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2299303769.webp" alt="罗杰·狄金斯的这场日转夜的画面太有感觉了"></div></div></div><h1 id="🎥《奥本海默》"><a href="#🎥《奥本海默》" class="headerlink" title="🎥《奥本海默》"></a>🎥《奥本海默》</h1><table><thead><tr><th align="center">🧑导演： 克里斯托弗·诺兰</th><th align="center">📌类别：剧情、传记、历史</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2024.01.01</td></tr></tbody></table><p>开年第一部电影！</p><blockquote><p> <strong>我现在成了死神，世界的毁灭者</strong></p></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2868715711.webp" alt="我现在成了死神，世界的毁灭者"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2897216597.webp" alt="爆炸真的发生那一刻起，一切都安静下来，只有人粗重的喘息。"></div></div></div>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>读书</tag>
      
      <tag>电影</tag>
      
      <tag>音乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ChernoCPP-2</title>
    <link href="/blog/post/Knowledge/ChernoCPP_2/"/>
    <url>/blog/post/Knowledge/ChernoCPP_2/</url>
    
    <content type="html"><![CDATA[<h1 id="Back-to-Top"><a href="#Back-to-Top" class="headerlink" title="Back to Top"></a>Back to Top</h1><h2 id="Video-Links"><a href="#Video-Links" class="headerlink" title="Video Links"></a>Video Links</h2><div align = center>  <iframe width="560" height="315" src="https://www.youtube.com/embed/18c3MTX0PK0?si=bLufMIg-rIzpv17Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><h2 id="Notebook-Links"><a href="#Notebook-Links" class="headerlink" title="Notebook Links"></a>Notebook Links</h2><ul><li><a href="https://thecherno.com/">Cherno (thecherno.com)</a></li><li><a href="https://nagi.fun/Cherno-CPP-Notes/">📘 The Cherno’s C++ Course Notes 📘</a></li><li><a href="https://space.bilibili.com/364152971/channel/collectiondetail?sid=13909">神经元猫的个人空间-神经元猫个人主页-哔哩哔哩视频 (bilibili.com)</a></li><li><a href="https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5">cppreference.com</a></li><li><a href="https://atomlab.org/posts/code/learn-cpp/learn-cpp/">如何在两周内学会C++并构建优质的项目 | Atomlab</a></li><li><a href="https://leetcode.cn/circle/discuss/h3upVc/">Bilibili ｜ C++ 工程师｜面经汇总｜2020.12｜ - 力扣（LeetCode）</a></li><li><a href="https://www.zhangjiee.com/blog/2012/how-to-learn-cpp.html">如何学习C++ (zhangjiee.com)</a></li><li><a href="https://cppguide.cn/">CppGuide社区</a></li></ul><h1 id="47-Dynamic-Arrays-in-C"><a href="#47-Dynamic-Arrays-in-C" class="headerlink" title="47. Dynamic Arrays in C++"></a>47. Dynamic Arrays in C++</h1><blockquote><p>所以C++提供给我们一个叫做<code>Vector</code>的类，这个Vector在<em>std namespace</em>（std命名空间中）。</p><p>为什么叫Vector？可以在<a href="https://stackoverflow.com/questions/581426/why-is-a-c-vector-called-a-vector">链接</a>中了解到背后的故事： 它被称为向量是因为标准模板库的设计者 Alex Stepanov 在寻找一个名称以区分它与内置数组时采用了这个名字。他现在承认这是一个错误，因为数学已经使用术语 “向量” 来表示一组固定长度的数字序列。而 C++11 则进一步加重了这个错误，引入了一个名为 ‘array’ 的类，它的行为类似于数学上的向量。 Alex 给我们的教训是：在给事物命名时要非常小心谨慎。</p><p>所以它其实不应该被叫做<em>Vector</em>（向量），而是应该被称为类似<em><strong>ArrayList</strong></em>，这样更有意义，因为它本质上是一个<strong>动态数组</strong>。它有点像一个集合，一个不强制其实际元素具有唯一性的集合。 换句话说，它基本上就是一个<em>array</em>（数组），不过与C++普通数组类型（原始数组或标准数组类[31 Arrays in C++](<a href="https://nagi.fun/Cherno-CPP-Notes/1-50/31">https://nagi.fun/Cherno-CPP-Notes/1-50/31</a> Arrays in C%2B%2B&#x2F;)）不同的是，它可<strong>以调整数组大小</strong>，这意味着当你创建这个vector的时候，这个动态数组的时候，它并<strong>没有固定大小</strong>。你可以给它一个固定大小，如果你想用一个特定的大小初始化它。但一般情况下我们不给它设置一个size。 你只需要创建这个Vector然后把元素放进去，每次你往里面放一个元素，数组大小会增长。 </p><p><strong>原理：当你超过分配的内存大小时，它会在内存中创建一个比第一个大的新数组，把所有东西都复制到这里，然后删除旧的那个，这样你就拥有了更多存储空间的新数组。</strong>（所以可以猜测Alex当时是觉得动态数组可以像向量一样无限延长……）</p><p>[47 C++的动态数组(std::vector) - cherno-cpp-notes (nagi.fun)](<a href="https://nagi.fun/Cherno-CPP-Notes/1-50/47">https://nagi.fun/Cherno-CPP-Notes/1-50/47</a> Dynamic Arrays in C%2B%2B (std - -vector)&#x2F;)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vertex</span><br>&#123;<br><span class="hljs-type">float</span> x, y, z;<br>&#125;;<br><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="hljs-type">const</span> Vertex&amp; vertex)<br>&#123;<br>stream &lt;&lt; vertex.x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; vertex.y &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; vertex.z;<br><span class="hljs-keyword">return</span> stream;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::vector&lt;Vertex&gt; vertices;<br>vertices.<span class="hljs-built_in">push_back</span>(&#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;);<br>vertices.<span class="hljs-built_in">push_back</span>(&#123; <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;);<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;first&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vertices.<span class="hljs-built_in">size</span>(); i++)<br>std::cout &lt;&lt; vertices[i] &lt;&lt; std::endl;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;second&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">for</span> (Vertex&amp; v: vertices) <br>std::cout &lt;&lt; v &lt;&lt; std::endl;<br><span class="hljs-comment">// 这是一种新的写法！！</span><br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;third&quot;</span> &lt;&lt; std::endl;<br>vertices.<span class="hljs-built_in">erase</span>(vertices.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span> (Vertex&amp; v : vertices)<br>std::cout &lt;&lt; v &lt;&lt; std::endl;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;forth&quot;</span> &lt;&lt; std::endl;<br>vertices.<span class="hljs-built_in">clear</span>();<br><span class="hljs-comment">//for (vertex&amp; v : vertices)</span><br><span class="hljs-comment">//std::cout &lt;&lt; v &lt;&lt; std::endl;</span><br><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="48-Optimizing-the-usage-of-std-vector-in-C"><a href="#48-Optimizing-the-usage-of-std-vector-in-C" class="headerlink" title="48. Optimizing the usage of std::vector in C++"></a>48. Optimizing the usage of std::vector in C++</h1><blockquote><p><code>std::vector class</code>基本上是这样工作的： 你创建一个 vector，然后你开始<code>push_back</code>元素，也就是向数组中添加元素。如果 vector 的容量不够大，不能容纳你想要的新元素。vector 需要分配新的内存，至少足够容纳这些想要加入的新元素和当前已有的内容，从内存中的旧位置复制到内存中的新位置，然后删除旧位置的内存。 所以当我们尝试<code>push_back</code>一个元素的时候，如果容量用完，它就会调整大小，重新进行分配——这就是将代码拖慢的原因之一。事实上，我们需要不断地重新分配，which is a 缓慢的操作，我们需要重新分配当我们要复制所有的现有元素的时候，这是我们要避免的。 事实上，这就是我们现在对于复制的优化策略：我们如何避免复制对象，如果我们处理的是 vector，特别是基于 vector 的对象<strong>（我们没有存储 vector 指针，我们存储的是 vector 对象）</strong>。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vertex</span><br>&#123;<br><span class="hljs-type">float</span> x, y, z;<br><br><span class="hljs-built_in">Vertex</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y, <span class="hljs-type">float</span> z)<br>:<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y), <span class="hljs-built_in">z</span>(z) &#123;&#125;<br><br><span class="hljs-built_in">Vertex</span>(<span class="hljs-type">const</span> Vertex&amp; vertex)<br>:<span class="hljs-built_in">x</span>(vertex.x), <span class="hljs-built_in">y</span>(vertex.y), <span class="hljs-built_in">z</span>(vertex.z)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Copied!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::vector&lt;Vertex&gt; vertices;<br>vertices.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">Vertex</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>vertices.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">Vertex</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>));<br>vertices.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">Vertex</span>(<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>));<br><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Copied!</span><br><span class="hljs-comment">Copied!</span><br><span class="hljs-comment">Copied!</span><br><span class="hljs-comment">Copied!</span><br><span class="hljs-comment">Copied!</span><br><span class="hljs-comment">Copied!</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>如果我们了解自己的“环境”，就是如果我们知道本身计划要放进 3 个 vertex 对象，为什么不让 vector 一开始就留下足够 3 个元素的内存，这样就不用调整两次大小了。 -&gt; <code>vertices.reserve(3);</code>这就是第二种优化策略。</li><li>我们所做的就是将 vertex 从 main 函数复制到 vector 类中,如果我们可以再适当的位置构造那个 vertex，在 vector 实际分配的内存中，这就是优化策略一号。在这种情况下，不是传递我们已经构建的 vertex 对象，而是只是传递了构造函数的参数列表，它告诉我们的 vector：在我们是的 vector 内存中，使用以下参数来构造一个 vertex 对象。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vertex</span><br>&#123;<br><span class="hljs-type">float</span> x, y, z;<br><br><span class="hljs-built_in">Vertex</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y, <span class="hljs-type">float</span> z)<br>:<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y), <span class="hljs-built_in">z</span>(z) &#123;&#125;<br><br><span class="hljs-built_in">Vertex</span>(<span class="hljs-type">const</span> Vertex&amp; vertex)<br>:<span class="hljs-built_in">x</span>(vertex.x), <span class="hljs-built_in">y</span>(vertex.y), <span class="hljs-built_in">z</span>(vertex.z)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Copied!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::vector&lt;Vertex&gt; vertices;<br>vertices.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">3</span>);<br>vertices.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>vertices.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br>vertices.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>);<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">No any copies!</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="49-Using-Libraries-in-C-Static-Linking"><a href="#49-Using-Libraries-in-C-Static-Linking" class="headerlink" title="49. Using Libraries in C++(Static Linking)"></a>49. Using Libraries in C++(Static Linking)</h1><p><a href="https://www.glfw.org/">An OpenGL library | GLFW</a></p><p>[49 C++中使用库（静态链接） - cherno-cpp-notes (nagi.fun)](<a href="https://nagi.fun/Cherno-CPP-Notes/1-50/49">https://nagi.fun/Cherno-CPP-Notes/1-50/49</a> Using Libraries in C%2B%2B (Static Linking)&#x2F;)</p><h2 id="静态链接与动态链接"><a href="#静态链接与动态链接" class="headerlink" title="静态链接与动态链接"></a>静态链接与动态链接</h2><ul><li><p>静态链接</p><ul><li><strong>静态链接意味着这个库会被放到你的可执行文件中</strong>（它在你的 exe 文件内部，或者其它操作系统下的可执行文件内）。</li></ul></li><li><p>动态链接</p><ul><li>动态链接库是在运行时被链接的额，所以你仍有一些链接，你可以选择在程序运行时装载动态链接库，有一个叫<em>loadLibrary</em>的函数，你可以在 WindowsAPI 中使用它作为例子。它会载入你的动态库，可以从中拉出函数然后开始调用。你也可以在应用程序启动时加载你的 dll 文件，这就是你的<em>Dynamic Link Library</em>（动态链接库）。</li><li><strong>所以主要的区别就是：库文件是否被编译到 exe 文件中，或链接到 exe 文件中，还是一个在运行时单独的文件，你需要把它放在你的 exe 文件旁边或某个地方，然后你的 exe 文件可以加载它。因为这种依赖性，你需要把 exe 文件和 dll 文件弄在一起。</strong></li><li>所以通常喜欢用静态的。静态链接在技术上更快，因为编译器或链接器实际上可以执行链接时优化之类的。静态链接在技术上可以产生更快的应用程序，因为有几种优化方法可以应用，因为我们知道在链接时要链接的函数。而对于动态库，我们不知道会发生什么而必须保持它的完整，当动态链接库被运行时的程序装载时，程序的部分将被补充完整。</li></ul></li></ul><p>所以通常情况下，<strong>静态链接是更好的选择</strong>。</p><h2 id="静态链接实例"><a href="#静态链接实例" class="headerlink" title="静态链接实例"></a>静态链接实例</h2><p>在Visual Studio中，需要对Solution Property进行修改。参考：[49 C++中使用库（静态链接） - cherno-cpp-notes (nagi.fun)](<a href="https://nagi.fun/Cherno-CPP-Notes/1-50/49">https://nagi.fun/Cherno-CPP-Notes/1-50/49</a> Using Libraries in C%2B%2B (Static Linking)&#x2F;)</p><h1 id="50-Using-Dynamic-Libraries-in-C"><a href="#50-Using-Dynamic-Libraries-in-C" class="headerlink" title="50. Using Dynamic Libraries in C++"></a>50. Using Dynamic Libraries in C++</h1><p>动态链接发生在<em>runtime</em>（运行时），而静态链接是在编译时发生的。 当你编译一个静态库的时候，将其链接到可执行文件，也就是应用程序，或者链接到一个动态库。就像你取出了那个静态库的内容，然后你把那些内容放入到其它的二进制数据中，实际在你的动态库中或者在你的可执行文件中。</p><p>有很多地方可以优化，因为编译器和链接器现在完全知道静态链接时实际进入应用程序的代码（静态链接允许更多的优化发生）。 而动态链接发生在运行时，所以只有你真正启动你的可执行文件时，你的动态链接库才会被加在，所以它实际上不是可执行文件的一部分（运行时将一个额外的文件加载到内存中）。</p><p>现在可执行文件在实际运行前就需要具备某些库、某些动态库、某些外部文件，这就是为什么你在Windows上启动一个应用程序时，可能看到一个错误消息弹出：需要dll、没有找到dll……. 这是动态链接的一种形式，可执行文件知道动态链接库的存在，把动态库作为一项需要，虽然动态库仍然是一个单独的文件，一个单独的模块，并在运行时加载。你也可以完全动态地加载动态库，这样可执行文件就与动态库完全没有任何关系了，但是在你的可执行文件中，你可以查找并在运行时加载某些动态库，然后获得某些函数指针或者动态库里你想要的东西，然后使用那个动态库。</p><p>对于动态库，请记住两个版本。 第一个是“静态的”动态库的版本，我的应用程序现场需要这个动态链接库，我已经知道里面有什么函数，我可以用什么。 第二个版本是我想任意加载这个动态库，我甚至不需要知道里面有什么，但我想取出一些东西或者做很多事。 这两种动态库都有很好的用途，先专注看第一种：我知道我的应用程序需要这个库，但我要动态地链接它。</p><p>如果你要对比静态和动态链接的话，对于函数之类的声明，动态链接时实际有些不同。但GLFW像大多数库一样，同时支持静态和动态链接，使用相同的头文件。</p><p>见上节课，<code>.dll</code>和<code>dll.lib</code>同时编译是非常重要的，因为如果你尝试使用不同的静态库，在运行时链接到dll，你可能会得到不匹配的函数和错误类型的内存地址，函数指针不会正常工作。</p><h1 id="51-Making-and-Working-with-Libraries-in-C-Multiple-Projects-in-Visual-Studio"><a href="#51-Making-and-Working-with-Libraries-in-C-Multiple-Projects-in-Visual-Studio" class="headerlink" title="51. Making and Working with Libraries in C++(Multiple Projects in Visual Studio)"></a>51. Making and Working with Libraries in C++(Multiple Projects in Visual Studio)</h1><p>[51 C++中创建与使用库 - cherno-cpp-notes (nagi.fun)](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/51">https://nagi.fun/Cherno-CPP-Notes/51-100/51</a> Making and Working with Libraries in C%2B%2B (Multiple Projects in VS)&#x2F;)</p><h1 id="52-How-to-Deal-with-Multiple-Return-Values-in-C"><a href="#52-How-to-Deal-with-Multiple-Return-Values-in-C" class="headerlink" title="52. How to Deal with Multiple Return Values in C++"></a>52. How to Deal with Multiple Return Values in C++</h1><p>[52 C++中如何处理多返回值 - cherno-cpp-notes (nagi.fun)](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/52">https://nagi.fun/Cherno-CPP-Notes/51-100/52</a> How to Deal with Multiple Return Values in C%2B%2B&#x2F;)</p><h2 id="1-指针和引用"><a href="#1-指针和引用" class="headerlink" title="1. 指针和引用"></a>1. 指针和引用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">returnWithReference</span><span class="hljs-params">(std::string&amp; str, <span class="hljs-type">int</span>&amp; num)</span></span><br><span class="hljs-function"></span>&#123;<br>str = <span class="hljs-string">&quot;Hello&quot;</span>;<br>num = <span class="hljs-number">42</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str;<br><span class="hljs-type">int</span> num;<br><span class="hljs-built_in">returnWithReference</span>(str, num);<br><br>std::cout &lt;&lt; str &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; num &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-array和vector"><a href="#2-array和vector" class="headerlink" title="2. array和vector"></a>2. array和vector</h2><blockquote><p>Array和vector的区别：array会在栈上创建，而vector会把它的底层存储在堆上，所以从技术上讲返回<code>std::array</code>会更快。</p><p>注意：多返回值需要是同类型</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function">std::array&lt;<span class="hljs-type">int</span>, 2&gt; <span class="hljs-title">returnWithArray</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::array&lt;<span class="hljs-type">int</span>, 2&gt; result;<br><br>result[<span class="hljs-number">0</span>] = <span class="hljs-number">42</span>;<br>result[<span class="hljs-number">1</span>] = <span class="hljs-number">56</span>;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">returnWithVector</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; result;<br><br>result.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">42</span>);<br>result.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">56</span>);<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::array&lt;<span class="hljs-type">int</span>, 2&gt; arrResult = <span class="hljs-built_in">returnWithArray</span>();<br>std::cout &lt;&lt; arrResult[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; arrResult[<span class="hljs-number">1</span>] &lt;&lt; std::endl;<br><br>std::vector&lt;<span class="hljs-type">int</span>&gt; vecResult = <span class="hljs-built_in">returnWithVector</span>();<br>std::cout &lt;&lt; vecResult[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; vecResult[<span class="hljs-number">1</span>] &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-tuple和pair"><a href="#3-tuple和pair" class="headerlink" title="3. tuple和pair"></a>3. tuple和pair</h2><blockquote><p>tuple基本上是一个类，它可以包含x个变量，但不关心类型，</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tuple&gt;</span></span><br><br><span class="hljs-function">std::tuple&lt;std::string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">returnWithTuple</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_tuple</span>(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-number">42</span>);<br>&#125;<br><br><span class="hljs-function">std::pair&lt;std::string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">returnWithPair</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-number">42</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::tuple&lt;std::string, <span class="hljs-type">int</span>&gt; tupleResult = <span class="hljs-built_in">returnWithTuple</span>();<br>std::cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">0</span>&gt;(tupleResult) &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">1</span>&gt;(tupleResult) &lt;&lt; std::endl;<br><br>std::pair&lt;std::string, <span class="hljs-type">int</span>&gt; pairResult = <span class="hljs-built_in">returnWithPair</span>();<br>std::cout &lt;&lt; pairResult.first &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; pairResult.second &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-Struct⭐-Cherno推荐使用的方法"><a href="#4-Struct⭐-Cherno推荐使用的方法" class="headerlink" title="4. Struct⭐ (Cherno推荐使用的方法)"></a>4. Struct⭐ (Cherno推荐使用的方法)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Result</span><br>&#123;<br>std::string str;<br><span class="hljs-type">int</span> num;<br>&#125;;<br><br><span class="hljs-function">Result <span class="hljs-title">returnWithStruct</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Result result;<br>result.str = <span class="hljs-string">&quot;Hello&quot;</span>;<br>result.num = <span class="hljs-number">42</span>;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Result structResult = <span class="hljs-built_in">returnWithStruct</span>();<br>std::cout &lt;&lt; structResult.str &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; structResult.num &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="53-Templates-in-C"><a href="#53-Templates-in-C" class="headerlink" title="53. Templates in C++"></a>53. Templates in C++</h1><h2 id="1-函数重载"><a href="#1-函数重载" class="headerlink" title="1. 函数重载"></a>1. 函数重载</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; value &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(std::string value)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; value &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-type">float</span> value)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; value &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">Print</span>(<span class="hljs-number">5</span>);<br><span class="hljs-built_in">Print</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-built_in">Print</span>(<span class="hljs-number">5.5f</span>);<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-模板"><a href="#2-模板" class="headerlink" title="2. 模板"></a>2. 模板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(T value)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; value &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">Print</span>(<span class="hljs-number">5</span>);<br><span class="hljs-built_in">Print</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-built_in">Print</span>(<span class="hljs-number">5.5f</span>);<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>模板只有在它被调用时才会创建，否则它根本就不存在。你甚至在里面有语法错误，只要不调用都不会影响编译。<strong>（视频中的VS2017是这样的，但目前VS2022中的错误就算不调用也会影响编译。）</strong></p></blockquote><h2 id="3-用在类上的模板"><a href="#3-用在类上的模板" class="headerlink" title="3. 用在类上的模板"></a>3. 用在类上的模板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-type">int</span> N&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Array</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>T m_Array[N];<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetSize</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> N; &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Array&lt;<span class="hljs-type">int</span>, <span class="hljs-number">5</span>&gt; array1;<br>std::cout &lt;&lt; array<span class="hljs-number">1.</span><span class="hljs-built_in">GetSize</span>() &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-哪里用模板？哪里不用"><a href="#4-哪里用模板？哪里不用" class="headerlink" title="4. 哪里用模板？哪里不用"></a>4. 哪里用模板？哪里不用</h2><p>本部分完全是主观的，仅供参考。 <strong>很多游戏工作室或软件公司实际上禁止使用模板</strong>，但模板非常有用，比如在日志系统或者其它的使用场景下，你想记录每一种可能的类型，难道你真的要为每个函数都进行重载吗？你可以用模板自动完成，也就是你可以让编译器基于一些规则为你写代码。 这是说，你可以深入使用模板来做一些很好的事，但如果你的模板变得非常复杂，你开始让它为你生成一个完整的元语言就有点过头了。因为这里有一个平衡点，当模板变得越来越复杂时，没人能搞懂它是做什么的了，你得花大量时间弄清楚哪些代码已经被编译了以及你的模板到底发生了什么而不能工作。这种情况说明你做的过头了。</p><p>Cherno 的观点是：手动做一些事，自己写代码实际上会让你和你的团队受益更多，而不是试图创建庞大的模板魔法般地为你做所有事。所以模板不应该被完全禁止，但也不应该滥用。比如游戏引擎的<strong>日志系统</strong>和<strong>材质系统</strong>肯定会用到模板，当你有一个可以包含各种不同类型的统一缓冲区时，模板在一定程序上是非常有用的。</p><h1 id="54-Stack-vs-Heap-Memory-in-C"><a href="#54-Stack-vs-Heap-Memory-in-C" class="headerlink" title="54. Stack vs Heap Memory in C++"></a>54. Stack vs Heap Memory in C++</h1><h2 id="1-什么是栈和堆？"><a href="#1-什么是栈和堆？" class="headerlink" title="1. 什么是栈和堆？"></a>1. 什么是栈和堆？</h2><p>应用程序启动后，操作系统要做的就是将整个程序加载到内存，并分配一大堆物理 RAM（<em>随机存取存储器：Random Access Memory</em>）以便我们的实际应用程序可以运行。 栈和堆是 RAM 中实际存在的两个区域： 栈<em>stack</em>通常是一个预定义大小的内存区域，通常约为 2 兆字节（2MB）左右； 堆<em>heap</em>也是一个预定义了默认值的区域，但是它可以增长，并随着应用程序的进行而改变。 重要的是要知道这两个内存区域的实际物理位置都是在 RAM 中，很多人倾向于认为栈存储在 CPU 缓存中或类似的位置，它确实因为我们不停访问而在缓存中活跃，但不是所有的栈内存都会存储在这里，这并不是它的工作方式。只要记住这两个内存区域的实际位置都在我们的内存中，这就是为什么内存中有两个不同区域的原因。</p><h2 id="2-栈与堆的内存分配"><a href="#2-栈与堆的内存分配" class="headerlink" title="2. 栈与堆的内存分配"></a>2. 栈与堆的内存分配</h2><p>我们的程序中，内存是用来存储运行程序所需的数据的，不管是从局部变量还是从文件中读取的东西。而栈和堆就是我们可以存储数据的地方。 它们的工作原理非常不同，但本质上做的事情是一样的：我们可以要求 C++从栈或者堆中给我们一些内存，顺利的话它会给我们一个要求大小的内存块。而不同之处在于，它会<strong>如何分配内存</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector3</span><br>&#123;<br><span class="hljs-type">float</span> x, y, z;<br><br><span class="hljs-built_in">Vector3</span>()<br>:<span class="hljs-built_in">x</span>(<span class="hljs-number">10.0f</span>), <span class="hljs-built_in">y</span>(<span class="hljs-number">11.0f</span>), <span class="hljs-built_in">z</span>(<span class="hljs-number">12.0f</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> value = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> array[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>array[i] = i;<br>&#125;<br>Vector3 vector;<br><br><span class="hljs-type">int</span>* hvalue = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br>*hvalue = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span>* harray = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>harray[i] = i;<br>&#125;<br>Vector3* hvector = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Vector3</span>();<br><br><span class="hljs-keyword">delete</span> hvalue;<br><span class="hljs-keyword">delete</span>[] harray;<br><span class="hljs-keyword">delete</span> hvector;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈分配"><a href="#栈分配" class="headerlink" title="栈分配"></a>栈分配</h3><p>因为 debug 模式下在变量周围添加了<em>safety guards</em>，以确保我们不会溢出所有变量，在错误的内存中访问它们等问题。所以在内存中这些变量的<strong>存储位置都很接近</strong>，因为实际发生的是：<strong>当我们在栈中分配变量时，栈顶部的指针就移动这个变量大小的字节。分配一个 4 个字节的整数，栈顶指针就移动 4 个字节。内存实际上是像栈一样相互叠加存储的，现在在大多数栈的实现中，栈是倒着来的。</strong>这就是为什么你看图中会发现：第一个 int value 存储在更高的内存地址，后续的 array 和 vector 在旁边存储在较低的内存地址，因为它是反向生长的。</p><p>栈的做法就是把东西叠在一起，这就是为什么<em>stack allocation</em>（栈分配）非常快，它就像一条 CPU 指令，我们所做的就是移动栈指针，然后返回栈指针的地址。我如果要分配一个整数，我要反向移动栈指针 4 个字节，然后返回那个内存地址，因为这是 4 个字节块的开始。</p><p>栈中分配内存时，一旦这个作用域结束，你在栈中分配的所有内存都会被弹出，内存被释放。</p><h3 id="堆分配"><a href="#堆分配" class="headerlink" title="堆分配"></a>堆分配</h3><p>堆分配的内存不会紧挨着，在堆中分配<code>new</code>后要调用<code>delete</code>关键字来释放内存，用[智能指针](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/54">https://nagi.fun/Cherno-CPP-Notes/51-100/54</a> Stack vs Heap Memory in C%2B%2B&#x2F;44 SMART POINTERS in C++.md)的<code>make</code>也一样会帮你调用关键字，所以我们需要手动去释放内存。</p><h2 id="3-new关键字实际上做了什么？"><a href="#3-new关键字实际上做了什么？" class="headerlink" title="3. new关键字实际上做了什么？"></a>3. new关键字实际上做了什么？</h2><p><code>new</code>关键字实际上调用了一个叫做<code>malloc</code>的函数（memory allocate）的缩写，这样做通常会调用底层操作系统或平台的特定函数，这将在堆上为你分配内存。当你启动应用时，你会被分配到一定数量的物理 RAM，而你的程序会维护一个叫<em>free list</em>（空闲列表）的东西，它的作用是跟踪哪些内存块是空闲的并储存它们的位置。当你使用<code>malloc</code>请求堆内存时，它可以浏览空闲列表，找到一块符合大小要求的内存块，然后返回你一个它的指针，并记录分配的大小和它现在是否被分配的情况（这样你就不能使用这块内存了）。</p><p>这里想说的重点是，在堆上分配内存是一大坨事情，而在栈上分配内存就像一条 CPU 指令。这两种主要内存的区别就是分配方式的区别，可以从汇编指令中看到，声明变量时栈分配的指令就一两行，而堆分配就是一大段指令了，之后还要调用<code>delete</code>，这又是大段指令。</p><p>所以事实上，如果可能的话你应该<strong>尽量在栈上分配内存</strong>。在堆上分配的唯一原因是如果你不能在栈上分配，比如你需要让它的声明周期比你在处理的作用域更长，或者你特别需要更多的数据，比如我想加载一个 50MB 的纹理材质，这就不适合在栈上分配，因此你不得不在堆上分配。</p><p>性能的不同是因为分配方式，所以理论上如果你在运行你的程序前在堆上预先分配一个内存块，然后从这个预先分配的内存块中进行堆分配，那栈、堆分配就基本一样了，你唯一可能要处理的就是<em>cpu cache miss</em>的问题（缓存不命中），但 miss 的数量可能不够造成麻烦。所以当你调用<code>new</code>时，你需要检查 free list，请求内存再记录所有内容，这就是堆相比于栈慢的地方，而实际的访问（CPU、缓存）通常可以忽略不计</p><h1 id="55-Macros-in-C"><a href="#55-Macros-in-C" class="headerlink" title="55. Macros in C++"></a>55. Macros in C++</h1><ul><li>预处理</li></ul><p>带有<code>#</code>的为<em>preprocessor statement</em>，即预处理指令。 该类指令发生在真正的编译之前，当编译器收到一个源文件时，做的第一件事情就是预处理所有预处理指令。</p><p>预处理阶段基本上是一个文本编辑阶段，在这个阶段我们可以控制给编译器什么代码，这就是<em>macro</em>（宏）的用武之地了。 我们能做的就是写一些宏，它将代码中的文本替换为其它东西，这基本就像遍历我们的代码然后执行查找和替换。 （所以模板会比宏评估得更晚一些)</p><p>你使用宏的方式取决于你的个人爱好，如果你用了很多宏，代码可能会比较难理解。不要用太多的 C++特性，尤其是当我们进入更高级的特性时，你不需要向所有人炫耀你知道所有的 C++特性，用更多的特性也不是写好代码的方式。</p><ul><li>“宏”举例</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WAIT std::cin.get()</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>WAIT;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG(x) std::cout &lt;&lt; x &lt;&lt; std::endl</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">LOG</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-使用宏区分Debug和Release"><a href="#1-使用宏区分Debug和Release" class="headerlink" title="1. 使用宏区分Debug和Release"></a>1. 使用宏区分Debug和Release</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240107130814058.png" alt="image-20240107130814058"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240107130718965.png" alt="image-20240107130718965"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240107130735354.png" alt="image-20240107130735354"></p><h2 id="2-多行宏定义"><a href="#2-多行宏定义" class="headerlink" title="2. 多行宏定义"></a>2. 多行宏定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAIN int mian()\</span><br><span class="hljs-meta">&#123;\</span><br><span class="hljs-meta">std::cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span> &lt;&lt; std::endl;\</span><br><span class="hljs-meta">std::cin.get();\</span><br><span class="hljs-meta">&#125;</span><br><br>MAIN<br></code></pre></td></tr></table></figure><h1 id="56-The-AUTO-keyword-in-C"><a href="#56-The-AUTO-keyword-in-C" class="headerlink" title="56. The AUTO keyword in C++"></a>56. The AUTO keyword in C++</h1><p>有一种方法可以让 C++自动推导出数据的类型，不管是在创建、初始化变量数据时，还是在将一个变量对另一个变量进行赋值时。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">auto</span> b = a;<br><br>std::string name1 = <span class="hljs-string">&quot;Cherno&quot;</span>;<br><span class="hljs-keyword">auto</span> name2 = name1;<br><br><span class="hljs-function">std::string <span class="hljs-title">GetName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cherno&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">auto</span> name = <span class="hljs-built_in">GetName</span>();<br></code></pre></td></tr></table></figure><p>这样如果<em>api</em>发生改变时，比如 GetName 的返回类型改为了<code>char*</code>，客户端不需要任何改动。但是坏处是我也不知道 api 已经改变了，它可能会破坏依赖于特定类型的代码。</p><h2 id="什么时候适合用-auto？"><a href="#什么时候适合用-auto？" class="headerlink" title="什么时候适合用 auto？"></a>什么时候适合用 auto？</h2><ul><li>迭代器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::vector &lt;std::string&gt; strings;<br>strings.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Apple&quot;</span>);<br>strings.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Orange&quot;</span>);<br><br><span class="hljs-comment">// for (std::vector&lt;std::string&gt;::iterator it = strings.begin(); it != strings.end(); it++)</span><br>    <span class="hljs-comment">// 代码中iterator（迭代器）的类型太长了，可以直接用auto替换以获得更好的可读性：</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = strings.<span class="hljs-built_in">begin</span>(); it != strings.<span class="hljs-built_in">end</span>(); it++)     <br>&#123;<br>std::cout &lt;&lt; *it &lt;&lt; std::endl;<br>&#125;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>类型相当大</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Device</span> &#123;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeviceManager</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt; m_Devices;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">const</span> std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt;&amp; <span class="hljs-built_in">GetDevice</span>() <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> m_Devices;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>DeviceManager dm;<br><br><span class="hljs-comment">// const std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt;&amp; devices = dm.GetDevice();</span><br>    <br>    <span class="hljs-comment">// 使用alias</span><br>    <span class="hljs-keyword">using</span> DeviceMap = std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt;;<br>    <span class="hljs-keyword">typedef</span> std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt; DeviceMap;<br>    <span class="hljs-type">const</span> DeviceMap&amp; devices = dm.<span class="hljs-built_in">GetDevice</span>();<br>    <br>    <span class="hljs-comment">// 使用auto</span><br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; devices = dm.<span class="hljs-built_in">GetDevice</span>();<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="57-Static-Array-in-C-std-array"><a href="#57-Static-Array-in-C-std-array" class="headerlink" title="57.  Static Array in C++(std::array)"></a>57.  Static Array in C++(std::array)</h1><h2 id="1-静态数组"><a href="#1-静态数组" class="headerlink" title="1. 静态数组"></a>1. 静态数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><br><span class="hljs-comment">// 用模板传入std::array的size，避免显式调用</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">int</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintArray</span><span class="hljs-params">(std::array&lt;<span class="hljs-type">int</span>, T&gt;&amp; array)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++)<br>    &#123;<br>        std::cout &lt;&lt; array[i] &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::array&lt;<span class="hljs-type">int</span>, 5&gt; data;<br><br>    <span class="hljs-keyword">for</span> (std::array&lt;<span class="hljs-type">int</span>, data.<span class="hljs-built_in">size</span>()&gt;::iterator it = data.<span class="hljs-built_in">begin</span>(); it != data.<span class="hljs-built_in">end</span>(); it++)<br>    &#123;<br>        *it = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">PrintArray</span>(data);<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-静态数组和普通数组异同"><a href="#2-静态数组和普通数组异同" class="headerlink" title="2. 静态数组和普通数组异同"></a>2. 静态数组和普通数组异同</h2><p><code>std::array</code>和普通数组在内存上形式是一样的，都在栈上分配，不像<code>std::vector</code>类是在堆上分配的。</p><p>但是<code>std::array</code>有边界检查（仅在 Debug 模式下），在最优化的情况下和普通数组性能是一样的。</p><p><code>std::array</code>实际上不存储自己的 size，size 是你给它的一个模板参数，这意味着调用 size function 直接返回 5 而不是返回一个存储在内存中的 size 变量</p><p>可以看到边界检查是在一个宏中的，这意味着只有在那个调试级别才会发生，如果等级为 0 则返回跟 C 语言数组工作方式一样的。</p><p>你应该开始选择使用<code>std::array</code>而不是 C 语言风格数组，因为它增加了一层调试（在你期望对代码保护时），而且也没有性能成本，还可以让你记录数组的大小。</p><h1 id="58-Function-Pointers-in-C"><a href="#58-Function-Pointers-in-C" class="headerlink" title="58. Function Pointers in C++"></a>58. Function Pointers in C++</h1><p>把函数传给变量；将函数作为参数传递给其他函数</p><ul><li>函数指针举例1</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HelloWorld</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Hello world&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> fun1 = HelloWorld;<br><span class="hljs-built_in">fun1</span>();<br><br><span class="hljs-built_in">void</span>(*fun2)() = HelloWorld;<br><span class="hljs-built_in">fun2</span>();<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>函数指针举例2</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ForEach</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; values, <span class="hljs-type">void</span>(*func)(<span class="hljs-type">int</span>))</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values)<br><span class="hljs-built_in">func</span>(value);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; values = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br><span class="hljs-built_in">ForEach</span>(values, PrintValue);  <span class="hljs-comment">// 函数指针作为函数的参数</span><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ForEach</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; values, <span class="hljs-type">void</span>(*func)(<span class="hljs-type">int</span>))</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values)<br><span class="hljs-built_in">func</span>(value);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; values = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br><span class="hljs-built_in">ForEach</span>(values, [](<span class="hljs-type">int</span> value) &#123;std::cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl; &#125;); <span class="hljs-comment">// lambda匿名函数</span><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>[]</code>叫做<em>capture method</em>（捕获方式），也就是如何传入传出参数，后面会介绍更多。</p><h1 id="59-lambda-in-C"><a href="#59-lambda-in-C" class="headerlink" title="59. lambda in C++"></a>59. lambda in C++</h1><p><em>lambda</em>本质上是我们定义一种叫做匿名函数的方式，用这种方法不需要实际创建一个函数，就像是一个快速的一次性函数，我们更想将它视作一个变量而不是像一个正式的函数那样，在我们编译的代码中作为一个符号存在。</p><p>只要你有一个<strong>函数指针</strong>，你都可以在C++中使用lambda，这就是它的工作原理，所以lambda是我们不需要通过函数定义就可以定义一个函数的方法。 <strong>lambda的用法是，在我们会设置函数指针指向函数的任何地方，我们都可以将它设置为lambda。</strong></p><p>lambda是一个指定一个函数未来想要运行的代码的很好的方法。</p><h2 id="1-capture"><a href="#1-capture" class="headerlink" title="1. capture"></a>1. capture</h2><p>如果我们想把外部变量放到lambda函数内部的指令中呢？ 和我们创建自己的函数其实一样，都是有两个方法：<strong>值传递和引用传递</strong>，这也就是捕获这一块的东西，<code>[]</code>就是我们打算如何传递变量。（<code>[=]</code>,传递所有变量，通过值传递；<code>[&amp;]</code>传递所有变量，通过引用传递） 还可以只传入单独的变量，<code>[a]</code>通过值传递传入a,<code>[&amp;a]</code>通过引用传递。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ForEach</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; values, <span class="hljs-type">const</span> std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;&amp; func)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values)<br><span class="hljs-built_in">func</span>(value);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; values = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span> &#125;;<br><span class="hljs-keyword">auto</span> it = std::<span class="hljs-built_in">find_if</span>(values.<span class="hljs-built_in">begin</span>(), values.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> value) &#123;<span class="hljs-keyword">return</span> value &gt; <span class="hljs-number">2</span>; &#125;);<br>std::cout &lt;&lt; *it &lt;&lt; std::endl;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">auto</span> lambda = [=](<span class="hljs-type">int</span> value) &#123;std::cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl; &#125;;<br><br><span class="hljs-built_in">ForEach</span>(values, lambda);<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="60-Why-I-don’t-use-“using-namespace-std”"><a href="#60-Why-I-don’t-use-“using-namespace-std”" class="headerlink" title="60. Why I don’t use “using namespace std”"></a>60. Why I don’t use “using namespace std”</h1><h2 id="1-什么是-using-namespace"><a href="#1-什么是-using-namespace" class="headerlink" title="1. 什么是 using namespace?"></a>1. 什么是 using namespace?</h2><p>就像上文中的代码用了很多标准库的内容，如果在代码前面加上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><p>就可以直接写 vector，find_if 了，看上去代码更干净一点。 还可以把它限制在作用域中，比如写到 main 函数的第一行，这样 main 函数中调用标准库就不用写”std::“了。</p><p>所以<code>using namespace</code>可以非常有用，如果你在处理很长的命名空间，或是你有自己的命名空间，自己的项目文件中的符号都在这个命名空间中，你可以使用这个。</p><p>但是<strong>我个人</strong>不喜欢<code>using namespace std</code></p><h2 id="2-为什么不喜欢"><a href="#2-为什么不喜欢" class="headerlink" title="2. 为什么不喜欢"></a>2. 为什么不喜欢</h2><p>第一眼看上去代码是干净了，但是如果看原始代码，可以发现你很容易就能指出代码中使用的是 C++标准模板库（带有 std 前缀的）。如果用了<code>using namespace std</code>，就相对而言有点难分辨了。如果你也用标准库喜欢用的<em>snake case</em>（蛇形命名法，如 find_if），就很难区分到底是不是 std 中的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> apple &#123;<br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; text)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; text &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> orange &#123;<br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* text)</span></span><br><span class="hljs-function"></span>&#123;<br>std::string temp = text;<br>std::<span class="hljs-built_in">reverse</span>(temp.<span class="hljs-built_in">begin</span>(), temp.<span class="hljs-built_in">end</span>());<br>std::cout &lt;&lt; temp &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> apple;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> orange;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">olleH</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>这并不是 orange 在 apple 后导致的，而是因为其它原因。“Hello”其实是一个 const char[]数组，而不是一个 string，如果只有 apple 命名空间，会在 apple::print()中做一个[隐式转换](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/60">https://nagi.fun/Cherno-CPP-Notes/51-100/60</a> Why I don’t using namespace std&#x2F;40 Implicit Conversion and the Explicit Keyword in C++.md#^cde452)，将 const char 数组转换为 string 对象。但是引入 orange 命名空间后，orange::print()匹配度更高，因为它的参数本来就是一个 const char*，不需要隐式转换。</p><p>如果我们不用<code>using namespace</code>，而是简单地引入另一个库<code>apple::print()</code>就不会有这样的运行时错误。</p><p>另一个要<strong>百分百避免的就是在头文件中使用 using namespace</strong>，永远不要这样做，把这些命名空间用在了你原本没有打算用的地方，谁知道它会 include 什么呢？任何大型项目中追踪起来都是很困难的，所以<strong>绝对不要在头文件中使用 using namespace！</strong></p><h1 id="61-Namespaces-in-C"><a href="#61-Namespaces-in-C" class="headerlink" title="61. Namespaces in C++"></a>61. Namespaces in C++</h1><p>[61 C++的名称空间 - cherno-cpp-notes (nagi.fun)](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/61">https://nagi.fun/Cherno-CPP-Notes/51-100/61</a> Namespaces in C%2B%2B&#x2F;)</p><h1 id="62-Threads-in-C"><a href="#62-Threads-in-C" class="headerlink" title="62. Threads in C++"></a>62. Threads in C++</h1><p>本节课讲的是<em>threads</em>（线程），也就是讲我们如何进行<em>parallelization</em>（并行化）。现在大多数计算机或处理器等设备都有不止一个逻辑处理线程，当我们进入更复杂的项目时，将某些工作移动到两个不同的执行线程会对我们非常有益。不仅仅是为了提高性能，也是我们还能用它做些什么事。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> s_Finished = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DoWork</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::literals::chrono_literals;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Started thread id = &quot;</span> &lt;&lt; std::this_thread::<span class="hljs-built_in">get_id</span>() &lt;&lt; std::endl;<br><br><span class="hljs-keyword">while</span> (!s_Finished)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Working...\n&quot;</span>;<br>std::this_thread::<span class="hljs-built_in">sleep_for</span>(<span class="hljs-number">1</span>s);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">std::thread <span class="hljs-title">worker</span><span class="hljs-params">(DoWork)</span></span>;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>s_Finished = <span class="hljs-literal">true</span>;<br><br>worker.<span class="hljs-built_in">join</span>();<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Finished.&quot;</span> &lt;&lt; std::endl;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Started thread id = &quot;</span> &lt;&lt; std::this_thread::<span class="hljs-built_in">get_id</span>() &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是一个简单的 C++多线程例子。代码的主要工作流程如下：</p><ol><li>全局的<code>s_Finish</code>标记声明为<code>static</code>，以限制其在当前源文件中的作用范围。</li><li><code>DoWork</code>函数是一个线程例程。它进入一个无限循环，每秒打印一次”Working…”，直到<code>s_Finish</code>标志被设置为<code>true</code>。</li><li>在<code>main</code>函数中，创建了一个名为<code>worker</code>的新线程。<code>DoWork</code>函数被作为参数传递给线程的构造函数，表示应在新创建的线程中运行此函数。</li><li><code>std::cin.get();</code>语句是一个阻塞调用，它等待用户按回车键。</li><li>一旦按下回车键，<code>s_Finish</code>标志被设置为<code>true</code>，这导致<code>DoWork</code>函数跳出其循环并返回。</li><li><code>worker.join();</code>语句用于等待线程完成其执行，然后程序才能继续。确保线程在主线程（在这种情况下，是程序）结束之前完成执行是至关重要的。如果程序在<code>worker</code>线程仍在运行时结束，那么它将被突然终止，这可能导致各种问题，如资源未被正确释放。</li></ol><p>线程很重要，它们对于加速程序非常有用，主要目的是优化，还可以做例如上面例子中这些事情。</p><h1 id="63-Timing-in-C"><a href="#63-Timing-in-C" class="headerlink" title="63. Timing in C++"></a>63. Timing in C++</h1><p>我们如何计算完成某个操作或者执行某个代码所需要的时间呢？</p><p>计时对很多事情都很有用，不论你是希望某些事情在特定时间发生，还是只是评估性能或做基准测试，看你的代码运行得有多快，你需要知道应用程序实际运行的时间。</p><p>有几种方法可以实现这一点，C++11 之后我们有了“chrono”，它是 C++库的一部分，不需要去使用操作系统库。但在有 chrono 之前，如果你想要高分辨率的时间，你想要一个非常精确的计时器，那你就需要用到操作系统库了。例如在 Windows 中有一个叫做“QueryPerformanceCounter”的东西，我们仍然可以使用那些东西。事实上如果你想要更多地控制即使，控制 CPU 的计时能力，那么你可能会使用平台特定的库。不过本节只会看一看和平台无关的 C++标准库方法（chrono 库的一部分），它可以计算出执行代码时，代码之间经过了多长时间。</p><h2 id="1-计时1s"><a href="#1-计时1s" class="headerlink" title="1. 计时1s"></a>1. 计时1s</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::literals::chrono_literals;<br><br>    <span class="hljs-keyword">auto</span> start = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(<span class="hljs-number">1</span>s);<br>    <span class="hljs-keyword">auto</span> end = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br><br>    std::chrono::duration&lt;<span class="hljs-type">float</span>&gt; duration = end - start;<br>    std::cout &lt;&lt; duration.<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;s &quot;</span> &lt;&lt; std::endl;<br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>chrono 库非常好，可以高精度计时，几乎适用于所有平台，所以非常建议使用这个方法来满足你所有的计时需求，除非你在做一些特定的底层的事情。</p><h2 id="2-计算时间"><a href="#2-计算时间" class="headerlink" title="2. 计算时间"></a>2. 计算时间</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Timer</span><br>&#123;<br>std::chrono::time_point&lt;std::chrono::steady_clock&gt; start, end;<br>std::chrono::duration&lt;<span class="hljs-type">float</span>&gt; duration;<br><br><span class="hljs-built_in">Timer</span>()<br>&#123;<br>start = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>&#125;<br><br>~<span class="hljs-built_in">Timer</span>()<br>&#123;<br>end = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br><br>duration = end - start;<br><br><span class="hljs-type">float</span> ms = duration.<span class="hljs-built_in">count</span>() * <span class="hljs-number">1000.0f</span>;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Timer took &quot;</span> &lt;&lt; ms &lt;&lt; <span class="hljs-string">&quot;ms&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Timer timer;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>        <span class="hljs-comment">// std::cout &lt;&lt; &quot;Hello&quot; &lt;&lt; std::endl;</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Hello\n&quot;</span>; <span class="hljs-comment">// 可以将 endl 换为“\n”优化性能。</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">Function</span>();<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="64-Multidimensional-Arrays-in-C-2D-arrays"><a href="#64-Multidimensional-Arrays-in-C-2D-arrays" class="headerlink" title="64. Multidimensional Arrays in C++(2D arrays)"></a>64. Multidimensional Arrays in C++(2D arrays)</h1><p>从二维数组开始作为一个例子，实际上它只是<strong>数组的数组</strong>（三维数组就是数组的数组的数组…..），就是数组的集合。 我们考虑处理数组的一种策略就是使用<strong>指针</strong>，我们有一个指针，指向数组在内存中的开头位置。可以想象一下有一个指针的数组，最终你会得到一个内存块，里面包含的是连续的指针，每个指针都指向内存中的某个数组，所以得到的是指向数组的指针的集合，也就是数组的数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 1-d array</span><br><span class="hljs-type">int</span>* array = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">50</span>];<br><br><span class="hljs-keyword">delete</span>[] array;<br><br><br><span class="hljs-comment">// 2-d array (50*10)</span><br><span class="hljs-type">int</span>** a2d = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>* [<span class="hljs-number">50</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++)<br>a2d[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++)<br><span class="hljs-keyword">delete</span>[] a2d[i];<br><span class="hljs-keyword">delete</span>[] a2d;<br><br><span class="hljs-comment">// 3-d array (50*10*3)</span><br><span class="hljs-type">int</span>*** a3d = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>** [<span class="hljs-number">50</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++)<br>&#123;<br>a3d[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>* [<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>&#123;<br>a3d[i][j] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">3</span>];<br>&#125;<br>&#125;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里只是分配了一个可以存储200字节指针的内存块，并没有初始化。 然后我们可以遍历并设置每个指针指向一个数组，这样就能得到一个包含50个数组的内存位置的数组</p><h1 id="65-Sorting-in-C"><a href="#65-Sorting-in-C" class="headerlink" title="65. Sorting in C++"></a>65. Sorting in C++</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; values = &#123; <span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span> &#125;;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;first&quot;</span> &lt;&lt; std::endl;<br>std::<span class="hljs-built_in">sort</span>(values.<span class="hljs-built_in">begin</span>(), values.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values)<br>std::cout &lt;&lt; value &lt;&lt; std::endl;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;second&quot;</span> &lt;&lt; std::endl;<br>std::<span class="hljs-built_in">sort</span>(values.<span class="hljs-built_in">begin</span>(), values.<span class="hljs-built_in">end</span>(), std::<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values)<br>std::cout &lt;&lt; value &lt;&lt; std::endl;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;third&quot;</span> &lt;&lt; std::endl;<br>std::<span class="hljs-built_in">sort</span>(values.<span class="hljs-built_in">begin</span>(), values.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)<br>&#123;<br><span class="hljs-keyword">return</span> a &gt; b;<br>&#125;);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values)<br>std::cout &lt;&lt; value &lt;&lt; std::endl;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;forth&quot;</span> &lt;&lt; std::endl;<br>std::<span class="hljs-built_in">sort</span>(values.<span class="hljs-built_in">begin</span>(), values.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)<br>&#123;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br><span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br><br><span class="hljs-keyword">return</span> a &lt; b;<br>&#125;);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values)<br>std::cout &lt;&lt; value &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="66-Type-Punning-in-C"><a href="#66-Type-Punning-in-C" class="headerlink" title="66. Type Punning in C++"></a>66. Type Punning in C++</h1><p><em>Type punning</em>（类型双关）只是一个花哨的术语，<strong>用来在 C++中绕过类型系统</strong>。<strong>C++是强类型语言</strong>，也就是说它有一个类型系统，不像 JavaScript 那样创建变量不需要声明变量类型，但 C++中你创建变量时必须声明整数、双精度数、结构体等等类型。然而这种类型系统并不像 Java 中那么“强制”，C++中虽然类型是由编译器强制执行的，但你可以直接访问内存，所以<strong>可以很容易地绕过类型系统</strong>，你是否要这么做取决于你的实际需求。在某些情况下，你绝对不应该规避类型系统，因为类型系统存在是有原因的，除非你有充分的理由，否则你不会想过多地使用它。</p><ul><li>隐式类型转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">50</span>; <span class="hljs-comment">// a:32 00 00 00 (十六进制)</span><br><span class="hljs-type">double</span> value = a; <span class="hljs-comment">// value:00 00 00 00 00 00 49 40 (十六进制)  //隐式类型转换</span><br><br>std::cout &lt;&lt; value &lt;&lt; std::endl;  <span class="hljs-comment">// 50</span><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>显式类型转换(与上面的隐式类型转换其实是一样的)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">50</span>; <span class="hljs-comment">// a:32 00 00 00</span><br><span class="hljs-type">double</span> value = (<span class="hljs-type">double</span>)a; <span class="hljs-comment">// value:00 00 00 00 00 00 49 40  //隐式类型转换</span><br><br>std::cout &lt;&lt; value &lt;&lt; std::endl;  <span class="hljs-comment">// 50</span><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>取a的地址，转换为double类型的指针再解引用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">50</span>; <span class="hljs-comment">// a:32 00 00 00</span><br><span class="hljs-type">double</span> value = *(<span class="hljs-type">double</span>*)&amp;a; <span class="hljs-comment">// value:32 00 00 00 cc cc cc cc</span><br><br>std::cout &lt;&lt; value &lt;&lt; std::endl; <span class="hljs-comment">// -9.25596e+61</span><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>struct</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-type">int</span> x, y;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e = &#123; <span class="hljs-number">5</span>,<span class="hljs-number">8</span> &#125;;<br><br><span class="hljs-type">int</span>* position = (<span class="hljs-type">int</span>*)&amp;e;<br>std::cout &lt;&lt; position[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; position[<span class="hljs-number">1</span>] &lt;&lt; std::endl; <span class="hljs-comment">// 5, 8</span><br><br><span class="hljs-type">int</span> y = *(<span class="hljs-type">int</span>*)((<span class="hljs-type">char</span>*)&amp;e + <span class="hljs-number">4</span>);<br>std::cout &lt;&lt; y &lt;&lt; std::endl; <span class="hljs-comment">// 8</span><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="67-Unions-in-C"><a href="#67-Unions-in-C" class="headerlink" title="67. Unions in C++"></a>67. Unions in C++</h1><p><em>Union</em> （联合体）有点像 class 类型或者 struct 类型，只不过它一次只能占用一个成员的内存。 通常如果我们有一个结构体，我们在里面声明 4 个浮点数，就可以有 4x4 个字节在这个结构体中，总共是 16 个字节。 但一个联合体只能有一个成员，所以如果我要声明 4 个浮点数，比如 abcd，联合体的大小仍然是 4 个字节，当我尝试去处理它们，比如将 a 设为 5，它们的内存是一样的，d 的值也会是 5，这就是联合体的工作方式。</p><p>你可以像使用结构体或类一样使用它们，也可以给它添加静态函数或者普通函数、方法等。然而你不能使用虚方法，还有一些其它限制，但通常人们用联合体来做的事，是和[类型双关](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/66">https://nagi.fun/Cherno-CPP-Notes/51-100/66</a> Type Punning in C%2B%2B&#x2F;)紧密相关的。当你想给同一个变量取两个不同的名字时，它真的很好用。</p><p>通常<code>union</code>是匿名使用的，但匿名 union 不能含有成员函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Union</span><br>&#123;<br><span class="hljs-keyword">union</span><br>&#123;<br><span class="hljs-type">float</span> a;<br><span class="hljs-type">int</span> b;<br>&#125;;<br>&#125;;<br><br>Union u;<br>u.a = <span class="hljs-number">2.0f</span>;<br><br>std::cout &lt;&lt; u.a &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; u.b &lt;&lt; std::endl; <span class="hljs-comment">// 2, 1073741824</span><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector2</span><br>&#123;<br><span class="hljs-type">float</span> x, y;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector4</span><br>&#123;<br><span class="hljs-keyword">union</span><br>&#123;<br><span class="hljs-keyword">struct</span><br>&#123;<br><span class="hljs-type">float</span> x, y, z, w;<br>&#125;;<br><span class="hljs-keyword">struct</span><br>&#123;<br>Vector2 a, b;<br>&#125;;<br>&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintVector2</span><span class="hljs-params">(<span class="hljs-type">const</span> Vector2&amp; vector)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; vector.x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; vector.y &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Vector4 vector = &#123; <span class="hljs-number">1.0f</span>,<span class="hljs-number">2.0f</span>,<span class="hljs-number">3.0f</span>,<span class="hljs-number">4.0f</span> &#125;;<br><span class="hljs-built_in">PrintVector2</span>(vector.a);<br><span class="hljs-built_in">PrintVector2</span>(vector.b);<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;====================&quot;</span> &lt;&lt; std::endl;<br>vector.z = <span class="hljs-number">500.0f</span>;<br><span class="hljs-built_in">PrintVector2</span>(vector.a);<br><span class="hljs-built_in">PrintVector2</span>(vector.b);<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1, 2</span><br><span class="hljs-comment">3, 4</span><br><span class="hljs-comment">====================</span><br><span class="hljs-comment">1, 2</span><br><span class="hljs-comment">500, 4</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="68-Virtual-Destructors-in-C"><a href="#68-Virtual-Destructors-in-C" class="headerlink" title="68. Virtual Destructors in C++"></a>68. Virtual Destructors in C++</h1><p>虚析构函数可以想象为虚函数和析构函数的组合。 </p><p><strong>虚析构函数对于处理多态非常重要</strong>，换句话说，如果我有一系列的子类和所有的继承：有一个类 A，然后一个类 B 派生于 A，你想把类 B 引用为类 A，但它实际上是类 B，然后你决定删除 A 或者它以某种方式删除了，然后你还是希望运行 B 的析构函数，而不是运行 A 的析构函数，这就是所谓的虚析构函数以及它的作用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Base Constructor\n&quot;</span>; &#125;<br>~<span class="hljs-built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Base Destructor\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> :<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Derived Constructor\n&quot;</span>; &#125;<br>~<span class="hljs-built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Derived Destructor\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;-----First:Base&quot;</span> &lt;&lt; std::endl;<br>Base* base = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Base</span>();<br><span class="hljs-keyword">delete</span> base;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;-----Second:Derived Inherited from Base&quot;</span> &lt;&lt; std::endl;<br>Derived* derived = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Derived</span>();<br><span class="hljs-keyword">delete</span> derived;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;-----Third:Polymorphic&quot;</span> &lt;&lt; std::endl;<br>Base* poly = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Derived</span>();<br><span class="hljs-keyword">delete</span> poly;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">-----First:Base</span><br><span class="hljs-comment">Base Constructor</span><br><span class="hljs-comment">Base Destructor</span><br><span class="hljs-comment">-----Second:Derived Inherited from Base</span><br><span class="hljs-comment">Base Constructor</span><br><span class="hljs-comment">Derived Constructor</span><br><span class="hljs-comment">Derived Destructor</span><br><span class="hljs-comment">Base Destructor</span><br><span class="hljs-comment">-----Third:Polymorphic</span><br><span class="hljs-comment">Base Constructor</span><br><span class="hljs-comment">Derived Constructor</span><br><span class="hljs-comment">Base Destructor</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>在第三种情况下，Derived只调用了构造函数，没有调用析构函数，这是有可能会造成内存泄露了！！</p><p>这里只有基类的析构函数被调用了，而派生类的析构函数没有被调用。 这点很重要，因为这会造成内存泄漏。 <code>delete</code> poly 时，它不知道这个调用的析构函数可能有另一个析构函数，因为它（~Base）没有被标记为虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Base Constructor\n&quot;</span>; &#125;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Base Destructor\n&quot;</span>; &#125; <span class="hljs-comment">// 标价为virtual</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> :<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span>* m_Array;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Derived</span>() &#123; m_Array = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>]; std::cout &lt;&lt; <span class="hljs-string">&quot;Derived Constructor\n&quot;</span>; &#125; <span class="hljs-comment">// 只调用构造函数，不调用析构函数的话，就会导致内存泄露</span><br>~<span class="hljs-built_in">Derived</span>() &#123; <span class="hljs-keyword">delete</span>[] m_Array; std::cout &lt;&lt; <span class="hljs-string">&quot;Derived Destructor\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;-----First:Base&quot;</span> &lt;&lt; std::endl;<br>Base* base = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Base</span>();<br><span class="hljs-keyword">delete</span> base;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;-----Second:Derived Inherited from Base&quot;</span> &lt;&lt; std::endl;<br>Derived* derived = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Derived</span>();<br><span class="hljs-keyword">delete</span> derived;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;-----Third:Polymorphic&quot;</span> &lt;&lt; std::endl;<br>Base* poly = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Derived</span>();<br><span class="hljs-keyword">delete</span> poly;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">-----First:Base</span><br><span class="hljs-comment">Base Constructor</span><br><span class="hljs-comment">Base Destructor</span><br><span class="hljs-comment">-----Second:Derived Inherited from Base</span><br><span class="hljs-comment">Base Constructor</span><br><span class="hljs-comment">Derived Constructor</span><br><span class="hljs-comment">Derived Destructor</span><br><span class="hljs-comment">Base Destructor</span><br><span class="hljs-comment">-----Third:Polymorphic</span><br><span class="hljs-comment">Base Constructor</span><br><span class="hljs-comment">Derived Constructor</span><br><span class="hljs-comment">Derived Destructor</span><br><span class="hljs-comment">Base Destructor</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>标记为<em>virtual</em>，意味着 C++知道在层次结构下可能有某种重写的方法，这个方法就可以被覆写。 而<em>virtual destructor</em>（虚析构函数）的意思不是覆写析构函数，而是<strong>加上一个</strong>析构函数。换句话说如果我把积累的析构函数改为虚函数，它实际会先调用派生类析构函数，然后在层次结构中向上，调用基类析构函数。</p><h1 id="69-Casting-in-C"><a href="#69-Casting-in-C" class="headerlink" title="69. Casting in C++"></a>69. Casting in C++</h1><h2 id="1-什么是-casting"><a href="#1-什么是-casting" class="headerlink" title="1. 什么是 casting"></a>1. 什么是 casting</h2><p>这里的<em>casting</em>（转换）是指类型转换，或者说是必须在 C++可用类型系统中进行的类型转换。</p><p>C++是一门强类型语言，意味着存在一个类型系统，而且类型是强制的。（见[66 课：类型双关](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/66">https://nagi.fun/Cherno-CPP-Notes/51-100/66</a> Type Punning in C%2B%2B&#x2F;#^4d9dfe)） 如果我把某物设为 int，那就不能突然把它当做 double 或者 float，反过来也一样。我必须坚持原有的类型，除非有一个简单的<strong>隐式转换</strong>（[见 40 课：隐式和显式](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/69">https://nagi.fun/Cherno-CPP-Notes/51-100/69</a> Casting in C%2B%2B&#x2F;40 Implicit Conversion and the Explicit Keyword in C++.md#^cde452)），这意味着 C++知道如何在这两种类型之间转换，并且没有数据损失，这就是隐式转换；或者是有一个<strong>显示转换</strong>（[见 66 课：类型双关](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/66">https://nagi.fun/Cherno-CPP-Notes/51-100/66</a> Type Punning in C%2B%2B&#x2F;#^f3904d)），告诉 C++你需要把这个类型转换成目标类型，本章将正是介绍<strong>强制转换</strong>的含义，并了解如何使用它。</p><h2 id="2-casting"><a href="#2-casting" class="headerlink" title="2. casting"></a>2. casting</h2><h3 id="C-风格"><a href="#C-风格" class="headerlink" title="C 风格"></a>C 风格</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 隐式类型转换，很容易做到且没有数据丢失</span><br><span class="hljs-type">int</span> a1 = <span class="hljs-number">5</span>;<br><span class="hljs-type">double</span> b1 = a1;<br>std::cout &lt;&lt; a1 &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; b1 &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 隐式类型转换，因为不需要具体说明要把这个类型转换成哪个类型</span><br><span class="hljs-type">double</span> a2 = <span class="hljs-number">5.3</span>;<br><span class="hljs-type">int</span> b2 = a2;<br>std::cout &lt;&lt; a2 &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; b2 &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 显示类型转换</span><br><span class="hljs-type">double</span> a3 = <span class="hljs-number">5.3</span>;<br><span class="hljs-type">int</span> b3 = (<span class="hljs-type">int</span>)a3;<br>std::cout &lt;&lt; a3 &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; b3 &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">5, 5</span><br><span class="hljs-comment">5.3, 5</span><br><span class="hljs-comment">5.3, 5</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="C-风格-1"><a href="#C-风格-1" class="headerlink" title="C++ 风格"></a>C++ 风格</h3><p>C++风格的转换有多种，一个是<code>static_cast</code>，还有<code>reinterpret_cast</code>、<code>dynamic_cast</code>、<code>const_cast</code>，共这四种主要的 cast。它们并不能做任何 C 风格类型转换做不到的事情，这并不是添加新功能，只是添加了一些<em><strong>syntax sugar</strong></em>。</p><ul><li><p><code>dynamic_cast</code>，它会实际执行一个检查，如果转换不成功返回 NULL，所以这做了额外的事情，会降低运行速度。但在大多数情况下，C++风格类型转换并不做额外的事情，它们只是一些代码中的英文单词。 </p></li><li><p><code>static_cast</code>，意思是静态类型转换，在静态类型转换的情况下，还会做一些其它的编译时检查，检查这种转换是否可能。 </p></li><li><p><code>reinterpret_cast</code>也是一样，就像是把我们说过的<strong>类型双关</strong>用英语表达出来一样，意思就是我要把这段内存重新解释成其它东西.</p></li><li><p><code>const_cast</code>，移除或者添加变量的 const 限定。</p></li></ul><p>所以为什么要搞这么多 CAST ？因为除了可能收到上面说的那些编译时的检查外，还可以方便我们从代码库中搜索它们。如果我想看到我的类型转换都在哪儿，也许我有性能问题而不想用<code>dynamic_cast</code>，我可以直接搜索这个词，如果用的是 C 语言风格的 cast，就很难去搜索它，所以它对程序员的阅读和编写代码都有帮助。 而且它也能帮助我们减少在尝试强制转换时，可能意外犯下的错误，比如类型不兼容。</p><h1 id="70-Conditional-and-Action-Breakpoints-in-C"><a href="#70-Conditional-and-Action-Breakpoints-in-C" class="headerlink" title="70. Conditional and Action Breakpoints in C++"></a>70. Conditional and Action Breakpoints in C++</h1><p>[70 条件与操作断点 - cherno-cpp-notes (nagi.fun)](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/70">https://nagi.fun/Cherno-CPP-Notes/51-100/70</a> Conditional and Action Breakpoints in C%2B%2B&#x2F;)</p><p>本讲内容是一个简单的 VS 开发和调试的技巧，不过不仅仅是断点，而是关于条件与操作应用在断点上。</p><h2 id="1-条件断点-Condition"><a href="#1-条件断点-Condition" class="headerlink" title="1. 条件断点 Condition"></a>1. 条件断点 Condition</h2><p>通过条件或条件断点，我们可以告诉调试器想在这里放置一个断点，但我希望断点在特定条件下触发，比如内存中的某些东西满足了条件就触发这个断点。</p><h2 id="2-操作断点-Action"><a href="#2-操作断点-Action" class="headerlink" title="2. 操作断点 Action"></a>2. 操作断点 Action</h2><p>操作断点是允许我们采取某种动作，一般是在碰到断点时打印一些东西到控制台。</p><p>这里有两种类型的操作断点：</p><ul><li>一是让你在打印你想要的东西时继续执行，比如你想记录鼠标位置，每次鼠标移动，移动事件（打印鼠标位置）就会发生，可以让那个断点打印一些东西到控制台但保持程序运行；</li><li>二是打印一些东西，但仍然中断程序，暂停程序的执行，这样我们就可以检查内存中的其它东西。</li></ul><h1 id="71-Safety-in-modern-C-and-how-to-teach-it"><a href="#71-Safety-in-modern-C-and-how-to-teach-it" class="headerlink" title="71. Safety in modern C++ and how to teach it"></a>71. Safety in modern C++ and how to teach it</h1><p>本节将讨论C++中“安全”意味着什么。</p><p>安全编程，就是在编程中，我们希望降低崩溃、内存泄漏、非法访问等问题。 随着C++11的到来，Cherno想说的是应该转向智能指针这样的概念，而不是原始指针。这主要是因为存在内存泄漏以及不知道实际分配或者释放了哪些内存的问题。本节也重点围绕指针和内存，而不是异常或者是其它与安全编程有关的比如错误检查之类的东西。</p><p>当我们开始倾向于[智能指针](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/71">https://nagi.fun/Cherno-CPP-Notes/51-100/71</a> Safety in modern C%2B%2B and how to teach it&#x2F;44 SMART POINTERS in C++.md)之类的东西时，这一切都可以归结为我想要分配<strong>堆内存</strong>，智能指针和自动内存管理系统的存在使程序员的生活更容易，且更有力，这意味着你不再需要处理某些事情，就算忘记处理了它也会自动为你处理。</p><p>分配内存这件事很简单，你想在堆上分配一块内存，如果你分配成功会得到一个指向那块内存开始部分的有效的指针，它将一直存在，直到你明确地删除它，这就是整个基本概念了。</p><p>那问题就来自几方面了：</p><ul><li>如果我***忘记释放***我的内存会发生什么问题，可能是无害的甚至注意不到，也有内存耗尽灾难性地导致程序崩溃。而“细心一点、做一个好程序员”显然不是一个真正的解决方案，你还是需要考虑更复杂的结构来删除由你自己明确分配的内存。</li><li>还有<em>ownership</em>（所有权问题），即谁会拥有分配的内存呢？如果我有一个原始指针，指向那块内存，我把它从一个函数传递给另一个函数，从一个类传递给另一个类，谁会<strong>负责管理和清理这些内存</strong>就是***所有权问题***。你不确定A、B这两个管理那个原始指针的函数哪个最后结束，但是要保证两个函数都能访问那个指针，除非你指明这两个函数运行完后再执行一个清理步骤，但这显然会极大复杂化整个程序，也是我们绝对想避免的。我想要重新分配数据，但我不想要显式地建立一些东西，比如管理所有权或者转义所有权，which会使事情变得非常复杂，你将不得不手动跟踪它。这是另一种所有权问题。</li></ul><p>这两大问题就是我们需要自动删除内存的原因，当我们讨论C++的安全问题时，特别是智能指针时，我们只需要自动化一行简单的代码就搞定了内存删除与释放问题，所以你百分之百不应该拒绝使用智能指针，自己构建、修改智能指针也是正常的。</p><p>当然如果只是做一个一百来行的小型sandbox应用，可能用原始指针可读性更好，因为你不关心是否释放了内存，也不关心所有权，你只用写一个<code>*</code>就能让代码会更干净。</p><p>Cherno认为大家应该停止关于“Smart or Raw”的争论，在一个真正的框架环境、真正的应用中，生产代码应该使用智能指针，不这么做是非常愚蠢的举动，大部分典型的问题都可以通过这样解决（可能线程方面有点问题，因为<code>shared_ptr</code>不是线程安全的，使用智能指针还有很多其它约束，所以智能指针不是通用的内存解决方案）。更严肃的代码中完全应该使用智能指针，只是初学C++是需要了解原始指针和内存是如何工作的，因为[智能指针只是原始指针上的包装](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/71">https://nagi.fun/Cherno-CPP-Notes/51-100/71</a> Safety in modern C%2B%2B and how to teach it&#x2F;44 SMART POINTERS in C++.md#^a6997e)，它们围绕原始指针做了额外的辅助代码，以便自动化所有事情，但本质上只是删除和释放了内存。你必须得知道这一切是如何工作的，这也是为什么Cherno有几课是讲编译器和链接是如何工作的([06 How the C++ Compiler Works](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/71">https://nagi.fun/Cherno-CPP-Notes/51-100/71</a> Safety in modern C%2B%2B and how to teach it&#x2F;06 How the C++ Compiler Works.md)、[07 How the C++ Linker Works](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/71">https://nagi.fun/Cherno-CPP-Notes/51-100/71</a> Safety in modern C%2B%2B and how to teach it&#x2F;07 How the C++ Linker Works.md))</p><h1 id="72-Precompiled-Headers-in-C"><a href="#72-Precompiled-Headers-in-C" class="headerlink" title="72. Precompiled Headers in C++"></a>72. Precompiled Headers in C++</h1><h2 id="1-什么是预编译头文件"><a href="#1-什么是预编译头文件" class="headerlink" title="1. 什么是预编译头文件"></a>1. 什么是预编译头文件</h2><p>预编译的头文件实际上是让你抓取一堆头文件，并将它们转换成编译器可以使用的格式，而不必一遍又一遍地读取这些头文件。 举个例子，每次在 C++文件中<code>#include &lt;vector&gt;</code>的时候，它需要读取整个 Vector 头文件并编译它，而且 Vector 还包含一堆其它的包含文件，这些文件也一样需要读取，预处理器必须把这些复制到这个 Vector 文件，这就有 10w+行代码了，它们需要被解析并以某种形式标记并编译，在你想要编译 main 文件之前，因为你的 main 文件包含 Vector 文件的话，Vector 必须复制并粘贴到 main 文件中，然后所有代码每次都需要被解析和编译。重点是每次你对 C++文件进行修改，哪怕只是加了个空格，整个文件都要重新编译，所以 Vector 文件必须被复制并粘贴到你的 C++文件中，从头开始重新解析并编译。不仅如此，你的项目中有多个文件它们又都包含了 Vector，你不得不持续一遍遍地解析同样的代码，这需要大量时间。</p><p>所以你可以用一个叫做<strong>预编译头文件</strong>的东西来代替，它的作用是接受一堆你告诉它要接收的头文件（基本上是一堆代码）它只编译一次，以二进制格式存储，这对编译器来说比单纯的文本处理要快得多。这样就不需要解析整个 Vector 文件，每次它只需要看预编译的头文件，which 此时已经是非常快速且容易使用的、对编译器来说很容易使用的二进制格式。这意味着它会大幅加快编译时间，特别是你的项目越来越大，你会有越来越多的 C++文件。越来越多的头文件，诸如此类，你可以在预编译头文件中添加更多内容，你也有更多使用了共同头文件的源文件需要编译，它会指数级地加速，好的多得多。</p><p>所以如果你关心编译时间，你一定要使用预编译头文件。</p><p>不过，还有些你不应该用预编译头文件做的事： 到目前为止提到的预编译头文件，其本质还是头文件，which 包含了一堆其它头文件。因此你可能会想把项目中所有的东西都放在预编译头文件中，如果这样做的话是不是构建速度飞快。</p><p>是这样，但是如果你把东西放到预编译头文件中，而这些东西会发生变化，在实际的项目中我们在处理项目所以它很有可能会变化，显然必须重新构建预编译的头文件，而这要花费时间，这也可能会导致编译速度变慢。所以不要把会频繁更改的文件放入预编译头文件中。</p><p>尽管预编译头文件很有用，而且把你自己的项目文件当进去也没问题，比如把一个不会需要修改的 Log.h 文件放进去就很好，因为这个文件很常用，也方便使用，你不需要再手动地将 Log 包含到项目中的每个 C++文件中。但只要这个 Log 会修改，就不适合放入预编译头文件中，否则每次都要重新编译。</p><p>预编译头文件真正有用的是外部依赖，本质上它主要用于不是你写的那些代码，比如 STL、Windows api 等，如果你要<code>#include &lt;windows.h&gt;</code>，which is a 巨大的的头文件，包含了非常多的其它头文件，你不回去修改 windows.h 或者 STL，所以它没有理由不被你放在预编译头文件中，因为它们的代码可能比你的实际项目代码多很多倍，每个 C++文件每次都要编译它们可想是一件多么恐怖的事情，你可能永远也不会去修改它们。因此直接把它们放入到预编译头文件中就不用管了。</p><h2 id="2-依赖关系"><a href="#2-依赖关系" class="headerlink" title="2. 依赖关系"></a>2. 依赖关系</h2><p>PCH（就是预编译头文件）实际上做的事是把所有东西都塞进来，它可能会隐藏现在实际正在使用的东西，会影响可读性。比如只有个别文件需要使用一个窗口库 GLFW，那就没必要把所有的依赖项都放在 PCH 中，如果你只看一个单独的 cpp 文件你并不知道它需要什么依赖，再把它导入其它文件时就不好理解它依赖的东西了。但如果你通过实际的<code>include</code>包含它们就很清晰了，可以看到每个文件需要什么文件。但是如果你只包含 PCH，然后 PCH 中放很多包含文件，就会比较麻烦了。</p><p>所以<strong>不要把所有依赖都放在 PCH 中</strong>，因为包含实际的依赖会更容易阅读。应该放进 PCH 的东西是像 STL 这样的，因为 string、vectors、std::cout 是许多地方都要用到的，你不希望每次都编译它们，而 GLFW 可能就只需要编译一次。</p><h1 id="73-Dynamic-Casting-in-C"><a href="#73-Dynamic-Casting-in-C" class="headerlink" title="73. Dynamic Casting in C++"></a>73. Dynamic Casting in C++</h1><p><code>dynamic_cast</code>是专门用于<strong>沿继承层次结构</strong>进行的强制类型转换，比如我的一个游戏里有一个实体类，它派生出了玩家类和敌人类，如果我想将玩家转换为实体是很简单的，因为玩家本身就是实体对象，可以隐式转换。但如果我想将一个实体类型转换为玩家，编译器会相信我们，如果它并不是一个玩家的话我们就相当于在尝试玩家独有的数据，程序可能会崩溃。因为这个原因，<code>dynamic_cast</code>常被用来做验证，如果我们尝试使用它将一个敌人转化为玩家，这个转化会失败，<code>dynamic_cast</code>会返回一个 NULL 指针，也就是 0。</p><h1 id="74-BENCHMARKING-in-C-how-to-measure-performance"><a href="#74-BENCHMARKING-in-C-how-to-measure-performance" class="headerlink" title="74. BENCHMARKING in C++ (how to measure performance)"></a>74. BENCHMARKING in C++ (how to measure performance)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; m_StartTimepoint;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Timer</span>()<br>&#123;<br>m_StartTimepoint = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>&#125;<br><br>~<span class="hljs-built_in">Timer</span>()<br>&#123;<br><span class="hljs-built_in">Stop</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Stop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> EndTimepoint = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br><span class="hljs-keyword">auto</span> start = std::chrono::<span class="hljs-built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(m_StartTimepoint).<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br><span class="hljs-keyword">auto</span> end = std::chrono::<span class="hljs-built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(EndTimepoint).<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br><br><span class="hljs-keyword">auto</span> duration = end - start;<br><span class="hljs-type">double</span> ms = duration * <span class="hljs-number">0.001</span>;<br><br>std::cout &lt;&lt; duration &lt;&lt; <span class="hljs-string">&quot;us (&quot;</span> &lt;&lt; ms &lt;&lt; <span class="hljs-string">&quot;ms)\n&quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> value = <span class="hljs-number">0</span>;<br>&#123;<br>Timer timer;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++)<br>&#123;<br>value += <span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br>std::cout &lt;&lt; value &lt;&lt; std::endl;<br><br>__debugbreak();<span class="hljs-comment">// VS打断点专用语法</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="智能指针的性能对比"><a href="#智能指针的性能对比" class="headerlink" title="智能指针的性能对比"></a>智能指针的性能对比</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; m_StartTimepoint;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Timer</span>()<br>&#123;<br>m_StartTimepoint = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>&#125;<br><br>~<span class="hljs-built_in">Timer</span>()<br>&#123;<br><span class="hljs-built_in">Stop</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Stop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> EndTimepoint = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br><span class="hljs-keyword">auto</span> start = std::chrono::<span class="hljs-built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(m_StartTimepoint).<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br><span class="hljs-keyword">auto</span> end = std::chrono::<span class="hljs-built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(EndTimepoint).<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br><br><span class="hljs-keyword">auto</span> duration = end - start;<br><span class="hljs-type">double</span> ms = duration * <span class="hljs-number">0.001</span>;<br><br>std::cout &lt;&lt; duration &lt;&lt; <span class="hljs-string">&quot;us (&quot;</span> &lt;&lt; ms &lt;&lt; <span class="hljs-string">&quot;ms)\n&quot;</span>;<br><br>&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector2</span><br>&#123;<br><span class="hljs-type">float</span> x, y;<br>&#125;;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Make shared!&quot;</span> &lt;&lt; std::endl;<br>&#123;<br>std::array&lt;std::shared_ptr&lt;Vector2&gt;, <span class="hljs-number">1000</span>&gt; sharedPtrs;<br>Timer timer;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sharedPtrs.<span class="hljs-built_in">size</span>(); i++)<br>sharedPtrs[i] = std::<span class="hljs-built_in">make_shared</span>&lt;Vector2&gt;();<br>&#125;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;New shared!&quot;</span> &lt;&lt; std::endl;<br>&#123;<br>std::array&lt;std::shared_ptr&lt;Vector2&gt;, <span class="hljs-number">1000</span>&gt; sharedPtrs;<br>Timer timer;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sharedPtrs.<span class="hljs-built_in">size</span>(); i++)<br>sharedPtrs[i] = std::<span class="hljs-built_in">shared_ptr</span>&lt;Vector2&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Vector2</span>());<br>&#125;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Make unique!&quot;</span> &lt;&lt; std::endl;<br>&#123;<br>std::array&lt;std::unique_ptr&lt;Vector2&gt;, <span class="hljs-number">1000</span>&gt; sharedPtrs;<br>Timer timer;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sharedPtrs.<span class="hljs-built_in">size</span>(); i++)<br>sharedPtrs[i] = std::<span class="hljs-built_in">make_unique</span>&lt;Vector2&gt;();<br>&#125;<br><br> __debugbreak();<br>&#125;<br></code></pre></td></tr></table></figure><p>切换到 Release 模式，可以发现<code>make_shared</code>明显比<code>new</code>快，所以一定要确保你所分析的代码，是在 Release 时真正有意义的，因为你不会在 Debug 时发布代码。</p><h1 id="75-Structed-bindings-in-C-C-17"><a href="#75-Structed-bindings-in-C-C-17" class="headerlink" title="75. Structed bindings in C++(C++17)"></a>75. Structed bindings in C++(C++17)</h1><ul><li><strong>结构化绑定（只针对 C++17）</strong></li></ul><p><em>Structured binding</em>（结构化绑定）是一个新特性，让我们更好地处理多返回值（多返回值可参考[52 C++处理多返回值](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/52">https://nagi.fun/Cherno-CPP-Notes/51-100/52</a> How to Deal with Multiple Return Values in C%2B%2B&#x2F;)），这是在 52 课方法基础上拓展的一种处理多返回值的新方法，特别是如何处理 <em>tuple</em>（元组）和 <em>pairs</em> (对组）以及返回诸如此类的东西。因为结构化绑定简化了我们的代码，让它比以前的做法更简洁。</p><ul><li>没有结构化绑定这个新特性时，最好使用sturct来处理多返回值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C+">#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;tuple&gt;<br><br>std::tuple&lt;std::string, int&gt; CreatePerson()<br>&#123;<br>return&#123; &quot;Cherno&quot;, 24 &#125;;<br>&#125;<br><br><br>struct Person<br>&#123;<br>std::string Name;<br>int Age;<br>&#125;;<br><br>int main()<br>&#123;<br>// method 1:tuple<br>auto person = CreatePerson();<br>std::string&amp; name = std::get&lt;0&gt;(person);<br>int age = std::get&lt;1&gt;(person);<br><br>// method 2:tie<br>std::string name;<br>int age;<br>std::tie(name, age) = CreatePerson();<br><br>// method 3: struct<br>Person person1;<br>person1.Name = &quot;Cherno&quot;;<br>person1.Age = 24;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>结构化绑定</li></ul><p>需要确保项目属性设置为C++17才行，C++11和C++14不支持此属性，编译通过不了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tuple&gt;</span></span><br><br><span class="hljs-function">std::tuple&lt;std::string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">CreatePerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span>&#123; <span class="hljs-string">&quot;Cherno&quot;</span>, <span class="hljs-number">24</span> &#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> [name, age] = <span class="hljs-built_in">CreatePerson</span>();<br>std::cout &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; age &lt;&lt; std::endl;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="76-How-to-deal-with-OPTIONAL-Data-in-C-C-17"><a href="#76-How-to-deal-with-OPTIONAL-Data-in-C-C-17" class="headerlink" title="76. How to deal with OPTIONAL Data in C++(C++17)"></a>76. How to deal with OPTIONAL Data in C++(C++17)</h1><p>很多时候，我们有一个返回数据的函数，比方说我们正在读取一个文件，但是如果这个文件不能被读取会发生什么？它可能不存在，或者是数据不是我们期望的格式，我们仍然需要从函数中返回一些东西。在这个特定的情况下，可能只会返回一个空字符串，但这没有多大意义。意思是，如果读取文件是空的， 我们应该有办法看到数据是否存在。</p><p>这就是要用到<code>std::optional</code>的地方了，这是 C++17 标准的新东西。</p><ul><li>不使用optional</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-function">std::string <span class="hljs-title">ReadFileAsString</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; filepath, <span class="hljs-type">bool</span>&amp; outSuccess)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">std::ifstream <span class="hljs-title">stream</span><span class="hljs-params">(filepath)</span></span>;<br><span class="hljs-keyword">if</span> (stream)<br>&#123;<br>std::string result;<br><span class="hljs-comment">// read file</span><br>stream.<span class="hljs-built_in">close</span>();<br>outSuccess = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br>outSuccess = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> std::<span class="hljs-built_in">string</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">bool</span> fileOpenedSuccessfully;<br>std::string data = <span class="hljs-built_in">ReadFileAsString</span>(<span class="hljs-string">&quot;data.txt&quot;</span>, fileOpenedSuccessfully);<br><span class="hljs-keyword">if</span> (fileOpenedSuccessfully) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用optional的情况</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;optional&gt;</span></span><br><br>std::optional &lt;std::string&gt; <span class="hljs-built_in">ReadFileAsString</span>(<span class="hljs-type">const</span> std::string&amp; filepath)<br>&#123;<br><span class="hljs-function">std::ifstream <span class="hljs-title">stream</span><span class="hljs-params">(filepath)</span></span>;<br><span class="hljs-keyword">if</span> (stream)<br>&#123;<br>std::string result;<br><span class="hljs-comment">// Read file</span><br>stream.<span class="hljs-built_in">close</span>();<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">return</span> &#123;&#125;;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::optional&lt;std::string&gt; data = <span class="hljs-built_in">ReadFileAsString</span>(<span class="hljs-string">&quot;data.txt&quot;</span>); <span class="hljs-comment">// 可以auto</span><br><span class="hljs-keyword">if</span> (data)<span class="hljs-comment">// 本来可以写data.has_value()，但是data对象有一个bool运算符，所以这样写更简洁</span><br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;file read successfully\n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;file could not read\n&quot;</span>;<br>&#125;<br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="77-Multiple-TYPES-of-Data-in-a-SINGLE-VARIABLE-in-C"><a href="#77-Multiple-TYPES-of-Data-in-a-SINGLE-VARIABLE-in-C" class="headerlink" title="77. Multiple TYPES of Data in a SINGLE VARIABLE in C++"></a>77. Multiple TYPES of Data in a SINGLE VARIABLE in C++</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;variant&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::variant&lt;std::string, <span class="hljs-type">int</span>&gt; data;<br>data = <span class="hljs-string">&quot;Cherno&quot;</span>;<br>std::cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;std::string&gt;(data) &lt;&lt; std::endl;<br>data = <span class="hljs-number">2</span>;<br>std::cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-type">int</span>&gt;(data) &lt;&lt; std::endl;<br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个和<code>std::optional</code>很像，它的作用是让我们不用担心处理的确切数据类型， 只有一个变量放在那儿，我们之后再去考虑它的具体类型。它允许你列出所有可能的类型，然后你可以决定它将是什么，如果你想的话可以把它重新赋值给任意类型，这也是你创建可能有多个类型的变量的一种方式。</p><h1 id="78-How-to-store-ANY-data-in-C-C-17"><a href="#78-How-to-store-ANY-data-in-C-C-17" class="headerlink" title="78. How to store ANY data in C++(C++17)"></a>78. How to store ANY data in C++(C++17)</h1><p>[78 如何存储任意类型的数据 - cherno-cpp-notes (nagi.fun)](<a href="https://nagi.fun/Cherno-CPP-Notes/51-100/78">https://nagi.fun/Cherno-CPP-Notes/51-100/78</a> How to store ANY data in C%2B%2B&#x2F;)</p><h1 id="79-How-to-make-C-run-FASTER-with-std-async"><a href="#79-How-to-make-C-run-FASTER-with-std-async" class="headerlink" title="79. How to make C++ run FASTER (with std::async)"></a>79. How to make C++ run FASTER (with std::async)</h1><p>通过多线程来提高性能！</p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MY YEAR 2023</title>
    <link href="/blog/post/MyLife/MYYEAR2023/"/>
    <url>/blog/post/MyLife/MYYEAR2023/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是我2023年的年度总结，从现在开始写可能是有点儿晚了，今年年底的一些事情比较多，一直没早开始做年度总结，从今天开始，抽出点儿时间来对这一年做一个总结和回顾，也为明年立几个Flag🚩！</p><p>&emsp;&emsp;2023年被非常明确地划分为了两部分，前半部分是本科生活的结束，后半部分是研究生生活的开始。其实说起来，我每年的年底去做总结这个“固定环节”也是从本科的时候开始做的，非常庆幸地是我现在还在坚持。前几年的时候，我还会剪辑一个视频，但是今年我觉得还是不剪辑视频了吧，一是这段时间要做事情比较多，而剪辑视频要做的工作比较多，我现在又没有太多的时间；二是今年没怎么拍过什么东西，都是一些照片什么的，也不太好生成一个视频。于是，今年我就以长文的形式来呈现这一年吧！</p><h1 id="一月-🧨"><a href="#一月-🧨" class="headerlink" title="一月 🧨"></a>一月 🧨</h1><p>&emsp;&emsp;因为22年十二月疫情放开，所以这个寒假算是从十二月中旬便开始了，这是一个非常长的寒假，到开学的时候发现寒假有足足十周正好七十天的时间，好久好久没有这么长的假期了。2023年1月1日，这一天很平淡，没有像之前一样去看海上日出🌅，因为确实不是很方便。一月的第一周如22年底的日子一样，每天都在家里，在床上躺着、在沙发上躺着、躺着看手机、躺着看电视、看看书、玩玩游戏……就是没怎么学习。每天都在玩，却也玩的不开心，因为有毕设的任务在，每天玩的时候担心毕设不知道怎么做，看论文的时候看不进去想看手机想玩。一月的第二周我哥问我有没有空跟他一起去送牛奶，每天闷在家里也很枯燥，我也想出去看看，于是这一周就跟着我哥给各个乡镇的超市配送牛奶🥛。因为临近春节，各个超市在为过年的时候走亲访友带的牛奶而备货，所以这段时间需要给各个超市配送一些牛奶。每天的早上六点多起床，七点出发，到下午四点回公司仓库，轻点库存，到仓库下明天的订单，然后拉货装货，晚上七点半下班。因为主要是体力活嘛，所以回家的时候就差不多瘫倒在床上了。总闷在家里总是不好的，只要出去又能有收获。</p><div class="note note-primary">            <ol><li>工作不容易，赚钱不容易，要好好珍惜赚来的每一分钱；参透要做的工作，圆滑一点儿，机灵一点儿，有眼力见一点儿，毕竟不管怎么样对自己来说都得得好好考虑自己的利益。</li><li>要有自己的想法，不要随大流、人云亦云；要有自己的选择，不要让别承担这个帮你选择的这个压力；</li><li>男人在家里要勤快一点儿，要会做饭，这一点儿向我哥学习一下，每天下班回来做好饭，等着我嫂子回来一起吃饭。</li></ol>          </div><p>&emsp;&emsp;跟我哥配送牛奶也就送了一周的时间，这一周时间一些大超市也就备完货了后面的工作也就没有那么重了，并且天气很冷了，所以我就回去了。回家后，因为前段时间搬送牛奶太累了，在家天天躺着睡觉💤。这个月还有一个事情就是，在家里跟自己家的一只小狗儿玩🐕，让狗给咬到了。其实也不是小狗咬我吧，是一只很小很小的狗，我在捧着的时候，狗狗张着嘴巴，我的手碰到了尖尖的牙齿上了，被划破了一点点儿外皮。不过这种事情还是不敢怠慢，还是去打了疫苗💉。医生判定为二级暴露，要打狂犬疫苗2+1+1，不需要免疫球蛋白。在打完第一针疫苗后，第二天早上开始发烧🤒，高烧到39℃，给我整得可难受了，退烧之后就没事了。因为疫情的放开，家里人也都新冠感染了一遍，但是我并没有被感染，反而是打完狂犬疫苗后的免疫反应让我高烧了一下。</p><p>&emsp;&emsp;1月22日是春节，跟每年都一样，感慨一下“没有年味了”。在外上班的人回到家里，过个春节就急急忙忙地赶回去；见见在外上学&#x2F;上班的朋友们，吃吃饭，聊聊天，聚一聚；哄哄小孩，跟家里的小孩儿们放放烟花🧨，找回一下童年的感觉，我小时候的时候可爱放鞭炮了，从寒假开始就放鞭炮，一直放到寒假结束开学的时候。今年大家聚在一起也思考了一些事情，和我同龄的人中，现在大部分都在上班了，有的的专科毕业开始上班了，有的是今年夏天本科毕业就准备去上班了，也就有不多的朋友们跟我一样还要继续读书。读书的我也会羡慕他们已经开始赚钱了，上班的他们也羡慕我还在学习继续读书，何尝不是一种围城呢！这个春节，也见过一些亲戚，学习一下酒桌文化，在酒桌上也谈一下事情，他们说着我学习多好多好，未来多好多好，可我对我的未来依然很迷茫呀，我也不知道我要走什么样的路，我也不知道我选的这条路我要怎么走😫。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230109_075003.jpg" alt="清晨尚未落下的月亮"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230111_172758.jpg" alt="牛奶配送工👦"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230110_181402.jpg" alt="牛奶配送工👦"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230121_121822.jpg" alt="哄孩子"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230127_183234.jpg" alt="哄孩子"></div></div></div><h1 id="二月-🏫"><a href="#二月-🏫" class="headerlink" title="二月 🏫"></a>二月 🏫</h1><p>&emsp;&emsp;春节过完，转眼就到了二月，时间很快，也就快要开学了，假期还剩三周的时间。这个假期玩的时间也挺多的了，也该学习一下了！春节的嘈杂也趋于平静了，我也开始准备毕业设计的东西了，读论文、读代码……</p><p>&emsp;&emsp;众所周知，假期的最后一周的时间已经不是假期了，这段时间我被开学的焦虑充斥着，玩也玩得不安心，学习也学得不自在，就是浑身各种难受！一想到在家的时间是那么无忧无虑，而到学校之后又有好多事情需要处理，就非常不想开学。假期的最后一周是在寿光市里度过，假期的最后一天晚上去看了《流浪地球2》，然后跟晓瑾一起吃了饭，聊了聊夏令营，本科的生活，我的朋友，她的朋友，父母家人，聊人生谈理想……返校的那一天去了潍坊，跟振宇一起吃了饭，然后一起去坐高铁返校了。</p><p>&emsp; &emsp; 这是一个非常长的假期，在这个假期里经历了一些事情，有思考，有感悟，有行动，也有遗憾……</p><div class="note note-light">            <p>满意的地方</p><ol><li>这个假期其实学到了很多，只要不在家去外面，多出去与人交流，就一定会有收获；</li><li>要勇敢一点儿，家人不能帮你挡下所有的事情，要慢慢学着去独当一面；</li><li>有几个之心的朋友，要多跟朋友们交流；</li><li>看了几部很有意义的电影，读了几本有意义的书！</li></ol><p>不满意的地方</p><ol><li>太懒了，不干活，不去主动找人玩，在家没有帮着刷碗扫地拖地；没有学着做饭，包饺子，炒菜，太笨了，别人都会啊，我也需要会啊，这是养活自己最起码的本领啊；</li><li>吃太多，不运动，一坐就坐一天；</li><li>联系朋友不多，不够主动；</li><li>没做毕设，没读书，没看单词，没写日记，没复习功课；</li><li>没有帮着父母干活，对家人的语气有时候也不好。</li></ol>          </div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230218_204655.jpg" alt="晚上吃完饭后看到了刮刮乐，随手买了一样还中了50块钱！"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230209_170344.jpg" alt="哄孩子"></div></div></div><p>&emsp;&emsp;开学后的第一天第一件事先是补上了今年的海上日出🌅！因为宿舍本来就是海景房，所以早上稍早一点儿起床，就在楼道里等待着太阳的升起了！寒假在家待了七十天，整个人的体重也达到了目前的最高峰，93公斤！一百八十多斤的体重确实的大体重了，但毕竟我身高挺高的，所以我的朋友们也没有看出来我重了这么些！但毕竟BMI还是有一点点儿超重了，所以开学后也立下了减重的flag🚩！晨走，跳绳，夜跑也都安排上了！</p><p>&emsp;&emsp;疫情全面放开之后，在学校也终于不用每天都做核酸了，也不用每天都收到关于疫情的各种通知和推送了，在我本科最后的一个学期，疫情终于”结束“了😌！同学们再次相见后，都谈起假期在家新冠病毒肆虐的种种场景，很多很多人都在这一波感染过一次，感染过新冠病毒之后，身体或多或少都受到了一些影响，或多或少都有一些疲惫的感觉。虽然这次我并没有感染新冠，但我知道新冠并没有消失，终究是会被感染的！因为这学期任务并不多，数算下来就只有毕业设计和上学期推迟到现在的期末考试，感觉任务并不繁重，所有立下了一个flag🚩，大学本科的最后一个学习，要注意健康！</p><blockquote><p>仗着自己年轻，总是胡作为非，老了会后悔的。正好返校后的这个大四学期没有课，只有一个期末考试和毕设，学习压力没有那么大，空余时间也不少，去做一点点改变吧。</p><div class="note note-info">            <ol><li>早睡早起，一日三餐。少油少肉少盐少糖，多蛋白多青菜多水果多开水。</li><li>不长时间连续看屏幕，不长时间高音量带耳机，不长时间坐那儿一动不动。</li><li>早上去晨走，晚上去夜跑。去和朋友们约羽毛球、乒乓球、篮球、足球……<blockquote></blockquote></li></ol>          </div></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230220_064913.jpg" alt="海上日出🌅"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230220_065346.jpg" alt="海上日出🌅"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230220_065553.jpg" alt="海上日出🌅"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230220_065619.jpg" alt="海上日出🌅"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230222_080032.jpg" alt="每天早上晨走的时候，总能够觉得学习的教学综合楼像一只大螃蟹"></div></div></div><h1 id="三月-💯"><a href="#三月-💯" class="headerlink" title="三月 💯"></a>三月 💯</h1><p>&emsp;&emsp;三月份开始，首先面对的事情就是本科毕业设的开题和期末考试了。根据假期看的一些论文和方法，把毕设开题完成了；复习了一两周的时间，也顺利通过了期末考试，至此，本科期间所有的考试都结束了！期末考试结束后，就全面投入了毕设的工作之中了，又回到了每天跟小黄和燕子一起泡图书馆的日子了，每天都按部就班地早八晚十到图书馆做毕设。</p><p>&emsp;&emsp;开始做毕设之后每天心情都很一般，心态起起伏伏的，有时候心态挺爆炸的！读论文，找代码，跑代码……一直在重复这个过程。每天睡觉也睡得不太安稳，睡梦之中迷迷糊糊的都是论文和代码的各种事情。做毕设的这段时间也一直在折腾电脑，虽然同样是很复杂、很折腾，但相比于做毕设，可能就是喜欢这种一头扎进去的感觉吧，而毕业设计呢，虽然做的东西我还算感兴趣，但是因为不太懂这方面，就很难进入状态，所以就时常会有心态上的起起伏伏。但总的来说，三月底的时候毕设的一些方法已经确定了，一些实验也在逐步的开始进行了。</p><p>&emsp;&emsp;三月里不只有考试和毕设，在三月份里我依然在减重，晚上从图书馆回去的时候回去跳跳绳和跑跑步，月初的时候88公斤，月底的时候已经83公斤了，一个月减了十斤，效果还不错；报名了一个企业参观的活动，去青岛鼎信通讯参观了一下，之前毕业的一些学长学姐都去了鼎信工作，一只听说过这个公司，但是并不了解。参观过后发现，青岛鼎信应该只是一个小厂吧，企业园区并不到，有办公楼、员工宿舍楼和生产工厂，其中的生产工厂就是工业产品生产的流水线。中午在鼎信的员工餐厅吃了午饭，虽然只是小厂，有员工餐厅这一点确实还是不错的，不过吃的东西嘛就很一一般般了，很不好吃！所以这次参观也给自己一些启发吧，以后工作还是要考虑一些企业的规模，园区的规模，不要过于相信宣发，最好的话还是要能去实习真正体验体验员工的真实情况；三月底还跟小黄去爬了大珠山，春暖花开，天气晴朗，出去走走~</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230313_175540.jpg" alt="在图书馆的电脑上完成了毕设"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230316_110450.jpg" alt="笔记本电脑再升级，换上了1TB+1TB SSD，还装上了Windows 11 Pro"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230319_140047.jpg" alt="一边是Ubuntu ToGo, 一边是远程控制的宿舍的笔记本电脑"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230329_141559.jpg" alt="换上了32GB的内存，顺便换了新硅脂，结果发现风扇不转了，后来发现原来是一场大乌龙"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230317_094747.jpg" alt="参观一下鼎信"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230317_101835.jpg" alt="海大人在鼎信"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230317_170231.jpg" alt="青岛胶州湾跨海大桥上的日落余晖"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1680262291287.jpg" alt="大珠山上小黄拍的我"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230331_113126.jpg" alt="大珠山上我拍的小黄"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230331_085451.jpg" alt="大珠山上我拍的小黄"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230331_103623.jpg" alt="大珠山上我拍的小黄"></div></div></div><h1 id="四月-📑"><a href="#四月-📑" class="headerlink" title="四月 📑"></a>四月 📑</h1><p>&emsp;&emsp;刚进四月就生了一场大病，起因是买了一盒山楂，然后一次性吃了太多山楂了，吃太多的山楂吃的胃里难受，特别想吐，于是就在宿舍待了一周的时间，这个一周时间里刷完了大火的《黑暗荣耀》，还玩了玩《无主之地2》这个游戏，这个游戏还是很不错的！</p><p>&emsp;&emsp;身体恢复了之后就又回到了图书馆，开始了没日没夜的写代码、跑程序、处理数据，然后就是写毕业论文……在四月底，论文初稿完成了！</p><p>别问为什么我在做这么奇怪的动作，问就是手已经废了！因为长时间握鼠标，手腕特别特别疼！正常的手腕能像内弯九十度吧，但我只能弯到图中的这个程度了😭不过好在休息了几天之后就恢复了😥</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230415_183554.jpg" alt="看了一场学校组织的晚会"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230421_184555.jpg" alt="去听了听草坪上的音乐节"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230427_182857.jpg" alt="学校的这个肉夹馍好好吃呀！"></div></div></div><h1 id="五月-💻"><a href="#五月-💻" class="headerlink" title="五月 💻"></a>五月 💻</h1><p>&emsp;&emsp;五月是比较轻松的，但也有一些焦虑。</p><p>&emsp;&emsp;毕业设计做完了，毕业论文写完了，根据老师的要求把论文修修改改；参加了毕业论文的答辩；读一读论文，看一看小说；在GitHub冲浪；跟好友们打一打羽毛球，去灵山岛吹吹海风、看看海景；玩一玩《无主之地2》；还追了一些《漫长的季节》这部很不错的剧……五月里唯一焦虑的事情就是论文外审抽到的数字跟我的学号最后一位一样，于是又多了半个月的时间的等待，等结果出来之后，一切才算是尘埃落定。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230518_111711.jpg" alt="准备毕业论文的答辩了"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230518_211530.jpg" alt="准备毕业论文的答辩了"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230521_062941.jpg" alt="出发！去灵山岛咯"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230521_100658.jpg" alt="吹吹海风"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230521_100150.jpg" alt="看看小花"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230524_224221.jpg" alt="读读小说"></div></div></div><h1 id="六月-🎓"><a href="#六月-🎓" class="headerlink" title="六月 🎓"></a>六月 🎓</h1><p>&emsp;&emsp;在花了些时间整理完毕业论文的归档材料和帮老师查验材料的工作后，事情终于结束了。距离毕业还有一段时间，想着趁着这段时间去西安旅游一下，见一下朋友，见一下老师，看一看西工大，游一游西安的景点……可是一切都准备好的时候，我新冠阳性了，因为这是我第一次新冠阳性，所以症状很重，所以没办法去西安了。所以就回家待了一段时间，再回到学校的时候就要准备毕业典礼了。</p><p>&emsp;&emsp;六月初的那段时间里，学校陆陆续续出现了一些新冠阳性，一天早上起床的时候我就感觉到身体不太舒服，但我也没有多想什么，可随着出发去西安的日子越来越近，我的情况也越来越严重，开始了高烧，但我那时候也没忘新冠那方面去想，以为就是感冒而已罢了，所以还是踏上了去机场的路。在机场附近的酒店住了一晚上之后，早上起来发高烧，嗓子痛的说不出话来了，我想“坏了，西安这是去不成了！”去了机场，在山东航空的前台客服那里跟姐姐说明了情况，去做了核酸，结果是阳性。最后姐姐给我申请了病退，机票全额返还了，所以西安之旅也就这样泡汤了。在学校待了几天，发了几天的高烧，嗓子疼的吃不下东西。症状减轻了一些后，我就回了家，在家待了一段时间，后来四六级考试的时候我也还没返校，就也放弃了。随着发高烧和嗓子疼的情况逐渐减轻后，咳嗽的症状开始加剧。咳嗽的症状持续了好久好久，一直在咳嗽地感觉肺都要咳出来了，整个胸腔咳嗽的呼吸都痛，特别想在海里泡了很久，水压压着胸腔一样。</p><p>&emsp;&emsp;在家里待了一段时间之后，再回到学校就是毕业的事宜了。收拾收拾东西，邮寄行李；跟同学们拍拍合照，参加毕业典礼；再跟朋友们聚一聚餐，最后在车站就各奔东西了……</p><p>&emsp;&emsp;毕业的那段时间特别喜欢听赵雷的《署前街少年》这首歌，一听到这旋律总有点说不出来的伤感。毕业之后，有些人可能以后再也见不到了、毕业也不是结束，还要去更远的地方读研究生，想到这里又觉得很迷茫……</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230606_175654.jpg" alt="以为只是感冒而已，依然拖着疲惫的身躯去了机场。第二天早上起床的时候，发起了高烧，嗓子痛得已经说不出话来了。"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1687446896219.jpg" alt="我的好朋友们"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/2023_06_25_14_53_IMG_6516.JPG" alt="我的好朋友们"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230623_175709.jpg" alt="我的好朋友们"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230623_180227.jpg" alt="我的好朋友们"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1687857074429.jpg" alt="拿到了毕业证和学位证"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1687833397697.jpg" alt="再见青岛~"></div></div></div><h1 id="七月-🏠"><a href="#七月-🏠" class="headerlink" title="七月 🏠"></a>七月 🏠</h1><p>&emsp;&emsp;假期见了很多许久未见的老友，谈起了高中生活，谈起了大学生活，相约一起去见一下高中班主任，一起去爬泰山。跟发小组装了一台天文望远镜，带着天文望远镜半夜出去，熬了好几次大夜，拍了几次星空……不过一直玩也没什么意思，本来想着找个兼职来着，后来也一直没有找到，就一直在家荒废着了。假期没事可做的日子可太无聊了，既然没什么事情做那就不如学习吧。市里的几个图书馆没有什么学习的位置，大学的图书馆没有校园卡进不去，高中更是没法进，于是就去了付费自习室，结果学了几天就待够了，就也不再去学习了。在付费自习室待了几天，有这么几个感触：首先是学习氛围真的很重要，我去的那个付费自习室人比较少，我那一排都没人，就我自己在哪里，所以学着学着就思绪飘了，然后就进入不了学习状态了；夏天的中午真的是太热了，每天中午出去吃饭都要有很强的意志力，周围也没有多少吃饭的地方，吃饭也是个大问题……</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230702_202150.jpg" alt="知了猴"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPUluqutongzhishu_6.jpg" alt="收到了心心念念的录取通知书了"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230707_175736.jpg" alt="爬一爬泰山，看一看日出"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230706_215959.jpg" alt="爬一爬泰山，看一看日出"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230707_042421.jpg" alt="爬一爬泰山，看一看日出"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230704_234754.jpg" alt="搞一搞天文望远镜"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1689465785629.jpg" alt="拍一拍星空"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1689465790411.jpg" alt="拍一拍星空"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230719_104259.jpg" alt="在家里闲的没事坐，还去自习室“学习”了两天"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230723_131023.jpg" alt="哄一哄小孩儿"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230725_193058.jpg" alt="晚上骑骑自行车，看一看寿光的角角落落"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230725_214107.jpg" alt="晚上骑骑自行车，看一看寿光的角角落落"></div></div></div><h1 id="八月-🏠"><a href="#八月-🏠" class="headerlink" title="八月 🏠"></a>八月 🏠</h1><p>&emsp;&emsp;八月份一直都在寿光待着，每天的生活都是早上起床，然后去地下停车场散散步听听书(外面实在是太晒，一点儿都不想出去)，下午在电脑前看看剧，晚上吃完饭就骑车出去到处逛一逛，一晚上骑车骑个三四十公里，夏天的晚上吹着风还是很舒服的。这个月里还学着炒菜了，自己在家做了几次饭……</p><p>&emsp;&emsp;八月底到了也就意味着假期即将结束了，于是就开始着手准备起开学的事情了……</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230814_212335.jpg" alt="晚上骑骑自行车，看一看寿光的角角落落"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230815_220157.jpg" alt="晚上骑骑自行车，看一看寿光的角角落落"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230817_234842.jpg" alt="下一下五子棋（本来是要下围棋的，但围棋一直没学会）"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230828_075451.jpg" alt="出发！去西安了，准备开学了"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230830_092502.jpg" alt="到一个新地方的第一件事是看看博物馆，那就看看西工大的校史馆吧！"></div></div></div><h1 id="九月-🏫"><a href="#九月-🏫" class="headerlink" title="九月 🏫"></a>九月 🏫</h1><p>&emsp;&emsp;九月份就正式开学了，开学的第一个月还是比较轻松的，所选的课都还没有排，老师也没有安排很多任务，所以这个月主要还是在适应新的环境。九月这个月里过的还是非常愉快的，动不动就参加文娱活动和干饭😁。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230902_084313.jpg" alt="新生开学典礼"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230914_165403.jpg" alt="分配的教研室的工位"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_101733.jpg" alt="拍一拍西工大"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230903_092214.jpg" alt="拍一拍西工大"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_102442.jpg" alt="拍一拍西工大"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_102253.jpg" alt="拍一拍西工大"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230903_210211.jpg" alt="拍一拍西工大"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230829_180705.jpg" alt="拍一拍西工大"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_094219.jpg" alt="拍一拍西工大"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_095514.jpg" alt="拍一拍西工大"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230903_091618.jpg" alt="拍一拍西工大"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230930_141822.jpg" alt="（2023.9.30）沣河河畔的露天烧烤"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230930_150215.jpg" alt="（2023.9.30）沣河河畔的露天烧烤"></div></div></div><h1 id="十月-👨‍🏫"><a href="#十月-👨‍🏫" class="headerlink" title="十月 👨‍🏫"></a>十月 👨‍🏫</h1><p>&emsp;&emsp;十月份开始，要上的课变得多了，每天又开始固定的生活。在英文课上认识了好多来自巴基斯坦等国家的朋友，虽然交流起来不那么顺畅，但我还是非常 勇敢地与她们交流做朋友。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231030_153600.jpg" alt="（2023.10.30）从学院出来，看到图书馆方向好美呀"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231024_201631.jpg" alt="IMG_20231024_201631"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1697894304151.jpg" alt="mmexport1697894304151"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231022_152804.jpg" alt="IMG_20231022_152804"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231025_123409.jpg" alt="IMG_20231025_123409"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1697382138844.jpg" alt="（2023.10.15）教研室的火锅"></div></div></div><h1 id="十一月-👨‍🏫"><a href="#十一月-👨‍🏫" class="headerlink" title="十一月 👨‍🏫"></a>十一月 👨‍🏫</h1><p>&emsp;&emsp;因为十二月初两门数学课就要期末考试了，所以在十一月底就开始了两门数学课的期末复习，这段时间还是比较忙碌了，</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1698913083843.jpg" alt="（2023.11.02）摸鱼🐟~"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231111_134046.jpg" alt="（2023.11.11）看看陕师大长安校区"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231115_131952.jpg" alt="（2023.11.15）收拾一下桌子，把笔记本电脑收起来了，多一些桌面空间。"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231111_195417.jpg" alt="（2023.11.11）在乐高店看到了好可爱的哈利波特的小玩偶"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1699770801864.jpg" alt="（2023.11.11）西安初雪，不过长安校区没雪，友谊校区下了好大的雪"></div></div></div><h1 id="十二月-💯"><a href="#十二月-💯" class="headerlink" title="十二月 💯"></a>十二月 💯</h1><p>&emsp;&emsp;十二月初先完成了两门数学课的期末考试！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231215_125308.jpg" alt="（2021.12.15）下雪啦"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231223_135719.jpg" alt="带博雯同学来西工大看艺术展，艺术作品还得学艺术的来欣赏"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1703562109068.jpg" alt="NPU 每日一图片"></div></div></div><h1 id="总结-🌸"><a href="#总结-🌸" class="headerlink" title="总结 🌸"></a>总结 🌸</h1><p>&emsp;&emsp;最近特别喜欢鲁迅先生的这段话：</p><blockquote><p>愿中国青年都摆脱冷气，只是向上走。<br>不要听自暴自弃者的话。<br>能做事的做事，能发声的发声。<br>有一份光，发一份热。<br>就令萤火一般，也可以在黑暗里发一点光。<br>不必等候炬火。</p></blockquote><p><a href="https://www.emojiall.com/zh-hans">Emoji大全 | Emoji表情符号词典 📓 | EmojiAll中文官方网站</a></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GithubPages</title>
    <link href="/blog/post/Tools/GithubPages/"/>
    <url>/blog/post/Tools/GithubPages/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-Github"><a href="#Git-Github" class="headerlink" title="Git &amp; Github"></a>Git &amp; Github</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) PS C:\Users\NPU481&gt; git -v<br>git version 2.42.0.windows.2<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) PS C:\Users\NPU481&gt; git config --global user.name murphyhoucn<br>(base) PS C:\Users\NPU481&gt; git config --global user.email cosmicdustycn@outlook.com<br>(base) PS C:\Users\NPU481&gt; git config user.name<br>murphyhoucn<br>(base) PS C:\Users\NPU481&gt; git config user.email<br>cosmicdustycn@outlook.com<br><br>(base) PS C:\Users\NPU481&gt; git config --global  --list<br>(base) PS C:\Users\NPU481&gt; git config --system  --list<br>(base) PS C:\Users\NPU481&gt; git config --<span class="hljs-built_in">local</span>  --list<br><br>(base) PS C:\Users\NPU481&gt; ssh-keygen -t rsa -C <span class="hljs-string">&quot;cosmicdustycn@outlook.com&quot;</span><br><br>(base) PS C:\Users\NPU481&gt; ssh -T git@github.com<br>The authenticity of host <span class="hljs-string">&#x27;github.com (20.205.243.166)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM.</span><br><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="hljs-string">Warning: Permanently added &#x27;</span>github.com,20.205.243.166<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span><br><span class="hljs-string">Hi murphyhoucn! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><p><code>以管理员身份运行Terminal</code></p><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><blockquote><p><a href="https://blog.csdn.net/qq_42006801/article/details/124830995">Node.js安装与配置（详细步骤）_nodejs安装及环境配置-CSDN博客</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) PS C:\Users\NPU481&gt; node -v<br>v20.10.0<br>(base) PS C:\Users\NPU481&gt; npm -v<br>10.2.3<br><br><br>(base) PS C:\Users\NPU481&gt; npm config get prefix<br>C:\Users\NPU481\AppData\Roaming\npm<br>(base) PS C:\Users\NPU481&gt; npm config get cache<br>C:\Users\NPU481\AppData\Local\npm-cache<br><br><br>(base) PS C:\Users\NPU481&gt; npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;C:\Program Files\nodejs\node_global&quot;</span><br>(base) PS C:\Users\NPU481&gt; npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;C:\Program Files\nodejs\node_cache&quot;</span><br><br><br>(base) PS C:\Users\NPU481&gt; npm config get prefix<br>C:\Program Files\nodejs\node_global<br>(base) PS C:\Users\NPU481&gt; npm config get cache<br>C:\Program Files\nodejs\node_cache<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231210091044750.png" alt="image-20231210091044750"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前镜像</span><br>(base) PS C:\Users\NPU481&gt; npm config get registry<br>https://registry.npmjs.org/<br><br><span class="hljs-comment"># 设置淘宝镜像</span><br>(base) PS C:\Users\NPU481&gt; npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br>(base) PS C:\Users\NPU481&gt; npm config get registry<br>https://registry.npm.taobao.org<br><br><span class="hljs-comment"># 恢复为原镜像</span><br>(base) PS C:\Users\NPU481&gt; npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org<br>(base) PS C:\Users\NPU481&gt; npm config get registry<br>https://registry.npmjs.org<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) PS C:\Users\NPU481&gt; npm config get proxy<br>null<br>(base) PS C:\Users\NPU481&gt; npm config <span class="hljs-built_in">set</span> proxy=http://127.0.0.1:4780<br>(base) PS C:\Users\NPU481&gt; npm config <span class="hljs-built_in">set</span> proxy=https://127.0.0.1:4780<br>(base) PS C:\Users\NPU481&gt; npm config get proxy<br>https://127.0.0.1:4780<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_40738764/article/details/134263735">在Windows命令提示符（cmd）中设置代理的方法（可解决 git &#x2F; pip 等指令网络请求失败的情况）_cmd 代理-CSDN博客</a></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) PS D:\Github\murphyhoucn\murphuhoucn.github.io&gt; npm install -g hexo-cli<br><br>added 54 packages <span class="hljs-keyword">in</span> 5s<br><br>(base) PS D:\Github\murphyhoucn\murphuhoucn.github.io&gt; hexo -v<br>hexo-cli: 4.3.1<br>os: win32 10.0.19045<br>node: 20.10.0<br>acorn: 8.10.0<br>ada: 2.7.2<br>ares: 1.20.1<br><span class="hljs-built_in">base64</span>: 0.5.0<br>brotli: 1.0.9<br>cjs_module_lexer: 1.2.2<br>cldr: 43.1<br>icu: 73.2<br>llhttp: 8.1.1<br>modules: 115<br>napi: 9<br>nghttp2: 1.57.0<br>nghttp3: 0.7.0<br>ngtcp2: 0.8.1<br>openssl: 3.0.12+quic<br>simdutf: 3.2.18<br>tz: 2023c<br>undici: 5.26.4<br>unicode: 15.0<br>uv: 1.46.0<br>uvwasi: 0.0.19<br>v8: 11.3.244.8-node.25<br>zlib: 1.2.13.1-motley<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) PS D:\Github\murphyhoucn\murphuhoucn.github.io&gt;npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>高效工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>瞧瞧我对教研室的电脑干了些什么！</title>
    <link href="/blog/post/Tools/WorkingWithLabPC/"/>
    <url>/blog/post/Tools/WorkingWithLabPC/</url>
    
    <content type="html"><![CDATA[<h1 id="双系统安装与配置"><a href="#双系统安装与配置" class="headerlink" title="双系统安装与配置"></a>双系统安装与配置</h1><p>为LabPC购买了两个完全一样的480GB固态硬盘，在安装系统的时候，为了区分好系统是安装到了哪个盘里，首先是仅接入了一个SSD。当把Windows系统安装到这个SSD之后，再把另一个SSD接上，之后再去安装Ubuntu。因为在Ubuntu系统安装的分区时，能看到不同硬盘的标号，只要确定好哪个硬盘里安装好了Windows系统，在另外的一个空盘里进行分区和安装Ubuntu就好了。</p><h2 id="先安装Windows10"><a href="#先安装Windows10" class="headerlink" title="先安装Windows10"></a>先安装Windows10</h2><ul><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10">下载 Windows 10 (microsoft.com)</a></li><li><a href="https://rufus.ie/en/">Rufus - Create bootable USB drives the easy way</a></li></ul><p>之前装Windows系统的时候，我都喜欢使用官方的安装工具<code>MediaCreationTool_Win11_23H2</code>，用这个工具做一个U盘启动工具，但这次做U盘启动盘的时候总是报错，其实之前也遇到过了这个问题！遇到这个问题的话，可以下载Windows的镜像文件，然后用Rufus来制作U盘启动盘。</p><h2 id="再安装Ubuntu-20-04"><a href="#再安装Ubuntu-20-04" class="headerlink" title="再安装Ubuntu 20.04"></a>再安装Ubuntu 20.04</h2><ul><li>ubuntu-20.04.6-desktop-amd64.iso：<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/20.04/">Index of &#x2F;ubuntu-releases&#x2F;20.04&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></li><li><a href="https://rufus.ie/en/">Rufus - Create bootable USB drives the easy way</a></li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/ubuntu_image_2023-12-08-09-24-26.jpg" alt="分区"></p><table><thead><tr><th align="center">设备</th><th align="center">类型</th><th align="center">挂载点</th><th align="center">格式化？</th><th align="center">大小</th></tr></thead><tbody><tr><td align="center">&#x2F;dev&#x2F;sda1</td><td align="center">ext4</td><td align="center">&#x2F;</td><td align="center">√</td><td align="center">200GB</td></tr><tr><td align="center">&#x2F;dev&#x2F;sda2</td><td align="center">ext4</td><td align="center">&#x2F;boot</td><td align="center">√</td><td align="center">2GB</td></tr><tr><td align="center">&#x2F;dev&#x2F;sda3</td><td align="center">ext4</td><td align="center">&#x2F;tmp</td><td align="center">√</td><td align="center">20GB</td></tr><tr><td align="center">&#x2F;dev&#x2F;sda4</td><td align="center">ext4</td><td align="center">&#x2F;usr</td><td align="center">√</td><td align="center">80GB</td></tr><tr><td align="center">&#x2F;dev&#x2F;sda5</td><td align="center">ext4</td><td align="center">&#x2F;var</td><td align="center">√</td><td align="center">50GB</td></tr><tr><td align="center">&#x2F;dev&#x2F;sda6</td><td align="center">ext4</td><td align="center">&#x2F;home</td><td align="center">√</td><td align="center">100GB</td></tr><tr><td align="center">&#x2F;dev&#x2F;sda7</td><td align="center">swap</td><td align="center"></td><td align="center"></td><td align="center">20GB</td></tr></tbody></table><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231208211750504.jpg" alt="image-20231208211750504"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2023-12-08_12-46-32.jpg" alt="Snipaste_2023-12-08_12-46-32"></p><ul><li>磁盘0：KIOXIA 480GB ▶ Ubuntu 20.04</li><li>磁盘1：KINGSTON SSD</li><li>磁盘2：1TB HDD</li><li>磁盘3：KIOXIA 480GB ▶ Windows 10</li></ul><h2 id="双系统引导界面美化-修改默认启动项"><a href="#双系统引导界面美化-修改默认启动项" class="headerlink" title="双系统引导界面美化+修改默认启动项"></a>双系统引导界面美化+修改默认启动项</h2><blockquote><p><a href="https://blog.csdn.net/weixin_43002202/article/details/120951578">Windows11安装Ubuntu 20.04.3 LTS双系统（详细过程）| CSDN</a></p></blockquote><p>主题下载地址：<a href="https://www.gnome-look.org/p/1009236/">Grub-theme-vimix</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/ubuntu-vim-1080p.jpg" alt="ubuntu-vim-1080p"></p><p>在Ubuntu系统，按照如下的步骤使用该主题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压</span><br>$ tar xvJf Vimix-1080p.tar.xz<br><br><span class="hljs-comment"># 进入解压后的文件夹</span><br>$ <span class="hljs-built_in">cd</span> Vimix-1080p<br><br><span class="hljs-comment"># 安装</span><br>$ <span class="hljs-built_in">sudo</span> ./install.sh<br><br><span class="hljs-comment"># 修改启动设置</span><br>$ <span class="hljs-built_in">sudo</span> gedit /etc/default/grub<br><br><span class="hljs-comment"># 修改完成之后，对更改进行更新，将电脑重启后可看到更新后的主题效果</span><br>$ <span class="hljs-built_in">sudo</span> update-grub<br></code></pre></td></tr></table></figure><p>一般我们需要更改其中的 GRUB_DEFAULT（默认启动项：这个编号是你开机时看到的若干个启动项从上到下的依次编号，记住！编号是从0开始的，意思是，第一项是0，第二项是1，以此类推）、GRUB_TIMEOUT_STYLE（是否显示倒计时，hidden的属性表示不会显示倒计时，注释掉该行则显示倒计时）、GRUB_TIMEOUT（等待时间，单位是秒）。<br>按自身需求更改后，保存即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs grub"># If you change this file, run &#x27;update-grub&#x27; afterwards to update<br># /boot/grub/grub.cfg.<br># For full documentation of the options in this file, see:<br>#   info -f grub -n &#x27;Simple configuration&#x27;<br><br>GRUB_DEFAULT=2<br># GRUB_TIMEOUT_STYLE=hidden<br>GRUB_TIMEOUT=30<br>GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`<br>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;<br>GRUB_CMDLINE_LINUX=&quot;&quot;<br><br># Uncomment to enable BadRAM filtering, modify to suit your needs<br># This works with Linux (no patch required) and with any kernel that obtains<br># the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)<br>#GRUB_BADRAM=&quot;0x01234567,0xfefefefe,0x89abcdef,0xefefefef&quot;<br><br># Uncomment to disable graphical terminal (grub-pc only)<br>#GRUB_TERMINAL=console<br><br># The resolution used on graphical terminal<br># note that you can use only modes which your graphic card supports via VBE<br># you can see them in real GRUB with the command `vbeinfo&#x27;<br>#GRUB_GFXMODE=640x480<br><br># Uncomment if you don&#x27;t want GRUB to pass &quot;root=UUID=xxx&quot; parameter to Linux<br>#GRUB_DISABLE_LINUX_UUID=true<br><br># Uncomment to disable generation of recovery mode menu entries<br>#GRUB_DISABLE_RECOVERY=&quot;true&quot;<br><br># Uncomment to get a beep at grub start<br>#GRUB_INIT_TUNE=&quot;480 440 1&quot;<br>GRUB_THEME=&quot;/usr/share/grub/themes/Vimix/theme.txt&quot;<br></code></pre></td></tr></table></figure><h2 id="Ubuntu系统时间正确，Windows系统时间错误"><a href="#Ubuntu系统时间正确，Windows系统时间错误" class="headerlink" title="Ubuntu系统时间正确，Windows系统时间错误"></a>Ubuntu系统时间正确，Windows系统时间错误</h2><p>在Ubuntu系统中执行如下操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install ntpdate//在Ubuntu下更新本地时间<br><span class="hljs-built_in">sudo</span> ntpdate time.windows.com<br><span class="hljs-built_in">sudo</span> hwclock --localtime --systohc//将本地时间更新到硬件上<br></code></pre></td></tr></table></figure><h1 id="Ubuntu无法连接网络"><a href="#Ubuntu无法连接网络" class="headerlink" title="Ubuntu无法连接网络"></a>Ubuntu无法连接网络</h1><h2 id="有线网络-拨号上网"><a href="#有线网络-拨号上网" class="headerlink" title="有线网络-拨号上网"></a>有线网络-拨号上网</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npu481@npu481-H310M:~$ <span class="hljs-built_in">cat</span> /sys/class/net/enp5s0/carrier<br>1 <span class="hljs-comment"># 输入为1证明网线连接到了网口上了，证明硬件层面没有什么问题！</span><br><br><span class="hljs-comment"># 至于是不是代表着“有线网卡的驱动安装好了”，我也不清楚</span><br></code></pre></td></tr></table></figure><p>PC的有线网上网连接方式是拨号上网，所以我得先建立一个拨号的链接。<br>按照下面的操作，添加一个<code>DSL/PPPoE</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nm-connection-editor<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/ubuntu-2023-12-07-21-57-17.jpg" alt="image-20231207214319121"></p><ul><li><code>上网接口</code>即为网线，这里是<code>enp5s0</code></li><li><code>用户名</code>输入为上网账号，西工大的上网账号即为学号；</li><li><code>服务</code>，空着</li><li><code>密码</code>即为西工大的上网密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">sudo</span> apt-get update<br></code></pre></td></tr></table></figure><p>使用上面这种方法有一种问题是，每次开机之后电脑都没有网络，必须手动到网络设置中把有线网打开。</p><h2 id="pppoeconf"><a href="#pppoeconf" class="headerlink" title="pppoeconf"></a>pppoeconf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">sudo</span> apt-get install pppoeconf<br><span class="hljs-comment"># 按照提示，输入上网账号和秘密即可，以后就能自动拨号了。</span><br></code></pre></td></tr></table></figure><p>几个常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">npu481@npu481-H310M:~$ <span class="hljs-built_in">sudo</span> pon dsl-provider <span class="hljs-comment"># 联网</span><br>Plugin rp-pppoe.so loaded.<br>npu481@npu481-H310M:~$ <span class="hljs-built_in">sudo</span> poff <span class="hljs-comment"># 断网</span><br>npu481@npu481-H310M:~$ plog <span class="hljs-comment"># 在断网状态下查看日志</span><br>Dec  8 10:54:40 npu481-H310M pppd[9905]: Terminating on signal 15<br>Dec  8 10:54:40 npu481-H310M pppd[9905]: Connect <span class="hljs-keyword">time</span> 0.1 minutes.<br>Dec  8 10:54:40 npu481-H310M pppd[9905]: Sent 16471 bytes, received 24941 bytes.<br>Dec  8 10:54:40 npu481-H310M pppd[9905]: Connection terminated.<br>Dec  8 10:54:40 npu481-H310M pppd[9905]: Sent PADT<br>Dec  8 10:54:40 npu481-H310M pppd[9905]: Exit.<br>npu481@npu481-H310M:~$ <span class="hljs-built_in">sudo</span> pon dsl-provider <span class="hljs-comment"># 联网</span><br>Plugin rp-pppoe.so loaded.<br>npu481@npu481-H310M:~$ ifconfig <span class="hljs-comment"># 在联网状态下查看网络状态</span><br>enp5s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet6 fe80::8dd3:2a85:6bb9:f6e  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether 18:c0:4d:56:b9:c0  txqueuelen 1000  (以太网)<br>        RX packets 102253  bytes 132719087 (132.7 MB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 38868  bytes 5981990 (5.9 MB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;<br>        loop  txqueuelen 1000  (本地环回)<br>        RX packets 5850  bytes 526989 (526.9 KB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 5850  bytes 526989 (526.9 KB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>ppp0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1492<br>        inet 10.71.10.187  netmask 255.255.255.255  destination 10.68.0.1<br>        ppp  txqueuelen 3  (点对点协议)<br>        RX packets 56  bytes 7807 (7.8 KB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 66  bytes 10491 (10.4 KB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></td></tr></table></figure><p>通过pppoeconf设置后，每次开机就能自动拨号了，但这样出现了一个很奇怪的现象是，网络设置中，有线的那个选项没有了，并且出现了“有线未托管”的字样。这样用起来没有什么问题，但我并不知道出现这种问题的原因是什么！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231208211916678.jpg" alt="image-20231208211916678"></p><h2 id="无线网络和蓝牙"><a href="#无线网络和蓝牙" class="headerlink" title="无线网络和蓝牙"></a>无线网络和蓝牙</h2><p>USB无线网卡不知道怎么弄</p><p>后续：买的这个USB无线为网卡不支持Linux，蓝牙适配器也不支持Linx！好吧，就只能先这样将就这就这样用吧～</p><h1 id="在Ubuntu安装常用软件"><a href="#在Ubuntu安装常用软件" class="headerlink" title="在Ubuntu安装常用软件"></a>在Ubuntu安装常用软件</h1><h2 id="‘deb’软件"><a href="#‘deb’软件" class="headerlink" title="‘deb’软件"></a>‘deb’软件</h2><ul><li>Nutstore</li><li>Chrome</li><li>Sunlogin</li><li>VSCode</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">sudo</span> apt-get install -f <span class="hljs-comment"># </span><br>$ <span class="hljs-built_in">sudo</span> dpkg -i nautilus_nutstore_amd64.deb<br></code></pre></td></tr></table></figure><h2 id="CFW"><a href="#CFW" class="headerlink" title="CFW"></a>CFW</h2><ul><li>Step 1, install and setup</li></ul><blockquote><p>Github上的CFW已经删库了，唉！只能在网上找一找别人之前做到备份了.</p><ul><li><a href="https://archive.org/download/clash_for_windows_pkg">https://archive.org/download/clash_for_windows_pkg</a></li><li><a href="https://nessbyte.me/blog/clash/">https://nessbyte.me/blog/clash/</a></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar -zxvf Clash.for.Windows-0.20.39-x64-linux.tar.gz<br>$ <span class="hljs-built_in">mv</span> <span class="hljs-string">&#x27;Clash for Windows-0.20.39-x64-linux&#x27;</span> CFW<br>$ <span class="hljs-built_in">cd</span> CFW<br>$ ./cfw<br></code></pre></td></tr></table></figure><ul><li>Step 2, 在CFW的<code>Profiles</code>中加入自己的配置文件，然后在<code>Proxies</code>中选择一个节点</li><li>Step 3, 打开<code>Ubuntu 设置</code>，在<code>网络 - VPN - 网络代理</code>中加入配置。</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/ubuntu_2023-12-07_21-40-32.jpg" alt="image-20231207214319121"></p><h2 id="flameshot-火焰截图"><a href="#flameshot-火焰截图" class="headerlink" title="flameshot(火焰截图)"></a>flameshot(火焰截图)</h2><ul><li>安装和启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">sudo</span> apt install flameshot<br>$ flameshot gui<br></code></pre></td></tr></table></figure><ul><li>绑定键盘快捷键</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231208211830829.jpg" alt="image-20231208211830829"></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install git<br>git --version<br></code></pre></td></tr></table></figure><h1 id="Ubuntu用户"><a href="#Ubuntu用户" class="headerlink" title="Ubuntu用户"></a>Ubuntu用户</h1><ul><li><p>npu481</p><ul><li>登录密码：481481</li><li>sudo apt-get update：481481</li></ul></li><li><p>root</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">sudo</span> passwd root<br>$ npu481481 <span class="hljs-comment">#(不可见)</span><br>$ npu481481 <span class="hljs-comment">#(不可见)</span><br><br>$ su<br><br>---<br><br>npu481@npu481-H310M:~/下载$ <span class="hljs-built_in">ls</span><br>Clash.for.Windows-0.20.39-x64-linux.tar.gz  nautilus_nutstore_amd64.deb<br>code_1.84.2-1699528352_amd64.deb            SunloginClient_11.0.1.44968_amd64.deb<br>google-chrome-stable_current_amd64.deb<br>npu481@npu481-H310M:~/下载$ su<br>密码： <br>root@npu481-H310M:/home/npu481/下载# <span class="hljs-built_in">ls</span><br>Clash.for.Windows-0.20.39-x64-linux.tar.gz  nautilus_nutstore_amd64.deb<br>code_1.84.2-1699528352_amd64.deb            SunloginClient_11.0.1.44968_amd64.deb<br></code></pre></td></tr></table></figure><h1 id="Ubuntu开机卡在了紫屏，进入不了用户登陆界面"><a href="#Ubuntu开机卡在了紫屏，进入不了用户登陆界面" class="headerlink" title="Ubuntu开机卡在了紫屏，进入不了用户登陆界面"></a>Ubuntu开机卡在了紫屏，进入不了用户登陆界面</h1><p>不知道怎么回事，有一次从Ubuntu启动的时候卡在了紫屏进不来系统了。也不知怎么解决网上搜了搜说是内核的问题，也有说是英伟达驱动的问题，不知道怎么回事，于是重启之后，在开机时候选择了<code>Ubuntu的高级选项</code>，然后选了一个<code>Recovery</code>模式的内核，可以进入登陆界面，但是显示缩放不正常，并且双屏中只有一个屏幕有输出图像。这个现象和英伟达显示驱动有问题一模一样，所以就打开了<code>附加驱动</code>，果然当前的选择是<code>X.Org X Server</code>，重新选择了<code>Nvidia</code>驱动之后，然后重启，正常选择<code>Ubuntu</code>就能正常进入系统了。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231208211848886.jpg" alt="image-20231208211848886"></p><h1 id="Windows-MATLAB配置"><a href="#Windows-MATLAB配置" class="headerlink" title="Windows MATLAB配置"></a>Windows MATLAB配置</h1><p>字体：<a href="https://github.com/yakumioto/YaHei-Consolas-Hybrid-1.12">GitHub - yakumioto&#x2F;YaHei-Consolas-Hybrid-1.12: YaHei Consolas Hybrid 字体</a></p><blockquote><p><a href="https://www.cnblogs.com/yutian-blogs/p/15366608.html">一种适用于matlab的代码字体解决方案 - Yu_tiann - 博客园 (cnblogs.com)</a></p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231212153215003.jpg" alt="image-20231212153215003"></p><p>主题：<a href="https://github.com/scottclowe/matlab-schemer">GitHub - scottclowe&#x2F;matlab-schemer: Apply and save color schemes in MATLAB with ease.</a></p><blockquote><p><a href="https://blog.csdn.net/weixin_42837669/article/details/115713590">Matlab如何更换主题颜色_matlab主题颜色-CSDN博客</a></p></blockquote><h1 id="MATLAB设置工作路径"><a href="#MATLAB设置工作路径" class="headerlink" title="MATLAB设置工作路径"></a>MATLAB设置工作路径</h1><p><img src="/blog/WorkingWithLabPC.assets/image-20240119153258670.png" alt="image-20240119153258670"></p><h1 id="使用Gitpush到Github上面的时候出现问题"><a href="#使用Gitpush到Github上面的时候出现问题" class="headerlink" title="使用Gitpush到Github上面的时候出现问题"></a>使用Gitpush到Github上面的时候出现问题</h1><blockquote><p>有一天中午，在GPU server上LabPC上push的时候出现错误，很奇怪唉，我还以为是GitHub崩掉了呢！</p><p>找了一下，在GitHub上面找到了一个解决方法，起效了！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[master ca35107] Site updated: 2024-01-17 16:30:15<br> 3 files changed, 40 insertions(+), 16 deletions(-)<br>ssh: connect to host github.com port 22: Connection timed out<br>fatal: Could not <span class="hljs-built_in">read</span> from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br></code></pre></td></tr></table></figure><p>解决方法：<a href="https://gist.github.com/Tamal/1cc77f88ef3e900aeae65f0e5e504794">Solution for ‘ssh: connect to host github.com port 22: Connection timed out’ error</a></p><p><a href="https://stackoverflow.com/questions/15589682/ssh-connect-to-host-github-com-port-22-connection-timed-out">git - ssh: connect to host github.com port 22: Connection timed out - Stack Overflow</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Server</span><br>(base) houjinliang@3080server:~$ <span class="hljs-built_in">pwd</span><br>/mnt/houjinliang<br>(base) houjinliang@3080server:~$ <span class="hljs-built_in">cat</span> .ssh/config<br>Host github.com<br>    Hostname ssh.github.com<br>    Port 443<br>    <br><span class="hljs-comment"># LabPC</span><br>(base) PS C:\Users\NPU481\.ssh&gt; <span class="hljs-built_in">pwd</span><br>Path<br>----<br>C:\Users\NPU481\.ssh<br>(base) PS C:\Users\NPU481\.ssh&gt; <span class="hljs-built_in">cat</span> config<br>Host xxx <span class="hljs-comment"># 这个是VSCode连接GPU Server时候的ssh配置</span><br>  HostName xxx<br>  User xxx<br>  Port xxx<br><br>Host github.com<br>  Hostname ssh.github.com<br>  Port 443<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>高效工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>工具</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ChernoCPP-1</title>
    <link href="/blog/post/Knowledge/ChernoCPP_1/"/>
    <url>/blog/post/Knowledge/ChernoCPP_1/</url>
    
    <content type="html"><![CDATA[<h1 id="Back-to-Top"><a href="#Back-to-Top" class="headerlink" title="Back to Top"></a>Back to Top</h1><h2 id="Video-Links"><a href="#Video-Links" class="headerlink" title="Video Links"></a>Video Links</h2><div align = center>    <iframe width="560" height="315" src="https://www.youtube.com/embed/18c3MTX0PK0?si=bLufMIg-rIzpv17Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><h2 id="Notebook-Links"><a href="#Notebook-Links" class="headerlink" title="Notebook Links"></a>Notebook Links</h2><ul><li><a href="https://nagi.fun/Cherno-CPP-Notes/">📘 The Cherno’s C++ Course Notes 📘</a></li><li><a href="https://space.bilibili.com/364152971/channel/collectiondetail?sid=13909">神经元猫的个人空间-神经元猫个人主页-哔哩哔哩视频 (bilibili.com)</a></li></ul><h1 id="01-Welcome-to-C"><a href="#01-Welcome-to-C" class="headerlink" title="01. Welcome to C++"></a>01. Welcome to C++</h1><p>C++ for hardware, C++ for game engines</p><h1 id="02-04-Setup-C-in-different-OS"><a href="#02-04-Setup-C-in-different-OS" class="headerlink" title="02-04. Setup C++ in different OS"></a>02-04. Setup C++ in different OS</h1><h1 id="05-How-C-works"><a href="#05-How-C-works" class="headerlink" title="05. How C++ works"></a>05. How C++ works</h1><p>preprocessor statement<br>head file<br>main function: entry point</p><p>source file(Main.cpp) –compiler–&gt; object files(Main.obj) –linker–&gt; executable file(Main.exe) <em>(Windows platform)</em></p><p>source file(file1.cpp, file2.cpp) –compiler–&gt; object files(file1.obj, file2.obj) –linker–&gt; executable file(file.exe) <em>(Windows platform)</em></p><p>declaration and defination</p><h1 id="06-How-the-C-Compiler-Works"><a href="#06-How-the-C-Compiler-Works" class="headerlink" title="06. How the C++ Compiler Works"></a>06. How the C++ Compiler Works</h1><p>text form to an actual executable binary</p><ul><li>compiling(cpp-&gt;obj)</li><li>linking(obj-&gt;exe)</li></ul><p>translation unit</p><h2 id="preprocessor"><a href="#preprocessor" class="headerlink" title="preprocessor"></a>preprocessor</h2><p>How ‘#include <xxx>‘ works</p><p>All the compiler did was open the header file and copy whatever was in here. Let’s see a simple example.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// EndBrace.h</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//Math.cpp</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">math</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> result = a * b;<br>  retrun result;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;EndBrace.h&quot;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#include <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">xx</span>&gt;</span></span></span><br><span class="hljs-section">#include &quot;xx&quot;</span><br><span class="hljs-section">#define A B</span><br><br><span class="hljs-section">#if</span><br><span class="hljs-section">#endif</span><br></code></pre></td></tr></table></figure><h2 id="what’s-actually-inside-the-obj-file"><a href="#what’s-actually-inside-the-obj-file" class="headerlink" title="what’s actually inside the obj file"></a>what’s actually inside the obj file</h2><p>function signature</p><p>the complier’s work: It takes the source files and output an object file which contains machine code and any other constant data that we’ve defined.</p><h1 id="07-How-the-C-Linker-Works"><a href="#07-How-the-C-Linker-Works" class="headerlink" title="07. How the C++ Linker Works"></a>07. How the C++ Linker Works</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//Math.cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">math</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> result = a * b;<br>  retrun result;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="08-Variables-in-C"><a href="#08-Variables-in-C" class="headerlink" title="08. Variables in C++"></a>08. Variables in C++</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231208164738792.png" alt="image-20231208164738792"></p><p>int -&gt; 4 Bytes(4×8&#x3D;32 bits) -&gt; (-$2^31$)~($2^31-1$)<br>unsigned int 4 Bytes(4×8&#x3D;32 bits) -&gt; $2^32$<br>char<br>short<br>long<br>long long<br>float -&gt; float var &#x3D; 5.5f;<br>double -&gt; double var &#x3D; 5.5;<br>bool -&gt; 1 Byte (Although it only need 1 bit, 但在从内容中获取bool类型的数据是时候，我们没法寻址到每个bit，这能寻址到每个Byte). 0 means <code>false</code> and any other digits mean <code>true</code>. 为了节约这个内存空间，我们可以把8个bool类型的变量放在1个Byte的内存中，但这个是高级的操作了。</p><p><code>sizeof()</code></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/variables.png" alt="Variable"></p><p>pointer: <code>int* a;</code></p><p>reference: <code>int&amp; a;</code></p><h1 id="09-Functions-in-C"><a href="#09-Functions-in-C" class="headerlink" title="09. Functions in C++"></a>09. Functions in C++</h1><p>function and method</p><p>return value</p><h1 id="10-C-header-file"><a href="#10-C-header-file" class="headerlink" title="10. C++ header file"></a>10. C++ header file</h1><p><code>.cpp</code> and <code>.h</code></p><blockquote><p>所谓的头文件，其实它的内容跟 .cpp 文件中的内容是一样的，都是 C++ 的源代码。但头文件不用被编译。我们把所有的函数声明全部放进一个头文件中，当某一个 .cpp 源文件需要它们时，它们就可以通过一个宏命令 “#include” 包含进这个 .cpp 文件中，从而把它们的内容合并到 .cpp 文件中去。当 .cpp 文件被编译时，这些被包含进去的 .h 文件的作用便发挥了。</p><p><a href="https://www.runoob.com/w3cnote/cpp-header.html">理解 C++ 中的头文件和源文件的作用 | 菜鸟教程 (runoob.com)</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#pragma once</span><br><br>任何一个以‘#’开始的语句都被称作预处理语句，‘pragma’是一个被输入到编译器或者是预处理器的指令，‘pragma once’意思是这说只include这个文件一次。<br>‘pragma once’被称为为‘header guard’(头文件保护符)，其作用是防止我们把单个头文件多次include到一个单一translation unit里。<br></code></pre></td></tr></table></figure><p>下面这两种写法等价，都是起到了头文件保护作用。前者是现在常用是格式，后者是之前的代码常用的格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Log.h</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitLog</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Log</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* message)</span></span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Player</span> &#123;&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Log.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LOG_H_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _LOG_H_</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitLog</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Log</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* message)</span></span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Player</span> &#123;&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>#include <xx> &amp; #include “xx.h”<br>&lt;&gt;只用于编译器的include路径，而””可以用于所有。</p><p>iostream这个东西看起来不想是文件呀？<br>iostream是一个文件，只不过没有拓展名，是写标准库的人决定这么去干的，为了区分C的标准库和C++的标准库。C标准库的头文件中一般都有‘.h’的拓展名，而C++的没有。</p><h1 id="11-How-to-DEBUG-C-in-VISUAL-STUDIO"><a href="#11-How-to-DEBUG-C-in-VISUAL-STUDIO" class="headerlink" title="11. How to DEBUG C++ in VISUAL STUDIO"></a>11. How to DEBUG C++ in VISUAL STUDIO</h1><p>Breakpoints &amp; Reading memory</p><h1 id="12-CONDITIONS-and-BRANCHES-in-C-if-statements"><a href="#12-CONDITIONS-and-BRANCHES-in-C-if-statements" class="headerlink" title="12. CONDITIONS and BRANCHES in C++(if statements)"></a>12. CONDITIONS and BRANCHES in C++(if statements)</h1><p>if and else</p><p>else if其实并不是一个关键词，而是else和if的一个组合。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 1</span><br><span class="hljs-keyword">if</span> (ptr)<br>  <span class="hljs-built_in">Log</span>(ptr);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ptr = <span class="hljs-string">&quot;Hello&quot;</span>)<br>  <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;Ptr is Hello&quot;</span>);<br><br><br><span class="hljs-comment">// 2</span><br><span class="hljs-keyword">if</span> (ptr)<br>  <span class="hljs-built_in">Log</span>(ptr);<br><span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (ptr = <span class="hljs-string">&quot;Hello&quot;</span>)<br>    <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;Ptr is Hello&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 1和2实际上等价</span><br></code></pre></td></tr></table></figure><h1 id="13-BEST-Visual-Studio-Setup-for-C-Projects"><a href="#13-BEST-Visual-Studio-Setup-for-C-Projects" class="headerlink" title="13. BEST Visual Studio Setup for C++ Projects!"></a>13. BEST Visual Studio Setup for C++ Projects!</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231116091704815.png" alt="Virtual folder"></p><p>Visual Studio项目中的文件夹是虚拟文件夹，起到一种筛选器的作用。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231116094337168.png" alt="VS C++项目目录更改"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231116094309560.png" alt="Output Directory"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231116094253436.png" alt="Intermediate Directory"></div></div></div><blockquote><p><code>bin</code> means binary</p><ul><li>Output Directory: $(SolutionDir)bin$(Platform)$(Configuration)\</li><li>Intermediate Directory: $(SolutionDir)bin\intermediate$(Platform)$(Configuration)\</li></ul></blockquote><blockquote><p><a href="https://learn.microsoft.com/zh-cn/visualstudio/ide/solutions-and-projects-in-visual-studio?view=vs-2022">什么是 Visual Studio 解决方案和项目？ - Visual Studio (Windows) | Microsoft Learn</a></p></blockquote><h1 id="14-Loops-in-C-for-loops-while-loops"><a href="#14-Loops-in-C-for-loops-while-loops" class="headerlink" title="14. Loops in C++ (for loops, while loops)"></a>14. Loops in C++ (for loops, while loops)</h1><h2 id="for-loops"><a href="#for-loops" class="headerlink" title="for loops"></a>for loops</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">// step1, 定义变量i并赋值为0</span><br><span class="hljs-comment">// step2, 判断‘i &lt; 5’是否成立，若成立，则进入循环体；若不成立，则退出循环。</span><br><span class="hljs-comment">// step3，执行到“&#125;”时候，执行‘i++’。然后重复2和3。</span><br><br><span class="hljs-comment">// 等价写法</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; i &lt; <span class="hljs-number">5</span>; )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span> &lt;&lt; endl;<br>i++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="while-loops"><a href="#while-loops" class="headerlink" title="while loops"></a>while loops</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span> &lt;&lt; endl;<br>i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>for loops和while loops怎么选择，这两个基本上一样，选择哪个，主要取决于是否需要新变量（当然也无所谓）。for loops中<code>for (int i = 0; i &lt; 5; i++)</code>i是临时变量，跳出循环后i就没有定义了，而在while loops中，i是在循环体之外定义的，所有跳出while loops时，i依然有定义，其值是跳出while loops时i的数值。</p><h2 id="do-while-loops"><a href="#do-while-loops" class="headerlink" title="do while loops"></a>do while loops</h2><p>至少会执行循环一次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span> &lt;&lt; endl;<br>  i++;<br>&#125; <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h1 id="15-Control-Flow-in-C-break-continue-return"><a href="#15-Control-Flow-in-C-break-continue-return" class="headerlink" title="15. Control Flow in C++ (break, continue, return)"></a>15. Control Flow in C++ (break, continue, return)</h1><p>continue: loops</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++">  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">continue</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>  &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">i = 0</span><br><span class="hljs-comment">i = 2</span><br><span class="hljs-comment">i = 4</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>break: loops and switch</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">break</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>  &#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">i = 0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>return: get out of the function entirely</p><h1 id="16-Pointer-in-C-⭐"><a href="#16-Pointer-in-C-⭐" class="headerlink" title="16. Pointer in C++ ⭐"></a>16. Pointer in C++ ⭐</h1><ul><li>raw pointer(原始指针) ✔</li><li>smart pointer(智能指针)</li></ul><blockquote><p>Computer deal with memory. <strong>Memory</strong> is everything to a computer.</p></blockquote><p>指针用于管理和操控内存。</p><blockquote><p>A pointer is an integer, a number which stores a <strong>memory address</strong>. That is all that is!</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">void</span>* ptr = <span class="hljs-number">0</span>; <span class="hljs-comment">// 事实上这里的0并不是一个有效的地址，0就是个整数，符合上面说的那句话。</span><br><span class="hljs-type">void</span>* ptr = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//与上面的语句等价，因为C++中NULL的定义就是‘#define NULL 0’</span><br><span class="hljs-type">void</span>* ptr = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// C++ 11中引入的新特性</span><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231118110801496.png" alt="#define NULL O"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 在stack上创建数据</span><br><br><span class="hljs-type">int</span> var1 = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span>* ptr1 = &amp;var1;<br>cout &lt;&lt; <span class="hljs-string">&quot;the memory address of var1 is &quot;</span> &lt;&lt; ptr1 &lt;&lt; endl;<br>*ptr1 = <span class="hljs-number">10</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;the value stored in memory address of var1 is &quot;</span> &lt;&lt; *ptr1 &lt;&lt; endl;<br><br><br><span class="hljs-type">int</span> var2 = <span class="hljs-number">6</span>;<br><span class="hljs-type">int</span>* ptr2;<br>ptr2 = &amp;var2;<br>*ptr2 = <span class="hljs-number">12</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;the memory address of var2 is &quot;</span> &lt;&lt; ptr2 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;the value stored in memory address of var2 is &quot;</span> &lt;&lt; *ptr2 &lt;&lt; endl;<br><br><span class="hljs-comment">//the memory address of var1 is 00DBFAB4</span><br><span class="hljs-comment">//the value stored in memory address of var1 is 10</span><br><span class="hljs-comment">//the memory address of var2 is 00DBFA9C</span><br><span class="hljs-comment">//the value stored in memory address of var2 is 12</span><br></code></pre></td></tr></table></figure><blockquote><p>首先说明,在C++中，内存分为5个区：堆、占、自由存储区、全局&#x2F;静态存储区、常量存储区</p><ul><li><strong>栈</strong>：是由编译器在需要时自动分配，不需要时自动清除的变量存储区。通常存放局部变量、函数参数等。</li><li><strong>堆</strong>：是由new分配的内存块，由程序员释放（编译器不管），一般一个new与一个delete对应，一个new[]与一个delete[]对应。如果程序员没有释放掉,资源将由操作系统在程序结束后自动回收。</li><li><strong>自由存储区</strong>：是由malloc等分配的内存块，和堆十分相似，用free来释放。</li><li><strong>全局&#x2F;静态存储区</strong>：全局变量和静态变量被分配到同一块内存中（在C语言中，全局变量又分为初始化的和未初始化的，C++中没有这一区分）。</li><li><strong>常量存储区</strong>：这是一块特殊存储区，里边存放常量，不允许修改。<br>（注意：堆和自由存储区其实不过是同一块区域（这句话是有问题的，下文解释），new底层实现代码中调用了malloc，new可以看成是malloc智能化的高级版本，详情参见new和malloc的区别及实现方法，  以及这一篇）</li></ul><p><a href="https://zhuanlan.zhihu.com/p/268503784"><a href="https://blog.csdn.net/qq_34175893/article/details/83502412">C++中堆（heap）和栈(stack)的区别（面试中被问到的题目）_c++堆和栈的区别-CSDN博客</a></a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span>* buffer = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">8</span>]; <span class="hljs-comment">//分配一个8字节的内存，并返回这块内存的开始地址给指针。</span><br><span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">//使用“0”数值填充buffer只想的内存，其内存大小为8 Bytes.</span><br><br><span class="hljs-keyword">delete</span>[] buffer;<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231118113422225.png" alt="new char[8]?"></p><p>double pointer:双重指针（指针变量的指针，用一个指针变量b存储一个指针变量a的地址）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span>** ptr = &amp;buffer;<br></code></pre></td></tr></table></figure><h1 id="17-Reference-in-C"><a href="#17-Reference-in-C" class="headerlink" title="17. Reference in C++"></a>17. Reference in C++</h1><blockquote><p>在计算机如歌处理这两种关键字的角度看，指针和引用基本上是一回事。<br>引用是基于指针的一种（syntax sugar），来使得代码更易读更好学。</p></blockquote><blockquote><p>语法糖就相当于汉语里的成语。即，用更简练的言语表达较复杂的含义。在得到广泛接受的情况之下，可以提升交流的效率。</p><p>之所以叫【语法糖】，不只是因为加糖后的代码功能与加糖前保持一致，更重要的是，糖在不改变其所在位置的语法结构的前提下，实现了运行时等价。可以简单理解为，加糖后的代码编译后跟加糖前一毛一样。<br>之所以叫【语法糖】，是因为加糖后的代码写起来很爽，包括但不限于:代码更简洁流畅，代码更语义自然. 写得爽，看着爽，就像吃了糖。效率高，错误少，老公回家早…<br>PS: 据说还有一种叫做【语法盐】的东西，主要目的是通过反人类的语法，让你更痛苦的写代码其实它同样能达到避免代码书写错误的效果，但编程效率应该是降低了，毕竟提高了语法学习门槛，让人咸到忧伤…</p><p><a href="https://www.zhihu.com/question/20651624">什么是语法糖？ - 知乎 (zhihu.com)</a></p></blockquote><p>引用是指对某个<em>已存在</em>的变量的引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">  <span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br>  <span class="hljs-type">int</span>* b = &amp;a; <span class="hljs-comment">// 这里的&amp;不是引用，而是取变量a的地址。</span><br>  <span class="hljs-type">int</span>&amp; ref = a; <span class="hljs-comment">// 这里的&amp;是引用，&amp;紧跟着变量类型，&amp;是变量类型的一部分。</span><br><br><span class="hljs-comment">// 不是出现了&amp;符号就是引用。做好取地址和引用的区分。</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span>&amp; ref = a; <span class="hljs-comment">// 创建了一个alias(别名)</span><br><span class="hljs-comment">// ref并不是一个变量，而是变量a的一个别名。ref只存在于源码中，编译器编译时，只有a这一个变量。</span><br><br><br><br>  <span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br>  <span class="hljs-type">int</span>&amp; ref = a;<br>  ref = <span class="hljs-number">10</span>;<br>  <br>  cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>  cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;<br><br><span class="hljs-comment">// a = 10</span><br><span class="hljs-comment">// ref = 10</span><br><br></code></pre></td></tr></table></figure><p>举个例子！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncreaseValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function"></span>&#123;<br>  value++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br>  <span class="hljs-built_in">IncreaseValue</span>(a);<br>  cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>  cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// a = 5</span><br><br><span class="hljs-comment">// value的数值增加了，但这里的value只是形式参数，value的值的改变并不会影响实际参数a的数值。</span><br></code></pre></td></tr></table></figure><p>要想使用函数把实参a的值进行改变，可以使用指针的方式来实现！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncreaseValue</span><span class="hljs-params">(<span class="hljs-type">int</span>* value)</span></span><br><span class="hljs-function"></span>&#123;<br>  (*value)++; <span class="hljs-comment">// 这里要考虑多个运算符号的运算先后顺序</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br>  <span class="hljs-built_in">IncreaseValue</span>(&amp;a);<br>  cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>  cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// a = 6</span><br><br><span class="hljs-comment">// 使用指针的方法，传到IncreaseValue函数中的不是变量a的值，而是变量a的地址。</span><br><span class="hljs-comment">// 使用*value解引用，把改内存地址上的数值增加，从而改变了变量a的值。</span><br></code></pre></td></tr></table></figure><p>使用<strong>指针</strong>可以改变实参a的值，但是使用<strong>引用</strong>能更方便的实现此功能！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncreaseValue</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; value)</span> </span><br><span class="hljs-function"></span>&#123;<br>  value++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br>  <span class="hljs-built_in">IncreaseValue</span>(a);<br>  cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>  cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// a = 6</span><br><br><span class="hljs-comment">// int&amp; value = a; 所以value的变化等价于a的变化。</span><br></code></pre></td></tr></table></figure><p>注意：一旦声明了一个引用，就不能更改它所引用的对象了！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++">  <span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br>  <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br>  <span class="hljs-type">int</span>&amp; ref = a;<br>  ref = b;<br><br>  cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// a = 10</span><br><br><span class="hljs-comment">// ref已经作为变量a的引用了，‘ref = b;’不能把ref作为b的引用，只是把b的数值赋值给了ref，也就是赋值给了a。</span><br></code></pre></td></tr></table></figure><p>另外，因为ref并不是一个实际的变量，声明ref的时候必须立刻将其作为一个真正变量的引用！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">  <span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><br>  <span class="hljs-type">int</span>&amp; ref; <span class="hljs-comment">// 这是非法的，必须立刻声明ref为真正变量的引用！</span><br>  ref = a;<br><br><span class="hljs-comment">// 1&gt;F:\MicrosoftVisualStudio\Microsoft Visual Studio\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(741,5): error MSB6006: &quot;CL.exe&quot; exited with code 2.</span><br><span class="hljs-comment">// 1&gt;E:\userDoc\ChernoDevCPP\NewProject\NewProject\src\Main.cpp(7,10): error C2530: &#x27;ref&#x27;: references must be initialized</span><br><span class="hljs-comment">// 1&gt;Done building project &quot;NewProject.vcxproj&quot; -- FAILED.</span><br></code></pre></td></tr></table></figure><h1 id="18-Classes-in-C-⭐"><a href="#18-Classes-in-C-⭐" class="headerlink" title="18. Classes in C++⭐"></a>18. Classes in C++⭐</h1><p>Object-Oriented Programming(OOP)</p><p>Class and Object（类与对象）</p><ul><li>C++支持：面向过程、面向对象、基于对象、泛型编程四种类型的编程；</li><li>C不支持米那些对象编程；</li><li>JAVA, C#只适合面向对象编程（不是不可以其他风格，只是最好编写面向对象编程风格的程序）</li></ul><blockquote><p>类是一种将数据和函数组织在一起的方式。</p></blockquote><p>在面对很多很多变量的时候，使用class能使得代码更简洁和方便维护。</p><p>由类类型定义的变量叫做对象(object)，创建新对象的过程叫做实例化(instance)。</p><p>visibility(访问控制)</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231119152759312.png" alt="visibility(访问控制)"></p><p>默认情况下，类中的成员的访问控制都是私有的，意味着只有类内部的函数才能方位这些变量。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231119153029355.png" alt="public"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span><br>&#123;<br><span class="hljs-keyword">public</span>: <span class="hljs-comment">// 公有，表示允许在类外访问这些变量</span><br>  <span class="hljs-type">int</span> x, y;<br>  <span class="hljs-type">int</span> speed;<br>&#125;;<br><br><span class="hljs-comment">// 类外的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Move</span><span class="hljs-params">(Player&amp; player, <span class="hljs-type">int</span> xa, <span class="hljs-type">int</span> ya)</span></span><br><span class="hljs-function"></span>&#123;<br>  player.x += xa * player.speed;<br>  player.y += ya * player.speed;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Player player1;<br><br>  player<span class="hljs-number">1.</span>x = <span class="hljs-number">0</span>;<br>  player<span class="hljs-number">1.</span>y = <span class="hljs-number">0</span>;<br>  player<span class="hljs-number">1.</span>speed = <span class="hljs-number">10</span>;<br><br>  <span class="hljs-built_in">Move</span>(player1, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>  cout &lt;&lt; <span class="hljs-string">&quot; x = &quot;</span> &lt;&lt; player<span class="hljs-number">1.</span>x &lt;&lt; endl;<br>  cout &lt;&lt; <span class="hljs-string">&quot; y = &quot;</span> &lt;&lt; player<span class="hljs-number">1.</span>y &lt;&lt; endl;<br><br>  cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>为了使得代码更简洁，可以把函数写到类内，作为方法。这样可以使得当我们为特定的类调用Move函数的时候就是调用他自己的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span><br>&#123;<br><span class="hljs-keyword">public</span>: <span class="hljs-comment">// 公有，表示允许在类外访问这些变量</span><br>  <span class="hljs-type">int</span> x, y;<br>  <span class="hljs-type">int</span> speed;<br><br>  <span class="hljs-comment">// 在类内定义函数</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Move</span><span class="hljs-params">(<span class="hljs-type">int</span> xa, <span class="hljs-type">int</span> ya)</span> <span class="hljs-comment">// 类内的函数我们叫它为&quot;方法&quot;（methods）</span></span><br><span class="hljs-function">  </span>&#123;<br>    x += xa * speed;<br>    y += ya * speed;<br>  &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Player player1;<br><br>  player<span class="hljs-number">1.</span>x = <span class="hljs-number">0</span>;<br>  player<span class="hljs-number">1.</span>y = <span class="hljs-number">0</span>;<br>  player<span class="hljs-number">1.</span>speed = <span class="hljs-number">10</span>;<br><br>  player<span class="hljs-number">1.</span><span class="hljs-built_in">Move</span>(<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>  cout &lt;&lt; <span class="hljs-string">&quot; x = &quot;</span> &lt;&lt; player<span class="hljs-number">1.</span>x &lt;&lt; endl;<br>  cout &lt;&lt; <span class="hljs-string">&quot; y = &quot;</span> &lt;&lt; player<span class="hljs-number">1.</span>y &lt;&lt; endl;<br><br>  cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>类也是一种语法糖。</p><h1 id="19-Classes-vs-Struct-in-C"><a href="#19-Classes-vs-Struct-in-C" class="headerlink" title="19. Classes vs Struct in C++"></a>19. Classes vs Struct in C++</h1><p>C++中Class和Struct有什么区别？</p><ul><li>基本上没什么区别😅</li><li>使用 class 时，类中的成员默认都是 <code>private</code> 属性的，而使用 struct 时，结构体中的成员默认都是 <code>public</code> 属性的.</li><li>C++中struct存在的唯一原因是因为它想要维持与C之间的兼容性，因为C中没有类但有结构体。如果把C++中的struct删除之后，C++与C存在兼容性问题。</li><li>C++中class与struct的使用，主要还是有个人编程风格决定吧。<ul><li>在讨论Plain Old Data(POD)时候，使用struct； 在讨论比较复杂功能的时候，使用class；</li><li>在使用继承的时候，使用class；</li></ul></li></ul><blockquote><p>在 <strong><a href="https://haicoder.net/c/c-tutorial.html">C 语言</a></strong> 中，**<a href="https://haicoder.net/c/c-struct.html">结构体</a>** 只能存放一些 <strong><a href="https://haicoder.net/c/c-variable.html">变量</a></strong> 的集合，并不能有 **<a href="https://haicoder.net/c/c-function.html">函数</a>**，但 <strong>C++</strong> 中的结构体对 C 语言中的结构体做了扩充，可以有函数，因此 C++ 中的结构体跟 C++ 中的类很类似。C++ 中的 struct 可以包含成员函数，也能继承，也可以实现多态。</p><p>但在 C++ 中，使用 class 时，类中的成员默认都是 <strong><a href="https://haicoder.net/c/c-keywords.html">private</a></strong> 属性的，而使用 struct 时，结构体中的成员默认都是 public 属性的。class 继承默认是 private 继承，而 struct 继承默认是 public 继承。</p><p>C++ 中的 class 可以使用模板，而 struct 不能使用模板。</p><p><a href="https://haicoder.net/cpp/cpp-class-struct.html">C++ class和struct区别-C++类与结构体区别-嗨客网 (haicoder.net)</a></p></blockquote><blockquote><p>POD 是 Plain Old Data 的缩写，是 C++ 定义的一类数据结构概念，比如 int、float 等都是 POD 类型的。Plain 代表它是一个普通类型，Old 代表它是旧的，与几十年前的 C 语言兼容，那么就意味着可以使用 memcpy() 这种最原始的函数进行操作。两个系统进行交换数据，如果没有办法对数据进行语义检查和解释，那就只能以非常底层的数据形式进行交互，而拥有 POD 特征的类或者结构体通过二进制拷贝后依然能保持数据结构不变。<strong>也就是说，能用 C 的 memcpy() 等函数进行操作的类、结构体就是 POD 类型的数据</strong>。</p><p><a href="https://zhuanlan.zhihu.com/p/45545035">什么是 POD 数据类型？ - 知乎 (zhihu.com)</a></p></blockquote><h1 id="20-How-to-write-a-C-Class"><a href="#20-How-to-write-a-C-Class" class="headerlink" title="20. How to write a C++ Class"></a>20. How to write a C++ Class</h1><p>Log Class: error, warning and message or trace.</p><p>插一个VS使用小技巧，如何让VS和VSCode一样有代码预览窗口。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231119164236488.png" alt="image-20231119164236488"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231119164315161.png" alt="image-20231119164315161"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231119164327659.png" alt="image-20231119164327659"></div></div></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> LogLevelError = <span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> LogLevelWarning = <span class="hljs-number">1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> LogLevelInfo = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_LogLevel = LogLevelInfo;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetLevel</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span></span><br><span class="hljs-function"></span>&#123;<br>m_LogLevel = level;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Error</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* message)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_LogLevel &gt;= LogLevelError)<br>cout &lt;&lt; <span class="hljs-string">&quot;[ERROR]:&quot;</span> &lt;&lt; message &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Warn</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* message)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_LogLevel &gt;= LogLevelWarning)<br>cout &lt;&lt; <span class="hljs-string">&quot;[WARNING]:&quot;</span> &lt;&lt; message &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Info</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* message)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_LogLevel &gt;= LogLevelInfo)<br>cout &lt;&lt; <span class="hljs-string">&quot;[INFO]:&quot;</span> &lt;&lt; message &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">// Log类中出现了两个public，只是因为这是一种个人的编程风格。把公共变量放在一部分，把公共方法放在一部分……</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Log log;<br><br>log.<span class="hljs-built_in">SetLevel</span>(log.LogLevelError);<br><br>log.<span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Hello error!&quot;</span>);<br>log.<span class="hljs-built_in">Warn</span>(<span class="hljs-string">&quot;Hello warning!&quot;</span>);<br>log.<span class="hljs-built_in">Info</span>(<span class="hljs-string">&quot;Hello info!&quot;</span>);<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="21-Static-in-C"><a href="#21-Static-in-C" class="headerlink" title="21. Static in C++"></a>21. Static in C++</h1><p class="note note-info">Static这部分从21~23</p><div class="note note-info">            <p>Static这部分从21~23</p>          </div><ul><li>类或结构体内的静态变量</li><li>类或结构体外的静态变量</li></ul><blockquote><p>static 是 C&#x2F;C++ 中很常用的修饰符，它被用来控制变量的存储方式和可见性。</p><p>static 关键字用来解决全局变量的访问范围问题</p><ul><li>（1）在修饰变量的时候，static 修饰的静态局部变量只执行初始化一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放。</li><li>（2）static 修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是 <strong>extern</strong> 外部声明也不可以。</li><li>（3）static 修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用。static 修饰的变量存放在全局数据区的静态变量区，包括全局静态变量和局部静态变量，都在全局数据区分配内存。初始化的时候自动初始化为 0。</li><li>（4）不想被释放的时候，可以使用static修饰。比如修饰函数中存放在栈空间的数组。如果不想让这个数组在函数调用结束释放可以使用 static 修饰。</li><li>（5）考虑到数据安全性（当程序想要使用全局变量的时候应该先考虑使用 static）。</li></ul><p><a href="https://www.runoob.com/w3cnote/cpp-static-usage.html">C&#x2F;C++ 中 static 的用法全局变量与局部变量 | 菜鸟教程 (runoob.com)</a></p></blockquote><h1 id="22-Static-for-Classes-and-Struct-in-C"><a href="#22-Static-for-Classes-and-Struct-in-C" class="headerlink" title="22. Static for Classes and Struct in C++"></a>22. Static for Classes and Struct in C++</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-type">int</span> num;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; num &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e1;<br>e<span class="hljs-number">1.</span>num = <span class="hljs-number">2</span>;<br><br>Entity e2;<br>e<span class="hljs-number">2.</span>num = <span class="hljs-number">5</span>;<br><br>cout &lt;&lt; e<span class="hljs-number">1.</span>num &lt;&lt; endl; <span class="hljs-comment">// 2</span><br>cout &lt;&lt; e<span class="hljs-number">2.</span>num &lt;&lt; endl; <span class="hljs-comment">//5</span><br><br>cout &lt;&lt; &amp;(e<span class="hljs-number">1.</span>num) &lt;&lt; endl; <span class="hljs-comment">// 008FFBC4</span><br>cout &lt;&lt; &amp;(e<span class="hljs-number">2.</span>num) &lt;&lt; endl; <span class="hljs-comment">// 008FFBB8</span><br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这段代码比较容易理解，e1和e1是结构体Entity的两个不同的实例，不同实例中的num是不同的变量，我们从两个变量的地址也可以看得出来。</p><p>如果把结构体Entity的变量变为static类型的话，情况又有什么不一样呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 仅仅把‘int num;’改为‘static int num;’可以吗？</span><br><span class="hljs-comment"># 不可以！在‘ctrl+F7’编译单个代码文件时成功了，但是在允许代码时候会有“链接错误”。</span><br><br>09:36:12:2041&gt;Main.obj : error LNK2001: unresolved external symbol <span class="hljs-string">&quot;public: static int Entity::num&quot;</span> (?num@Entity@@2HA)<br>09:36:12:2501&gt;E:\userDoc\ChernoDevCPP\NewProject\bin\Win32\Debug\NewProject.exe : fatal error LNK1120: 1 unresolved externals<br></code></pre></td></tr></table></figure><p>要解决这个问题，我们必须在代码中定义这些静态变量，像这样，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> Entity::num;<br></code></pre></td></tr></table></figure><p>现在代码能运行了，看一下结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> num;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; num &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-type">int</span> Entity::num; <span class="hljs-comment">// 定义这些静态变量，让链接器能连接到这些变量</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e1;<br>e<span class="hljs-number">1.</span>num = <span class="hljs-number">2</span>;<br><br>Entity e2;<br>e<span class="hljs-number">2.</span>num = <span class="hljs-number">5</span>;<br><br>cout &lt;&lt; e<span class="hljs-number">1.</span>num &lt;&lt; endl; <span class="hljs-comment">// 5</span><br>cout &lt;&lt; e<span class="hljs-number">2.</span>num &lt;&lt; endl; <span class="hljs-comment">// 5</span><br><br>cout &lt;&lt; &amp;(e<span class="hljs-number">1.</span>num) &lt;&lt; endl; <span class="hljs-comment">// 00BCA138</span><br>cout &lt;&lt; &amp;(e<span class="hljs-number">2.</span>num) &lt;&lt; endl; <span class="hljs-comment">// 00BCA138</span><br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，<code>e1.num</code>和<code>e2.num</code>本质上都是同一个变量，所以这样的写法是没有意义的。可以写成如下的形式，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> num;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; num &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-type">int</span> Entity::num;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e1;<br>Entity::num = <span class="hljs-number">2</span>;<br><br>Entity e2;<br>Entity::num = <span class="hljs-number">5</span>;<br><br>cout &lt;&lt; Entity::num &lt;&lt; endl; <span class="hljs-comment">// 5</span><br>cout &lt;&lt; Entity::num &lt;&lt; endl; <span class="hljs-comment">// 5</span><br><br>cout &lt;&lt; &amp;(Entity::num) &lt;&lt; endl; <span class="hljs-comment">// 00BCA138</span><br>cout &lt;&lt; &amp;(Entity::num) &lt;&lt; endl; <span class="hljs-comment">// 00BCA138</span><br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li>⭐⭐⭐<a href="https://blog.csdn.net/oXiaoLingTong/article/details/123472985">深入学习C++——21~23静态_c++ 21_范子琦的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_62953519/article/details/124178721">C++学习笔记：static关键字在类和结构体中的作用【Cherno】<em>结构体加static</em>刘欢明的博客-CSDN博客</a></li></ul></blockquote><h1 id="23-Local-Static-in-C-⭐"><a href="#23-Local-Static-in-C-⭐" class="headerlink" title="23.Local Static in C++⭐"></a>23.Local Static in C++⭐</h1><ul><li>生命周期（lifetime）</li><li>作用域（scope）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>i++;<br>cout &lt;&lt; <span class="hljs-string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">Function</span>();<br><span class="hljs-built_in">Function</span>();<br><span class="hljs-built_in">Function</span>();<br><br><span class="hljs-comment">// cout &lt;&lt; &quot;main: i = &quot; &lt;&lt; i &lt;&lt; endl; // Compilation error</span><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><span class="hljs-comment">//i = 1</span><br><span class="hljs-comment">//i = 1</span><br><span class="hljs-comment">//i = 1</span><br><br><span class="hljs-comment">// i是定义在函数Function中的变量，其作用域和生存时间都是在函数Function内部，从main函数中就是访问不到变量i了。</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  i++;<br>  cout &lt;&lt; <span class="hljs-string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">Function</span>();<br>  <span class="hljs-built_in">Function</span>();<br>  <span class="hljs-built_in">Function</span>();<br><br>  cout &lt;&lt; <span class="hljs-string">&quot;main: i = &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>  cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// i = 1</span><br><span class="hljs-comment">// i = 2</span><br><span class="hljs-comment">// i = 3</span><br><span class="hljs-comment">// main: i = 3</span><br><br><span class="hljs-comment">// i定义在了函数外部，所以是个全局变量，其作用域和生存时间都是在整个程序中，这样就可以在main函数中访问到了i。</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>  i++;<br>  cout &lt;&lt; <span class="hljs-string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">Function</span>();<br>  <span class="hljs-built_in">Function</span>();<br>  <span class="hljs-built_in">Function</span>();<br><br>  <span class="hljs-comment">// cout &lt;&lt; &quot;main: i = &quot; &lt;&lt; i &lt;&lt; endl; // Compilation error</span><br>  cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><br><span class="hljs-comment">//i = 1</span><br><span class="hljs-comment">//i = 2</span><br><span class="hljs-comment">//i = 3</span><br><br><span class="hljs-comment">// static声明的i是静态变量，这样的效果和全局变量类似，但是并不能在所有函数中访问到i，i的作用域仅在其所定义的函数内部。</span><br></code></pre></td></tr></table></figure><h1 id="24-Enums-in-C"><a href="#24-Enums-in-C" class="headerlink" title="24. Enums in C++"></a>24. Enums in C++</h1><blockquote><p>枚举类型的定义：枚举类型(enumeration)是 C++ 中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> &lt;类型名&gt; &#123;&lt;枚举常量表&gt;&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/w3cnote/cpp-enum-intro.html">C++ 枚举类型详解 | 菜鸟教程 (runoob.com)</a></p></blockquote><h1 id="25-Constructors-in-C"><a href="#25-Constructors-in-C" class="headerlink" title="25. Constructors in C++"></a>25. Constructors in C++</h1><p>Constructors是一种特殊的method，它在实例化时被调用。</p><blockquote><p>类的构造函数是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。</p><p>构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。</p><p><a href="https://www.runoob.com/cplusplus/cpp-constructor-destructor.html">C++ 类构造函数 &amp; 析构函数 | 菜鸟教程 (runoob.com)</a></p></blockquote><ol><li>对于一个类，在实例化之后，如果直接调用类内的变量，会用链接错误，因为类内的变量未被初始化。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">float</span> X, Y;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; X &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; Y &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e;<br>cout &lt;&lt; e.X &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; e.Y &lt;&lt; endl;  <span class="hljs-comment">// linking error</span><br>e.<span class="hljs-built_in">Print</span>();<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><span class="hljs-comment">// error C4700: uninitialized local variable &#x27;e&#x27; used</span><br></code></pre></td></tr></table></figure><ol start="2"><li>手动初始化。在类内定义一个初始化函数，把类内的变量初始化一个值，这样就不会有链接错误了。但这样不够<em>优雅</em>，在类有多个实例化时，需要每次实例化之后都使用这个初始化函数。而C++提供了更优雅有效的方式，就是构造函数（Constructors）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">float</span> X, Y;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; X &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; Y &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>X = <span class="hljs-number">0.0f</span>;<br>Y = <span class="hljs-number">0.0f</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e;<br>e.<span class="hljs-built_in">Init</span>();<br>cout &lt;&lt; e.X &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; e.Y &lt;&lt; endl;<br>e.<span class="hljs-built_in">Print</span>();<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Constructors是一种特殊的method，它在实例化时被调用以初始化实例。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">float</span> X, Y;<br><br><span class="hljs-built_in">Entity</span>() <span class="hljs-comment">//Constructor method的名字和类名相同，没有返回值</span><br>&#123;<br>X = <span class="hljs-number">0.0f</span>;<br>Y = <span class="hljs-number">0.0f</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; X &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; Y &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e;<br>cout &lt;&lt; e.X &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; e.Y &lt;&lt; endl;<br>e.<span class="hljs-built_in">Print</span>();<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在C++中其实有一个默认的Constructor，但是它本身不做任何事情，方法内部是空的，就像这样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">Entity</span>() <span class="hljs-comment">//Constructor method的名字和类名相同，没有返回值</span><br>&#123;<br>       <br>&#125;<br></code></pre></td></tr></table></figure><p>因此，C++不能自动帮我们初始化内存空间，得自己手动完成这个过程。</p><ol start="4"><li>含参数的构造函数。<code>3</code>中，类中变量的初始化数值是在类中写定的，使用含参数的构造函数能在实例化的时候确定类中变量的初始化数值，如下</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">float</span> X, Y;<br><br><span class="hljs-built_in">Entity</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y)<br>&#123;<br>X = x;<br>Y = y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; X &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; Y &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Entity <span class="hljs-title">e</span><span class="hljs-params">(<span class="hljs-number">5.0f</span>, <span class="hljs-number">6.0f</span>)</span></span>;<br>cout &lt;&lt; e.X &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; e.Y &lt;&lt; endl;<br>e.<span class="hljs-built_in">Print</span>();<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="26-Destructors-in-C"><a href="#26-Destructors-in-C" class="headerlink" title="26. Destructors in C++"></a>26. Destructors in C++</h1><ul><li>Constructor:构造函数</li><li>Destructors： 析构函数</li></ul><p>构造函数通常是设置变量的地方启动或执行所需要执行的任何类型的初始化，类似的，析构函数是取消初始化任何内容的地方你可能需要删除或清楚任何已使用的内存。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">float</span> X, Y;<br><br><span class="hljs-built_in">Entity</span>() <span class="hljs-comment">// 构造函数</span><br>&#123;<br>X = <span class="hljs-number">0.0f</span>;<br>Y = <span class="hljs-number">0.0f</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Created Entity!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Entity</span>() <span class="hljs-comment">// 析构函数</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Destroyed Entity!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; X &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; Y &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e;<br>e.<span class="hljs-built_in">Print</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">Function</span>();<br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Created Entity!</span><br><span class="hljs-comment">0, 0</span><br><span class="hljs-comment">Destroyed Entity!</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">E:\userDoc\ChernoDevCPP\NewProject\bin\Win32\Debug\NewProject.exe (process 22128) exited with code 0.</span><br><span class="hljs-comment">Press any key to close this window . . .</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>析构函数在类的实例化是生命周期末期被调用！<br>如上面的代码，“Entity e;”创造了一个实例化e，这时候调用构造函数，函数“Function()”是实例化的作用域，“Function()”函数结束的时候，调用了析构函数。<br>如果不使用析构函数，可能会导致内存泄漏。</p><h1 id="27-Inheritance-in-C-⭐"><a href="#27-Inheritance-in-C-⭐" class="headerlink" title="27. Inheritance in C++⭐"></a>27. Inheritance in C++⭐</h1><p>继承提供了一种来实现把多个类之间的公共代码转换为基类的方式，就像是一种模板。</p><p>Polymorphic(多态)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">float</span> X, Y;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Move</span><span class="hljs-params">(<span class="hljs-type">float</span> xa, <span class="hljs-type">float</span> ya)</span></span><br><span class="hljs-function"></span>&#123;<br>X += xa;<br>Y += ya;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> : <span class="hljs-keyword">public</span> Entity<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* Name;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; Name &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Player player;<br><br>player.Name = <span class="hljs-string">&quot;Tom&quot;</span>;<br><br>player.X = <span class="hljs-number">0</span>;<br>player.Y = <span class="hljs-number">0</span>;<br>player.<span class="hljs-built_in">Move</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br><br>player.<span class="hljs-built_in">PrintName</span>();<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>继承 (inheritance) 就是在一个已存在的类的基础上建立一个新的类.</p><ul><li>已存在的类: 基类 (base class) 或父类 (father class)</li><li>新建立的类: 派生类 (derived class) 或子类 (son class)</li><li>一个新类从已有的类获得其已有特性, 称为类的继承.</li><li>通过继承, 一个新建的子类从已有的父类那里获得父类的特性</li><li>派生类继承了基类的所有数据成员和成员函数, 并可以对成员做必要的增加或调整</li></ul><p>从已有的类 (父类) 产生一个新的子类, 称为类的派生.</p><ul><li>类的继承是用已有的类来建立专用新类的编程技术</li><li>一个基类可以派生出多个派生类, 每一个派生类又可以作为基类再派生出新的派生类. 因此基类和派生类是相对而言的</li><li>派生类是基类的具体化, 而基类则是派生类的抽象</li></ul><blockquote><p>版权声明：本文为CSDN博主「我是小白呀」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_46274168/article/details/11659272">https://blog.csdn.net/weixin_46274168/article/details/11659272</a></p></blockquote></blockquote><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态<em>polymorphism</em>,基本上来说就是使用一个单一的符号来表示多个不同的类型</p><h1 id="28-Virtual-functions-in-C-⭐"><a href="#28-Virtual-functions-in-C-⭐" class="headerlink" title="28. Virtual functions in C++⭐"></a>28. Virtual functions in C++⭐</h1><p>Virtual functions(虚函数)</p><p>虚函数允许我们覆盖基类中的方法。</p><p>虚函数引入了一种动态分配（Dynamic Dispatch）的东西，通常使用VTable（虚函数表）来实现编译。VTable中包含基类中所有虚函数的映射，以便我们能在运行时映射它们向正确的覆写函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">string <span class="hljs-title">GetName</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Entity&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> : <span class="hljs-keyword">public</span> Entity<br>&#123;<br><span class="hljs-keyword">private</span>:<br>string m_Name;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Player</span>(<span class="hljs-type">const</span> string&amp; name) : <span class="hljs-built_in">m_Name</span>(name) &#123;&#125;<br><br><span class="hljs-function">string <span class="hljs-title">GetName</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_Name; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintName</span><span class="hljs-params">(Entity* entity)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; entity-&gt;<span class="hljs-built_in">GetName</span>() &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity* e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>();<br><span class="hljs-built_in">PrintName</span>(e);<br><br>Player* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Player</span>(<span class="hljs-string">&quot;Cherno&quot;</span>);<br><span class="hljs-built_in">PrintName</span>(p);<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// Entity</span><br><span class="hljs-comment">// Entity</span><br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">GetName</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Entity&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> : <span class="hljs-keyword">public</span> Entity<br>&#123;<br><span class="hljs-keyword">private</span>:<br>string m_Name;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Player</span>(<span class="hljs-type">const</span> string&amp; name) : <span class="hljs-built_in">m_Name</span>(name) &#123;&#125;<br><br><span class="hljs-function">string <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; <span class="hljs-keyword">return</span> m_Name; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintName</span><span class="hljs-params">(Entity* entity)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; entity-&gt;<span class="hljs-built_in">GetName</span>() &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity* e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>();<br><span class="hljs-built_in">PrintName</span>(e);<br><br>Player* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Player</span>(<span class="hljs-string">&quot;Cherno&quot;</span>);<br><span class="hljs-built_in">PrintName</span>(p);<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// Entity</span><br><span class="hljs-comment">// Cherno</span><br></code></pre></td></tr></table></figure><h1 id="29-Interfaces-in-C-Pure-Virtual-Functions-⭐"><a href="#29-Interfaces-in-C-Pure-Virtual-Functions-⭐" class="headerlink" title="29. Interfaces in C++(Pure Virtual Functions)⭐"></a>29. Interfaces in C++(Pure Virtual Functions)⭐</h1><p>Pure Virtual Functions(纯虚函数)，C++中的纯虚函数的本质上犹如Java和C#中的抽象方法和<strong>接口</strong>。<br>原理上来讲，纯虚函数允许我们定义一个在基类中没有实现的函数，然后迫使在子类中实际实现，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Printable</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">GetClassName</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;  <span class="hljs-comment">// pure virtual function</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span> : <span class="hljs-keyword">public</span> Printable<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">GetName</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Entity&quot;</span>; &#125;<br><span class="hljs-function">string <span class="hljs-title">GetClassName</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Entity&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> : <span class="hljs-keyword">public</span> Entity<br>&#123;<br><span class="hljs-keyword">private</span>:<br>string m_Name;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Player</span>(<span class="hljs-type">const</span> string&amp; name) : <span class="hljs-built_in">m_Name</span>(name) &#123;&#125;<br><br><span class="hljs-function">string <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; <span class="hljs-keyword">return</span> m_Name; &#125;<br><span class="hljs-function">string <span class="hljs-title">GetClassName</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Palyer&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintName</span><span class="hljs-params">(Entity* entity)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; entity-&gt;<span class="hljs-built_in">GetName</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Printable* obj)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; obj-&gt;<span class="hljs-built_in">GetClassName</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity* e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>();<br><span class="hljs-comment">// PrintName(e);</span><br><br>Player* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Player</span>(<span class="hljs-string">&quot;Cherno&quot;</span>);<br><span class="hljs-comment">// PrintName(p);</span><br><br><span class="hljs-built_in">Print</span>(e);<br><span class="hljs-built_in">Print</span>(p);<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="30-Visibility-in-C"><a href="#30-Visibility-in-C" class="headerlink" title="30. Visibility in C++"></a>30. Visibility in C++</h1><p>private, protected, public</p><ul><li>private<blockquote><h2 id="私有（private）成员"><a href="#私有（private）成员" class="headerlink" title="私有（private）成员"></a>私有（private）成员</h2></blockquote></li></ul><blockquote><p><strong>私有</strong>成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有<strong>类</strong>和<strong>友元函数</strong>可以访问私有成员。</p><p>默认情况下，类的所有成员都是私有的。</p><p><a href="https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html">C++ 类访问修饰符 | 菜鸟教程 (runoob.com)</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-comment">// int X, Y; // 如果类中定义的变量没有指定visibility，则默认就是private。</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> X;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>()<br>&#123;<br>X = <span class="hljs-number">0</span>; <span class="hljs-comment">// right!</span><br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> : <span class="hljs-keyword">public</span> Entity<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Player</span>()<br>&#123;<br><span class="hljs-comment">// X = 10; // error!</span><br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e;<br><span class="hljs-comment">// e.X = 10; // error!</span><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>protected</li></ul><blockquote><p><strong>protected（受保护）</strong>成员变量或函数与私有成员十分相似，但有一点不同，protected（受保护）成员在派生类（即子类）中是可访问的。</p><p><a href="https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html">C++ 类访问修饰符 | 菜鸟教程 (runoob.com)</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> X;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>()<br>&#123;<br>X = <span class="hljs-number">0</span>; <span class="hljs-comment">// right!</span><br><span class="hljs-built_in">Print</span>(); <span class="hljs-comment">// right!</span><br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> : <span class="hljs-keyword">public</span> Entity<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Player</span>()<br>&#123;<br>X = <span class="hljs-number">10</span>; <span class="hljs-comment">// right!</span><br><span class="hljs-built_in">Print</span>(); <span class="hljs-comment">// right!</span><br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e;<br><span class="hljs-comment">//e.X = 10; // error!</span><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>public</li></ul><blockquote><p><strong>公有</strong>成员在程序中类的外部是可访问的。</p><p><a href="https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html">C++ 类访问修饰符 | 菜鸟教程 (runoob.com)</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> X;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>()<br>&#123;<br>X = <span class="hljs-number">0</span>; <span class="hljs-comment">// right!</span><br><span class="hljs-built_in">Print</span>(); <span class="hljs-comment">// right!</span><br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> : <span class="hljs-keyword">public</span> Entity<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Player</span>()<br>&#123;<br>X = <span class="hljs-number">10</span>; <span class="hljs-comment">// right!</span><br><span class="hljs-built_in">Print</span>(); <span class="hljs-comment">// right!</span><br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e;<br>e.X = <span class="hljs-number">10</span>; <span class="hljs-comment">// right!</span><br>e.<span class="hljs-built_in">Print</span>(); <span class="hljs-comment">// right!</span><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="31-Arrays-in-C"><a href="#31-Arrays-in-C" class="headerlink" title="31. Arrays in C++"></a>31. Arrays in C++</h1><h2 id="Array-and-Pointer"><a href="#Array-and-Pointer" class="headerlink" title="Array and Pointer"></a>Array and Pointer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> example[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span>* ptr = example;<br><br>example[<span class="hljs-number">2</span>] = <span class="hljs-number">10</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;example[2] =&quot;</span> &lt;&lt; example[<span class="hljs-number">2</span>] &lt;&lt; endl;<br><br>*(ptr + <span class="hljs-number">2</span>) = <span class="hljs-number">20</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;example[2] =&quot;</span> &lt;&lt; example[<span class="hljs-number">2</span>] &lt;&lt; endl;<br><br>*(<span class="hljs-type">int</span>*)((<span class="hljs-type">char</span>*)ptr + <span class="hljs-number">8</span>) = <span class="hljs-number">30</span>; <span class="hljs-comment">// 两次强制类型转换</span><br>cout &lt;&lt; <span class="hljs-string">&quot;example[2] =&quot;</span> &lt;&lt; example[<span class="hljs-number">2</span>] &lt;&lt; endl;<br># 这三行代码等价！ptr<span class="hljs-number">+2</span>中的“<span class="hljs-number">2</span>”并不是数值<span class="hljs-number">2</span>，指针<span class="hljs-number">+2</span>的时候会自动根据数据类型来计算实际的字节数。<br></code></pre></td></tr></table></figure><h2 id="Stack-and-Heap"><a href="#Stack-and-Heap" class="headerlink" title="Stack and Heap"></a>Stack and Heap</h2><blockquote><p><strong>Stack:</strong></p><ol><li>和堆一样存储在计算机 RAM 中。</li><li>在栈上创建变量的时候会扩展，并且会自动回收。</li><li>相比堆而言在栈上分配要快的多。</li><li>用数据结构中的栈实现。</li><li>存储局部数据，返回地址，用做参数传递。</li><li>当用栈过多时可导致栈溢出（无穷次（大量的）的递归调用，或者大量的内存分配）。</li><li>在栈上的数据可以直接访问（不是非要使用指针访问）。</li><li>如果你在编译之前精确的知道你需要分配数据的大小并且不是太大的时候，可以使用栈。</li><li>当你程序启动时决定栈的容量上限。</li></ol><p><strong>Heap：</strong></p><ol><li>和栈一样存储在计算机RAM。</li><li>在堆上的变量必须要手动释放，不存在作用域的问题。数据可用 delete, delete[] 或者 free 来释放。</li><li>相比在栈上分配内存要慢。</li><li>通过程序按需分配。</li><li>大量的分配和释放可造成内存碎片。</li><li>在 C++ 中，在堆上创建数的据使用指针访问，用 new 或者 malloc 分配内存。</li><li>如果申请的缓冲区过大的话，可能申请失败。</li><li>在运行期间你不知道会需要多大的数据或者你需要分配大量的内存的时候，建议你使用堆。</li><li>可能造成内存泄露。</li></ol><p><a href="https://zhuanlan.zhihu.com/p/101531768">什么是堆? 什么是栈？ - 知乎 (zhihu.com)</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> arr1[<span class="hljs-number">5</span>]; <span class="hljs-comment">// an array created on the stack</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>    arr1[i] = i;<br>&#125;<br><br><span class="hljs-type">int</span>* arr2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">// an array created on the heap</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>    arr2[i] = i;<br>&#125;<br><span class="hljs-keyword">delete</span>[] arr2;<br><br><span class="hljs-comment">// arr1的生命周期结束后，内存空间会被自动回收。</span><br><span class="hljs-comment">// arr2没有生命周期的概念，必须手动来释放。</span><br></code></pre></td></tr></table></figure><p>这里发现了一个新且有趣的知识点！在stack上定义的变量，自动初始化为“cccc”，而在heap上定义的变量，是自动初始化为“cdcd”，不知道是为什么会这样？？</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231208163944488.png" alt="image-20231208163944488"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231208164302702.png" alt="image-20231208164302702"></div></div></div><h2 id="C-11-standard-array"><a href="#C-11-standard-array" class="headerlink" title="C++11 standard array"></a>C++11 standard array</h2><ol><li>size of array</li></ol><p>在原生数组中，计算数组的大小使用<code>sizeof()</code>方法，但是这种方法也仅仅适用于定义在stack上的数组；对于定义在heap上的数组，使用<code>sizeof()</code>后，返回值是指针的大小，下面的例子中，返回值是4，即整型类型的指针的大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> array1[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span>* array2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><br><span class="hljs-built_in">Entity</span>()<br>&#123;<br><span class="hljs-type">int</span> count = <span class="hljs-built_in">sizeof</span>(array1) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>); <span class="hljs-comment">// 4*5 / 4 = 5 </span><br>cout &lt;&lt; <span class="hljs-string">&quot;count of array1 is &quot;</span> &lt;&lt; count &lt;&lt; endl;<br><br>count = <span class="hljs-built_in">sizeof</span>(array2) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>); <span class="hljs-comment">// 4 / 4 = 1</span><br>cout &lt;&lt; <span class="hljs-string">&quot;count of array2 is &quot;</span> &lt;&lt; count &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++)<br>&#123;<br>array1[i] = i; <br>array2[i] = i;<br>&#125;<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>需要注意的是，当定义一个stack上的数组的时候，数组的大小必须是在编译时就需要注意的常量！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// error!</span><br><span class="hljs-type">int</span> array1Size = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> array1[array1Size];<br><br><span class="hljs-comment">// error!</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> array1Size = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> array1[array1Size];<br><br><span class="hljs-comment">// 使用static方法！</span><br><span class="hljs-comment">// right!</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> array1Size = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> array1[array1Size];<br><br><span class="hljs-comment">// 使用constexpr方法！</span><br><span class="hljs-comment">// 没搞懂？❓🎯</span><br></code></pre></td></tr></table></figure><ol start="2"><li>std::array</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>array&lt;<span class="hljs-type">int</span>, 5&gt; array1;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; array<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>array1[i] = i;<br>&#125;<br><br>cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="32-How-Strings-Work-in-C"><a href="#32-How-Strings-Work-in-C" class="headerlink" title="32. How Strings Work in C++"></a>32. How Strings Work in C++</h1><h2 id="String-Pointer-Array-Memory-address"><a href="#String-Pointer-Array-Memory-address" class="headerlink" title="String, Pointer, Array, Memory address"></a>String, Pointer, Array, Memory address</h2><p>String is a group of characters</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/ascii-table.png" alt="ascii-table"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231215144322539.png" alt="image-20231215144322539"></p><p>字符串结束的标志”\0“，在内存中存储的就是0。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231215145247579.png" alt="image-20231215145247579"></p><p><strong><code>const char* name = &quot;Cherno&quot;;</code></strong></p><p>这声明了一个指向常量字符的指针。这意味着指针<code>name</code>指向的字符串内容是不可修改的。你可以通过<code>name</code>指针读取字符串，但是尝试通过<code>name</code>指针修改字符串的内容将导致编译错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;Cherno&quot;</span>;<br><span class="hljs-comment">// 可以读取字符串</span><br><span class="hljs-type">char</span> firstChar = name[<span class="hljs-number">0</span>];<br><span class="hljs-comment">// 但不能修改字符串</span><br><span class="hljs-comment">// name[0] = &#x27;X&#x27;; // 这会导致编译错误</span><br></code></pre></td></tr></table></figure><p><strong><code>char* name = &quot;Cherno&quot;;</code></strong></p><p>这声明了一个指向字符的指针，但没有使用<code>const</code>。这意味着指针<code>name</code>指向的字符串内容是可修改的。然而，这在 C++ 中是不安全的，因为字符串常量（像 “Cherno”）通常存储在只读的内存区域，尝试修改它们可能导致未定义的行为。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;Cherno&quot;</span>;<br><span class="hljs-comment">// 尽管没有编译错误，但修改字符串是不安全的</span><br><span class="hljs-comment">// name[0] = &#x27;X&#x27;; // 可能导致未定义的行为</span><br></code></pre></td></tr></table></figure><p>总的来说，如果你知道字符串不会被修改，最好使用第一个声明，即带有<code>const</code>的版本，以提高代码的安全性。如果你确实需要修改字符串，最好将字符串复制到一个可修改的内存区域，例如使用<code>char[]</code>数组：</p><p><code>char name[] = &quot;Cherno&quot;;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span> name[] = <span class="hljs-string">&quot;Cherno&quot;</span>; <span class="hljs-comment">// 可以修改</span><br>name[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;X&#x27;</span>; <span class="hljs-comment">// 安全</span><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231215150357514.png" alt="image-20231215150357514"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 用pointer定义一个字符串，使用const意味着这个字符串不能修改</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;Cherno&quot;</span>;<br><span class="hljs-comment">// char* name = &quot;Cherno&quot;; // 不要用这种写法，</span><br>std::cout &lt;&lt; name &lt;&lt; std::endl;<br><br><span class="hljs-comment">// char* name1 = &quot;Cherno&quot;; // 不要用这种写法，</span><br><span class="hljs-comment">// std::cout &lt;&lt; name1 &lt;&lt; std::endl;</span><br><br><span class="hljs-comment">// 用array定义一个字符串，可以修改</span><br><span class="hljs-comment">// char name2[6] = &#123; &#x27;C&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;r&#x27;, &#x27;n&#x27;,&#x27;o&#x27; &#125;; // error!</span><br><span class="hljs-type">char</span> name2[<span class="hljs-number">7</span>] = &#123; <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span> &#125;; <span class="hljs-comment">// &#x27;\0&#x27;: null termination character</span><br><br>name2[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>std::cout &lt;&lt; name2 &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Standard-string-std-string"><a href="#Standard-string-std-string" class="headerlink" title="Standard string (std::string)"></a>Standard string (std::string)</h2><ol><li>字符串定义与字符串函数。使用string定义的字符串变量其本质还是const char* name.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::string name = <span class="hljs-string">&quot;Cherno&quot;</span>;<br>cout &lt;&lt; name &lt;&lt; endl;<br><br>std::cout &lt;&lt; name.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl; <span class="hljs-comment">// 6</span><br>std::cout &lt;&lt; name.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;no&quot;</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 4, 第一次出现“no”时候的索引</span><br></code></pre></td></tr></table></figure><ol start="2"><li>字符串拼接</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// string name = &quot;Cherno&quot; + &quot; hello&quot;; // wrong!</span><br><br><span class="hljs-comment">// method 1</span><br>std::string name1 = <span class="hljs-string">&quot;Cherno1&quot;</span>;<br>name1 += <span class="hljs-string">&quot; hello&quot;</span>;<br>std::cout &lt;&lt; name1 &lt;&lt; std::endl;<br><br><span class="hljs-comment">// method 2</span><br>std::string name2 = std::<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;Cherno2&quot;</span>) + <span class="hljs-string">&quot; hello&quot;</span>;<br>std::cout &lt;&lt; name2 &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><ol start="3"><li>字符串作为函数参数传递</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintString</span><span class="hljs-params">(std::string onename)</span></span><br><span class="hljs-function"></span>&#123;<br>onename += <span class="hljs-string">&quot; hello&quot;</span>;<br>std::cout &lt;&lt; onename &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::string name = <span class="hljs-string">&quot;Cherno&quot;</span>;<br><span class="hljs-built_in">PrintString</span>(name);  <span class="hljs-comment">// Cherno hello</span><br>std::cout &lt;&lt; name &lt;&lt; std::endl; <span class="hljs-comment">// Cherno</span><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>std::string onename</code>是对<code>std::string name = &quot;Cherno&quot;</code>的复制，在<code>PrintString</code>函数中对onename做出的修改，实际上并不会影响原来name的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintString</span><span class="hljs-params">(std::string&amp; onename)</span> <span class="hljs-comment">// 传引用的话情况就会不一样了</span></span><br><span class="hljs-function"></span>&#123;<br>onename += <span class="hljs-string">&quot; hello&quot;</span>;<br>std::cout &lt;&lt; onename &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::string name = <span class="hljs-string">&quot;Cherno&quot;</span>;<br><span class="hljs-built_in">PrintString</span>(name);  <span class="hljs-comment">// Cherno hello</span><br>std::cout &lt;&lt; name &lt;&lt; std::endl; <span class="hljs-comment">// Cherno hello</span><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintString</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; onename)</span> <span class="hljs-comment">// 如果有const的话，又是另外一种情况，这时候，onename即name的值不能改变</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// onename += &quot; hello&quot;;</span><br>std::cout &lt;&lt; onename &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::string name = <span class="hljs-string">&quot;Cherno&quot;</span>;<br><span class="hljs-built_in">PrintString</span>(name);  <span class="hljs-comment">// Cherno</span><br>std::cout &lt;&lt; name &lt;&lt; std::endl; <span class="hljs-comment">// Cherno</span><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="33-String-Literals-in-C"><a href="#33-String-Literals-in-C" class="headerlink" title="33. String Literals in C++"></a>33. String Literals in C++</h1><h2 id="1-字符串字面量"><a href="#1-字符串字面量" class="headerlink" title="1. 字符串字面量"></a>1. 字符串字面量</h2><blockquote><p>生成自ChatGPT</p></blockquote><p>字符串字面量（String literals）是在源代码中直接表示字符串值的一种方式。在C++中，字符串字面量通常是由双引号括起来的字符序列。</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br></code></pre></td></tr></table></figure><p>上述代码中，<code>&quot;Hello, World!&quot;</code> 就是一个字符串字面量。这个字符串字面量的类型是一个 <code>const char</code> 数组（C++中字符串字面量的类型是一个字符数组），并且它以 null 字符 <code>&#39;\0&#39;</code> 结尾。</p><p>字符串字面量可以用于初始化字符数组、字符串指针、以及各种支持字符串操作的标准库类（比如 <code>std::string</code>）。</p><p>在C++中，有一些特殊的字符串字面量前缀，用于指定不同的字符集和字符宽度，如前面提到的：</p><ul><li><code>L</code> 前缀表示宽字符（<code>wchar_t</code>）。</li><li><code>u</code> 前缀表示UTF-16字符串（<code>char16_t</code>）。</li><li><code>U</code> 前缀表示UTF-32字符串（<code>char32_t</code>）。</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* wideStr = <span class="hljs-string">L&quot;Wide String&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char16_t</span>* utf16Str = <span class="hljs-string">u&quot;UTF-16 String&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char32_t</span>* utf32Str = <span class="hljs-string">U&quot;UTF-32 String&quot;</span>;<br></code></pre></td></tr></table></figure><p>字符串字面量是C++中处理字符串的基本元素之一，而且它们的使用非常普遍。在实际编程中，字符串字面量经常用于初始化字符串，作为函数参数传递，或者用于各种字符串操作。</p><h2 id="2-字符串长度与数组大小"><a href="#2-字符串长度与数组大小" class="headerlink" title="2. 字符串长度与数组大小"></a>2. 字符串长度与数组大小</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231215172042237.png" alt="image-20231215172042237"></p><p>There is a question! 字符串有6个字符，为什么定义中的长度是7呢？</p><p>因为要考虑到‘null termination character ’也要占用一个字符长度。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231215172636875.png" alt="image-20231215172636875"></p><h2 id="3-const-char-name"><a href="#3-const-char-name" class="headerlink" title="3. const char* name"></a>3. const char* name</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231217145412538.png" alt="Cherno在视频中的这两行代码是可以编译的，但是我这个VS的版本编译不了。"></p><p>Cherno在视频中提到了，这两行代码能不能编译取决于所使用的编译器。Cherno用的是VS2017可以编译，但在VS2019不能编译，VS2022中也不能编译，要求必须有<code>const</code>关键字。</p><h2 id="4-diffierent-‘char’"><a href="#4-diffierent-‘char’" class="headerlink" title="4. diffierent ‘char’"></a>4. diffierent ‘char’</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;Cherno&quot;</span>;<br><span class="hljs-comment">// const char* name = u8&quot;Cherno&quot;; // 与上面的写法一样，只是上面省略了‘u8’</span><br><span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* name2 = <span class="hljs-string">L&quot;Cherno&quot;</span>; <span class="hljs-comment">// wchar_t: Wide char -&gt; 2 bytes</span><br><br><span class="hljs-comment">// C++ 11引入</span><br><span class="hljs-type">const</span> <span class="hljs-type">char16_t</span>* name3 = <span class="hljs-string">u&quot;Cherno&quot;</span>; <span class="hljs-comment">// 16 bits = 2 bytes</span><br><span class="hljs-type">const</span> <span class="hljs-type">char32_t</span>* name4 = <span class="hljs-string">U&quot;Cherno&quot;</span>; <span class="hljs-comment">// 32 bits = 4 bytes</span><br></code></pre></td></tr></table></figure><blockquote><p>解释来自ChatGPT</p></blockquote><p>这是 C++ 中用于定义字符串的一些不同方式，涉及到字符集和字符宽度：</p><ol><li><p>**<code>const char\* name = &quot;Cherno&quot;;</code>**（UTF-8）</p><p>这是一个普通的 C 字符串（null-terminated string），使用 <code>const char*</code> 类型的指针来指向以 null 结尾的字符序列。这是常见的字符串表示方式，其中字符的宽度是 1 字节。</p></li><li><p><strong><code>const wchar_t\* name2 = L&quot;Cherno&quot;;</code></strong></p><p>这是使用宽字符集的字符串，<code>L</code> 前缀表示宽字符（wide character）。<code>wchar_t</code> 类型的指针指向以 null 结尾的宽字符序列。宽字符通常是 2 字节，用于支持更广泛的字符集，特别是国际化和多语言环境。</p></li><li><p>**<code>const char16_t\* name3 = u&quot;Cherno&quot;;</code>**（UTF-16）</p><p>这是使用 UTF-16 编码的 Unicode 字符串，<code>u</code> 前缀表示 UTF-16 字符。<code>char16_t</code> 类型的指针指向以 null 结尾的 UTF-16 字符序列。每个字符通常占据 2 字节。</p></li><li><p>**<code>const char32_t\* name4 = U&quot;Cherno&quot;;</code>**（UTF-32）</p><p>这是使用 UTF-32 编码的 Unicode 字符串，<code>U</code> 前缀表示 UTF-32 字符。<code>char32_t</code> 类型的指针指向以 null 结尾的 UTF-32 字符序列。每个字符通常占据 4 字节。</p></li></ol><p>这些不同的字符串表示方式主要用于处理不同的字符集和字符宽度需求。在选择使用哪种类型的字符串时，需要考虑你的应用程序的特定要求，特别是对字符集的支持和国际化的需求。 C++11 引入了这些新的字符串类型和前缀，以更好地支持 Unicode 字符和不同的字符宽度。</p><blockquote><p>虽然我们一直说 wchar 每个字符都是 2 字节，但实际上是由编译器决定的。（Windows：2 bytes，Linux：4 bytes）。 如果你希望它一直是 2 bytes，你可以用<code>char16_t</code></p></blockquote><h2 id="5-在字符串上附加一些东西"><a href="#5-在字符串上附加一些东西" class="headerlink" title="5. 在字符串上附加一些东西"></a>5. 在字符串上附加一些东西</h2><ol><li>string_literals</li></ol><p>in <code>C++ 17</code></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231217155835415.png" alt="string_literals"></p><ol start="2"><li>R method</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// method 1</span><br>std::string name1 = std::<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;Line1\n&quot;</span>) + <span class="hljs-string">&quot;Line2\n&quot;</span> + <span class="hljs-string">&quot;Line3\n&quot;</span>;<br>std::cout &lt;&lt; name1 &lt;&lt; std::endl &lt;&lt; std::endl;<br><br><span class="hljs-comment">// method 2</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::string_literals;<br>std::string name2 = <span class="hljs-string">&quot;Line1\n&quot;</span>s + <span class="hljs-string">&quot;Line2\n&quot;</span> + <span class="hljs-string">&quot;Line3\n&quot;</span>;<br>std::cout &lt;&lt; name2 &lt;&lt; std::endl &lt;&lt; std::endl;<br><br><span class="hljs-comment">// method 3</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* name3 = <span class="hljs-string">R&quot;(Line1</span><br><span class="hljs-string">Line2</span><br><span class="hljs-string">Line3)&quot;</span>;<br><br>std::cout &lt;&lt; name3 &lt;&lt; std::endl &lt;&lt; std::endl;<br><br><span class="hljs-comment">// method 4</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* name4 = <span class="hljs-string">&quot;Line1\n&quot;</span><br><span class="hljs-string">&quot;Line2\n&quot;</span><br><span class="hljs-string">&quot;Line3\n&quot;</span>;<br><br>std::cout &lt;&lt; name4 &lt;&lt; std::endl &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-the-memory-of-the-string-literals-and-how-it-works"><a href="#6-the-memory-of-the-string-literals-and-how-it-works" class="headerlink" title="6. the memory of the string literals and how it works"></a>6. the memory of the string literals and how it works</h2><p>字符串字面量总是存储在只读内存（read-only memory）中</p><h1 id="34-CONST-in-C-⭐"><a href="#34-CONST-in-C-⭐" class="headerlink" title="34. CONST in C++⭐"></a>34. CONST in C++⭐</h1><blockquote><p>我比较喜欢把<code>const</code>叫做一个”fake keyword”，因为它实际上在生成代码的时候并没有做什么。 它有点像类和结构体的可见性，是一种针对开发人员写代码的强制规则，为了让代码保持整洁的机制。</p><p> 基本上 const 就是你做出承诺，某些东西是不变的，是不会改动的。但是它只是个承诺，而且你可以绕过或不遵守这个承诺，就像在现实生活中一样。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_NUMBER = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><h2 id="1-const-与-pointer"><a href="#1-const-与-pointer" class="headerlink" title="1. const 与 pointer"></a>1. const 与 pointer</h2><p>当使用const处理指针的时候，可以是指针本身，也可以是指针指向的内容，取决于const放在声明处的某处，const是在“星号”的左边还是在“星号”的右边。</p><ul><li>const correctness</li></ul><p><code>const</code>类型限定符（type qualifier）是C++语言设计的一大亮点。我们围绕着这个语言特性使用“<code>const</code>正确性” （const correctness）的实践来防止<code>const</code>对象遭到改变。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_NUM = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br>*a = <span class="hljs-number">2</span>;<br>a = &amp;MAX_NUM; <span class="hljs-comment">// 这个写法有问题！</span><br></code></pre></td></tr></table></figure><p>问题在于，<code>a</code> 是一个指向动态分配内存的指针，而 <code>&amp;MAX_NUM</code> 是一个指向常量的指针。你不能将一个指向常量的指针赋值给一个非常量指针，因为这违反了 const-correctness 规则。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_NUM = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br>*a = <span class="hljs-number">2</span>;<br>a = (<span class="hljs-type">int</span>*)&amp;MAX_NUM;<br><br>std::cout &lt;&lt; *a &lt;&lt; std::endl;<br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_NUM = <span class="hljs-number">100</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;  <br>    <span class="hljs-comment">// int const* a = new int; // 两种写法相同</span><br>*a = <span class="hljs-number">2</span>; <span class="hljs-comment">// error! const使你不能修改a指针指向的内容</span><br>a = (<span class="hljs-type">int</span>*)&amp;MAX_NUM;<br><br>std::cout &lt;&lt; *a &lt;&lt; std::endl;<br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_NUM = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br>*a = <span class="hljs-number">2</span>; <br>a = (<span class="hljs-type">int</span>*)&amp;MAX_NUM; <span class="hljs-comment">// error！可以改变指针指向的内容，但是不能把指针自身重新赋值，让它指向其它东西</span><br><br>std::cout &lt;&lt; *a &lt;&lt; std::endl;<br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_NUM = <span class="hljs-number">100</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* <span class="hljs-type">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br><br>   <span class="hljs-comment">// 既不能改变指针的内容，也不能改变指针本身让它指向别处</span><br>*a = <span class="hljs-number">2</span>;  <span class="hljs-comment">//error!</span><br>a = (<span class="hljs-type">int</span>*)&amp;MAX_NUM; <span class="hljs-comment">//error!</span><br><br>std::cout &lt;&lt; *a &lt;&lt; std::endl;<br>std::cout &lt;&lt; a &lt;&lt; std::endl;<br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-类与方法中使用const"><a href="#2-类与方法中使用const" class="headerlink" title="2. 类与方法中使用const"></a>2. 类与方法中使用const</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_X, m_Y;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>  <span class="hljs-comment">// （这种方法只在类中有效）</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// m_X = 1; // error! 因为方法后面加了const关键字，所有该方法不能修改类成员变量 </span><br><span class="hljs-keyword">return</span> m_X;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>m_X = x;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span>* m_X, m_Y;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* <span class="hljs-type">const</span> <span class="hljs-title">GetX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>  <span class="hljs-comment">// 指针m_X指向的内容不能变，指针的内容也不能变</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_X;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><em><strong>ChatGPT</strong></em></p><p>这段代码定义了一个名为 <code>Entity</code> 的类，其中包含了一个私有的指针成员 <code>m_X</code> 和一个私有的整数成员 <code>m_Y</code>。以下是对这段代码的详细解释：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">cppCopy codeclass Entity<br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span>* m_X, m_Y;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* <span class="hljs-type">const</span> <span class="hljs-title">GetX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_X;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p><strong>私有成员变量：</strong></p><ul><li><code>int* m_X</code>: 是一个指向整数的指针。这是一个指针，可以指向一个整数值。但请注意，只有指针本身是私有的，而不是指针指向的内容。</li><li><code>int m_Y</code>: 是一个整数。这个成员变量是一个普通的整数。</li></ul></li><li><p><strong>公有成员函数 <code>GetX</code>：</strong></p><ul><li><p><code>const int* const GetX() const</code>: 是一个公有成员函数，返回一个指向整数的常量指针。</p></li><li><p><code>const</code>关键字在不同位置的含义：</p></li></ul></li><li><p><code>const int*</code>: 表示返回的指针指向的内容是常量，<strong>即不能通过这个指针修改对象的值</strong>。</p><ul><li><code>const int* const</code>: 表示返回的指针本身也是常量，<strong>即不能通过这个指针修改指针的值</strong>，即不能使它指向其他内存地址。</li></ul></li><li><p><code>const</code> 关键字在函数的末尾表示这是一个常量成员函数，即在<strong>函数内不能修改对象的成员变量</strong>。</p></li><li><p><strong>GetX 函数的作用：</strong></p><ul><li><code>GetX</code> 函数返回一个指向整数的常量指针，指向对象内部的 <code>m_X</code> 成员。</li></ul></li><li><p>由于返回的指针是常量指针，外部代码不能通过这个指针修改 <code>m_X</code> 指向的内容。</p></li><li><p>同时，由于返回的指针本身也是常量指针，外部代码不能通过这个指针修改它指向的内存地址，即不能改变 <code>m_X</code> 的指向。</p></li></ul><p>这种设计可以提供一定程度的数据封装和安全性，限制了外部对 <code>m_X</code> 的直接修改。</p></blockquote><p><em>需要注意一个很有趣的地方！</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> int* m<span class="hljs-emphasis">_X, m_</span>Y;<br><span class="hljs-bullet">-</span> 这样写的代表着m<span class="hljs-emphasis">_X是int型指针变量，而m_</span>Y仍然是int型变量<br><span class="hljs-bullet">-</span> int* m<span class="hljs-emphasis">_X, *m_</span>Y<br><span class="hljs-bullet">-</span> 而这样写才能使得两个变量都是int型指针变量<br></code></pre></td></tr></table></figure><h1 id="35-The-Mutable-Keyword-in-C"><a href="#35-The-Mutable-Keyword-in-C" class="headerlink" title="35. The Mutable Keyword in C++"></a>35. The Mutable Keyword in C++</h1><p><code>mutable</code> means something can be changed.</p><h2 id="1-mutable-and-const"><a href="#1-mutable-and-const" class="headerlink" title="1. mutable and const"></a>1. mutable and const</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br><span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> m_DebugCount = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>m_DebugCount++;<br><span class="hljs-keyword">return</span> m_Name;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> Entity e;<br>e.<span class="hljs-built_in">GetName</span>();<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-mutable-and-lambda"><a href="#2-mutable-and-lambda" class="headerlink" title="2. mutable and lambda"></a>2. mutable and lambda</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> x = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">auto</span> f = [=]() <span class="hljs-keyword">mutable</span><br>&#123;<br>    x++;<br>    std::cout &lt;&lt; x &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-built_in">f</span>();<br></code></pre></td></tr></table></figure><h1 id="36-Member-Initializer-Lists-in-C-Constructor-Initializer-List-⭐"><a href="#36-Member-Initializer-Lists-in-C-Constructor-Initializer-List-⭐" class="headerlink" title="36. Member Initializer Lists in C++ (Constructor Initializer List)⭐"></a>36. Member Initializer Lists in C++ (Constructor Initializer List)⭐</h1><blockquote><p>成员初始化列表，在构造函数中初始化类成员（变量）的一种方式</p></blockquote><h2 id="1-构造函数-初始化成员（变量）"><a href="#1-构造函数-初始化成员（变量）" class="headerlink" title="1. 构造函数-&gt;初始化成员（变量）"></a>1. 构造函数-&gt;初始化成员（变量）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>()<br>&#123;<br>m_Name = <span class="hljs-string">&quot;Unknow&quot;</span>;<br>&#125;<br><span class="hljs-built_in">Entity</span>(<span class="hljs-type">const</span> std::string&amp; name)<br>&#123;<br>m_Name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Name;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> Entity e0;<br>std::cout &lt;&lt; e<span class="hljs-number">0.</span><span class="hljs-built_in">GetName</span>() &lt;&lt; std::endl;<br><br><span class="hljs-function"><span class="hljs-type">const</span> Entity <span class="hljs-title">e1</span><span class="hljs-params">(<span class="hljs-string">&quot;Cherno&quot;</span>)</span></span>;<br>std::cout &lt;&lt; e<span class="hljs-number">1.</span><span class="hljs-built_in">GetName</span>() &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-成员初始化列表"><a href="#2-成员初始化列表" class="headerlink" title="2. 成员初始化列表"></a>2. 成员初始化列表</h2><blockquote><p>确保成员初始化列表时，要与成员变量声明时的的<strong>顺序一致</strong>！！</p><p>为什么需要成员初始化列表？</p><ul><li>因为构造函数的功能往往不仅仅是初始化成员变量，为了使得构造函数看起来简洁易读一些，我们可以把杂乱的初始化成员变量的这一部分以成员初始化列表的形式单独写做一行，这样就简化了构造函数。-&gt; 1. 简化构造函数</li></ul></blockquote><ol><li>简化构造函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br><span class="hljs-type">int</span> m_Score;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>()<br>: <span class="hljs-built_in">m_Name</span>(<span class="hljs-string">&quot;Unknown&quot;</span>), <span class="hljs-built_in">m_Score</span>(<span class="hljs-number">0</span>)<br>&#123;<br>&#125;<br><br><span class="hljs-built_in">Entity</span>(<span class="hljs-type">const</span> std::string&amp; name, <span class="hljs-type">const</span> <span class="hljs-type">int</span> score)<br>: <span class="hljs-built_in">m_Name</span>(name), <span class="hljs-built_in">m_Score</span>(score)<br>&#123;<br>m_Name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; <span class="hljs-title">GetScore</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Score;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> Entity e0;<br>std::cout &lt;&lt; e<span class="hljs-number">0.</span><span class="hljs-built_in">GetName</span>() &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; e<span class="hljs-number">0.</span><span class="hljs-built_in">GetScore</span>() &lt;&lt; std::endl;<br><br><span class="hljs-function"><span class="hljs-type">const</span> Entity <span class="hljs-title">e1</span><span class="hljs-params">(<span class="hljs-string">&quot;Cherno&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br>std::cout &lt;&lt; e<span class="hljs-number">1.</span><span class="hljs-built_in">GetName</span>() &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; e<span class="hljs-number">1.</span><span class="hljs-built_in">GetScore</span>() &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>避免构造两次</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Example</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Created Example!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-built_in">Example</span>(<span class="hljs-type">int</span> x)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Created Example with &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br>Example m_Example;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>()<br>&#123;<br>m_Name = std::<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;Unknown&quot;</span>);<br>m_Example = <span class="hljs-built_in">Example</span>(<span class="hljs-number">100</span>);<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> Entity e0;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// 输出结果是以下两行</span><br><span class="hljs-comment">// Created Example!</span><br><span class="hljs-comment">// Created Example with 100!</span><br><span class="hljs-comment">// 为什么会分别调用了默认构造函数和有参数的构造函数呢？ 明明在Entity类的构造函数中只使用了m_Example = Example(100);</span><br><span class="hljs-comment">// 这是因为Example m_Example;调用了一次Example的默认构造函数</span><br><span class="hljs-comment">// 因此这就相当于把Example实例化了一次然后又实例化了一次，这就造成了性能的浪费。</span><br><span class="hljs-comment">// 为了解决这个问题，可以使用成员列表的方式来解决。</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Example</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Created Example!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-built_in">Example</span>(<span class="hljs-type">int</span> x)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Created Example with &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br>Example m_Example;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>()<br>: <span class="hljs-built_in">m_Name</span>(<span class="hljs-string">&quot;Unkonwn&quot;</span>), <span class="hljs-built_in">m_Example</span>(<span class="hljs-built_in">Example</span>(<span class="hljs-number">100</span>)) <span class="hljs-comment">// m_Example(100)，写成这样的效果也是一样的。</span><br>&#123;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> Entity e0;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><br><span class="hljs-comment">// 输出结果</span><br><span class="hljs-comment">// Created Example with 100!</span><br></code></pre></td></tr></table></figure><h1 id="37-Ternary-Operator-in-C-Conditional-Assignment"><a href="#37-Ternary-Operator-in-C-Conditional-Assignment" class="headerlink" title="37. Ternary Operator in C++(Conditional Assignment)"></a>37. Ternary Operator in C++(Conditional Assignment)</h1><blockquote><p>Ternary Operator: 三元运算符-&gt; 问号和冒号（本质上就是if语句的语法糖）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> s_Level = <span class="hljs-number">1</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> s_Speed = <span class="hljs-number">2</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// method 1</span><br><span class="hljs-keyword">if</span> (s_Level &gt; <span class="hljs-number">5</span>)<br>s_Speed = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">else</span><br>s_Speed = <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">// method 2</span><br>s_Speed = s_Level &gt; <span class="hljs-number">5</span> ? <span class="hljs-number">10</span> : <span class="hljs-number">5</span>;<br>std::string rank = s_Level &gt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;Master&quot;</span> : <span class="hljs-string">&quot;Beginner&quot;</span>;<br><br>s_Speed = s_Level &gt; <span class="hljs-number">5</span> ? s_Level &gt; <span class="hljs-number">10</span> ? <span class="hljs-number">15</span> : <span class="hljs-number">10</span> : <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 尽量不要做三运运算符的嵌套，易读性可能会大大降低</span><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="38-How-to-create-instantiate-object-C-⭐"><a href="#38-How-to-create-instantiate-object-C-⭐" class="headerlink" title="38. How to create&#x2F;instantiate object C++⭐"></a>38. How to create&#x2F;instantiate object C++⭐</h1><blockquote><p>C++创建对象</p><p>实例化定义的类</p></blockquote><h2 id="1-在栈上创建对象（stack）"><a href="#1-在栈上创建对象（stack）" class="headerlink" title="1. 在栈上创建对象（stack）"></a>1. 在栈上创建对象（stack）</h2><ul><li>最平常是创建对象的方法</li></ul><p>几乎所有时候。如果你可以这样创建对象的话，那就这么来创建，这是基本规则。 因为在 C++中这是初始化对象最快的方式和最受管控的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>() : <span class="hljs-built_in">m_Name</span>(<span class="hljs-string">&quot;Unkown&quot;</span>) &#123;&#125;<br><span class="hljs-built_in">Entity</span>(<span class="hljs-type">const</span> std::string name) : <span class="hljs-built_in">m_Name</span>(name) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_Name; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity entity;<br>std::cout &lt;&lt; entity.<span class="hljs-built_in">GetName</span>() &lt;&lt; std::endl;<br><br><span class="hljs-function">Entity <span class="hljs-title">entity1</span><span class="hljs-params">(<span class="hljs-string">&quot;Cherno&quot;</span>)</span></span>;<br><span class="hljs-comment">// Entity entity1 = Entity(&quot;Cherno&quot;); // 类型 实例名 = 构造函数(参数)</span><br>std::cout &lt;&lt; entity<span class="hljs-number">1.</span><span class="hljs-built_in">GetName</span>() &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>需要使得创建的对象在函数生存期之外依然存在</li></ul><ol><li>定义在函数内的对象在函数结束之后，所占用的内存便会被释放</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>() : <span class="hljs-built_in">m_Name</span>(<span class="hljs-string">&quot;Unkown&quot;</span>) &#123;&#125;<br><span class="hljs-built_in">Entity</span>(<span class="hljs-type">const</span> std::string name) : <span class="hljs-built_in">m_Name</span>(name) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_Name; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Entity <span class="hljs-title">entity</span><span class="hljs-params">(<span class="hljs-string">&quot;Cherno&quot;</span>)</span></span>;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// a和entity的生命周期仅存在函数function之内，函数结束了之后，变量所占用的内存也就被释放了。</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">Function</span>();<br><span class="hljs-comment">// 但我们调用function的时，就为这个函数创建了一个栈结构</span><br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2. </p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231227150550541.png" alt="image-20231227150550541"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">console输入的内容如下：<br>1. Cherno<br>2.<br><br>解释一下为什么是这样的输出。<br></code></pre></td></tr></table></figure><p>叫做Cherno的entity实例的生命周期仅在大括号之内，跳出大括号后，这个叫 Cherno 的 entity 对象已经不存在了，它已经不存在栈结构里了，所以就没有输出了。</p><p>另一个我们不想在栈上分配的原因可能是：如果这个 entity 太大了，同时我们可能有很多的 entity，我们就可能没有足够的空间来进行分配，因为栈通常都很小，一般是一两兆，这取决于你的平台和编译器。 因此你可能不得不在<em>heap</em>上进行分配。</p><blockquote><p>突然想到的一个内容，和本节内容相关</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity* e;<br><br>&#123;<br><span class="hljs-function">Entity <span class="hljs-title">entity</span><span class="hljs-params">(<span class="hljs-string">&quot;Cherno&quot;</span>)</span></span>;<br>e = &amp;entity;<br>std::cout &lt;&lt; entity.<span class="hljs-built_in">GetName</span>() &lt;&lt; std::endl;<br>std::cout &lt;&lt; e-&gt;<span class="hljs-built_in">GetName</span>() &lt;&lt; std::endl;<br>std::cout &lt;&lt; (*e).<span class="hljs-built_in">GetName</span>() &lt;&lt; std::endl;<br>&#125;<br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Cherno</span><br><span class="hljs-comment">Cherno</span><br><span class="hljs-comment">Cherno</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ol><li><strong><code>std::cout &lt;&lt; entity.GetName() &lt;&lt; std::endl;</code></strong><ul><li>直接通过对象 <code>entity</code> 调用 <code>GetName</code> 函数，输出实体的名称。</li><li>这种方式是直接访问对象的成员函数，因为 <code>entity</code> 是 <code>Entity</code> 类的一个实例。</li></ul></li><li><strong><code>std::cout &lt;&lt; e-&gt;GetName() &lt;&lt; std::endl;</code></strong><ul><li>通过指针 <code>e</code> 调用 <code>GetName</code> 函数，输出实体的名称。</li><li>这种方式使用了指针，<code>e</code> 是一个指向 <code>Entity</code> 对象的指针，通过箭头运算符 <code>-&gt;</code> 访问对象的成员函数。</li></ul></li><li><strong><code>std::cout &lt;&lt; (\*e).GetName() &lt;&lt; std::endl;</code></strong><ul><li>同样是通过指针 <code>e</code> 调用 <code>GetName</code> 函数，输出实体的名称。</li><li>这种方式使用了解引用操作符 <code>*</code>，先解引用指针，然后再访问对象的成员函数。</li></ul></li></ol><p>在这个特定的示例中，这三种方式都会输出相同的结果，即实体的名称。选择使用哪种方式通常取决于代码的上下文和个人偏好。在一般情况下，直接通过对象调用成员函数是最直观和常见的方式。使用指针或引用通常用于处理动态分配的对象或在函数参数中传递对象，但需要小心确保指针有效且指向有效的对象。</p></blockquote><h2 id="2-在堆上分配-heap"><a href="#2-在堆上分配-heap" class="headerlink" title="2. 在堆上分配(heap)"></a>2. 在堆上分配(heap)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>() : <span class="hljs-built_in">m_Name</span>(<span class="hljs-string">&quot;Unkown&quot;</span>) &#123;&#125;<br><span class="hljs-built_in">Entity</span>(<span class="hljs-type">const</span> std::string name) : <span class="hljs-built_in">m_Name</span>(name) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_Name; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity* e;<br><br>&#123;<br>Entity* entity = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>(<span class="hljs-string">&quot;Cherno&quot;</span>);<br>e = entity; <span class="hljs-comment">// 这里只是复制的entity对象的地址</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;1. &quot;</span> &lt;&lt; entity-&gt;<span class="hljs-built_in">GetName</span>() &lt;&lt; std::endl;<br>&#125;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;2. &quot;</span> &lt;&lt; e-&gt;<span class="hljs-built_in">GetName</span>() &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br><span class="hljs-keyword">delete</span> e;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">程序输出内容如下：</span><br><span class="hljs-comment">1. Cherno</span><br><span class="hljs-comment">2. Cherno</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>Attention: 在使用了new关键字之后，不用的内存要注意使用delete关键字释放掉，防止内存泄漏。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>两种创建对象的方法如何选择？</p><ul><li>如果要创建的对象很大-&gt; heap</li><li>显式地控制对象的生存期 -&gt; heap</li><li>其他 -&gt; stack</li></ul><h1 id="39-The-New-keyword-in-C"><a href="#39-The-New-keyword-in-C" class="headerlink" title="39. The New keyword in C++"></a>39. The New keyword in C++</h1> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br><span class="hljs-comment">// 为变量a在内存中分配4 bytes大小的连续内存</span><br></code></pre></td></tr></table></figure><ul><li>关于连续内存的问题，计算机并不是搜索出来的这个4 bytes的连续内存，而是存在一种叫做空闲列表(free list)的东西，它会维护那些有空闲字节的地址。</li><li>new的作用就是要找到一个足够大的内存块，以满足我们的需求。</li><li><code>Entity* e = new Entity();</code>  在这里它不仅分配了空间，还调用了构造函数。</li><li>通常，调用<em>new</em>关键字会调用底层的C函数<em>malloc</em>，它是用来分配内存的。 <code>malloc()</code>的实际作用是，传入一个<code>size</code>，也就是我们需要多少个字节，然后返回一个<code>void指针</code></li><li><code>new</code>本身实际上是一个operator(操作符)，操作符意味着可以<strong>操作符重载</strong></li><li>用完<code>new</code>之后记得使用<code>delete</code></li><li>C++中的new和delete对应到C中就是malloc和free</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br><span class="hljs-keyword">delete</span> a;<br><br><span class="hljs-type">int</span>* b = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">50</span>];<br><span class="hljs-keyword">delete</span>[] b;<br><br>Entity* e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>();<br><span class="hljs-keyword">delete</span> e;<br></code></pre></td></tr></table></figure><ul><li><p>placement new</p><ul><li><pre><code class="C++">int* b = new int[50];Entity* e = new(b) Entity();<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><br>  - 这决定了它的内存来自哪里，细节以后再讲，这里只是展示它的语法。<br><br>  - 这里将 `Entity` 对象构造在已分配的内存地址 `b` 上，而不是使用默认的内存分配器。这样可以在指定的内存位置创建对象。这行代码在 `b` 指针指向的内存位置上构造了一个 `Entity` 对象，并返回指向该对象的指针，并将其赋给了 `e` 指针。<br><br># <span class="hljs-number">40.</span> <span class="hljs-keyword">Implicit</span> Conversion and the Explicit keyword <span class="hljs-keyword">in</span> C++<br><br>&gt; - 隐式转换与explicit关键字<br>&gt;<br>&gt; <span class="hljs-keyword">implicit</span>：隐式的<br>&gt; explicit：显式的<br>&gt;<br>&gt; - *<span class="hljs-keyword">implicit</span>*(隐式)的意思是不会明确地告诉你它要做什么，它有点像在某种情况下自动的工作。实际上 C++允许编译器对代码进行一次隐式的转换。<br>&gt;<br>&gt; - 如果我开始使用一种数据类型作为另一种类型来使用，在这两种类型之间就会有类型转换，C++允许隐式地转换，不需要用*cast*等做强制转换。<br><br>## <span class="hljs-number">1.</span> <span class="hljs-keyword">Implicit</span> Conversion<br><br>```C++<br>#<span class="hljs-keyword">include</span> &lt;iostream&gt;<br>#<span class="hljs-keyword">include</span> &lt;string&gt;<br><br><span class="hljs-keyword">class</span> Entity<br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br><span class="hljs-built_in">int</span> m_Age;<br><span class="hljs-keyword">public</span>:<br>Entity(const std::string&amp; <span class="hljs-keyword">name</span>)<br>: m_Name(<span class="hljs-keyword">name</span>), m_Age(-<span class="hljs-number">1</span>) &#123;&#125;<br>Entity(<span class="hljs-built_in">int</span> age)<br>: m_Name(<span class="hljs-string">&quot;Uknown&quot;</span>), m_Age(age) &#123;&#125;<br>&#125;;<br><br><span class="hljs-built_in">int</span> main()<br>&#123;<br>Entity a(<span class="hljs-string">&quot;Cherno&quot;</span>);<br>Entity b(<span class="hljs-number">22</span>);<br><br>Entity c = Entity(<span class="hljs-string">&quot;Cherno&quot;</span>);<br>Entity d = Entity(<span class="hljs-number">22</span>);<br><br>Entity e = std::string(<span class="hljs-string">&quot;Cherno&quot;</span>); // 隐式类型转换<br>Entity f = <span class="hljs-number">22</span>; // 隐式类型转换<br><br>std::cin.get();<br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="2-explicit-keyword"><a href="#2-explicit-keyword" class="headerlink" title="2. explicit keyword"></a>2. explicit keyword</h2><ul><li>如果把explicit关键字放在构造函数之前，这就意味着不能使用隐式构造</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>std::string m_Name;<br><span class="hljs-type">int</span> m_Age;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>(<span class="hljs-type">const</span> std::string&amp; name)<br>: <span class="hljs-built_in">m_Name</span>(name), <span class="hljs-built_in">m_Age</span>(<span class="hljs-number">-1</span>) &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Entity</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span></span><br><span class="hljs-function">: m_Name(<span class="hljs-string">&quot;Uknown&quot;</span>), m_Age(age) &#123;</span>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Entity <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;Cherno&quot;</span>)</span></span>;<br><span class="hljs-function">Entity <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">22</span>)</span></span>;<br><br>Entity c = <span class="hljs-built_in">Entity</span>(<span class="hljs-string">&quot;Cherno&quot;</span>);<br>Entity d = <span class="hljs-built_in">Entity</span>(<span class="hljs-number">22</span>);<br><br>Entity e = std::<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;Cherno&quot;</span>);<br>Entity f = (Entity)<span class="hljs-number">22</span>;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="41-Operators-and-Operator-overloading-in-C-⭐"><a href="#41-Operators-and-Operator-overloading-in-C-⭐" class="headerlink" title="41. Operators and Operator overloading in C++⭐"></a>41. Operators and Operator overloading in C++⭐</h1><h2 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs .markdown">operator: <br>- &#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;<br>- &#x27;*(dereference)&#x27;, &#x27;-&gt;&#x27;, &#x27;+=&#x27;, &#x27;&amp;&#x27;, &#x27;&lt;&lt;&#x27;, <br>- &#x27;new&#x27;, &#x27;delete&#x27;, <br>- &#x27;,&#x27;, &#x27;()&#x27;, &#x27;[]&#x27;<br></code></pre></td></tr></table></figure><h2 id="2-运算符重载-and"><a href="#2-运算符重载-and" class="headerlink" title="2. 运算符重载 + and -"></a>2. 运算符重载 + and -</h2><ul><li><p><em>overload</em>重载这个术语本质就是给运算符重载赋予新的含义，或者添加参数，或者创建 允许在程序中国定义或更改运算符的行为。</p></li><li><p>不过说到底，运算符就是<em>function</em>，就是函数。 与其写出函数名<code>add</code>，你只用写一个<code>+</code>这样的运算符就行，在很多情况下这真的有助于让你的代码更干净整洁，可读性更好。</p></li><li><p>运算符重载的使用应该非常少，而且只是在完全有意义的情况下使用。</p></li></ul><ol><li>没有运算符重载的时候写的程序如下：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector2</span><br>&#123;<br><span class="hljs-type">float</span> x, y;<br><br><span class="hljs-built_in">Vector2</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y)<br>: <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br><br><span class="hljs-function">Vector2 <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">const</span> Vector2&amp; other)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector2</span>(x + other.x, y + other.y);<br>&#125;<br><br><span class="hljs-function">Vector2 <span class="hljs-title">Multiply</span><span class="hljs-params">(<span class="hljs-type">const</span> Vector2&amp; other)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector2</span>(x * other.x, y * other.y);<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Vector2 <span class="hljs-title">position</span><span class="hljs-params">(<span class="hljs-number">4.0f</span>, <span class="hljs-number">4.0f</span>)</span></span>;<br><span class="hljs-function">Vector2 <span class="hljs-title">Speed</span><span class="hljs-params">(<span class="hljs-number">0.5f</span>, <span class="hljs-number">1.5f</span>)</span></span>;<br><span class="hljs-function">Vector2 <span class="hljs-title">Powerup</span><span class="hljs-params">(<span class="hljs-number">1.1f</span>, <span class="hljs-number">1.1f</span>)</span></span>;<br>Vector2 result = position.<span class="hljs-built_in">Add</span>(Speed.<span class="hljs-built_in">Multiply</span>(Powerup));<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>有运算符重载的时候代码如下：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector2</span><br>&#123;<br><span class="hljs-type">float</span> x, y;<br><br><span class="hljs-built_in">Vector2</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y)<br>: <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br><br><span class="hljs-function">Vector2 <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">const</span> Vector2&amp; other)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector2</span>(x + other.x, y + other.y);<br>&#125;<br>Vector2 <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Vector2&amp; other) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Add</span>(other);<br>&#125;<br><br><span class="hljs-function">Vector2 <span class="hljs-title">Multiply</span><span class="hljs-params">(<span class="hljs-type">const</span> Vector2&amp; other)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector2</span>(x * other.x, y * other.y);<br>&#125;<br>Vector2 <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Vector2&amp; other) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Multiply</span>(other);<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Vector2 <span class="hljs-title">position</span><span class="hljs-params">(<span class="hljs-number">4.0f</span>, <span class="hljs-number">4.0f</span>)</span></span>;<br><span class="hljs-function">Vector2 <span class="hljs-title">Speed</span><span class="hljs-params">(<span class="hljs-number">0.5f</span>, <span class="hljs-number">1.5f</span>)</span></span>;<br><span class="hljs-function">Vector2 <span class="hljs-title">Powerup</span><span class="hljs-params">(<span class="hljs-number">1.1f</span>, <span class="hljs-number">1.1f</span>)</span></span>;<br><br><span class="hljs-comment">// 没有运算符重载</span><br>Vector2 result1 = position.<span class="hljs-built_in">Add</span>(Speed.<span class="hljs-built_in">Multiply</span>(Powerup));<br><span class="hljs-comment">// 有运算符重载</span><br>Vector2 result2 = position + Speed * Powerup;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-运算符重载"><a href="#3-运算符重载" class="headerlink" title="3. 运算符重载 &lt;&lt;"></a>3. 运算符重载 &lt;&lt;</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector2</span><br>&#123;<br><span class="hljs-type">float</span> x, y;<br><br><span class="hljs-built_in">Vector2</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y)<br>: <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br><br><span class="hljs-function">Vector2 <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">const</span> Vector2&amp; other)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector2</span>(x + other.x, y + other.y);<br>&#125;<br>Vector2 <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Vector2&amp; other) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Add</span>(other);<br>&#125;<br><br><span class="hljs-function">Vector2 <span class="hljs-title">Multiply</span><span class="hljs-params">(<span class="hljs-type">const</span> Vector2&amp; other)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector2</span>(x * other.x, y * other.y);<br>&#125;<br>Vector2 <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Vector2&amp; other) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Multiply</span>(other);<br>&#125;<br>&#125;;<br><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="hljs-type">const</span> Vector2&amp; other)<br>&#123;<br>stream &lt;&lt; other.x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; other.y;<br><span class="hljs-keyword">return</span> stream;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Vector2 <span class="hljs-title">position</span><span class="hljs-params">(<span class="hljs-number">4.0f</span>, <span class="hljs-number">4.0f</span>)</span></span>;<br><span class="hljs-function">Vector2 <span class="hljs-title">Speed</span><span class="hljs-params">(<span class="hljs-number">0.5f</span>, <span class="hljs-number">1.5f</span>)</span></span>;<br><span class="hljs-function">Vector2 <span class="hljs-title">Powerup</span><span class="hljs-params">(<span class="hljs-number">1.1f</span>, <span class="hljs-number">1.1f</span>)</span></span>;<br><br><span class="hljs-comment">// 没有运算符重载</span><br>Vector2 result1 = position.<span class="hljs-built_in">Add</span>(Speed.<span class="hljs-built_in">Multiply</span>(Powerup));<br><span class="hljs-comment">// 有运算符重载</span><br>Vector2 result2 = position + Speed * Powerup;<br><br>std::cout &lt;&lt; result2 &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-运算符重载-and"><a href="#4-运算符重载-and" class="headerlink" title="4. 运算符重载 &#x3D;&#x3D; and !&#x3D;"></a>4. 运算符重载 &#x3D;&#x3D; and !&#x3D;</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector2</span><br>&#123;<br><span class="hljs-type">float</span> x, y;<br><br><span class="hljs-built_in">Vector2</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y)<br>: <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br><br><span class="hljs-function">Vector2 <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">const</span> Vector2&amp; other)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector2</span>(x + other.x, y + other.y);<br>&#125;<br>Vector2 <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Vector2&amp; other) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Add</span>(other);<br>&#125;<br><br><span class="hljs-function">Vector2 <span class="hljs-title">Multiply</span><span class="hljs-params">(<span class="hljs-type">const</span> Vector2&amp; other)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector2</span>(x * other.x, y * other.y);<br>&#125;<br>Vector2 <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Vector2&amp; other) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Multiply</span>(other);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Vector2&amp; other) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> x == other.x &amp;&amp; y == other.y;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> Vector2&amp; other) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> == other); <span class="hljs-comment">// this pointer 不太懂，后面会学习</span><br>&#125;<br>&#125;;<br><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="hljs-type">const</span> Vector2&amp; other)<br>&#123;<br>stream &lt;&lt; other.x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; other.y;<br><span class="hljs-keyword">return</span> stream;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Vector2 <span class="hljs-title">position</span><span class="hljs-params">(<span class="hljs-number">4.0f</span>, <span class="hljs-number">4.0f</span>)</span></span>;<br><span class="hljs-function">Vector2 <span class="hljs-title">Speed</span><span class="hljs-params">(<span class="hljs-number">0.5f</span>, <span class="hljs-number">1.5f</span>)</span></span>;<br><span class="hljs-function">Vector2 <span class="hljs-title">Powerup</span><span class="hljs-params">(<span class="hljs-number">1.1f</span>, <span class="hljs-number">1.1f</span>)</span></span>;<br><br><span class="hljs-comment">// 没有运算符重载</span><br>Vector2 result1 = position.<span class="hljs-built_in">Add</span>(Speed.<span class="hljs-built_in">Multiply</span>(Powerup));<br><span class="hljs-comment">// 有运算符重载</span><br>Vector2 result2 = position + Speed * Powerup;<br><br>std::cout &lt;&lt; result1 &lt;&lt; std::endl;<br>std::cout &lt;&lt; result2 &lt;&lt; std::endl;<br><br><span class="hljs-keyword">if</span> (result1 == result2)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;equality&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-keyword">if</span> (result1 != result2)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;not equality&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="42-The-“this”-keyword-in-C-⭐"><a href="#42-The-“this”-keyword-in-C-⭐" class="headerlink" title="42. The “this” keyword in C++ ⭐"></a>42. The “this” keyword in C++ ⭐</h1><p>C++中有这样一个关键字<em>this</em>，通过它可以访问成员函数。 <code>this</code>是一个指向当前对象实例的指针，该<em>method</em>(方法)属于这个对象实例。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintEntity</span><span class="hljs-params">(Entity* e)</span></span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> x, y;<br><br>    <span class="hljs-built_in">Entity</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;x = x;<br>        <span class="hljs-keyword">this</span>-&gt;y = y;<br>        <span class="hljs-built_in">PrintEntity</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// this-&gt;x = 5;</span><br>        <span class="hljs-type">const</span> Entity* e = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;x;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintEntity</span><span class="hljs-params">(Entity* e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Print</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="43-Obeject-lifetime-in-C-Stack-Scope-lifetimes-⭐"><a href="#43-Obeject-lifetime-in-C-Stack-Scope-lifetimes-⭐" class="headerlink" title="43. Obeject lifetime in C++ (Stack&#x2F;Scope lifetimes)⭐"></a>43. Obeject lifetime in C++ (Stack&#x2F;Scope lifetimes)⭐</h1><blockquote><p>scope: 作用域</p></blockquote><h2 id="1-基于stack和基于heap的变量在对象生存期上的区别"><a href="#1-基于stack和基于heap的变量在对象生存期上的区别" class="headerlink" title="1. 基于stack和基于heap的变量在对象生存期上的区别"></a>1. 基于stack和基于heap的变量在对象生存期上的区别</h2><blockquote><ul><li>基于stack的变量在一出作用域，该变量所占用的内存空间便被释放了；</li><li>基于heap的变量只要不手动释放内存空间，则该内存空间便不会被释放，知道程序的结束。</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Created Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destoryed Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        Entity e; <span class="hljs-comment">// 定义来栈上的对象</span><br>    &#125;<span class="hljs-comment">// e的作用域就在这个大括号之中，执行完大括号之后，就调用了析构函数。</span><br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// 输入如下：</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Created Entity!</span><br><span class="hljs-comment">Destoryed Entity!</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Created Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destoryed Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        Entity* e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>(); <br>    &#125;<span class="hljs-comment">//定义在heap上的对象，如果不使用delete手动释放内存空间则该内存空间就不会被释放，因此没有调用析构函数。</span><br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// 输入如下：</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Created Entity!</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li><p>举个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//一段有问题的代码！！！</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">CreatedArray</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> array[<span class="hljs-number">50</span>];<br>    <span class="hljs-keyword">return</span> array; <span class="hljs-comment">//array的生存期仅在这个大括号之内，跳出大括号之后，array所定义的内存空间都被释放掉了，所以返回的地址也没有什么用了。</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-built_in">CreatedArray</span>();<br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>改正方法</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//一段有问题的代码！！！</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">CreatedArray</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>* array = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">50</span>]; <span class="hljs-comment">// 将array定义在heap上</span><br>    <span class="hljs-keyword">return</span> array; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-built_in">CreatedArray</span>();<br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-scope-pointer"><a href="#2-scope-pointer" class="headerlink" title="2. scope pointer"></a>2. scope pointer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Created Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destoryed Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScopePtr</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    Entity* m_Ptr;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ScopePtr</span>(Entity* ptr)<br>        : <span class="hljs-built_in">m_Ptr</span>(ptr) &#123;&#125;<br><br>    ~<span class="hljs-built_in">ScopePtr</span>()<br>    &#123;<br>        <span class="hljs-keyword">delete</span> m_Ptr;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        ScopePtr e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>();<br>    &#125;<br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// 输入如下：</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Created Entity!</span><br><span class="hljs-comment">Destoryed Entity!</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 对象定义在heap上,但是我们通过ScopePtr来实现了new-delete, 在跳出大括号的时候,自动调用delete了．</span><br></code></pre></td></tr></table></figure><h1 id="44-SMART-POINTERS-in-C-std-unique-ptr-std-shared-ptr-std-weak-ptr"><a href="#44-SMART-POINTERS-in-C-std-unique-ptr-std-shared-ptr-std-weak-ptr" class="headerlink" title="44. SMART POINTERS in C++ (std::unique_ptr, std::shared_ptr, std::weak_ptr)"></a>44. SMART POINTERS in C++ (std::unique_ptr, std::shared_ptr, std::weak_ptr)</h1><blockquote><p>smart pointers使得new-delete的过程自动化</p></blockquote><h2 id="1-unique-ptr—scope-pointer"><a href="#1-unique-ptr—scope-pointer" class="headerlink" title="1. unique_ptr—scope pointer"></a>1. unique_ptr—scope pointer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Created Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destoryed Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Hello world!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        <span class="hljs-comment">// method 1: 不可以！！！</span><br>        <span class="hljs-comment">// std::unique_ptr&lt;Entity&gt; entity = new Entity(); // 这种写法不可以，因为unique_ptr的构造函数有explicit关键词，只能接受显式构造</span><br><br>        <span class="hljs-comment">// method 2: 可以，但是因为异常安全问题，不采用这种方法！！</span><br>        <span class="hljs-comment">// std::unique_ptr&lt;Entity&gt; entity(new Entity());</span><br><br>        <span class="hljs-comment">// method 3: 最好的方法，因为这样做安全。</span><br>        std::unique_ptr&lt;Entity&gt; entity = std::<span class="hljs-built_in">make_unique</span>&lt;Entity&gt;();<br>        entity-&gt;<span class="hljs-built_in">Print</span>();<br>    &#125;<br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">// 程序输入如下</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Created Entity!</span><br><span class="hljs-comment">Hello world!</span><br><span class="hljs-comment">Destoryed Entity!</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p>一个<strong>更好</strong>的做法是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::unique_ptr&lt;Entity&gt; entity = std::<span class="hljs-built_in">make_unique</span>&lt;Entity&gt;();<br></code></pre></td></tr></table></figure><p>这对于<code>unique_ptr</code>来说很重要，主要原因是出于<em>exception safety</em> （异常安全），如果构造函数碰巧抛出异常，它会稍微安全一些。你不会最终得到一个没有引用的<em>dangling pointer</em>（悬空指针）而造成过内泄漏。</p></blockquote><ul><li>前面提到了<code>unique_ptr</code>不能被复制。如果你去看它的定义，你会发现它的拷贝构造函数和拷贝构造操作符实际上被删除了，这就是为什么你运行如下代码时会编译错误。</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231229103852279.png" alt="image-20231229103852279"></p><h2 id="2-shared-ptr"><a href="#2-shared-ptr" class="headerlink" title="2. shared_ptr"></a>2. shared_ptr</h2><ul><li>shared_ptr使用的是<em>reference counting</em>（引用计数）.</li></ul><p>举个例子，我刚创建了一个共享指针，又创建了另一个共享指针来复制它，此时我的引用计数是 2。第一个指针失效时，我的引用计数器减少 1，然后最后一个失效时，我的引用计数回到 0，就真的“dead”了，因此内存被释放。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Created Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destoryed Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Hello world!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        <span class="hljs-comment">// method 1: 不可以！因为shared_ptr需要分配控制块来存储引用计数。</span><br>        <span class="hljs-comment">// std::shared_ptr&lt;Entity&gt; sharedEntity(new Entity());</span><br><br>        <span class="hljs-comment">// method 2: 使用这样方法！</span><br>        std::shared_ptr&lt;Entity&gt; sharedEntity = std::<span class="hljs-built_in">make_shared</span>&lt;Entity&gt;();<br>        std::shared_ptr&lt;Entity&gt; e0 = sharedEntity;<br>    &#125;<br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>关于shared_ptr的复制问题</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231229110054206.png" alt="image-20231229110054206"></p><p>有了共享指针，你当然可以进行复制。 下图代码中有两个作用域，可以看到里面这个作用域死亡时，这个 sharedEntity 失效了，然而并没有对 Entity 析构并删除，因为 e0 仍然是有效的，并且持有对该 Entity 的引用。再按一下 F10，当所有引用都没了，当所有追踪<code>shared_ptr</code>的栈分配对象都死亡后，底层的 Entity 才会从内存中释放并删除。</p><h2 id="3-weak-ptr"><a href="#3-weak-ptr" class="headerlink" title="3. weak_ptr"></a>3. weak_ptr</h2><ul><li><p>当你将一个<code>shared_ptr</code>赋值给另外一个<code>shared_ptr</code>，引用计数会增加。</p></li><li><p>当你把一个<code>shared_ptr</code>赋值给一个<code>weak_ptr</code>时，它不会增加引用计数。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Created Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Entity</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destoryed Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Hello world!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        std::weak_ptr&lt;Entity&gt; e0;<br>        &#123;<br>            std::shared_ptr&lt;Entity&gt; sharedEntiy = std::<span class="hljs-built_in">make_shared</span>&lt;Entity&gt;();<br>            e0 = sharedEntiy;<br>        &#125;<br>    &#125;<br><br>    std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-smart-pointer-and-new-delete"><a href="#4-smart-pointer-and-new-delete" class="headerlink" title="4. smart pointer and new-delete"></a>4. smart pointer and new-delete</h2><p>这就是很有用的智能指针，但它们绝对没有完全取代<code>new</code>和<code>delete</code>关键字。只是当你要声明一个堆分配的对象而且不希望由自己来清理，这时候你就应该使用智能指针，尽量使用<code>unique_ptr</code>，因为它有较低的开销。但如果你需要在对象之间共享，不能使用<code>unique_ptr</code>的时候，就用<code>shared_ptr</code></p><h1 id="45-Copying-and-Copy-constructors-in-C"><a href="#45-Copying-and-Copy-constructors-in-C" class="headerlink" title="45. Copying and Copy constructors in C++"></a>45. Copying and Copy constructors in C++</h1><p>copy means: copy data and copy memory.</p><ol><li>创建一个String类</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 注释来自ChatGPT</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span> <span class="hljs-comment">// 包含 C 字符串处理函数所需的头文件</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">char</span>* m_Buffer;         <span class="hljs-comment">// 存储字符串的字符数组</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> m_Size;    <span class="hljs-comment">// 字符串的长度（不包括 null 终止符）</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数，接受一个 C 风格字符串作为参数</span><br>    <span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* string)<br>    &#123;<br>        m_Size = <span class="hljs-built_in">strlen</span>(string);                     <span class="hljs-comment">// 计算字符串的长度</span><br>        m_Buffer = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[m_Size + <span class="hljs-number">1</span>];             <span class="hljs-comment">// 为字符串分配内存，包括 null 终止符</span><br>        <span class="hljs-built_in">memcpy</span>(m_Buffer, string, m_Size + <span class="hljs-number">1</span>);        <span class="hljs-comment">// 将传入的字符串复制到 m_Buffer</span><br>    &#125;<br><br>    <span class="hljs-comment">// 析构函数，释放动态分配的内存</span><br>    ~<span class="hljs-built_in">String</span>()<br>    &#123;<br>        <span class="hljs-keyword">delete</span>[] m_Buffer;<br>    &#125;<br><br>    <span class="hljs-comment">// 声明友元，使得重载的输出运算符能够访问类的私有成员</span><br>    <span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="hljs-type">const</span> String&amp; string);<br>&#125;;<br><br><span class="hljs-comment">// 重载输出运算符</span><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="hljs-type">const</span> String&amp; string)<br>&#123;<br>    stream &lt;&lt; string.m_Buffer;    <span class="hljs-comment">// 将字符串输出到流</span><br>    <span class="hljs-keyword">return</span> stream;<br>&#125;<br><br><span class="hljs-comment">// 主函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 创建 String 对象并初始化为 &quot;Cherno&quot;</span><br>    String string = <span class="hljs-string">&quot;Cherno&quot;</span>;<br><br>    <span class="hljs-comment">// 使用重载的输出运算符输出 String 对象的内容</span><br>    std::cout &lt;&lt; string &lt;&lt; std::endl;<br><br>    std::cin.<span class="hljs-built_in">get</span>();  <span class="hljs-comment">// 等待用户输入</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-shallow-copy"><a href="#1-shallow-copy" class="headerlink" title="1. shallow copy"></a>1. shallow copy</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">char</span>* m_Buffer;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> m_Size;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* string)<br>&#123;<br>m_Size = <span class="hljs-built_in">strlen</span>(string);<br>m_Buffer = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[m_Size + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">memcpy</span>(m_Buffer, string, m_Size + <span class="hljs-number">1</span>);<br>&#125;<br><br>~<span class="hljs-built_in">String</span>()<br>&#123;<br><span class="hljs-keyword">delete</span>[] m_Buffer;<br>&#125;<br><br><span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="hljs-type">const</span> String&amp; string);<br>&#125;;<br><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="hljs-type">const</span> String&amp; string)<br>&#123;<br>stream &lt;&lt; string.m_Buffer;<br><span class="hljs-keyword">return</span> stream;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>String string = <span class="hljs-string">&quot;Cherno&quot;</span>;<br>String second = string; <span class="hljs-comment">// 浅拷贝</span><br><br>std::cout &lt;&lt; string &lt;&lt; std::endl;<br>std::cout &lt;&lt; second &lt;&lt; std::endl;<br><span class="hljs-comment">// 程序崩溃！</span><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>现在问题来了，内存中有两个 String，因为它们直接进行了复制，这种复制被称为<em>shallow copy</em>（浅拷贝）。它所做的是复制这个 char<em>，内存中的两个 String 对象有相同的 char</em>的值，换句话说就是有相同的内存地址。这个 m_Buffer 的内存地址，对于这两个 String 对象来说是相同的，所以程序会崩溃的原因是当我们到达作用域的尽头时，这两个 String 都被销毁了，析构函数会被调用，然后执行<code>delete[] m_Buffer</code>两次，程序试图两次释放同一个内存块。这就是为什么程序会崩溃——因为内存已经释放了，不再是我们的了，我们无法再次释放它。</p><h2 id="2-deep-copy-—-copy-constructor"><a href="#2-deep-copy-—-copy-constructor" class="headerlink" title="2. deep copy — copy constructor"></a>2. deep copy — copy constructor</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">char</span>* m_Buffer;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> m_Size;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* string)<br>&#123;<br>m_Size = <span class="hljs-built_in">strlen</span>(string);<br>m_Buffer = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[m_Size + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">memcpy</span>(m_Buffer, string, m_Size + <span class="hljs-number">1</span>);<br>&#125;<br><br>~<span class="hljs-built_in">String</span>()<br>&#123;<br><span class="hljs-keyword">delete</span>[] m_Buffer;<br>&#125;<br><br><span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> String&amp; other) <span class="hljs-comment">// copy constructor</span><br>: <span class="hljs-built_in">m_Size</span>(other.m_Size)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Copied String!&quot;</span> &lt;&lt; std::endl;<br>m_Buffer = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[m_Size + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">memcpy</span>(m_Buffer, other.m_Buffer, m_Size + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">char</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> index)<br>&#123;<br><span class="hljs-keyword">return</span> m_Buffer[index];<br>&#125;<br><br><span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="hljs-type">const</span> String&amp; string);<br>&#125;;<br><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="hljs-type">const</span> String&amp; string)<br>&#123;<br>stream &lt;&lt; string.m_Buffer;<br><span class="hljs-keyword">return</span> stream;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintString</span><span class="hljs-params">(<span class="hljs-type">const</span> String&amp; string)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; string &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>String string = <span class="hljs-string">&quot;Cherno&quot;</span>;<br>String second = string;<br><br>second[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br><br><span class="hljs-built_in">PrintString</span>(string);<br><span class="hljs-built_in">PrintString</span>(second);<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="46-The-Arrow-Operator-in-C"><a href="#46-The-Arrow-Operator-in-C" class="headerlink" title="46. The Arrow Operator in C++"></a>46. The Arrow Operator in C++</h1><h2 id="1-pointer-reference-arrow"><a href="#1-pointer-reference-arrow" class="headerlink" title="1. pointer, reference, arrow"></a>1. pointer, reference, arrow</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Hello!&quot;</span> &lt;&lt; std::endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e;<br>e.<span class="hljs-built_in">Print</span>();<br><br>Entity* ptr = &amp;e;<br>(*ptr).<span class="hljs-built_in">Print</span>(); <span class="hljs-comment">// 考虑运算符优先级</span><br><br>Entity* ptr1 = &amp;e;<br>Entity&amp; entity = *ptr1;<br>entity.<span class="hljs-built_in">Print</span>();<br><br>Entity* ptr2 = &amp;e;<br>ptr2-&gt;<span class="hljs-built_in">Print</span>();<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-overloading"><a href="#2-overloading" class="headerlink" title="2. overloading"></a>2. overloading</h2><p>箭头作为一种运算符，C++可以重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Hello!&quot;</span> &lt;&lt; std::endl; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScopedPtr</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>Entity* m_Obj;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">ScopedPtr</span>(Entity* entity)<br>:<span class="hljs-built_in">m_Obj</span>(entity)<br>&#123;<br><br>&#125;<br><br>~<span class="hljs-built_in">ScopedPtr</span>()<br>&#123;<br><span class="hljs-keyword">delete</span> m_Obj;<br>&#125;<br><br>Entity* <span class="hljs-keyword">operator</span>-&gt;()<br>&#123;<br><span class="hljs-keyword">return</span> m_Obj;<br>&#125;<br><br><span class="hljs-type">const</span> Entity* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> m_Obj;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ScopedPtr entity = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>();<br>entity-&gt;<span class="hljs-built_in">Print</span>();<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-offset"><a href="#3-offset" class="headerlink" title="3. offset"></a>3. offset</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector3</span><br>&#123;<br><span class="hljs-type">float</span> x, y, z;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> offsetx = (<span class="hljs-type">int</span>)&amp;((Vector3*)<span class="hljs-literal">nullptr</span>)-&gt;x;<br>std::cout &lt;&lt; offsetx &lt;&lt; std::endl;<br><br><span class="hljs-type">int</span> offsety = (<span class="hljs-type">int</span>)&amp;((Vector3*)<span class="hljs-literal">nullptr</span>)-&gt;y;<br>std::cout &lt;&lt; offsety &lt;&lt; std::endl;<br><br><span class="hljs-type">int</span> offsetz = (<span class="hljs-type">int</span>)&amp;((Vector3*)<span class="hljs-literal">nullptr</span>)-&gt;z;<br>std::cout &lt;&lt; offsetz &lt;&lt; std::endl;<br><br>std::cin.<span class="hljs-built_in">get</span>();<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0</span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">8</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="附：编程习惯"><a href="#附：编程习惯" class="headerlink" title="附：编程习惯"></a>附：编程习惯</h1><h2 id="A-m"><a href="#A-m" class="headerlink" title="A. m_"></a>A. m_</h2><p><a href="https://21xrx.com/Articles/read_article/217704">C++中m_的含义是什么？ |21xrx.com</a></p><blockquote><p>在C++中，m_是一种命名约定，通常被用于表示一个类的成员变量。m_的含义是”member variable”或者”成员变量”，是为了区分成员变量和其他类型的变量而引入的。</p><p>使用m_的好处是可以方便地区分成员变量和其他变量，使代码变得更加可读和易于理解。此外，m_还可以避免与全局变量、局部变量或其他变量混淆，从而避免出现代码错误。</p><p>在使用m_时，需要注意以下几点：</p><p>\1. m_只是一种命名约定，不是C++的关键字或保留字，因此在使用时不要将其与其他变量名混淆。</p><p>\2. 使用m_时应该遵循统一的规范，例如将所有成员变量都以m_为前缀命名。</p><p>\3. 在构造函数和析构函数中，应该将所有成员变量的初始值或释放操作放在一起，以方便管理。</p><p>\4. 注意，在使用m_时应该尽可能使用访问器（getter和setter）而不是直接访问成员变量，这样可以使代码更加可维护和易于修改。</p><p>总的来说，m_是一种很好的命名约定，可以使代码更加清晰和易于理解。在编写C++代码时，使用m_能够提高代码的可读性和可维护性，值得开发者们好好利用。</p></blockquote><h2 id="B-命名规则"><a href="#B-命名规则" class="headerlink" title="B. 命名规则"></a>B. 命名规则</h2><h3 id="1-驼峰"><a href="#1-驼峰" class="headerlink" title="1. 驼峰"></a>1. 驼峰</h3><p>原始：<code>user login count</code></p><p>驼峰：<code>userLoginCount</code></p><h3 id="2-帕斯卡"><a href="#2-帕斯卡" class="headerlink" title="2. 帕斯卡"></a>2. 帕斯卡</h3><p>原始：<code>user login count</code></p><p>帕斯卡：<code>UserLoginCount</code></p><h3 id="3-蛇形"><a href="#3-蛇形" class="headerlink" title="3. 蛇形"></a>3. 蛇形</h3><p>原始：<code>user login count</code></p><p>蛇形：<code>user_login_count</code></p><h3 id="4-匈牙利"><a href="#4-匈牙利" class="headerlink" title="4. 匈牙利"></a>4. 匈牙利</h3><p><code>int g_i32tempuratureValue</code>:全局 32位有符号整型变量</p><p><code>float l_f32tempuratureValue</code>:局部 32位有符号整型变量</p><p><code>unsigned char s_u8tempuratureValue</code>:静态 无符号字符型变量</p><p>参考：<a href="https://zh-google-styleguide.readthedocs.io/en/latest/contents/#">内容目录 — Google 开源项目风格指南 (zh-google-styleguide.readthedocs.io)</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>瞧瞧我对服务器干了些什么！</title>
    <link href="/blog/post/Tools/WorkingWithGPUServer/"/>
    <url>/blog/post/Tools/WorkingWithGPUServer/</url>
    
    <content type="html"><![CDATA[<h1 id="Git与Github"><a href="#Git与Github" class="headerlink" title="Git与Github"></a>Git与Github</h1><ul><li>在Linux的Ubuntu发行版上一般都会默认安装了Git，所以不需要自己手动安装，拿来即用即可。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ba">git config --global user.name &quot;SSH keys Name&quot;<br>git config --global user.email &quot;SSH keys Email&quot;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;Email of Github Account&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~/userdoc/d2cv$ git config --global user.name <span class="hljs-string">&#x27;hjl_3080server&#x27;</span><br>(base) houjinliang@3080server:~/userdoc/d2cv$ git config --global user.email <span class="hljs-string">&#x27;cosmicdustycn@outlook.com&#x27;</span><br>(base) houjinliang@3080server:~/userdoc/d2cv$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;cosmicdustycn@outlook.com&quot;</span><br>Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/mnt/houjinliang/.ssh/id_rsa): <br>Created directory <span class="hljs-string">&#x27;/mnt/houjinliang/.ssh&#x27;</span>.<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved <span class="hljs-keyword">in</span> /mnt/houjinliang/.ssh/id_rsa.<br>Your public key has been saved <span class="hljs-keyword">in</span> /mnt/houjinliang/.ssh/id_rsa.pub.<br></code></pre></td></tr></table></figure><ul><li>不需要担心Git的用户配置会对本服务器上的其他用户会产生影响。<code>ssh-keygen</code>生产的的用户密钥会保存在个人账号的目录下。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">(dlpy310pth113) houjinliang@3080server:~/.ssh$ <span class="hljs-built_in">pwd</span><br>/mnt/houjinliang/.ssh<br>(dlpy310pth113) houjinliang@3080server:~/.ssh$ ll<br>总用量 20<br>drwx------  2 houjinliang houjinliang 4096 11月  1 10:19 ./<br>drwxr-xr-x 12 houjinliang houjinliang 4096 11月  1 10:17 ../<br>-rw-------  1 houjinliang houjinliang 1675 11月  1 10:17 id_rsa<br>-rw-r--r--  1 houjinliang houjinliang  407 11月  1 10:17 id_rsa.pub<br>-rw-r--r--  1 houjinliang houjinliang  444 11月  1 10:19 known_hosts<br></code></pre></td></tr></table></figure><ul><li>复制<code>id_rsa.pub</code>文件下的内容，到Github的Setting中设置SSH Keys。如下。</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231101105539214.png" alt="image-20231101105539214"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231102171332923.png" alt="image-20231102171332923"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br>Hi murphyhoucn! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~/userdoc$ git <span class="hljs-built_in">clone</span> git@github.com:murphyhoucn/DeepLearningforCV.git<br>(base) houjinliang@3080server:~/userdoc/DeepLearningforCV$ git status<br>(base) houjinliang@3080server:~/userdoc/DeepLearningforCV$ git add .<br>(base) houjinliang@3080server:~/userdoc/DeepLearningforCV$ git commit -m <span class="hljs-string">&quot;add new file&quot;</span><br>(base) houjinliang@3080server:~/userdoc/DeepLearningforCV$ git push<br></code></pre></td></tr></table></figure><h1 id="查看GPU占用情况"><a href="#查看GPU占用情况" class="headerlink" title="查看GPU占用情况"></a>查看GPU占用情况</h1><h2 id="nvidia-smi"><a href="#nvidia-smi" class="headerlink" title="nvidia-smi"></a>nvidia-smi</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231101110320173.png" alt="image-20231101110320173"></p><h2 id="gpustat"><a href="#gpustat" class="headerlink" title="gpustat"></a>gpustat</h2><blockquote><p><a href="https://github.com/wookayin/gpustat">GitHub - wookayin&#x2F;gpustat: 📊 A simple command-line utility for querying and monitoring GPU status</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(dlpy310pth113) houjinliang@3080server:~/userdoc$ pip install gpustat<br>(dlpy310pth113) houjinliang@3080server:~/userdoc$ gpustat<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231101110430041.png" alt="image-20231101110430041"></p><h2 id="nvitop"><a href="#nvitop" class="headerlink" title="nvitop"></a>nvitop</h2><blockquote><p> <a href="https://github.com/XuehaiPan/nvitop">GitHub - XuehaiPan&#x2F;nvitop: An interactive NVIDIA-GPU process viewer and beyond, the one-stop solution for GPU process management.</a></p><p><a href="https://zhuanlan.zhihu.com/p/614024375">nvitop: 史上最强GPU性能实时监测工具 - 知乎 (zhihu.com)</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(dlpy310pth113) houjinliang@3080server:~$ pip install nvitop<br>Requirement already satisfied: nvitop <span class="hljs-keyword">in</span> ./miniconda3/envs/dlpy310pth113/lib/python3.10/site-packages (1.3.0)<br>Requirement already satisfied: nvidia-ml-py&lt;12.536.0a0,&gt;=11.450.51 <span class="hljs-keyword">in</span> ./miniconda3/envs/dlpy310pth113/lib/python3.10/site-packages (from nvitop) (12.535.108)<br>Requirement already satisfied: psutil&gt;=5.6.6 <span class="hljs-keyword">in</span> ./miniconda3/envs/dlpy310pth113/lib/python3.10/site-packages (from nvitop) (5.9.5)<br>Requirement already satisfied: cachetools&gt;=1.0.1 <span class="hljs-keyword">in</span> ./miniconda3/envs/dlpy310pth113/lib/python3.10/site-packages (from nvitop) (5.3.1)<br>Requirement already satisfied: termcolor&gt;=1.0.0 <span class="hljs-keyword">in</span> ./miniconda3/envs/dlpy310pth113/lib/python3.10/site-packages (from nvitop) (2.3.0)<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231101110731169.png" alt="image-20231101110731169"></p><h1 id="Clash-for-Linux"><a href="#Clash-for-Linux" class="headerlink" title="Clash for Linux"></a>Clash for Linux</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/662552814">Ubuntu配置 命令行Clash 教程 - 知乎 (zhihu.com)</a></p><p><a href="https://weilining.github.io/294.html">终端使用代理加速的正确方式（Clash） | Ln’s Blog (weilining.github.io)</a></p></blockquote><h2 id="2024-01-10"><a href="#2024-01-10" class="headerlink" title="2024.01.10"></a>2024.01.10</h2><ul><li>Download: <a href="https://pub-eac3eb5670f44f09984dee5c57939316.r2.dev/clash-linux-amd64-v1.18.0.gz">clash-linux-amd64-v1.18.0.gz</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gunzip clash-linux-amd64-v1.18.0.gz<br><span class="hljs-built_in">mv</span> clash-linux-amd64-v1.18.0 clash<br><span class="hljs-built_in">chmod</span> u+x clash<br>./clash<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在 ~/.config/clash/config.yaml 写入订阅的内容<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240110153702123-170513523115811.png" alt="image-20240110153702123"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">`~/.bashrc`<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">proxy</span></span>() &#123;<br><span class="hljs-built_in">export</span> http_proxy=http://127.0.0.1:7890<br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-variable">$http_proxy</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;proxy on!&quot;</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">unproxy</span></span>()&#123;<br><span class="hljs-built_in">unset</span> http_proxy https_proxy<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;proxy off&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~/userdoc$ <span class="hljs-built_in">source</span> ~/.bashrc<br>(base) houjinliang@3080server:~/userdoc$ proxy<br>proxy on!<br>(base) houjinliang@3080server:~/userdoc$ unproxy<br>proxy off<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~/userdoc$ wget www.zhihu.com<br>URL transformed to HTTPS due to an HSTS policy<br>--2024-01-10 15:33:59--  https://www.zhihu.com/<br>正在连接 127.0.0.1:7890... 已连接。<br>已发出 Proxy 请求，正在等待回应... 302 Found<br>位置：//www.zhihu.com/signin?next=%2F [跟随至新的 URL]<br>URL transformed to HTTPS due to an HSTS policy<br>--2024-01-10 15:33:59--  https://www.zhihu.com/signin?next=%2F<br>再次使用存在的到 www.zhihu.com:443 的连接。<br>已发出 Proxy 请求，正在等待回应... 200 OK<br>长度： 39879 (39K) [text/html]<br>正在保存至: “index.html”<br><br>index.html                                           100%[===================================================================================================================&gt;]  38.94K  --.-KB/s    用时 0.04s<br><br><br><br>2024-01-10 15:33:59 (944 KB/s) - 已保存 “index.html” [39879/39879])<br><br>(base) houjinliang@3080server:~/userdoc$ wget www.google.com<br>--2024-01-10 15:34:14--  http://www.google.com/<br>正在连接 127.0.0.1:7890... 已连接。<br>已发出 Proxy 请求，正在等待回应... 200 OK<br>长度： 未指定 [text/html]<br>正在保存至: “index.html.1”<br><br>index.html.1                                             [ &lt;=&gt;                                                                                                                ]  18.72K  --.-KB/s    用时 0.07s<br><br>2024-01-10 15:34:16 (257 KB/s) - “index.html.1” 已保存 [19169]<br></code></pre></td></tr></table></figure><h1 id="3080Server-MMDetection"><a href="#3080Server-MMDetection" class="headerlink" title="3080Server - MMDetection"></a>3080Server - MMDetection</h1><ul><li>Ubuntu 18.04.6 LTS</li><li>gcc version 7.5.0</li><li>CUDA 11.3</li><li>cuDNN 8.9.5</li></ul><h2 id="MMDetection"><a href="#MMDetection" class="headerlink" title="MMDetection"></a>MMDetection</h2><blockquote><p>版本选择参考镜像：</p><p><a href="https://www.codewithgpu.com/i/open-mmlab/mmdetection3d/mmdetection3d-1.1">open-mmlab&#x2F;mmdetection3d&#x2F;mmdetection3d-1.1: mmdetection3d-1.1版本 - CG (codewithgpu.com)</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105160510106-170513523460914.png" alt="image-20240105160510106"></p></blockquote><h2 id="CUDA-11-3-1-CUDNN-8-9-5"><a href="#CUDA-11-3-1-CUDNN-8-9-5" class="headerlink" title="CUDA 11.3.1 &amp; CUDNN 8.9.5"></a>CUDA 11.3.1 &amp; CUDNN 8.9.5</h2><p>&emsp;&emsp;之前安装的是CUDA 11.6，后面感觉这个版本有点儿高了，在看到一些实例之后，决定退回到CUDA 11.3版本。首先第一步是要卸载掉CUDA 11.6，在搜索了之后，发现并没有找到能用的方法，于是决定直接<code>rm -rf cuda-11.6</code>，这样吧CUDA的文件删掉之后再重装。</p><p><a href="https://developer.nvidia.com/cuda-11-3-1-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=18.04&target_type=runfile_local">CUDA Toolkit 11.3 Update 1 Downloads | NVIDIA Developer</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://developer.download.nvidia.com/compute/cuda/11.3.1/local_installers/cuda_11.3.1_465.19.01_linux.run<br><span class="hljs-built_in">sudo</span> sh cuda_11.3.1_465.19.01_linux.run<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/198161777">非root用户安装cuda与cudnn - 知乎 (zhihu.com)</a></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105154958922.png" alt="image-20240105154958922"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105154857088.png" alt="image-20240105154857088"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105155054178.png" alt="image-20240105155054178"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105154820598.png" alt="image-20240105154820598"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105154838934.png" alt="image-20240105154838934"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105154907733-17193723323271.png" alt="image-20240105154907733-17193723323271"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105155142558.png" alt="image-20240105155142558"></div></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~/userdoc/cuda_and_cudnn$ sh ./cuda_11.3.1_465.19.01_linux.run<br><br>= Summary =<br>Driver: Not Selected Toolkit: Installed <span class="hljs-keyword">in</span> /mnt/houjinliang/cuda-11.3/ Samples: Not Selected<br>Please make sure that<br>PATH includes /mnt/houjinliang/cuda-11.3/bin<br>LD_LIBRARY_PATH includes /mnt/houjinliang/cuda-11.3/lib64, or, add /mnt/houjinliang/cuda-11.3/lib64 to /etc/ld.so.conf and run ldconfig as root<br>To uninstall the CUDA Toolkit, run cuda-uninstaller <span class="hljs-keyword">in</span> /mnt/houjinliang/cuda-11.3/bin ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 465.00 is required <span class="hljs-keyword">for</span> CUDA 11.3 functionality to work. To install the driver using this installer, run the following <span class="hljs-built_in">command</span>, replacing &lt;CudaInstaller&gt; with the name of this run file: <span class="hljs-built_in">sudo</span> &lt;CudaInstaller&gt;.run --silent --driver<br>Logfile is /tmp/cuda-installer.log<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.bashrc<br><br>```<br><span class="hljs-comment"># cuda environment variables</span><br><span class="hljs-comment"># murpy insert</span><br><span class="hljs-built_in">export</span> CUDA_HOME=<span class="hljs-variable">$CUDA_HOME</span>:/mnt/houjinliang/cuda-11.3<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/mnt/houjinliang/cuda-11.3/bin<br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$LD_LIBRARY_PATH</span>:/mnt/houjinliang/cuda-11.3/lib64<br>```<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~$ <span class="hljs-built_in">source</span> ~/.bashrc<br><br>(base) houjinliang@3080server:~$ nvcc -V<br>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2021 NVIDIA Corporation<br>Built on Mon_May__3_19:15:13_PDT_2021<br>Cuda compilation tools, release 11.3, V11.3.109<br>Build cuda_11.3.r11.3/compiler.29920130_0<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~/userdoc/cuda_and_cudnn$ tar xvJf cudnn-linux-x86_64-8.9.5.29_cuda11-archive.tar.xz<br><br><br>(py38mmdetection) houjinliang@3080server:~/userdoc/cuda_and_cudnn/cudnn-linux-x86_64-8.9.5.29_cuda11-archive$ ll<br>总用量 48<br>drwxr-xr-x 4 houjinliang houjinliang  4096 8月   3  2022 ./<br>drwxrwxr-x 3 houjinliang houjinliang  4096 1月   5 16:32 ../<br>drwxr-xr-x 2 houjinliang houjinliang  4096 8月   3  2022 include/<br>drwxr-xr-x 2 houjinliang houjinliang  4096 8月   3  2022 lib/<br>-rw-r--r-- 1 houjinliang houjinliang 28994 8月   3  2022 LICENSE<br><br><br>(py38mmdetection) houjinliang@3080server:~/userdoc/cuda_and_cudnn/cudnn-linux-x86_64-8.9.5.29_cuda11-archive$ <span class="hljs-built_in">cp</span> lib/* ~/cuda-11.3/lib64/<br>(py38mmdetection) houjinliang@3080server:~/userdoc/cuda_and_cudnn/cudnn-linux-x86_64-8.9.5.29_cuda11-archive$ <span class="hljs-built_in">cp</span> include/* ~/cuda-11.3/include<br><br><span class="hljs-built_in">chmod</span> +x ~/cuda-11.3/include/cudnn.h<br><span class="hljs-built_in">chmod</span> +x ~/cuda-11.3/lib64/libcudnn*<br><br>(base) houjinliang@3080server:~$ <span class="hljs-built_in">cat</span> ~/cuda-11.3/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br><span class="hljs-comment">#define CUDNN_MAJOR 8</span><br><span class="hljs-comment">#define CUDNN_MINOR 9</span><br><span class="hljs-comment">#define CUDNN_PATCHLEVEL 5</span><br>--<br><span class="hljs-comment">#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)</span><br><br>/* cannot use constexpr here since this is a C-only file */<br></code></pre></td></tr></table></figure><h2 id="PyTorch-1-11"><a href="#PyTorch-1-11" class="headerlink" title="PyTorch 1.11"></a>PyTorch 1.11</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~$ conda create -n py38mmdetection python=3.8 -y<br>(base) houjinliang@3080server:~$ conda activate py38mmdetection<br>(py38mmdetection) houjinliang@3080server:~$ conda install pytorch==1.11.0 torchvision==0.12.0 torchaudio==0.11.0 cudatoolkit=11.3 -c pytorch<br><br>(py38mmdetection) houjinliang@3080server:~$ python<br>Python 3.8.18 (default, Sep 11 2023, 13:40:15)<br>[GCC 11.2.0] :: Anaconda, Inc. on linux<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import torch<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(torch.cuda.is_available())<br>True<br></code></pre></td></tr></table></figure><h2 id="阿里云源"><a href="#阿里云源" class="headerlink" title="阿里云源"></a>阿里云源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip config <span class="hljs-built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple<br></code></pre></td></tr></table></figure><h2 id="mmdet-installation"><a href="#mmdet-installation" class="headerlink" title="mmdet installation"></a>mmdet installation</h2><p><a href="https://mmdetection.readthedocs.io/zh-cn/latest/get_started.html">开始你的第一步 — MMDetection 3.3.0 文档</a></p><h1 id="3080Server-MMYOLO"><a href="#3080Server-MMYOLO" class="headerlink" title="3080Server - MMYOLO"></a>3080Server - MMYOLO</h1><p><a href="https://mmyolo.readthedocs.io/en/latest/get_started/overview.html">Overview — MMYOLO 0.6.0 documentation</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~$ conda create -n py38mmyolo python=3.8<br><br>(base) houjinliang@3080server:~$ conda activate py38mmyolo<br>(py38mmyolo) houjinliang@3080server:~$ pip config list<br>global.index-url=<span class="hljs-string">&#x27;https://mirrors.aliyun.com/pypi/simple&#x27;</span><br><br>(py38mmyolo) houjinliang@3080server:~$ conda install pytorch==1.11.0 torchvision==0.12.0 torchaudio==0.11.0 cudatoolkit=11.3 -c pytorch<br><br>(py38mmyolo) houjinliang@3080server:~$ python -c <span class="hljs-string">&quot;import torch; print(torch.__version__); print(torch.cuda.is_available())&quot;</span><br>1.11.0<br>True<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -U openmim<br>mim install <span class="hljs-string">&quot;mmengine&gt;=0.6.0&quot;</span><br>mim install <span class="hljs-string">&quot;mmcv&gt;=2.0.0rc4,&lt;2.1.0&quot;</span><br>mim install <span class="hljs-string">&quot;mmdet&gt;=3.0.0,&lt;4.0.0&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mim install <span class="hljs-string">&quot;mmyolo&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/open-mmlab/mmyolo.git<br><span class="hljs-built_in">cd</span> mmyolo<br><span class="hljs-comment"># Install albumentations</span><br>pip install -r requirements/albu.txt<br><span class="hljs-comment"># Install MMYOLO</span><br>mim install -v -e .<br><span class="hljs-comment"># &quot;-v&quot; means verbose, or more output</span><br><span class="hljs-comment"># &quot;-e&quot; means installing a project in editable mode,</span><br><span class="hljs-comment"># thus any local modifications made to the code will take effect without reinstallation.</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~/userdoc/offlinefile$ wget  http://images.cocodataset.org/zips/val2017.zip<br>--2024-01-10 16:17:46--  http://images.cocodataset.org/zips/val2017.zip<br>正在解析主机 images.cocodataset.org (images.cocodataset.org)... 3.5.7.141, 52.216.215.25, 52.216.185.83, ...<br>正在连接 images.cocodataset.org (images.cocodataset.org)|3.5.7.141|:80... 已连接。<br>已发出 HTTP 请求，正在等待回应... 200 OK<br>长度： 815585330 (778M) [application/zip]<br>正在保存至: “val2017.zip”<br><br>val2017.zip                                          100%[===================================================================================================================&gt;] 777.80M  3.89MB/s    用时 2m 22ss<br>2024-01-10 16:20:08 (5.48 MB/s) - 已保存 “val2017.zip” [815585330/815585330])<br></code></pre></td></tr></table></figure><h1 id="目录占用空间大小查询"><a href="#目录占用空间大小查询" class="headerlink" title="目录占用空间大小查询"></a>目录占用空间大小查询</h1><ul><li>查看文件以及文件夹大小</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">(py38mmyolo) houjinliang@3080server:~/userdoc/offlinefile$ ll<br>总用量 26251480<br>drwxrwxr-x 6 houjinliang houjinliang        4096 1月  10 21:36 ./<br>drwxrwxr-x 9 houjinliang houjinliang        4096 1月  10 15:59 ../<br>-rw-rw-r-- 1 houjinliang houjinliang     3996930 1月  10 14:43 clash-linux-amd64-v1.18.0.gz<br>drwxr-xr-x 5 houjinliang houjinliang        4096 8月  26  2022 coco/<br>-rw-rw-r-- 1 houjinliang houjinliang     6983030 1月  10 17:00 coco128.zip<br>-rw-rw-r-- 1 houjinliang houjinliang    48639045 1月  10 16:21 coco2017labels.zip<br>-rw-rw-r-- 1 houjinliang houjinliang     4372979 1月  10 14:48 curl-8.5.0.tar.gz<br>-rw-rw-r-- 1 houjinliang houjinliang    12353723 1月   5 16:32 pandas-2.0.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl<br>drwxrwxr-x 2 houjinliang houjinliang     1429504 8月  31  2017 test2017/<br>-rw-rw-r-- 1 houjinliang houjinliang  6646970404 1月  10 17:47 test2017.zip<br>drwxrwxr-x 2 houjinliang houjinliang     4112384 8月  31  2017 train2017/<br>-rw-rw-r-- 1 houjinliang houjinliang 19336861798 1月  10 21:35 train2017.zip<br>drwxrwxr-x 2 houjinliang houjinliang      167936 8月  31  2017 val2017/<br>-rw-rw-r-- 1 houjinliang houjinliang   815585330 7月  11  2018 val2017.zip<br><br>(py38mmyolo) houjinliang@3080server:~/userdoc/offlinefile$ ll -hl<br>总用量 26G<br>drwxrwxr-x 6 houjinliang houjinliang 4.0K 1月  10 21:36 ./<br>drwxrwxr-x 9 houjinliang houjinliang 4.0K 1月  10 15:59 ../<br>-rw-rw-r-- 1 houjinliang houjinliang 3.9M 1月  10 14:43 clash-linux-amd64-v1.18.0.gz<br>drwxr-xr-x 5 houjinliang houjinliang 4.0K 8月  26  2022 coco/<br>-rw-rw-r-- 1 houjinliang houjinliang 6.7M 1月  10 17:00 coco128.zip<br>-rw-rw-r-- 1 houjinliang houjinliang  47M 1月  10 16:21 coco2017labels.zip<br>-rw-rw-r-- 1 houjinliang houjinliang 4.2M 1月  10 14:48 curl-8.5.0.tar.gz<br>-rw-rw-r-- 1 houjinliang houjinliang  12M 1月   5 16:32 pandas-2.0.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl<br>drwxrwxr-x 2 houjinliang houjinliang 1.4M 8月  31  2017 test2017/<br>-rw-rw-r-- 1 houjinliang houjinliang 6.2G 1月  10 17:47 test2017.zip<br>drwxrwxr-x 2 houjinliang houjinliang 4.0M 8月  31  2017 train2017/<br>-rw-rw-r-- 1 houjinliang houjinliang  19G 1月  10 21:35 train2017.zip<br>drwxrwxr-x 2 houjinliang houjinliang 164K 8月  31  2017 val2017/<br>-rw-rw-r-- 1 houjinliang houjinliang 778M 7月  11  2018 val2017.zip<br></code></pre></td></tr></table></figure><ul><li>如要查看当前目录已经使用总大小及当前目录下一级文件或文件夹各自使用的总空间大小</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">(py38mmyolo) houjinliang@3080server:~$ <span class="hljs-built_in">du</span> -h --max-depth=1<br>6.5M    ./.config<br>8.0K    ./.conda<br>1.1G    ./.vscode-server<br>12G     ./cuda-11.3<br>86G     ./userdoc<br>8.0K    ./.gnupg<br>16K     ./.ssh<br>8.0K    ./.nv<br>2.7G    ./.cache<br>24G     ./miniconda3<br>125G    .<br></code></pre></td></tr></table></figure><h1 id="3090Server"><a href="#3090Server" class="headerlink" title="3090Server"></a>3090Server</h1><ul><li>Ubuntu 18.04.6 LTS</li><li>gcc version 7.5.0</li><li>CUDA 11.3</li><li>cuDNN 8.9.5</li></ul><h2 id="系统详细"><a href="#系统详细" class="headerlink" title="系统详细"></a>系统详细</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 5.4.0-150-generic x86<span class="hljs-emphasis">_64)</span><br><span class="hljs-emphasis">Model name:          Intel(R) Xeon(R) CPU E5-2699C v4 @ 2.20GHz</span><br><span class="hljs-emphasis">NVIDIA Corporation GA102 [GeForce RTX 3090] (rev a1)</span><br></code></pre></td></tr></table></figure><h2 id="NV-Driver"><a href="#NV-Driver" class="headerlink" title="NV Driver"></a>NV Driver</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~$ <span class="hljs-built_in">cat</span> /proc/driver/nvidia/version<br>NVRM version: NVIDIA UNIX x86_64 Kernel Module  515.65.01  Wed Jul 20 14:00:58 UTC 2022<br>GCC version:  gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)<br></code></pre></td></tr></table></figure><h2 id="个人目录"><a href="#个人目录" class="headerlink" title="个人目录"></a>个人目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">houjinliang@3090server:~$ ll<br>total 40<br>drwxr-xr-x  4 houjinliang houjinliang 4096 6月  26 10:18 ./<br>drwxrwxrwx 21 super       super       4096 6月  26 10:17 ../<br>-rw-r--r--  1 houjinliang houjinliang  220 4月   5  2018 .bash_logout<br>-rw-r--r--  1 houjinliang houjinliang 3771 4月   5  2018 .bashrc<br>drwx------  2 houjinliang houjinliang 4096 6月  26 10:18 .cache/<br>-rw-r--r--  1 houjinliang houjinliang 8980 4月  16  2018 examples.desktop<br>drwx------  3 houjinliang houjinliang 4096 6月  26 10:18 .gnupg/<br>-rw-r--r--  1 houjinliang houjinliang  807 4月   5  2018 .profile<br></code></pre></td></tr></table></figure><h2 id="Miniconda"><a href="#Miniconda" class="headerlink" title="Miniconda"></a>Miniconda</h2><p>下载Miniconda的sh脚本文件,增加文件可执行的权限,然后执行下载脚本.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">houjinliang@3090server:~/MyDownloadFiles$ wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<br>houjinliang@3090server:~/MyDownloadFiles$ <span class="hljs-built_in">chmod</span> +x Miniconda3-latest-Linux-x86_64.sh<br>houjinliang@3090server:~/MyDownloadFiles$ ./Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>安装过程中会有选择安装路径的选择,直接选择默认路径.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 默认安装路径</span><br>Miniconda3 will now be installed into this location:<br>/mnt/houjinliang/miniconda3<br><br>  - Press ENTER to confirm the location<br>  - Press CTRL-C to abort the installation<br>  - Or specify a different location below<br><br>[/mnt/houjinliang/miniconda3] &gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241023134128208.png" alt="image-20241023134128208"></p><p>这里选择输入<code>yes</code>,然后会自动配置<code> ~/.bashrc</code>，关闭Terminal然后再重启一个，就能看到命令行前面的<code>base</code>了;</p><p>如果是输入<code>no</code>的话，手动输入下面的内容到<code> ~/.bashrc</code>中。</p><p>安装完成之后conda命令在终端是识别不到的,需要配置环境变量.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置miniconda的环境变量（根据实际情况更改）</span><br>(base) houjinliang@3090server:~$ vim ~/.bashrc<br><br><span class="hljs-comment"># 这里vim用的不熟练就使用vscode打开这个‘~/.bashrc’文件，然后再末尾增加moniconda的配置文件</span><br><br><br><span class="hljs-comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span><br><span class="hljs-comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span><br>__conda_setup=<span class="hljs-string">&quot;<span class="hljs-subst">$(&#x27;/mnt/houjinliang/miniconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)</span>&quot;</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$__conda_setup</span>&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;/mnt/houjinliang/miniconda3/etc/profile.d/conda.sh&quot;</span> ]; <span class="hljs-keyword">then</span><br>        . <span class="hljs-string">&quot;/mnt/houjinliang/miniconda3/etc/profile.d/conda.sh&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/mnt/houjinliang/miniconda3/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">unset</span> __conda_setup<br><span class="hljs-comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><br><br><br>houjinliang@3090server:~$ <span class="hljs-built_in">source</span> ~/.bashrc<br>(base) houjinliang@3090server:~$<br></code></pre></td></tr></table></figure><p>检查一下Minconda的基本信息.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看一下miniconda的基本信息</span><br>(base) houjinliang@3090server:~$ conda info<br><br>     active environment : base<br>    active <span class="hljs-built_in">env</span> location : /mnt/houjinliang/miniconda3<br>            shell level : 1<br>       user config file : /mnt/houjinliang/.condarc<br> populated config files :<br>          conda version : 24.4.0<br>    conda-build version : not installed<br>         python version : 3.12.3.final.0<br>                 solver : libmamba (default)<br>       virtual packages : __archspec=1=broadwell<br>                          __conda=24.4.0=0<br>                          __cuda=11.7=0<br>                          __glibc=2.27=0<br>                          __linux=5.4.0=0<br>                          __unix=0=0<br>       base environment : /mnt/houjinliang/miniconda3  (writable)<br>      conda av data <span class="hljs-built_in">dir</span> : /mnt/houjinliang/miniconda3/etc/conda<br>  conda av metadata url : None<br>           channel URLs : https://repo.anaconda.com/pkgs/main/linux-64<br>                          https://repo.anaconda.com/pkgs/main/noarch<br>                          https://repo.anaconda.com/pkgs/r/linux-64<br>                          https://repo.anaconda.com/pkgs/r/noarch<br>          package cache : /mnt/houjinliang/miniconda3/pkgs<br>                          /mnt/houjinliang/.conda/pkgs<br>       envs directories : /mnt/houjinliang/miniconda3/envs<br>                          /mnt/houjinliang/.conda/envs<br>               platform : linux-64<br>             user-agent : conda/24.4.0 requests/2.31.0 CPython/3.12.3 Linux/5.4.0-150-generic ubuntu/18.04.6 glibc/2.27 solver/libmamba conda-libmamba-solver/24.1.0 libmambapy/1.5.8 aau/0.4.4 c/. s/. e/.<br>                UID:GID : 1035:1035<br>             netrc file : None<br>           offline mode : False<br></code></pre></td></tr></table></figure><p>conda换源,换成阿里云源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 我这里没换</span><br><br>参考: https://developer.aliyun.com/article/1291651<br></code></pre></td></tr></table></figure><p>pip换源,换成阿里云源</p><p>直接用命令的方式,如下.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~$ pip config <span class="hljs-built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/<br>Writing to /mnt/houjinliang/.config/pip/pip.conf<br></code></pre></td></tr></table></figure><p>或者是修改 ~&#x2F;.config&#x2F;pip&#x2F;pip.conf (没有就创建一个)， 内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~$ <span class="hljs-built_in">cat</span> ~/.config/pip/pip.conf<br>[global]<br>index-url = https://mirrors.aliyun.com/pypi/simple/<br></code></pre></td></tr></table></figure><h2 id="NV-Driver-1"><a href="#NV-Driver-1" class="headerlink" title="NV Driver"></a>NV Driver</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3080server:~$ <span class="hljs-built_in">cat</span> /proc/driver/nvidia/version<br>NVRM version: NVIDIA UNIX x86_64 Kernel Module  525.60.11  Wed Nov 23 23:04:03 UTC 2022<br>GCC version:  gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)<br></code></pre></td></tr></table></figure><h2 id="CUDA-11-3-1-CUDNN-8-9-5-1"><a href="#CUDA-11-3-1-CUDNN-8-9-5-1" class="headerlink" title="CUDA 11.3.1 &amp; CUDNN 8.9.5"></a>CUDA 11.3.1 &amp; CUDNN 8.9.5</h2><p>跟之前的服务器CUDA版本一样,这里还是参照上面的进行安装.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~/MyDownloadFiles$ wget https://developer.download.nvidia.com/compute/cuda/11.3.1/local_installers/cuda_11.3.1_465.19.01_linux.run<br><br><br>(base) houjinliang@3090server:~/MyDownloadFiles$ ll<br>total 3224920<br>drwxrwxr-x  2 houjinliang houjinliang       4096 6月  26 11:10 ./<br>drwxr-xr-x 10 houjinliang houjinliang       4096 6月  26 11:04 ../<br>-rw-rw-r--  1 houjinliang houjinliang 3158494112 5月  14  2021 cuda_11.3.1_465.19.01_linux.run<br>-rwxrwxr-x  1 houjinliang houjinliang  143808873 5月  21 02:15 Miniconda3-latest-Linux-x86_64.sh*<br><br><span class="hljs-comment"># &quot;cuda_11.3.1_465.19.01_linux.run&quot;文件没有&quot;x&quot;的权限,加一个权限</span><br>(base) houjinliang@3090server:~/MyDownloadFiles$ <span class="hljs-built_in">chmod</span> +x cuda_11.3.1_465.19.01_linux.run<br>(base) houjinliang@3090server:~/MyDownloadFiles$ ll<br>total 3224920<br>drwxrwxr-x  2 houjinliang houjinliang       4096 6月  26 11:10 ./<br>drwxr-xr-x 10 houjinliang houjinliang       4096 6月  26 11:04 ../<br>-rwxrwxr-x  1 houjinliang houjinliang 3158494112 5月  14  2021 cuda_11.3.1_465.19.01_linux.run*<br>-rwxrwxr-x  1 houjinliang houjinliang  143808873 5月  21 02:15 Miniconda3-latest-Linux-x86_64.sh*<br><br><span class="hljs-comment"># 执行安装</span><br>(base) houjinliang@3090server:~/MyDownloadFiles$ ./cuda_11.3.1_465.19.01_linux.run<br><span class="hljs-comment"># 还是跟上面的安装步骤的图片有一样</span><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241023134348370.png" alt="image-20241023134348370"></p><p>出现这样的不要害怕，直接<code>Continue</code>就好了，然后按照下面的步骤。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPU_2024-06-26_11-29-59.png" alt="NPU_2024-06-26_11-29-59"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPU_2024-06-26_11-31-04.png" alt="NPU_2024-06-26_11-31-04"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPU_2024-06-26_11-31-37.png" alt="NPU_2024-06-26_11-31-37"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPU_2024-06-26_11-32-40.png" alt="NPU_2024-06-26_11-32-40"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPU_2024-06-26_11-34-55.png" alt="NPU_2024-06-26_11-34-55"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPU_2024-06-26_11-35-29.png" alt="NPU_2024-06-26_11-35-29"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240626114348562.png" alt="image-20240626114348562"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPU_2024-06-26_11-36-37.png" alt="NPU_2024-06-26_11-36-37"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/NPU_2024-06-26_11-37-23.png" alt="NPU_2024-06-26_11-37-23"></div></div></div><p>安装完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~/MyDownloadFiles$ ./cuda_11.3.1_465.19.01_linux.run<br>===========<br>= Summary =<br>===========<br><br>Driver:   Not Selected<br>Toolkit:  Installed <span class="hljs-keyword">in</span> /mnt/houjinliang/cuda-11.3/<br>Samples:  Not Selected<br><br>Please make sure that<br> -   PATH includes /mnt/houjinliang/cuda-11.3/bin<br> -   LD_LIBRARY_PATH includes /mnt/houjinliang/cuda-11.3/lib64, or, add /mnt/houjinliang/cuda-11.3/lib64 to /etc/ld.so.conf and run ldconfig as root<br><br>To uninstall the CUDA Toolkit, run cuda-uninstaller <span class="hljs-keyword">in</span> /mnt/houjinliang/cuda-11.3/bin<br>***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 465.00 is required <span class="hljs-keyword">for</span> CUDA 11.3 functionality to work.<br>To install the driver using this installer, run the following <span class="hljs-built_in">command</span>, replacing &lt;CudaInstaller&gt; with the name of this run file:<br>    <span class="hljs-built_in">sudo</span> &lt;CudaInstaller&gt;.run --silent --driver<br><br>Logfile is /tmp/cuda-installer.log<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240626114642588.png" alt="image-20240626114642588"></p><p>安装完成之后，最好把这个<code>/tmp/cuda-installer.log</code>文件删除了，如果不删的话，后面的用户再安装就会有影响。为了不妨碍他人，最好把这个删掉。</p><p>配置CUDA Toolkit 的环境变量，使用vim或vscode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~$ vim ~/.bashrc<br><br><br><span class="hljs-comment"># &gt;&gt;&gt; cuda environment variables &gt;&gt;&gt;</span><br><span class="hljs-comment"># murpy insert</span><br><span class="hljs-built_in">export</span> CUDA_HOME=<span class="hljs-variable">$CUDA_HOME</span>:/mnt/houjinliang/cuda-11.3<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/mnt/houjinliang/cuda-11.3/bin<br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$LD_LIBRARY_PATH</span>:/mnt/houjinliang/cuda-11.3/lib64<br><span class="hljs-comment"># &lt;&lt;&lt; cuda environment variables &lt;&lt;&lt;</span><br><br>(base) houjinliang@3090server:~$ <span class="hljs-built_in">source</span> ~/.bashrc<br><br><span class="hljs-comment"># CUDA安装和配置完成</span><br>(base) houjinliang@3090server:~$ nvcc -V<br>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2021 NVIDIA Corporation<br>Built on Mon_May__3_19:15:13_PDT_2021<br>Cuda compilation tools, release 11.3, V11.3.109<br>Build cuda_11.3.r11.3/compiler.29920130_0<br></code></pre></td></tr></table></figure><p>cudann安装。cudnn的下载需要到nVidia的网站，登录账号才行，这里我就直接用之前安装的时候已经下载好的了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~/MyDownloadFiles$ ll<br>total 4062292<br>drwxrwxr-x  2 houjinliang houjinliang       4096 6月  26 11:56 ./<br>drwxr-xr-x 11 houjinliang houjinliang       4096 6月  26 11:48 ../<br>-rwxrwxr-x  1 houjinliang houjinliang 3158494112 5月  14  2021 cuda_11.3.1_465.19.01_linux.run*<br>-rw-rw-r--  1 houjinliang houjinliang  857460936 6月  26 11:57 cudnn-linux-x86_64-8.9.5.29_cuda11-archive.tar.xz<br>-rwxrwxr-x  1 houjinliang houjinliang  143808873 5月  21 02:15 Miniconda3-latest-Linux-x86_64.sh*<br><br><span class="hljs-comment"># cudnn 压缩包解压缩</span><br>(base) houjinliang@3090server:~/MyDownloadFiles$ tar xvJf cudnn-linux-x86_64-8.9.5.29_cuda11-archive.tar.xz<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_infer_static.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_infer_static_v8.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_train_static.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_train_static_v8.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_infer_static.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_infer_static_v8.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_train_static.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_train_static_v8.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_infer_static.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_infer_static_v8.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_train_static.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_train_static_v8.a<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn.so.8<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn.so<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn.so.8.9.5<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_infer.so<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_infer.so.8.9.5<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_infer.so.8<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_train.so.8.9.5<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_train.so.8<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_adv_train.so<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_infer.so.8<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_infer.so<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_infer.so.8.9.5<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_train.so.8.9.5<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_train.so.8<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_cnn_train.so<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_infer.so<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_infer.so.8<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_infer.so.8.9.5<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_train.so<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_train.so.8<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/lib/libcudnn_ops_train.so.8.9.5<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_v8.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_adv_infer_v8.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_adv_train_v8.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_backend_v8.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_cnn_infer_v8.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_cnn_train_v8.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_ops_infer_v8.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_ops_train_v8.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_version_v8.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_adv_infer.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_adv_train.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_backend.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_cnn_infer.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_cnn_train.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_ops_infer.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_ops_train.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/include/cudnn_version.h<br>cudnn-linux-x86_64-8.9.5.29_cuda11-archive/LICENSE<br><br><span class="hljs-comment"># 查看cudnn的解压缩文件</span><br>(base) houjinliang@3090server:~/MyDownloadFiles$ <span class="hljs-built_in">cd</span> cudnn-linux-x86_64-8.9.5.29_cuda11-archive/<br>(base) houjinliang@3090server:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.5.29_cuda11-archive$ ll<br>total 48<br>drwxr-xr-x 4 houjinliang houjinliang  4096 9月   7  2023 ./<br>drwxrwxr-x 3 houjinliang houjinliang  4096 6月  26 11:58 ../<br>drwxr-xr-x 2 houjinliang houjinliang  4096 9月   7  2023 include/<br>drwxr-xr-x 2 houjinliang houjinliang  4096 9月   7  2023 lib/<br>-rw-r--r-- 1 houjinliang houjinliang 29662 9月   7  2023 LICENSE<br><br><span class="hljs-comment"># 把cudnn的文件copy到cuda目录下</span><br>(base) houjinliang@3090server:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.5.29_cuda11-archive$ <span class="hljs-built_in">cp</span> lib/* ~/cuda-11.3/lib64/<br>(base) houjinliang@3090server:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.5.29_cuda11-archive$ <span class="hljs-built_in">cp</span> include/* ~/cuda-11.3/include<br>(base) houjinliang@3090server:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.5.29_cuda11-archive$ <span class="hljs-built_in">chmod</span> +x ~/cuda-11.3/include/cudnn.h<br>(base) houjinliang@3090server:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.5.29_cuda11-archive$ <span class="hljs-built_in">chmod</span> +x ~/cuda-11.3/lib64/libcudnn*<br><br><span class="hljs-comment"># 检查cudnn版本和验证cudnncopy是否成功</span><br>(base) houjinliang@3090server:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.5.29_cuda11-archive$ <span class="hljs-built_in">cat</span> ~/cuda-11.3/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br><span class="hljs-comment">#define CUDNN_MAJOR 8</span><br><span class="hljs-comment">#define CUDNN_MINOR 9</span><br><span class="hljs-comment">#define CUDNN_PATCHLEVEL 5</span><br>--<br><span class="hljs-comment">#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)</span><br><br>/* cannot use constexpr here since this is a C-only file */<br></code></pre></td></tr></table></figure><h2 id="Git-Github"><a href="#Git-Github" class="headerlink" title="Git &amp; Github"></a>Git &amp; Github</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~$ git config --global user.name <span class="hljs-string">&#x27;hjl_3090server&#x27;</span><br>(base) houjinliang@3090server:~$ git config --global user.email <span class="hljs-string">&#x27;cosmicdustycn@outlook.com&#x27;</span><br>(base) houjinliang@3090server:~$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;cosmicdustycn@outlook.com&quot;</span><br>Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/mnt/houjinliang/.ssh/id_rsa):<br>Created directory <span class="hljs-string">&#x27;/mnt/houjinliang/.ssh&#x27;</span>.<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved <span class="hljs-keyword">in</span> /mnt/houjinliang/.ssh/id_rsa.<br>Your public key has been saved <span class="hljs-keyword">in</span> /mnt/houjinliang/.ssh/id_rsa.pub.<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~/.ssh$ <span class="hljs-built_in">pwd</span><br>/mnt/houjinliang/.ssh<br>(base) houjinliang@3090server:~/.ssh$ ll<br>total 16<br>drwx------  2 houjinliang houjinliang 4096 6月  26 12:11 ./<br>drwxr-xr-x 12 houjinliang houjinliang 4096 6月  26 12:11 ../<br>-rw-------  1 houjinliang houjinliang 1679 6月  26 12:11 id_rsa<br>-rw-r--r--  1 houjinliang houjinliang  407 6月  26 12:11 id_rsa.pub<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server:~$ git config user.name<br>hjl_3090server<br>(base) houjinliang@3090server:~$ git config user.email<br>cosmicdustycn@outlook.com<br>(base) houjinliang@3090server:~$ ssh -T git@github.com<br>The authenticity of host <span class="hljs-string">&#x27;github.com (20.205.243.166)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">ECDSA key fingerprint is xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="hljs-string">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="hljs-string">Warning: Permanently added &#x27;</span>github.com,20.205.243.166<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span><br><span class="hljs-string">Hi murphyhoucn! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure><h1 id="3090Server2"><a href="#3090Server2" class="headerlink" title="3090Server2"></a>3090Server2</h1><ul><li>Ubuntu 20.04.5 LTS</li><li>gcc version 9.4.0</li><li>CUDA 11.3</li><li>cuDNN 8.9.5</li></ul><h2 id="NV-Driver-2"><a href="#NV-Driver-2" class="headerlink" title="NV Driver"></a>NV Driver</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@3090server2:~$ <span class="hljs-built_in">cat</span> /proc/driver/nvidia/version<br>NVRM version: NVIDIA UNIX x86_64 Kernel Module  535.183.01  Sun May 12 19:39:15 UTC 2024<br>GCC version:  gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)<br></code></pre></td></tr></table></figure><h1 id="4090Server"><a href="#4090Server" class="headerlink" title="4090Server"></a>4090Server</h1><ul><li>Ubuntu 22.04.2 LTS</li><li>gcc 11.4.0</li><li>CUDA11.6 :       cuda_11.6.2_510.47.03_linux.run</li><li>cuDNN 8.9.5:    cudnn-linux-x86_64-8.9.5.29_cuda11-archive.tar.xz</li></ul><h2 id="NV-Driver-3"><a href="#NV-Driver-3" class="headerlink" title="NV Driver"></a>NV Driver</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(sr_benchmark) houjinliang@4090server:~$ <span class="hljs-built_in">cat</span> /proc/driver/nvidia/version<br>NVRM version: NVIDIA UNIX x86_64 Kernel Module  535.183.06  Wed Jun 26 06:46:07 UTC 2024<br>GCC version:  gcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04)<br></code></pre></td></tr></table></figure><h2 id="CUDA-11-6-cuDNN-8-9-5"><a href="#CUDA-11-6-cuDNN-8-9-5" class="headerlink" title="CUDA 11.6 &amp; cuDNN 8.9.5"></a>CUDA 11.6 &amp; cuDNN 8.9.5</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server:~/MyDownloadFiles$ ./cuda_11.6.2_510.47.03_linux.run<br>(base) houjinliang@3090server:~/MyDownloadFiles$ <span class="hljs-built_in">cd</span> cudnn-linux-x86_64-8.9.5.29_cuda11-archive/<br><br><span class="hljs-comment"># CUDA版本是11.6.2</span><br><span class="hljs-comment"># CUDNN版本还是用的之前的</span><br></code></pre></td></tr></table></figure><p>安装过程跟上面的一样，记得把11.3都换成11.6</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241023150732692.png" alt="image-20241023150732692"></p><p>之后再配置Git。</p><p>至于conda env，我把之前服务器上的环境使用conda-pack打包，然后使用scp传过来，然后解压到对应文件夹下。虽然之前cuda113，torch也是113版本的，但是在cuda116的服务器上也能用（那就先用着？！</p><h2 id="问题：Failed-to-initialize-NVML-Driver-library-version-mismatch"><a href="#问题：Failed-to-initialize-NVML-Driver-library-version-mismatch" class="headerlink" title="问题：Failed to initialize NVML: Driver&#x2F;library version mismatch"></a>问题：Failed to initialize NVML: Driver&#x2F;library version mismatch</h2><p>环境正常运行了很长一段时间，但是突然有一天，在运行程序的时候出现了这样一个报错！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ERROR: cuda is not available, try running on CPU<br></code></pre></td></tr></table></figure><p>这个error是我自己的程序里写得报错提示，系统的cuda不可用了？！这是咋回事？！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server:~$ nvidia-smi<br>Failed to initialize NVML: Driver/library version mismatch<br>NVML library version: 535.216<br><br>(base) houjinliang@4090server:~$ nvitop<br>NVML ERROR: RM has detected an NVML/RM version mismatch.<br><br>(base) houjinliang@4090server:~$ gpustat<br>Error on querying NVIDIA devices. Use --debug flag to see more details.<br>RM has detected an NVML/RM version mismatch.<br><br>(base) houjinliang@4090server:~$ gpustat --debug<br>Error on querying NVIDIA devices. Use --debug flag to see more details.<br>RM has detected an NVML/RM version mismatch.<br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/mnt/houjinliang/miniconda3/lib/python3.12/site-packages/gpustat/cli.py&quot;</span>, line 58, <span class="hljs-keyword">in</span> print_gpustat<br>    gpu_stats = GPUStatCollection.new_query(debug=debug, <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>  File <span class="hljs-string">&quot;/mnt/houjinliang/miniconda3/lib/python3.12/site-packages/gpustat/core.py&quot;</span>, line 402, <span class="hljs-keyword">in</span> new_query<br>    N.nvmlInit()<br>  File <span class="hljs-string">&quot;/mnt/houjinliang/miniconda3/lib/python3.12/site-packages/pynvml.py&quot;</span>, line 1947, <span class="hljs-keyword">in</span> nvmlInit<br>    nvmlInitWithFlags(0)<br>  File <span class="hljs-string">&quot;/mnt/houjinliang/miniconda3/lib/python3.12/site-packages/pynvml.py&quot;</span>, line 1937, <span class="hljs-keyword">in</span> nvmlInitWithFlags<br>    _nvmlCheckReturn(ret)<br>  File <span class="hljs-string">&quot;/mnt/houjinliang/miniconda3/lib/python3.12/site-packages/pynvml.py&quot;</span>, line 899, <span class="hljs-keyword">in</span> _nvmlCheckReturn<br>    raise NVMLError(ret)<br>pynvml.NVMLError_LibRmVersionMismatch: RM has detected an NVML/RM version mismatch.<br><br><br>(sr_benchmark) houjinliang@4090server:~$ python<br>Python 3.8.19 (default, Mar 20 2024, 19:58:24)<br>[GCC 11.2.0] :: Anaconda, Inc. on linux<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import torch<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(torch.cuda.is_available())<br>/mnt/houjinliang/miniconda3/envs/sr_benchmark/lib/python3.8/site-packages/torch/cuda/__init__.py:80: UserWarning: CUDA initialization: Unexpected error from cudaGetDeviceCount(). Did you run some cuda <span class="hljs-built_in">functions</span> before calling NumCudaDevices() that might have already <span class="hljs-built_in">set</span> an error? Error 804: forward compatibility was attempted on non supported HW (Triggered internally at  ../c10/cuda/CUDAFunctions.cpp:112.)<br>  <span class="hljs-built_in">return</span> torch._C._cuda_getDeviceCount() &gt; 0<br>False<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/643343668">Failed to initialize NVML: Driver&#x2F;library version mismatch 的解决方法 - 知乎</a></p><h1 id="4090Server2"><a href="#4090Server2" class="headerlink" title="4090Server2"></a>4090Server2</h1><ul><li>Ubuntu 22.04.3 LTS</li><li>gcc version 12.3.0</li></ul><h2 id="NV-Driver-4"><a href="#NV-Driver-4" class="headerlink" title="NV Driver"></a>NV Driver</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~$ <span class="hljs-built_in">cat</span> /proc/driver/nvidia/version<br>NVRM version: NVIDIA UNIX x86_64 Kernel Module  550.107.02  Wed Jul 24 23:53:00 UTC 2024<br>GCC version:  gcc version 12.3.0 (Ubuntu 12.3.0-1ubuntu1~22.04)<br></code></pre></td></tr></table></figure><h2 id="CUDA-12-4-1-cuDNN-8-9-7"><a href="#CUDA-12-4-1-cuDNN-8-9-7" class="headerlink" title="CUDA 12.4.1 &amp; cuDNN 8.9.7"></a>CUDA 12.4.1 &amp; cuDNN 8.9.7</h2><p>CUDA 12.4.1 : <a href="https://developer.nvidia.com/cuda-12-4-1-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=runfile_local">CUDA Toolkit 12.4 Update 1 Downloads | NVIDIA Developer</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~/MyDownloadFiles$ wget https://developer.download.nvidia.com/compute/cuda/12.4.1/local_installers/cuda_12.4.1_550.54.15_linux.run<br></code></pre></td></tr></table></figure><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024224047453.png" alt="image-20241024224047453"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024224102744.png" alt="image-20241024224102744"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024224157698.png" alt="image-20241024224157698"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024224232933.png" alt="image-20241024224232933"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024224310577.png" alt="image-20241024224310577"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024224318258.png" alt="image-20241024224318258"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024224333861.png" alt="image-20241024224333861"></div></div></div><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024224612237.png" alt="image-20241024224612237"></p><p>记得把这个log文件删掉！</p><p>配置CUDA的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~/MyDownloadFiles$ vim ~/.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs .bashrc"># &gt;&gt;&gt; cuda environment variables &gt;&gt;&gt;<br># murpy insert<br>export CUDA_HOME=$CUDA_HOME:/data/houjinliang/cuda-12.4<br>export PATH=$PATH:/data/houjinliang/cuda-12.4/bin<br>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/data/houjinliang/cuda-12.4/lib64<br># &lt;&lt;&lt; cuda environment variables &lt;&lt;&lt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~/MyDownloadFiles$ <span class="hljs-built_in">source</span> ~/.bashrc<br>(base) houjinliang@4090server2:~/MyDownloadFiles$ nvcc -V<br>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2024 NVIDIA Corporation<br>Built on Thu_Mar_28_02:18:24_PDT_2024<br>Cuda compilation tools, release 12.4, V12.4.131<br>Build cuda_12.4.r12.4/compiler.34097967_0<br></code></pre></td></tr></table></figure><p>CUDNN : cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar</p><blockquote><p><a href="https://developer.nvidia.com/downloads/compute/cudnn/secure/8.9.7/local_installers/12.x/cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar.xz/">https://developer.nvidia.com/downloads/compute/cudnn/secure/8.9.7/local_installers/12.x/cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar.xz/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~/MyDownloadFiles$ tar xvJf cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar.xz<br><br>(base) houjinliang@4090server2:~/MyDownloadFiles$ <span class="hljs-built_in">cd</span> cudnn-linux-x86_64-8.9.7.29_cuda12-archive/<br>(base) houjinliang@4090server2:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.7.29_cuda12-archive$ ll<br>total 48<br>drwxr-xr-x 4 houjinliang houjinliang  4096 11月 30  2023 ./<br>drwxrwxr-x 3 houjinliang houjinliang  4096 10月 24 22:53 ../<br>drwxr-xr-x 2 houjinliang houjinliang  4096 11月 30  2023 include/<br>drwxr-xr-x 2 houjinliang houjinliang  4096 11月 30  2023 lib/<br>-rw-r--r-- 1 houjinliang houjinliang 29662 11月 30  2023 LICENSE<br><br>(base) houjinliang@4090server2:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.7.29_cuda12-archive$ <span class="hljs-built_in">cp</span> lib/* ~/cuda-12.4/lib64/<br>(base) houjinliang@4090server2:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.7.29_cuda12-archive$ <span class="hljs-built_in">cp</span> include/* ~/cuda-12.4/include<br>(base) houjinliang@4090server2:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.7.29_cuda12-archive$ <span class="hljs-built_in">chmod</span> +x ~/cuda-12.4/include/cudnn.h<br>(base) houjinliang@4090server2:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.7.29_cuda12-archive$ <span class="hljs-built_in">chmod</span> +x ~/cuda-12.4/lib64/libcudnn*<br><br>(base) houjinliang@4090server2:~/MyDownloadFiles/cudnn-linux-x86_64-8.9.7.29_cuda12-archive$ <span class="hljs-built_in">cat</span> ~/cuda-12.4/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br><span class="hljs-comment">#define CUDNN_MAJOR 8</span><br><span class="hljs-comment">#define CUDNN_MINOR 9</span><br><span class="hljs-comment">#define CUDNN_PATCHLEVEL 7</span><br>--<br><span class="hljs-comment">#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)</span><br><br>/* cannot use constexpr here since this is a C-only file */<br><br></code></pre></td></tr></table></figure><h2 id="git-install"><a href="#git-install" class="headerlink" title="git install"></a>git install</h2><p>这台服务器上没有git，使用deb包安装一个</p><blockquote><ul><li>deb包：<a href="https://ubuntu.pkgs.org/22.04/ubuntu-updates-main-amd64/git_2.34.1-1ubuntu1.11_amd64.deb.html">https://ubuntu.pkgs.org/22.04/ubuntu-updates-main-amd64/git_2.34.1-1ubuntu1.11_amd64.deb.html</a></li><li>教程参考：<a href="https://www.ohyee.cc/post/note_install_git_without_root">https://www.ohyee.cc/post/note_install_git_without_root</a></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~/MyDownloadFiles$ wget http://archive.ubuntu.com/ubuntu/pool/main/g/git/git_2.34.1-1ubuntu1.11_amd64.deb<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~/MyDownloadFiles$ <span class="hljs-built_in">cd</span> ~<br><br><span class="hljs-comment"># 先创建文件夹，把git安装到这里</span><br>(base) houjinliang@4090server2:~$ <span class="hljs-built_in">mkdir</span> git<br>(base) houjinliang@4090server2:~$ dpkg -x ./MyDownloadFiles/git_2.34.1-1ubuntu1.11_amd64.deb ./git<br><br>(base) houjinliang@4090server2:~$ <span class="hljs-built_in">cd</span> git/<br>(base) houjinliang@4090server2:~/git$ ll<br>total 20<br>drwxr-xr-x  5 houjinliang houjinliang 4096  5月 20 20:14 ./<br>drwxr-x--- 14 houjinliang houjinliang 4096 10月 24 23:22 ../<br>drwxr-xr-x  3 houjinliang houjinliang 4096  5月 20 20:14 etc/<br>drwxr-xr-x  5 houjinliang houjinliang 4096  5月 20 20:14 usr/<br>drwxr-xr-x  3 houjinliang houjinliang 4096  5月 20 20:14 var/<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~$ vim ~/.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &gt;&gt;&gt; git environment variables &gt;&gt;&gt;</span><br><span class="hljs-comment"># murpy insert</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:~/git/usr/bin<br><span class="hljs-built_in">export</span> GIT_EXEC_PATH=~/git/usr/lib/git-core<br><span class="hljs-comment"># &lt;&lt;&lt; git environment variables &lt;&lt;&lt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~$ <span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~$ git --version<br>git version 2.34.1<br></code></pre></td></tr></table></figure><h2 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~$ git config --global user.name <span class="hljs-string">&#x27;hjl_4090server2&#x27;</span><br>(base) houjinliang@4090server2:~$ git config --global user.email <span class="hljs-string">&#x27;cosmicdustycn@outlook.com&#x27;</span><br>(base) houjinliang@4090server2:~$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;cosmicdustycn@outlook.com&quot;</span><br>Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/data/houjinliang/.ssh/id_rsa):<br>Created directory <span class="hljs-string">&#x27;/data/houjinliang/.ssh&#x27;</span>.<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved <span class="hljs-keyword">in</span> /data/houjinliang/.ssh/id_rsa<br>Your public key has been saved <span class="hljs-keyword">in</span> /data/houjinliang/.ssh/id_rsa.pub<br>(base) houjinliang@4090server2:~$ <span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~$ git config user.name<br>hjl_4090server2<br>(base) houjinliang@4090server2:~$ git config user.email<br>cosmicdustycn@outlook.com<br>(base) houjinliang@4090server2:~$ ssh -T git@github.com<br>The authenticity of host <span class="hljs-string">&#x27;github.com (20.205.243.166)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.</span><br><span class="hljs-string">This key is not known by any other names</span><br><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="hljs-string">Warning: Permanently added &#x27;</span>github.com<span class="hljs-string">&#x27; (ED25519) to the list of known hosts.</span><br><span class="hljs-string">Hi murphyhoucn! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure><h2 id="conda-env"><a href="#conda-env" class="headerlink" title="conda env"></a>conda env</h2><p>虽然4090server2上面的CUDA环境是12.4，但这里还是用了在3080上配置的sr_benchmark的环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) houjinliang@4090server2:~$ <span class="hljs-built_in">mkdir</span> ~/miniconda3/envs/sr_benchmark<br>(base) houjinliang@4090server2:~$ tar -xzvf ./MyDownloadFiles/sr_benchmark.tar.gz -C ~/miniconda3/envs/sr_benchmark<br>(base) houjinliang@4090server2:~$ conda <span class="hljs-built_in">env</span> list<br><span class="hljs-comment"># conda environments:</span><br><span class="hljs-comment">#</span><br>base                  *  /data/houjinliang/miniconda3<br>sr_benchmark             /data/houjinliang/miniconda3/envs/sr_benchmark<br><br>(base) houjinliang@4090server2:~$<br>(base) houjinliang@4090server2:~$ conda activate sr_benchmark<br>(sr_benchmark) houjinliang@4090server2:~$ python<br>Python 3.8.19 (default, Mar 20 2024, 19:58:24)<br>[GCC 11.2.0] :: Anaconda, Inc. on linux<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import torch<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(torch.cuda.is_available())<br>True<br>&gt;&gt;&gt;<br><br><span class="hljs-comment"># torch版本还是之前的</span><br>torch                   1.10.1+cu113<br>torchvision             0.11.2+cu113<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><h2 id="CUDA-Toolkit-and-Corresponding-Driver-Versions"><a href="#CUDA-Toolkit-and-Corresponding-Driver-Versions" class="headerlink" title="CUDA Toolkit and Corresponding Driver Versions"></a>CUDA Toolkit and Corresponding Driver Versions</h2><p><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#id5">CUDA 12.6 Update 2 Release Notes</a></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241030165027775.png" alt="image-20241030165027775"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241030165047346.png" alt="image-20241030165047346"></div></div></div><h2 id="GCC与CUDA版本对应"><a href="#GCC与CUDA版本对应" class="headerlink" title="GCC与CUDA版本对应"></a>GCC与CUDA版本对应</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241023135851280.png" alt="image-20241023135851280"></p><ul><li>3080Server - gcc 7.5.0   （Ubuntu 18.04.6 LTS）-&gt; CUDA 11.3</li><li>3090Server - gcc 7.5.0   （Ubuntu 18.04.6 LTS）-&gt; CUDA 11.3</li><li>3090Server2 - gcc 9.4.0 （Ubuntu  20.04.5 LTS）-&gt; CUDA 11.3</li><li>4090Server - gcc 11.4.0  （Ubuntu 22.04.2 LTS）-&gt; CUDA 11.6</li><li>4090Server - gcc 12.3.0  （Ubuntu 22.04.3 LTS）-&gt; CUDA 12.4</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241023142730502.png" alt="image-20241023142730502"></p><blockquote><p><a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html">https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html</a></p></blockquote><h2 id="cuDNN-docs"><a href="#cuDNN-docs" class="headerlink" title="cuDNN docs"></a>cuDNN docs</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241023145233186.png" alt="image-20241023145233186"></p><blockquote><ul><li><p><a href="https://docs.nvidia.com/deeplearning/cudnn/latest/reference/support-matrix.html">Support Matrix — NVIDIA cuDNN v9.5.0 documentation</a></p></li><li><p><a href="https://docs.nvidia.com/deeplearning/cudnn/archives/index.html">Documentation Archives :: NVIDIA cuDNN Documentation</a></p></li></ul></blockquote><h2 id="CUDA-Toolkit-Archive"><a href="#CUDA-Toolkit-Archive" class="headerlink" title="CUDA Toolkit Archive"></a>CUDA Toolkit Archive</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241023145423648.png" alt="image-20241023145423648"></p><blockquote><p> <a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive | NVIDIA Developer</a></p></blockquote><h2 id="cuDNN-Archive"><a href="#cuDNN-Archive" class="headerlink" title="cuDNN Archive"></a>cuDNN Archive</h2><blockquote><ul><li><a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN Archive | NVIDIA Developer</a></li></ul></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024223544376.png" alt="image-20241024223544376"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241024223923702.png" alt="image-20241024223923702"></p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote><ul><li>这个中文文档很不错：<a href="https://yeasy.gitbook.io/docker_practice/install/ubuntu">Ubuntu | Docker — 从入门到实践 (gitbook.io)</a></li></ul></blockquote><h2 id="Docker-Install"><a href="#Docker-Install" class="headerlink" title="Docker Install"></a>Docker Install</h2><blockquote><p><em>需要管理员用户！</em></p><ul><li><a href="https://yeasy.gitbook.io/docker_practice/install/ubuntu">Ubuntu | Docker — 从入门到实践 (gitbook.io)</a></li><li><a href="https://blog.csdn.net/weixin_43844521/article/details/132737354">Linux 查看属于某个组（例如docker组）的所有用户_getent group docker-CSDN博客</a></li></ul></blockquote><ul><li>使用APT安装（具体步骤参考网上教程）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Step 1</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install \<br>    apt-transport-https \<br>    ca-certificates \<br>    curl \<br>    gnupg \<br>    lsb-release<br><br><span class="hljs-comment"># Step 2</span><br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<br><br><span class="hljs-comment"># Step 3</span><br><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span><br><span class="hljs-string">  <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><br><span class="hljs-comment"># Step 4</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io<br><br><span class="hljs-comment"># Step 5</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-built_in">sudo</span> systemctl start docker<br></code></pre></td></tr></table></figure><ul><li>为了让非管理员用户也能使用docker，需要建立用户组，赋予用户组内的用户权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 建立 docker 组</span><br><span class="hljs-built_in">sudo</span> groupadd docker<br><br><span class="hljs-comment"># 将当前用户加入 docker 组</span><br><span class="hljs-built_in">sudo</span> usermod -aG docker <span class="hljs-variable">$USER</span><br><span class="hljs-comment"># 将xxx用户加入 docker 组</span><br><span class="hljs-built_in">sudo</span> usermod -aG docker xxxxxxxx<br><br><span class="hljs-comment"># 查看docker用户组用户 - 方法1</span><br>getent group docker<br><span class="hljs-comment"># 查看docker用户组用户 - 方法2</span><br>grep <span class="hljs-string">&#x27;^docker:&#x27;</span> /etc/group<br></code></pre></td></tr></table></figure><h2 id="配置docker代理"><a href="#配置docker代理" class="headerlink" title="配置docker代理"></a>配置docker代理</h2><blockquote><p>docker 代理配置需要<em>管理员用户</em>！</p><ul><li><a href="https://isedu.top/index.php/archives/146/">Docker的网络代理配置 - 清~幽殇 (isedu.top)</a></li><li><a href="https://blog.csdn.net/vic_qxz/article/details/130061661">配置docker pull代理_docker pull 代理-CSDN博客</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/install/mirror">镜像加速器 | Docker — 从入门到实践 (gitbook.io)</a></li><li><a href="https://www.coderjia.cn/archives/dba3f94c-a021-468a-8ac6-e840f85867ea">目前国内可用Docker镜像源汇总（截至2024年12月） - CoderJia</a></li></ul></blockquote><p>上网代理，参考<a href="https://cosmicdusty.cc/post/Tools/WorkingWithGPUServer/#Clash-for-Linux">瞧瞧我对服务器干了些什么！ - MurphyHou (cosmicdusty.cc)</a></p><p>一、配置镜像服务器（很多镜像服务器已经不能用了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/docker/daemon.json<br><br><span class="hljs-comment"># 在json配置文件中，输入以下配置</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span>,<br>    <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><br>  ]<br>&#125;<br><br><span class="hljs-comment"># 然后重启docker服务</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><p>二、docker pull代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> /etc/systemd/system/docker.service.d/proxy.conf<br><br><span class="hljs-comment"># 在json配置文件中，输入以下配置 -&gt; (7890端口号是因为clash是代理的这个端口)</span><br>[Service]<br>Environment=<span class="hljs-string">&quot;HTTP_PROXY=http://127.0.0.1:7890/&quot;</span><br>Environment=<span class="hljs-string">&quot;HTTPS_PROXY=http://127.0.0.1:7890/&quot;</span><br>Environment=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span><br><br><span class="hljs-comment"># 然后重启docker服务</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><p>三、Container代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1、用户级代理(这个就不需要管理员用户了，使用自己的用户登录)</span><br>vim ~/.docker/config.json<br><br><span class="hljs-comment"># 在json配置文件中，输入以下配置 -&gt; (7890端口号是因为clash是代理的这个端口)</span><br>&#123;<br> <span class="hljs-string">&quot;proxies&quot;</span>:<br> &#123;<br>   <span class="hljs-string">&quot;default&quot;</span>:<br>   &#123;<br>     <span class="hljs-string">&quot;httpProxy&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span>,<br>     <span class="hljs-string">&quot;httpsProxy&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span>,<br>     <span class="hljs-string">&quot;noProxy&quot;</span>: <span class="hljs-string">&quot;localhost,127.0.0.1,.example.com&quot;</span><br>   &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试Docker配置是否成功"><a href="#测试Docker配置是否成功" class="headerlink" title="测试Docker配置是否成功"></a>测试Docker配置是否成功</h2><blockquote><p><a href="https://yeasy.gitbook.io/docker_practice/install/ubuntu">Ubuntu | Docker — 从入门到实践 (gitbook.io)</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> hello-world<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241205160737158.png" alt="image-20241205160737158"></p><h2 id="配置overleaf"><a href="#配置overleaf" class="headerlink" title="配置overleaf"></a>配置overleaf</h2><blockquote><p><em>上述的docker环境配置好之后，可以配置一下overleaf. 特别是得配置好网络环境，要不然Docker Image拉取不下来</em></p><ul><li><a href="https://ziuch.com/article/self-hosted-overleaf">自建OverLeaf——妈妈再也不用担心我的论文编译超时 | Ziuch の Blog</a></li><li><a href="https://yangzhang.site/Note/NAS/self-hosted-overleaf/">自建Overleaf - yangzhang’s Site</a></li><li><a href="https://www.tnnidm.com/build-and-use-overleaf-server/index.html">搭建和使用overleaf服务器 | Tnnidm-Blog</a></li></ul></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Step 1：下载源码</span><br>git <span class="hljs-built_in">clone</span> https://github.com/overleaf/toolkit.git ./overleaf-toolkit &amp;&amp; <span class="hljs-built_in">cd</span> overleaf-toolkit<br><br><span class="hljs-comment"># Step 2：初始化配置</span><br>bin/init<br><br><span class="hljs-comment"># Step 3：建立服务</span><br>bin/up<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20241205161651945.png" alt="image-20241205161651945"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动服务</span><br>bin/start<br><br><span class="hljs-comment"># 结束服务</span><br>bin/stop<br></code></pre></td></tr></table></figure><h3 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h3><p>因为服务是在远程服务器上，为了在本地能直接方法，需要修改端口和外网访问</p><p>在<code>./config/overleaf.rc</code>中，需要修改以下字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">OVERLEAF_LISTEN_IP=xx.xx.xx.xx # 远程服务器IP<br>OVERLEAF_PORT=80 # 默认是80<br></code></pre></td></tr></table></figure><p>Overleaf 容器启动之后，可以打开 <a href="http://xx.xx.xx.xx:xx/launchpad">http://xx.xx.xx.xx:xx/launchpad</a> 注册管理员帐户。之后我们就可以用这个帐户登录 Overleaf 平台。</p><p>网上教程中还给出了一些复杂的配置，后面根据需要再配置吧。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>因为Overleaf官网对于免费用户，只有20s的编译时间，超过时间限制则无法编译。对于这种情况，只能付费解决。如果面对我遇到这样的情况的话，我可能也会选择付费的方式。但在网上看到了可以在服务器上搭建自己的Overleaf，所以想跟着教程自己试一下。按照教程一步步走下来，最后也配置成功了。也许最后并不会使用自己配置的这个，但折腾永不停息，万一用到了呢？！</p>]]></content>
    
    
    <categories>
      
      <category>高效工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Server</tag>
      
      <tag>GPU</tag>
      
      <tag>DeepLearning</tag>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hi, How Are You?🤗</title>
    <link href="/blog/post/MyLife/Hi-HowAreYou/"/>
    <url>/blog/post/MyLife/Hi-HowAreYou/</url>
    
    <content type="html"><![CDATA[<h1 id="🤗Hi-这是一个交友贴"><a href="#🤗Hi-这是一个交友贴" class="headerlink" title="🤗Hi~这是一个交友贴"></a>🤗Hi~这是一个交友贴</h1><p>&emsp;&emsp;Hi，你好啊🤗。这是一个交友贴，我犹豫了很久、也考虑了很久才决定写下这些话，我对此寄予了一些期望，希望能帮我交到新朋友。我想，既然都决定写了，就多写一些内容吧。</p><h2 id="🧑关于我"><a href="#🧑关于我" class="headerlink" title="🧑关于我"></a>🧑关于我</h2><p>&emsp;&emsp;我是一个土生土长的山东男生，家在山东潍坊🪁，一个山东中北部沿海城市。我出生于2000年，今年已经23周岁了；净身高186cm，体重79kg，身形匀称，容貌正常。目前我在西北工业大学（长安校区）的电子和信息类相关专业读研一。我的性格相对安静，但也可以独当一面；会做一些菜，最拿手的是青椒炒肉和棱瓜炒鸡蛋，也乐意去学习新的菜肴；兴趣爱好挺广泛的：</p><ul><li>✨热爱天文与星空，无穷无尽的宇宙背后是数不尽的浪漫与哲理；✈🚀热爱“力大砖飞”、“推力即正义”的航空航天文化；📸热爱风光摄影，小小的一张照片足以包容万物，也在学习怎么拍好人像；</li><li>📚喜欢阅读，“书宜杂读，业宜精钻”，我读书读的很杂，悬疑解谜、科幻科普与文学散文类的书籍读得相对多一点儿；📓一直在坚持写日记，喜欢分享生活中的趣事、记录生活中的点点滴滴；💻也会写一写博客，作为一种观点和思想的表达，尽管有时候喜欢挖坑不填；</li><li>🏸🏓很喜欢与朋友们打羽毛球和乒乓球，运动总会使我很快乐；🏃‍一直在坚持跑步，5km PB 26’；⚫一直在尝试新的东西，比如下围棋，作为初学者被虐得很惨……</li></ul><p>&emsp;&emsp;我有自己的爱好，也有自己擅长的事情，这是我的“小天地”，充实了平淡的生活。不过，我觉得最重要的是我对一切未知事物都怀有<strong>一颗好奇与探索之心</strong>❤。</p><p>&emsp;&emsp;我本科就读于山东青岛🌊，红瓦绿树，碧海蓝天，这是一座极具魅力的海滨城市，青岛这座城市在我这个山东人的心里有不一样的地位。不过很可惜的是在本科的四年里，我并没有好好地去探索这座城，去感受一座城市的人文底蕴与烟火气。而现在，我踏足于西安，“吹过的风都是文化，脚下的路都是历史”，我想能有一个合拍的朋友（更准确的说的话应该是<strong>女朋友</strong>），能有相似的想法，能够同频共振，分享喜悦，分担忧愁，一起去探索生活。奈何我现在的社交圈子太小了，太难认识到新的朋友了，于是我选择了借助网络的力量来扩大社交网络。</p><h2 id="👧关于“你”"><a href="#👧关于“你”" class="headerlink" title="👧关于“你”"></a>👧关于“你”</h2><p>&emsp;&emsp;我希望“你”身高能高一点儿，最好165+cm，不过也别太高了；乐观开朗，宽容大度，待人真诚；对于恋爱，我赋予其最大的使命是“激励一起进步，不断成长，为了共同的未来去奋斗”；对于未来，我比较中意西安⛰与成都🐼这两座城，青岛🌊也是一个很不错的选择，希望未来可以在同一个城市工作与生活。当然，开心最重要！彼此都可以一直开开心心的那将胜于一切。</p><h2 id="📌最后"><a href="#📌最后" class="headerlink" title="📌最后"></a>📌最后</h2><p>&emsp;&emsp;人都是复杂的，仅仅通过几句话并不能了解一个人，但看完上面的一些话之后，如果你对此感兴趣的话，可以添加我的微信：<b><em>CosmicDusty</em></b>，希望能与你交个朋友。</p><p>&emsp;&emsp;谢谢你能读到这里，最后的最后，分享于你我非常喜欢的一个演讲—<em>Randy Pausch</em>教授在CMU的<b><em>“Last Lecture: Really Achieving Your Childhood Dreams”</em></b>，永远怀揣童年美好的梦想，积极乐观直到生命的结束。</p><hr><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/wechat_avatar_crop.jpg" alt="Hi, I&#39;m Murphy. How are you?"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hi,I&#39;m Murphy</title>
    <link href="/blog/post/MyLife/Hi/"/>
    <url>/blog/post/MyLife/Hi/</url>
    
    <content type="html"><![CDATA[<h1 align="center">👋  Hi Here! I'm Murphy. Nice to meet you.  ❤</h1><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/AboutMe_background.jpg" width=80%/>    </br>  <p></p></div><p align="center">  Hi, I'm Murphy, <b>Learning and always learning</b>  <br>  💫 I hope 'A Future Without Disappointment!'  <br>  🔬 I've get a bachelor's degree in <b>Ocean University of China</b> majoring in Communication Engineering  <br>  🔬 Now, I'm studying for a master's degree in <b>Northwestern Polytechnical University</b>  <br>  💻 I love <b>Computer Science</b> and <b>Electronic Engineering</b>  <br>  📚 I’m currently learning <b>Computer Vision</b> and <b>Pattern Recognition</b> for HSI  <br>  🌐 You can lean more about me from my Web Page: <a href="https://cosmicdusty.cc/" title="cosmicdusty">cosmicdusty</a>  <br>  💬 Ask me anything about from <a href="https://github.com/murphyhoucn/murphyhoucn/issues" title="Issues">Here</a>  <br>  📫 How to reach me: <a href="mailto: cosmicdustycn@outlook.com">cosmicdustycn@outlook.com</a></p><h1 align="center">🔥 Languages & Frameworks & Tools & Abilities 🔥</h1><p align="center">  <a href="https://skillicons.dev">    <img src="https://skillicons.dev/icons?i=linux,bash,docker,git,vim,md,c,cpp,py,pytorch,tensorflow,matlab" /></br>    <img src="https://skillicons.dev/icons?i=arduino,html,css,js,nodejs,java,androidstudio"></br>    <img src="https://skillicons.dev/icons?i=github,stackoverflow,discord,visualstudio,vscode"></br>  </a></p><h1 align="center">⚡ Stats ⚡</h1><div align="center">   <img src="https://github-readme-stats-one-bice.vercel.app/api?username=murphyhoucn&count_private=true&theme=react&show_icons=true&include_all_commits=true&role=OWNER,ORGANIZATION_MEMBER,COLLABORATOR" alt="Murphy's GitHub stats" height="150px" />   <img src="https://github-readme-streak-stats.herokuapp.com/?user=murphyhoucn&theme=react" height="150px" />   </br>  <img src="https://github-readme-stats-one-bice.vercel.app/api/top-langs/?username=murphyhoucn&layout=compact&langs_count=8&theme=react&role=OWNER,ORGANIZATION_MEMBER" alt="Top Langs" height="150px" /></div><h1 align="center">🏆 Github Profile Trophy 🏆</h1><br><div align="center"> <img src="https://github-profile-trophy.vercel.app/?username=murphyhoucn&column=7&theme=onedark"/></div><h1 align="center">✨  Ideal  ✨</h1><div align=center>    To see life, to see the world;</br>    to eyewitness great events;</br>    to watch the faces of the poor and the gestures of the proud,</br>    To see strange things - machines, armies, multitudes, shadows in the jungle and on the moon;</br>    to see man’s work - his paintings, towers and discoveries;</br>    to see things thousands of miles away, things hidden behind walls and within rooms, things dangerous to come to;</br>    the women that men love and many children;</br>    to see and to take pleasure in seeing;</br>    to see and be amazed;</br>    to see and be instructed…</br>    <p></div>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>愉快的研究生生活呀</title>
    <link href="/blog/post/MyLife/EnjoyableGraduateLife/"/>
    <url>/blog/post/MyLife/EnjoyableGraduateLife/</url>
    
    <content type="html"><![CDATA[<h1 id="2023年12月"><a href="#2023年12月" class="headerlink" title="2023年12月"></a>2023年12月</h1><h2 id="玩"><a href="#玩" class="headerlink" title="玩"></a>玩</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231216_201412.jpg" alt="（2023.12.16）雯雯妹妹请我吃糖葫芦"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231223_135719.jpg" alt="（2023.12.23）带雯雯妹妹来西工大看艺术展"></div></div></div><h2 id="冬天到了，感冒也到了"><a href="#冬天到了，感冒也到了" class="headerlink" title="冬天到了，感冒也到了"></a>冬天到了，感冒也到了</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231215_125308.jpg" alt="（2021.12.15）下雪啦"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231201_105421.jpg" alt="（2023.12.01）感冒了，流鼻涕，难受"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231207_174523.jpg" alt="（2023.12.07）东大慕斯白的烧烤"></div></div></div><h2 id="冬天的感觉来了"><a href="#冬天的感觉来了" class="headerlink" title="冬天的感觉来了"></a>冬天的感觉来了</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231201_092211.jpg" alt="（2023.12.01）早上的吃饭早饭出来，看到了西边的太阳。"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231201_092750.jpg" alt="（2023.12.01）天冷了，给车也盖上被子。"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231201_092815.jpg" alt="（2023.12.01）路上都是落叶"></div></div></div><h1 id="2023年11月"><a href="#2023年11月" class="headerlink" title="2023年11月"></a>2023年11月</h1><h2 id="日常中的碎碎念"><a href="#日常中的碎碎念" class="headerlink" title="日常中的碎碎念"></a>日常中的碎碎念</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231116_184732.jpg" alt="（2023.11.16）西工大的文创咖啡杯，带给雯雯。"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231117_201719.jpg" alt="（2023.11.17）在教研室看到的远处的烟花🎇"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1699770801864.jpg" alt="（2023.11.11）西安初雪，不过长安校区没雪，友谊校区下了好大的雪"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231110_152043.jpg" alt="（2023.11.10）打打羽毛球🏸"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231107_161449.jpg" alt="（2023.11.07）学生证终于发了"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231129_173604.jpg" alt="（2023.11.29）芜湖~"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231111_195417.jpg" alt="（2023.11.11）在乐高店看到了好可爱的哈利波特的小玩偶"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231126_130226.jpg" alt="（2023.11.26）好干燥呀，添置一个加湿器"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231115_131952.jpg" alt="（2023.11.15）收拾一下桌子，把笔记本电脑收起来了，多一些桌面空间。"></div></div></div><h2 id="悄咪咪地混入陕西师范大学长安校区"><a href="#悄咪咪地混入陕西师范大学长安校区" class="headerlink" title="悄咪咪地混入陕西师范大学长安校区"></a>悄咪咪地混入陕西师范大学长安校区</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231111_120159.jpg" alt="（2023.11.11）看看陕师大长安校区"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231111_110625.jpg" alt="（2023.11.11）看看陕师大长安校区"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231111_134046.jpg" alt="（2023.11.11）看看陕师大长安校区"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231111_134042.jpg" alt="（2023.11.11）看看陕师大长安校区"></div></div></div><h2 id="休闲的下午又去摸鱼去了"><a href="#休闲的下午又去摸鱼去了" class="headerlink" title="休闲的下午又去摸鱼去了"></a>休闲的下午又去摸鱼去了</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1698913083843.jpg" alt="（2023.11.02）摸鱼🐟~"></p><h2 id="十一月份的吃吃吃"><a href="#十一月份的吃吃吃" class="headerlink" title="十一月份的吃吃吃"></a>十一月份的吃吃吃</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231126_175111.jpg" alt="（2023.11.26）海天苑餐厅二楼的自选，有点儿辣"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231124_120736.jpg" alt="（2023.11.24）海天苑餐厅一楼的牛肉汤和鸡蛋饼，豆腐皮太干了"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231119_174118.jpg" alt="（2023.11.19）云天苑餐厅二楼的茶泡饭"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231117_172508.jpg" alt="（2023.11.17）陕师大溢香楼一楼的大富豪米粉"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231116_180118.jpg" alt="（2023.11.16）星天苑南餐厅二楼的新疆炒馕，有点儿辣"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231116_121527.jpg" alt="（2023.11.16）海天苑餐厅一楼的水饺，不太喜欢蘸辣椒油"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231113_120110.jpg" alt="（2023.11.13）星天苑南餐厅二楼的咖喱滑蛋饭，我超级喜欢吃这个！"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231113_182211.jpg" alt="（2023.11.13）海天苑餐厅一楼的西红柿鸡蛋面"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231115_120645.jpg" alt="（2023.11.15）海天苑餐厅一楼的素臊子面"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231114_181150.jpg" alt="（2023.11.14）云天苑餐厅一楼的汉中热米皮，第一次吃，新的尝试"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231104_190356.jpg" alt="（2023.11.04）雁塔区小寨赛格的酸菜鱼，又贵又少"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231104_125959.jpg" alt="（2023.11.04）雁塔区小寨赛格的虾，感觉不是很新鲜"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231102_181006.jpg" alt="（2023.11.02）星天苑北餐厅三楼的大盘鸡"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231101_183840.jpg" alt="（2023.11.01）星天苑北餐厅三楼的大盘鸡"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231123_180939.jpg" alt="（2023.11.23）星天苑北餐厅三楼的大盘鸡"></div></div></div><h1 id="2023年10月"><a href="#2023年10月" class="headerlink" title="2023年10月"></a>2023年10月</h1><h2 id="秋色渐入佳境"><a href="#秋色渐入佳境" class="headerlink" title="秋色渐入佳境"></a>秋色渐入佳境</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231030_153600.jpg" alt="（2023.10.30）从学院出来，看到图书馆方向好美呀"></p><h2 id="2023-10-29-在绝美的夕阳之下摸鱼"><a href="#2023-10-29-在绝美的夕阳之下摸鱼" class="headerlink" title="2023.10.29 在绝美的夕阳之下摸鱼"></a>2023.10.29 在绝美的夕阳之下摸鱼</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_173214.jpg" alt="IMG_20231029_173214"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_173455.jpg" alt="IMG_20231029_173455"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_173736.jpg" alt="IMG_20231029_173736"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_173740.jpg" alt="IMG_20231029_173740"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_174438.jpg" alt="IMG_20231029_174438"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_175119.jpg" alt="IMG_20231029_175119"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_175428.jpg" alt="IMG_20231029_175428"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_175526.jpg" alt="IMG_20231029_175526"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_180018.jpg" alt="IMG_20231029_180018"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231029_191040.jpg" alt="IMG_20231029_191040"></div></div></div><h2 id="2023-10-25-麻辣的虾尾拌面"><a href="#2023-10-25-麻辣的虾尾拌面" class="headerlink" title="2023.10.25 麻辣的虾尾拌面"></a>2023.10.25 麻辣的虾尾拌面</h2><blockquote><p>师兄的厨艺，yyds!</p></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231025_123230.jpg" alt="IMG_20231025_123230"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231025_123409.jpg" alt="IMG_20231025_123409"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231025_125522.jpg" alt="IMG_20231025_125522"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231025_125628.jpg" alt="IMG_20231025_125628"></div></div></div><h2 id="2023-10-24-与巴铁朋友的聚餐"><a href="#2023-10-24-与巴铁朋友的聚餐" class="headerlink" title="2023.10.24 与巴铁朋友的聚餐"></a>2023.10.24 与巴铁朋友的聚餐</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231024_201631.jpg" alt="IMG_20231024_201631"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231024_202426.jpg" alt="IMG_20231024_202426"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1698157531175.jpg" alt="mmexport1698157531175"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231024_201539.jpg" alt="IMG_20231024_201539"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231024_205445.jpg" alt="IMG_20231024_205445"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231024_215023.jpg" alt="IMG_20231024_215023"></div></div></div><h2 id="2023-10-21-圭峰山"><a href="#2023-10-21-圭峰山" class="headerlink" title="2023.10.21 圭峰山"></a>2023.10.21 圭峰山</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231022_152728.jpg" alt="IMG_20231022_152728"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231022_152836.jpg" alt="IMG_20231022_152836"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231022_152804.jpg" alt="IMG_20231022_152804"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231022_152929.jpg" alt="IMG_20231022_152929"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231021_215446.jpg" alt="IMG_20231021_215446"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/april_2023-10-21-23-09-12-808.jpg" alt="april_2023-10-21-23-09-12-808"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1697894304151.jpg" alt="mmexport1697894304151"></div></div></div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/april_2023-10-21-22-01-36-649.jpg" alt="april_2023-10-21-22-01-36-649"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/april_2023-10-21-22-18-47-414.jpg" alt="april_2023-10-21-22-18-47-414"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/april_2023-10-21-22-19-50-020.jpg" alt="april_2023-10-21-22-19-50-020"></div></div></div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231021_092713.jpg" alt="IMG_20231021_092713"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231021_102133.jpg" alt="IMG_20231021_102133"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231021_094844.jpg" alt="IMG_20231021_094844"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231021_130911.jpg" alt="IMG_20231021_130911"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231021_215108.jpg" alt="IMG_20231021_215108"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231021_144057.jpg" alt="IMG_20231021_144057"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231021_195302.jpg" alt="东大的张伟铜锅涮肉"></div></div></div><h2 id="2023-9-10-国庆假期"><a href="#2023-9-10-国庆假期" class="headerlink" title="2023.9&amp;10 国庆假期"></a>2023.9&amp;10 国庆假期</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230929_142951.jpg" alt="（2023.09.29）碑林区-西工大友谊校区"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230929_142658.jpg" alt="（2023.09.29）碑林区-西工大友谊校区"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231003_174540.jpg" alt="（2023.10.03）雁塔区-大唐芙蓉园"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231003_165720.jpg" alt="（2023.10.03）雁塔区-大唐芙蓉园"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230929_195255.jpg" alt="（2023.09.29）雁塔区-大唐不夜城"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230929_161625.jpg" alt="（2023.09.29）雁塔区-大唐不夜城"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231003_190526.jpg" alt="（2023.10.03）雁塔区-小寨赛格，猪肚鸡"></div></div></div><h2 id="2023-9-27-一次绝美的晚霞"><a href="#2023-9-27-一次绝美的晚霞" class="headerlink" title="2023.9.27 一次绝美的晚霞"></a>2023.9.27 一次绝美的晚霞</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230927_184009.jpg" alt="IMG_20230927_184009"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230927_191217.jpg" alt="IMG_20230927_191217"></p><h2 id="2023-10-运动让人健康又快乐"><a href="#2023-10-运动让人健康又快乐" class="headerlink" title="2023.10 运动让人健康又快乐"></a>2023.10 运动让人健康又快乐</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231015_164029.jpg" alt="（2023.10.15）和两位师兄一起大乒乓球"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230928_175451.jpg" alt="（2023.9.28）终于把断了线的拍子重新拉好线了，开打！"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231006_201047.jpg" alt="（2023.10.06）开打！"></div></div></div><h2 id="2023-9-10-一些让人开心的事情"><a href="#2023-9-10-一些让人开心的事情" class="headerlink" title="2023.9&amp;10 一些让人开心的事情"></a>2023.9&amp;10 一些让人开心的事情</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230910_130357.jpg" alt="（2023.9.10）莫非从欧洲带回来的纪念币，爱莫非❤"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231018_192959.jpg" alt="（2023.10.18）茶百道"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231009_124123.jpg" alt="（2023.10.09）瑞幸"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231003_100634.jpg" alt="（2023.10.03）“吃酸奶”"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231005_231019.jpg" alt="（2023.10.05）超爱吃火龙果！有段时间，每两天就去超市买五个火龙果"></div></div></div><h2 id="2023-9-10-教研室的大家最爱干饭了！"><a href="#2023-9-10-教研室的大家最爱干饭了！" class="headerlink" title="2023.9&amp;10 教研室的大家最爱干饭了！"></a>2023.9&amp;10 教研室的大家最爱干饭了！</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1695257715367.jpg" alt="（2023.9.20）风峪口的重庆石锅鱼"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231007_185003.jpg" alt="（2023.10.07）东大的川菜馆"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231016_185134.jpg" alt="（2023.10.16）东大的川菜馆，潘师兄的生日"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230930_141822.jpg" alt="（2023.9.30）沣河河畔的露天烧烤"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230930_150215.jpg" alt="（2023.9.30）沣河河畔的露天烧烤，旭朝师兄精湛的厨艺"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mmexport1697382138844.jpg" alt="（2023.10.15）教研室的火锅"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231016_123532_2.jpg" alt="（2023.10.16）在教研室一起吃面"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231015_221027.jpg" alt="（2023.10.15）吃完火锅后和师兄师姐一起看恐怖店电影"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231015_203457.jpg" alt="（2023.10.15）吃完火锅后和师兄师姐一起看恐怖店电影"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231018_183641.jpg" alt="（2023.10.18）东大穆斯白烧烤"></div></div><div class="group-image-row"></div></div><h1 id="2023年9月"><a href="#2023年9月" class="headerlink" title="2023年9月"></a>2023年9月</h1><h2 id="2023-9-参加一下艺术活动，凑凑热闹"><a href="#2023-9-参加一下艺术活动，凑凑热闹" class="headerlink" title="2023.9 参加一下艺术活动，凑凑热闹"></a>2023.9 参加一下艺术活动，凑凑热闹</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230917_195924.jpg" alt="（2023.9.17）鹿先森乐队"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230921_185333.jpg" alt="（2023.9.21）维也纳三重奏"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230921_193728.jpg" alt="（2023.9.21）维也纳三重奏"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230924_184108.jpg" alt="（2023.9.24）西北工业大学2023迎新晚会"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230924_200935.jpg" alt="（2023.9.24）西北工业大学2023迎新晚会"></div></div></div><h2 id="2023-9-初来乍到，探索校园"><a href="#2023-9-初来乍到，探索校园" class="headerlink" title="2023.9 初来乍到，探索校园"></a>2023.9 初来乍到，探索校园</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_101733.jpg" alt="IMG_20230901_101733"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230903_092214.jpg" alt="IMG_20230903_092214"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_102442.jpg" alt="IMG_20230901_102442"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_102253.jpg" alt="IMG_20230901_102253"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230903_210211.jpg" alt="IMG_20230903_210211"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230829_180705.jpg" alt="IMG_20230829_180705"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_094219.jpg" alt="IMG_20230901_094219"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230901_095514.jpg" alt="IMG_20230901_095514"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230903_091618.jpg" alt="IMG_20230903_091618"></div></div></div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20231006_171725.jpg" alt="IMG_20231006_171725"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230830_091939.jpg" alt="IMG_20230830_091939"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20230903_205349.jpg" alt="IMG_20230903_205349"></div></div></div>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迷茫的研究生生活呀</title>
    <link href="/blog/post/MyLife/ConfusingGraduateLife/"/>
    <url>/blog/post/MyLife/ConfusingGraduateLife/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我在中国海洋大学这四年</title>
    <link href="/blog/post/MyLife/My4YearsinOUC/"/>
    <url>/blog/post/MyLife/My4YearsinOUC/</url>
    
    <content type="html"><![CDATA[<p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/computer-2583383_1280.jpg" alt="computer-2583383_1280"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>本科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>经典的目标检测</title>
    <link href="/blog/post/Paper/ClassicObjectDetection/"/>
    <url>/blog/post/Paper/ClassicObjectDetection/</url>
    
    <content type="html"><![CDATA[<h1 id="Object-Detection-OD"><a href="#Object-Detection-OD" class="headerlink" title="Object Detection (OD)"></a>Object Detection (OD)</h1><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/1905.05055v2">1905.05055v2] Object Detection in 20 Years: A Survey (arxiv.org)</a></p></blockquote><blockquote><p>CVHub带你聊一聊目标检测发展的这22年<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[目标检测究竟发展到了什么程度? | CVHub带你聊一聊目标检测发展的这22年 (qq.com)](https://mp.weixin.qq.com/s/tZztakvzU9kl0nPbl8oCww)">[4]</span></a></sup></p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/640.jpeg" alt="object detection milestones"></p><p>目标检测任务是找出图像或视频中人们感兴趣的物体，并同时检测出它们的位置和大小。——分类+定位</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/v2-9c387bd12afb1ed62d9d0aab3f514f0b_r.jpg" alt="three section"></p><h2 id="Three-different-boxes"><a href="#Three-different-boxes" class="headerlink" title="Three different boxes"></a>Three different boxes</h2><ol><li><strong>bounding box（bbox）</strong></li><li><strong>anchor box</strong></li><li><strong>ground truth box（gt box）</strong></li></ol><blockquote><ol><li><strong>Bounding Box (Bbox):</strong><ul><li><strong>定义：</strong> 边界框，用于描述物体在图像中的位置和范围。通常由两个点表示，即左上角和右下角的坐标。</li><li><strong>用途：</strong> 目标检测任务中，模型通过预测边界框来确定图像中目标的位置。</li></ul></li><li><strong>Anchor Box:</strong><ul><li><strong>定义：</strong> 锚框，是一组预定义的边界框，具有不同的尺寸和宽高比。这些框在图像中均匀分布，用于捕捉不同尺寸和形状的目标。</li><li><strong>用途：</strong> 在目标检测的多尺度处理中，锚框用于生成候选框，模型会根据这些框进行预测。锚框提供了对不同尺度目标的适应性。</li></ul></li><li><strong>Ground Truth Box (GT Box):</strong><ul><li><strong>定义：</strong> 真实边界框，是手动标注或从数据集中获得的目标真实位置的边界框。</li><li><strong>用途：</strong> 在训练目标检测模型时，与预测的边界框进行比较，用于计算模型的损失。模型通过比较其预测的边界框与真实的边界框来学习目标的位置。</li></ul></li></ol></blockquote><h2 id="backbone-extracting-the-useful-information"><a href="#backbone-extracting-the-useful-information" class="headerlink" title="backbone _ extracting the useful information"></a>backbone _ extracting the useful information</h2><p>VGG, ResNet… + ImageNet Pretrained</p><blockquote><p>何恺明的一篇关于pretrarined的论文</p><p>[<a href="https://arxiv.org/abs/1811.08883">1811.08883] Rethinking ImageNet Pre-training (arxiv.org)</a></p><p>一个模型并不是必须使用pretrarined，通过随机初始化所有的参数，只要训练的足够久，其实也是可以有很高的性能的。</p></blockquote><p>常用的backbone<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[1.1 YOLO入门教程：YOLOv1(1)-目标检测结构浅析 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/364372881)">[3]</span></a></sup></p><blockquote><p><strong>大型网络：</strong></p><p>1.<strong>VGG</strong>：***”Very Deep Convolutional Networks for Large-Scale Image Recognition”***。其中最常用的就是VGG-16.</p><p>2.<strong>ResNet</strong>：***”Deep Residual Learning for Image Recognition”<em><strong>。其中最常用的就是</strong>ResNet50</em>*和<strong>ResNet101</strong>。当任务需求很小的时候，也可以用ResNet18.</p><p>3.<strong>ResNeXT</strong>：***”Aggregated residual transformations for deep neural networks”<em><strong>，这个我没有用过，但很多sota工作中都会使用，</strong>刷榜</em>*的小伙伴不妨考虑一下。</p><p>4.<strong>ResNet+DCN</strong>：这一网络主要是将<strong>DCN</strong>工作应用在ResNet网络上，DCN来源于这篇文章：***”Deformable Convolutional Networks”<em><strong>。DCN是常用的涨点神器，不过似乎在实际部署的时候要复杂一些，</strong>刷榜</em>*的时候还是很值得一用。</p><p>5.<strong>DarkNet</strong>：常用的包括<strong>darknet19</strong>和<strong>darknet53</strong>，这两个网络分别来源于YOLOv2和YOLOv3两个工作中。其中<strong>darknet19对标的是vgg19</strong>，<strong>darknet53对标的是resnet101</strong>，但由于darknet本身是个很小众的深度学习框架，不受学术界关注，且这两个网络均是由darknet框架实现的，因此也就很少会在其他工作中看到这两个backbone。不过，笔者更偏爱darknet，也对其进行了复现，因为结构简洁，便于理解。</p><p>6.<strong>CSPResNet</strong>：出自于***”CSPNet: A New Backbone that can Enhance Learning Capability of CNN”***。CSP是一种很好用的结构，在减少参数量的同时，还能够提升模型性能，是不可多得的性价比极高的模块之一。Scaled-YOLOv4就借鉴了这一工作的思想大幅度提升了YOLOv4的性能。不过，目前似乎也不是主流，仍旧无法撼动ResNet101和ResNet+DCN的刷榜地位。</p><p><strong>轻量型网络：</strong></p><p>1.<strong>MobileNet</strong>：谷歌的工作，一共出了v1，v2，v3三个版本了，相较于上面那些以GPU为主要应用平台的大型网络，MobileNet则着眼于低性能的移动端平台，如手机、嵌入式设备等。</p><p>2.<strong>ShuffleNet</strong>：旷视的工作，一共出了v1和v2两个版本，同样是针对于低性能的移动端平台。</p></blockquote><h2 id="Neck-making-full-use-of-the-extracted-feature"><a href="#Neck-making-full-use-of-the-extracted-feature" class="headerlink" title="Neck _ making full use of the extracted feature"></a>Neck _ making full use of the extracted feature</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230519104618169.png" alt="FPN"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230530153215989.png" alt="spatial pyramid pooling layer"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Architecture-of-SPP-module-used-in-YOLOv3-SPP3-We-integrate-a-SPP-module-in-YOLOv3.png" alt="YOLOv3-SPP3"></div></div></div><ul><li><p>FPN</p></li><li><p>SPP</p></li></ul><p>YOLOv3-spp 参考了spatial pyramid pooling的设计。</p><ul><li><p>RFB：***”Receptive Field Block Net for Accurate and Fast Object Detection”***</p></li><li><p>ASPP：***”DeepLab: Semantic image segmentation with deep convolutional nets, atrous convolution, and fully connected CRFs”***</p></li><li><p>SAM：***”CBAM: Convolutional block attention module”***</p></li><li><p>PAN：***”Path aggregation network for instance segmentation”***。PAN是一个非常好用的特征融合方式，在FPN的bottom-up基础上又引入了top-down二次融合，有效地提升了模型性能。</p></li></ul><h2 id="detection-head-detection-location"><a href="#detection-head-detection-location" class="headerlink" title="detection head _ detection &amp; location"></a>detection head _ detection &amp; location</h2><p>Detection head这一部分通常就是普通的卷积。</p><h1 id="Traditional"><a href="#Traditional" class="headerlink" title="Traditional"></a>Traditional</h1><h2 id="HOG"><a href="#HOG" class="headerlink" title="HOG"></a>HOG</h2><p><strong>HOG (Histogram of Oriented Gradients):</strong></p><ul><li><strong>特征提取方法：</strong> HOG是一种用于图像特征提取的方法，常用于目标检测。它通过计算图像局部区域的梯度方向直方图来描述图像的外观和纹理信息。</li><li><strong>工作原理：</strong> HOG将图像划分为小的局部区域（cells），然后对每个局部区域计算梯度的方向直方图。这些直方图被串联成一个向量，形成整个图像的特征表示。HOG特征在目标检测中常用于支持向量机（SVM）等分类器，尤其在行人检测等领域取得了良好的效果。</li></ul><h2 id="DPM"><a href="#DPM" class="headerlink" title="DPM"></a>DPM</h2><p><strong>Deformable Parts Model</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Object Detection for Dummies Part 2: CNN, DPM and Overfeat | Lil'Log (lilianweng.github.io)](https://lilianweng.github.io/posts/2017-12-15-object-recognition-part-2/)">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[DPM.pdf (brown.edu)](https://cs.brown.edu/courses/cs143/2011/lectures/DPM.pdf)">[2]</span></a></sup></p><blockquote><p>📄paper:</p></blockquote><blockquote><p> The Deformable Parts Model (DPM) (<a href="http://people.cs.uchicago.edu/~pff/papers/lsvm-pami.pdf">Felzenszwalb et al., 2010</a>) recognizes objects with a mixture graphical model (Markov random fields) of deformable parts. The model consists of three major components:</p><ol><li>A coarse <em><strong>root filter</strong></em> defines a detection window that approximately covers an entire object. A filter specifies weights for a region feature vector.</li><li>Multiple <em><strong>part filters</strong></em> that cover smaller parts of the object. Parts filters are learned at twice resolution of the root filter.</li><li>A <em><strong>spatial model</strong></em> for scoring the locations of part filters relative to the root.</li></ol></blockquote><p><strong>DPM (Deformable Part Models):</strong></p><ul><li><strong>模型框架：</strong> DPM是一种用于目标检测的模型框架，最初由P. Felzenszwalb等人提出。它建模目标的不同部分，并允许这些部分之间的形状变化，以更灵活地适应目标的形状和姿态。</li><li><strong>工作原理：</strong> DPM将目标表示为由若干部分组成的模型，每个部分用一个局部的HOG特征描述。这些部分被组织成一个图结构，可以灵活地适应不同的目标形状。通过训练，DPM学习如何组合这些部分以准确地定位目标。DPM在目标检测任务中取得了显著的成果，特别是在多尺度和复杂姿态的情况下。</li></ul><h1 id="Anchor-Based"><a href="#Anchor-Based" class="headerlink" title="Anchor Based"></a>Anchor Based</h1><p>二阶段目标检测算法一般比一阶段精度要高，但一阶段检测算法速度会更快.</p><blockquote><p>基于Anchor的目标检测算法主要有以下四大缺点：</p><ol><li>Anchor的大小，数量，长宽比对于检测性能的影响很大(通过改变这些超参数Retinanet在COCO benchmark上面提升了4%的AP)，因此Anchor based的检测性能对于anchor的大小、数量和长宽比都非常敏感。</li><li>这些固定的Anchor极大地损害了检测器的普适性，导致对于不同任务，其Anchor都必须重新设置大小和长宽比。</li><li>为了去匹配真实框，需要生成大量的Anchor，但是大部分的Anchor在训练时标记为负样本，所以就造成了样本极度不均衡问题(没有充分利用fore-ground)。</li><li>在训练中，网络需要计算所有Anchor与真实框的IOU，这样就会消耗大量内存和时间。</li></ol></blockquote><h2 id="Two-Stage"><a href="#Two-Stage" class="headerlink" title="Two-Stage"></a>Two-Stage</h2><blockquote><p><strong>Stage1</strong>：从图像中生成region proposals<br><strong>Stage2</strong>：从region proposals生成最终的物体边框。</p><p>任务流程：特征提取 –&gt; 生成 RP –&gt; 分类&#x2F;定位回归。 常见 <code>Two-stage</code> 目标检测算法有：R-CNN、Fast R-CNN、Faster R-CNN、SPP-Net 和 R-FCN 等。</p></blockquote><h3 id="R-CNN-CVPR-2014-✅"><a href="#R-CNN-CVPR-2014-✅" class="headerlink" title="R-CNN (CVPR 2014) ✅"></a>R-CNN (CVPR 2014) ✅</h3><p>R-CNN将CNN方法引入目标检测领域， 大大提高了目标检测效果</p><blockquote><p>📄paper: </p><ul><li>[<a href="https://arxiv.org/abs/1311.2524">1311.2524] Rich feature hierarchies for accurate object detection and semantic segmentation (arxiv.org)</a></li><li><a href="https://openaccess.thecvf.com/content_cvpr_2014/papers/Girshick_Rich_Feature_Hierarchies_2014_CVPR_paper.pdf">Rich Feature Hierarchies for Accurate Object Detection and Semantic Segmentation (thecvf.com)</a></li></ul><p>💻code: <a href="https://github.com/rbgirshick/rcnn">rbgirshick&#x2F;rcnn: R-CNN: Regions with Convolutional Neural Network Features (github.com)</a></p></blockquote><p>选择性搜索算法Selective Search</p><blockquote><p>📄paper: <a href="https://ivi.fnwi.uva.nl/isis/publications/2013/UijlingsIJCV2013/UijlingsIJCV2013.pdf">UijlingsIJCV2013.pdf (uva.nl)</a></p><p>💻code: <a href="https://github.com/AlpacaTechJP/selectivesearch">AlpacaTechJP&#x2F;selectivesearch: Selective Search Implementation for Python (github.com)</a></p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230518144102953.png" alt="R-CNN"></p><ol><li><p>候选区域生成： 一张图像生成~2K个候选区域 （采用Selective Search 方法）</p><blockquote><p>缺点：重叠框(一张图像生成~2K个候选区域)特征的冗余计算使得整个网络的检测速度变得很慢</p></blockquote></li><li><p>特征提取： 对每个候选区域，使用深度卷积网络提取特征 （CNN）</p></li><li><p>类别判断： 特征送入每一类的SVM 分类器，判别是否属于该类</p></li><li><p>位置精修： 使用回归器精细修正候选框位置</p></li></ol><h3 id="SPP-net-TPAMI-2015"><a href="#SPP-net-TPAMI-2015" class="headerlink" title="SPP-net (TPAMI 2015)"></a>SPP-net (TPAMI 2015)</h3><p>SPP-net</p><blockquote><p>📄paper: </p><ul><li>[<a href="https://arxiv.org/abs/1406.4729">1406.4729] Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition (arxiv.org)</a></li><li><a href="https://link.springer.com/content/pdf/10.1007/978-3-319-10578-9_23.pdf">LNCS 8691 - Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition (springer.com)</a></li></ul><p>💻code: <a href="https://github.com/yifanjiang19/sppnet-pytorch">yifanjiang19&#x2F;sppnet-pytorch: A simple Spatial Pyramid Pooling layer which could be added in CNN (github.com)</a></p></blockquote><p>SPP-net提出了一种**空间金字塔池化层(Spatial Pyramid Pooling Layer, SPP)**。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230530153215989.png" alt="spatial pyramid pooling layer"></p><p>它的主要思路是对于一副图像分成若干尺度的图像块(比如一副图像分成1份，4份，8份等)，然后对每一块提取的特征融合在一起，从而兼顾多个尺度的特征。<strong>SPP使得网络在全连接层之前能生成固定尺度的特征表示，而不管输入图片尺寸如何。</strong>当使用SPPNet网络用于目标检测时，整个图像只需计算一次即可生成相应特征图，不管候选框尺寸如何，经过SPP之后，都能生成固定尺寸的特征表示图，这避免了卷积特征图的重复计算。</p><h3 id="Fast-R-CNN-ICCV-2015-✅"><a href="#Fast-R-CNN-ICCV-2015-✅" class="headerlink" title="Fast R-CNN (ICCV 2015)✅"></a>Fast R-CNN (ICCV 2015)✅</h3><p>Fast R-CNN</p><blockquote><p>📄paper: </p><ul><li><a href="https://arxiv.org/abs/1504.08083">1504.08083] Fast R-CNN (arxiv.org)</a></li><li><a href="https://openaccess.thecvf.com/content_iccv_2015/papers/Girshick_Fast_R-CNN_ICCV_2015_paper.pdf">Fast R-CNN (thecvf.com)</a></li></ul><p>💻code: <a href="https://github.com/rbgirshick/fast-rcnn">rbgirshick&#x2F;fast-rcnn: Fast R-CNN (github.com)</a></p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230518173630235.png" alt="Fast R-CNN"></p><p><strong>Fast R-CNN</strong>网络是RCNN和SPPNet的改进版，该网路使得我们可以在相同的网络配置下同时训练一个检测器和边框回归器。该网络首先输入图像，图像被传递到CNN中提取特征，并返回感兴趣的区域ROI，之后再ROI上运用ROI池化层以保证每个区域的尺寸相同，最后这些区域的特征被传递到全连接层的网络中进行分类，并用Softmax和线性回归层同时返回边界框。</p><h3 id="Faster-R-CNN-2015-✅"><a href="#Faster-R-CNN-2015-✅" class="headerlink" title="Faster R-CNN (2015)✅"></a>Faster R-CNN (2015)✅</h3><p>Faster R-CNN</p><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/1506.01497">1506.01497] Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks (arxiv.org)</a></p><p>💻code: <a href="https://github.com/ShaoqingRen/faster_rcnn">ShaoqingRen&#x2F;faster_rcnn: Faster R-CNN (github.com)</a></p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230518180023296.png" alt="Faster R-CNN"></p><p><strong>Faster RCNN</strong>提出了**区域选择网络(RPN)**用于生成候选框，能极大提升检测框的生成速度。</p><ol><li>输入图像使用CNN生成该图像的feature maps。</li><li>在feature maps上应用**Region Proposal Network(RPN)**，返回object proposals和相应分数。</li><li>应用Rol池化层，将所有proposals修正到同样尺寸。</li><li>将proposals传递到完全连接层，生成目标物体的边界框。</li></ol><h3 id="FPN-CVPR-2017-✅"><a href="#FPN-CVPR-2017-✅" class="headerlink" title="FPN (CVPR 2017)✅"></a>FPN (CVPR 2017)✅</h3><blockquote><p>📄papaer: </p><ul><li>[<a href="https://arxiv.org/abs/1612.03144">1612.03144] Feature Pyramid Networks for Object Detection (arxiv.org)</a></li><li><a href="https://openaccess.thecvf.com/content_cvpr_2017/papers/Lin_Feature_Pyramid_Networks_CVPR_2017_paper.pdf">Feature Pyramid Networks for Object Detection (thecvf.com)</a></li></ul><p>💻code: <a href="https://github.com/jwyang/fpn.pytorch">jwyang&#x2F;fpn.pytorch: Pytorch implementation of Feature Pyramid Network (FPN) for Object Detection (github.com)</a></p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230519104618169.png" alt="FPN"></p><p>在FPN技术出现之前，大多数检测算法的<strong>检测头都位于网络的最顶层(最深层)<strong>，虽说最深层的特征具备更丰富的语义信息，更有利于物体分类，但</strong>更深层的特征图由于空间信息的缺乏不利于物体定位</strong>，这大大影响了目标检测的定位精度。</p><p>为了解决这一矛盾，FPN提出了一种具有<strong>横向连接的自上而下的网络架构</strong>，用于在所有具有<strong>不同尺度的高底层都构筑出高级语义信息</strong>。FPN的提出极大促进了检测网络精度的提高(尤其是对于一些待检测物体尺度变化大的数据集有非常明显的效果)。</p><h3 id="Mask-R-CNN-2018"><a href="#Mask-R-CNN-2018" class="headerlink" title="Mask R-CNN (2018)"></a>Mask R-CNN (2018)</h3><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/1703.06870">1703.06870] Mask R-CNN (arxiv.org)</a></p><p>💻code: <a href="https://github.com/facebookresearch/Detectron">facebookresearch&#x2F;Detectron: FAIR’s research platform for object detection research, implementing popular algorithms like Mask R-CNN and RetinaNet. (github.com)</a></p></blockquote><h3 id="Cascade-R-CNN-CVPR-2018"><a href="#Cascade-R-CNN-CVPR-2018" class="headerlink" title="Cascade R-CNN (CVPR 2018)"></a>Cascade R-CNN (CVPR 2018)</h3><blockquote><p>📄paper: </p><ul><li>[<a href="https://arxiv.org/abs/1712.00726">1712.00726] Cascade R-CNN: Delving into High Quality Object Detection (arxiv.org)</a></li><li><a href="https://openaccess.thecvf.com/content_cvpr_2018/papers/Cai_Cascade_R-CNN_Delving_CVPR_2018_paper.pdf">Cascade R-CNN: Delving Into High Quality Object Detection (thecvf.com)</a></li></ul><p>💻code: <a href="https://github.com/zhaoweicai/cascade-rcnn">zhaoweicai&#x2F;cascade-rcnn: Caffe implementation of multiple popular object detection frameworks (github.com)</a></p></blockquote><p> Faster RCNN完成了对目标候选框的两次预测，其中RPN一次，后面的检测器一次，而<strong>Cascade RCNN</strong>[9]则更进一步将后面检测器部分堆叠了几个级联模块，并采用不同的IOU阈值训练，这种级联版的Faster RCNN就是Cascade RCNN。通过提升IoU阈值训练级联检测器，可以使得检测器的定位精度更高，在更为严格的IoU阈值评估下，Cascade R-CNN带来的性能提升更为明显。Cascade RCNN将二阶段目标检测算法的精度提升到了新的高度。</p><h3 id="Libra-R-CNN"><a href="#Libra-R-CNN" class="headerlink" title="Libra R-CNN"></a>Libra R-CNN</h3><blockquote><p>📄paper:</p><p>💻code: </p></blockquote><h3 id="Grid-R-CNN"><a href="#Grid-R-CNN" class="headerlink" title="Grid R-CNN"></a>Grid R-CNN</h3><blockquote><p>📄paper:</p><p>💻code: </p></blockquote><h2 id="One-Stage"><a href="#One-Stage" class="headerlink" title="One-Stage"></a>One-Stage</h2><blockquote><p>一阶段目标检测算法不需要region proposal阶段，直接产生物体的类别概率和位置坐标值，经过一个阶段即可直接得到最终的检测结果，因此有着更快的检测速度。</p><p><strong>One-stage</strong>：直接用网络提取图像特征来预测物体位置和分类，因此不需要 RP。</p><p>任务流程：特征提取–&gt; 分类&#x2F;定位回归。</p><p>常见的 <code>One-stage</code> 目标检测算法有：YOLO 系列、SSD 和 RetinaNet 等。不过，为了得到最终目标的定位和分类，往往需要后处理。</p></blockquote><h3 id="SSD-ECCV-2016-✅"><a href="#SSD-ECCV-2016-✅" class="headerlink" title="SSD (ECCV 2016)✅"></a>SSD (ECCV 2016)✅</h3><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/1512.02325">1512.02325] SSD: Single Shot MultiBox Detector (arxiv.org)</a></p><p>💻code: <a href="https://github.com/amdegroot/ssd.pytorch">amdegroot&#x2F;ssd.pytorch: A PyTorch Implementation of Single Shot MultiBox Detector (github.com)</a></p></blockquote><p>eliminating bounding box proposals and the subsequent pixel or feature resampling stage.</p><p>提出了Multi-reference和Multi-resolution的检测技术。</p><p>SSD算法和先前的一些检测算法的区别在于：先前的一些检测算法只是在网络最深层的分支进行检测，而SSD有多个不同的检测分支，不同的检测分支可以检测多个尺度的目标，所以SSD在多尺度目标检测的精度上有了很大的提高，对小目标检测效果要好很多。</p><h3 id="RFBNet-ECCV-2018"><a href="#RFBNet-ECCV-2018" class="headerlink" title="RFBNet (ECCV 2018)"></a>RFBNet (ECCV 2018)</h3><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/1711.07767">1711.07767] Receptive Field Block Net for Accurate and Fast Object Detection (arxiv.org)</a></p><p>💻code: </p></blockquote><p>2018年的ECCV上的<strong>RFBNet</strong>，是在SSD基础上，设计了RFB模块插进Neck部分，从而显著提升了模型性能。</p><h3 id="YOLO-v1-CVPR-2016-✅"><a href="#YOLO-v1-CVPR-2016-✅" class="headerlink" title="YOLO v1 (CVPR 2016)✅"></a>YOLO v1 (CVPR 2016)✅</h3><blockquote><p>📄paper: </p><ul><li>[<a href="https://arxiv.org/abs/1506.02640">1506.02640] You Only Look Once: Unified, Real-Time Object Detection (arxiv.org)</a></li><li><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Redmon_You_Only_Look_CVPR_2016_paper.pdf">You Only Look Once: Unified, Real-Time Object Detection (cv-foundation.org)</a></li></ul><p>💻code: </p><ul><li><a href="https://github.com/pjreddie/darknet">pjreddie&#x2F;darknet: Convolutional Neural Networks (github.com)</a></li><li><a href="https://github.com/abeardear/pytorch-YOLO-v1">abeardear&#x2F;pytorch-YOLO-v1: an experiment for yolo-v1, including training and testing. (github.com)</a></li><li><a href="https://pjreddie.com/darknet/yolo/">YOLO: Real-Time Object Detection (pjreddie.com)</a></li></ul></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/NM6lrxy0bxs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>该算法的思想就是将图像划分成多个网格，然后为每一个网格同时预测边界框并给出相应概率。例如某个待检测目标的中心落在图像中所划分的一个单元格内，那么该单元格负责预测该目标位置和类别。</p><ul><li>current detection system repurpose classifer to perform detection.</li><li>yolo: resize image -&gt; run convolutional network -&gt; None-max suppression</li><li>regression problem: straight from image pixels to bounding box coordinates and class probabilities</li><li>fast; global; generalizable representation; struggle to precisely localize some objects, especially <strong>small ones.</strong></li></ul><p>🚩<strong>Network design</strong></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230520195558370.png" alt="YOLOv1 architecture（论文中的网络结构）"></p><blockquote><p>仅使用了<strong>一个卷积神经网络</strong>实现了端到端的目标检测。卷积网络中使用了大量的1×1和3×3大小的卷积核。</p><p>orignal design: 24 Convs + 2 FC</p></blockquote><p>code reference: <a href="https://github.com/ProgrammerZhujinming/YOLOv1/blob/main/YOLO_Original/Train/YOLO_V1_Model.py">YOLOv1&#x2F;YOLO_V1_Model.py at main · ProgrammerZhujinming&#x2F;YOLOv1 · GitHub</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># FC section</span><br><span class="hljs-variable language_">self</span>.Fc = nn.Sequential(<br>    nn.Linear(<span class="hljs-number">7</span>*<span class="hljs-number">7</span>*<span class="hljs-number">1024</span>,<span class="hljs-number">4096</span>),<br>    nn.LeakyReLU(inplace=<span class="hljs-literal">True</span>, negative_slope=<span class="hljs-number">1e-1</span>),<br>    nn.Linear(<span class="hljs-number">4096</span>,<span class="hljs-number">7</span> * <span class="hljs-number">7</span> * (B*<span class="hljs-number">5</span> + classes_num)),<br>)<br></code></pre></td></tr></table></figure><p>🚩<strong>Detection principle</strong></p><ol><li>S×S grid</li><li>each grid cell predicts B bounding box<em><strong>（bbox）</strong></em>; each bbox consists of 5 predictions: <em><strong>(x,y,w,h) &amp; confidence score</strong></em></li><li>each grid cell also predicts C conditions class probabilities</li></ol><p class="note note-light">YOLO居然也有Ross Girshick大神的参与，这也太强了吧！</p><h3 id="YOLO-v2-CVPR-2017-✅"><a href="#YOLO-v2-CVPR-2017-✅" class="headerlink" title="YOLO v2 (CVPR 2017)✅"></a>YOLO v2 (CVPR 2017)✅</h3><p><strong>YOLO9000</strong></p><blockquote><p>📄paper: </p><ul><li>[<a href="https://arxiv.org/abs/1612.08242">1612.08242] YOLO9000: Better, Faster, Stronger (arxiv.org)</a></li><li><a href="https://openaccess.thecvf.com/content_cvpr_2017/papers/Redmon_YOLO9000_Better_Faster_CVPR_2017_paper.pdf">YOLO9000: Better, Faster, Stronger (thecvf.com)</a></li></ul><p>💻code: <a href="https://github.com/longcw/yolo2-pytorch">longcw&#x2F;yolo2-pytorch: YOLOv2 in PyTorch (github.com)</a></p></blockquote><ul><li><p>YOLO v2使用<strong>DarkNet19作为特征提取网络</strong>，该网络比YOLO v1所使用的VGG-16要更快。</p></li><li><p>YOLO v2使用目标分<strong>类和检测的联合训练</strong>技巧，结合Word Tree等方法，使得YOLO v2的检测种类扩充到了上千种。</p></li></ul><h3 id="RetinaNet-ICCV-2017"><a href="#RetinaNet-ICCV-2017" class="headerlink" title="RetinaNet (ICCV 2017)"></a>RetinaNet (ICCV 2017)</h3><blockquote><p>📄paper:</p><ul><li><p>[<a href="https://arxiv.org/abs/1708.02002">1708.02002] Focal Loss for Dense Object Detection (arxiv.org)</a></p></li><li><p><a href="https://openaccess.thecvf.com/content_ICCV_2017/papers/Lin_Focal_Loss_for_ICCV_2017_paper">Focal Loss for Dense Object Detection (thecvf.com)</a></p></li></ul><p>💻code: <a href="https://github.com/yhenon/pytorch-retinanet">yhenon&#x2F;pytorch-retinanet: Pytorch implementation of RetinaNet object detection. (github.com)</a></p></blockquote><ul><li>提出能根据Loss大小自动调节权重的<strong>Focal loss</strong>，代替了标准的交叉熵损失函数，使得模型的训练更专注于困难样本；</li><li>基于FPN设计了RetinaNet；</li></ul><h3 id="YOLO-v3-CVPR-2018-✅"><a href="#YOLO-v3-CVPR-2018-✅" class="headerlink" title="YOLO v3 (CVPR 2018)✅"></a>YOLO v3 (CVPR 2018)✅</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-light&quot;</span>&gt;</span>YOLO v1~v3都是出自Joseph Redmon小哥之手。小哥的论文写得非常好，不按照套路来，一点都不古板，给人一种活泼的感觉。但非英语母语的人或者英文不好的人读起来，其实是有点吃力的。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>📄paper:</p><ul><li>[<a href="https://arxiv.org/abs/1804.02767">1804.02767] YOLOv3: An Incremental Improvement (arxiv.org)</a></li></ul><p>💻code:</p><ul><li><a href="https://github.com/ultralytics/yolov3">ultralytics&#x2F;yolov3: YOLOv3 in PyTorch &gt; ONNX &gt; CoreML &gt; TFLite (github.com)</a></li><li><a href="https://github.com/qqwweee/keras-yolo3">qqwweee&#x2F;keras-yolo3: A Keras implementation of YOLOv3 (Tensorflow backend) (github.com)</a></li></ul><p>🔗reference:</p><ul><li><a href="https://blog.csdn.net/qq_37541097/article/details/81214953">YOLO v3网络结构分析_yolov3网络结构-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/94799295">IoU、GIoU、DIoU、CIoU损失函数的那点事儿 - 知乎 (zhihu.com)</a></li></ul></blockquote><ul><li>相比于YOLO v2，<strong>YOLO v3</strong>将特征提取网络换成了<strong>DarkNet53</strong>，对象分类用Logistic取代了Softmax；</li><li>借鉴了FPN思想采用三条分支（三个不同尺度&#x2F;不同感受野的特征图）去检测具有不同尺寸的对象；</li><li>DarkNet53中没有MaxPooling, 而是使用卷积层来实现下采样；</li><li>卷积核个数少-&gt;速度快</li></ul><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/darknet35.png" alt="darknet35"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/darknet35-1.jpeg" alt="darknet35-1"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240110110031084.png" alt="yolov3-spp"></div></div></div><h3 id="YOLO-v4-2020"><a href="#YOLO-v4-2020" class="headerlink" title="YOLO v4 (2020)"></a>YOLO v4 (2020)</h3><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/2004.10934">2004.10934] YOLOv4: Optimal Speed and Accuracy of Object Detection (arxiv.org)</a></p><p>💻code: <a href="https://github.com/AlexeyAB/darknet">AlexeyAB&#x2F;darknet: YOLOv4 &#x2F; Scaled-YOLOv4 &#x2F; YOLO - Neural Networks for Object Detection (Windows and Linux version of Darknet ) (github.com)</a></p></blockquote><ul><li><p><strong>YOLO v4</strong>在输入端，引入了<strong>Mosaic数据增强</strong>、cmBN、SAT自对抗训练；</p></li><li><p>在特征提取网络上，YOLO v4将各种新的方式结合起来，包括<strong>CSPDarknet53</strong>，<strong>Mish</strong>激活函数，<strong>Dropblock</strong>；</p></li><li><p>在检测头中，引入了<strong>SPP模块</strong>，借鉴了FPN+PAN结构；</p></li><li><p>在预测阶段，采用了<strong>CIOU</strong>作为网络的边界框损失函数，同时将NMS换成了DIOU_NMS等等。</p></li></ul><blockquote><ul><li>[<a href="https://arxiv.org/abs/1911.11929">1911.11929] CSPNet: A New Backbone that can Enhance Learning Capability of CNN (arxiv.org)</a></li><li>[<a href="https://arxiv.org/abs/1908.08681">1908.08681] Mish: A Self Regularized Non-Monotonic Activation Function (arxiv.org)</a></li><li>[<a href="https://arxiv.org/abs/1810.12890">1810.12890] DropBlock: A regularization method for convolutional networks (arxiv.org)</a></li><li>[<a href="https://arxiv.org/abs/1803.01534">1803.01534] Path Aggregation Network for Instance Segmentation (arxiv.org)</a></li></ul></blockquote><h3 id="YOLO-v5-2020"><a href="#YOLO-v5-2020" class="headerlink" title="YOLO v5 (2020)"></a>YOLO v5 (2020)</h3><blockquote><p>📄paper: 目前YOLO V5公布了源代码，但尚未发表论文；</p><p>💻code: <a href="https://github.com/ultralytics/yolov5">ultralytics&#x2F;yolov5: YOLOv5 🚀 in PyTorch &gt; ONNX &gt; CoreML &gt; TFLite (github.com)</a></p></blockquote><h3 id="YOLO-X-2021"><a href="#YOLO-X-2021" class="headerlink" title="YOLO X (2021)"></a>YOLO X (2021)</h3><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/2107.08430">2107.08430] YOLOX: Exceeding YOLO Series in 2021 (arxiv.org)</a></p><p>💻code: <a href="https://github.com/Megvii-BaseDetection/YOLOX">Megvii-BaseDetection&#x2F;YOLOX: YOLOX is a high-performance anchor-free YOLO, exceeding yolov3~v5 with MegEngine, ONNX, TensorRT, ncnn, and OpenVINO supported. Documentation: https://yolox.readthedocs.io/ (github.com)</a></p></blockquote><blockquote><p>yolox是以yolov3（更准确来说是yolov3-spp）为基础进行改进。</p></blockquote><h3 id="YOLO-v6-2022"><a href="#YOLO-v6-2022" class="headerlink" title="YOLO v6 (2022)"></a>YOLO v6 (2022)</h3><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/2209.02976">2209.02976] YOLOv6: A Single-Stage Object Detection Framework for Industrial Applications (arxiv.org)</a></p></blockquote><h3 id="YOLO-v7-2022"><a href="#YOLO-v7-2022" class="headerlink" title="YOLO v7 (2022)"></a>YOLO v7 (2022)</h3><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/2207.02696">2207.02696] YOLOv7: Trainable bag-of-freebies sets new state-of-the-art for real-time object detectors (arxiv.org)</a></p></blockquote><h3 id="YOLO-v8-2023"><a href="#YOLO-v8-2023" class="headerlink" title="YOLO v8 (2023)"></a>YOLO v8 (2023)</h3><blockquote><p>💻code: </p><ul><li><a href="https://github.com/ultralytics/ultralytics">ultralytics&#x2F;ultralytics: NEW - YOLOv8 🚀 in PyTorch &gt; ONNX &gt; CoreML &gt; TFLite (github.com)</a></li><li><a href="https://docs.ultralytics.com/">Home - Ultralytics YOLOv8 Docs</a></li></ul></blockquote><h3 id="YOLO-review-2023"><a href="#YOLO-review-2023" class="headerlink" title="YOLO review (2023)"></a>YOLO review (2023)</h3><blockquote><p>📄paper:</p><ul><li>[<a href="https://arxiv.org/abs/2304.00501">2304.00501] A Comprehensive Review of YOLO: From YOLOv1 and Beyond (arxiv.org)</a></li><li>[<a href="https://arxiv.org/abs/1708.02002">1708.02002] Focal Loss for Dense Object Detection (arxiv.org)</a></li></ul></blockquote><h1 id="Anchor-Free"><a href="#Anchor-Free" class="headerlink" title="Anchor Free"></a>Anchor Free</h1><blockquote><p>基于Anchor的物体检测问题通常被建模成对一些候选区域进行分类和回归的问题，</p><p>在一阶段检测器中，这些候选区域就是通过滑窗方式产生Anchor box，而在二阶段检测器中，候选区域是RPN生成的Proposal，但是RPN本身仍然是对滑窗方式产生的Anchor进行分类和回归。基于Anchor的检测算法由于Anchor太多导致计算复杂，及其所带来的大量超参数都会影响模型性能。</p><p>近年的Anchor free技术则摒弃Anchor，<strong>通过确定关键点的方式来完成检测，大大减少了网络超参数的数量。</strong></p></blockquote><h2 id="CornerNet"><a href="#CornerNet" class="headerlink" title="CornerNet"></a>CornerNet</h2><blockquote><p>📄paper: <a href="https://openaccess.thecvf.com/content_ECCV_2018/papers/Hei_Law_CornerNet_Detecting_Objects_ECCV_2018_paper.pdf">openaccess.thecvf.com&#x2F;content_ECCV_2018&#x2F;papers&#x2F;Hei_Law_CornerNet_Detecting_Objects_ECCV_2018_paper.pdf</a><br>💻code: <a href="https://github.com/princeton-vl/CornerNet">princeton-vl&#x2F;CornerNet (github.com)</a></p></blockquote><p><strong>CornerNet</strong>是Anchor free技术路线的开创之作，该网络提出了一种新的对象检测方法，将网络对目标边界框的检测转化为一对关键点的检测(即左上角和右下角)，通过将对象检测为成对的关键点，而无需设计Anchor box作为先验框。</p><h2 id="CenterNet"><a href="#CenterNet" class="headerlink" title="CenterNet"></a>CenterNet</h2><blockquote><p>📄paper:<a href="https://openaccess.thecvf.com/content_ICCV_2019/papers/Duan_CenterNet_Keypoint_Triplets_for_Object_Detection_ICCV_2019_paper.pdf">openaccess.thecvf.com&#x2F;content_ICCV_2019&#x2F;papers&#x2F;Duan_CenterNet_Keypoint_Triplets_for_Object_Detection_ICCV_2019_paper.pdf</a><br>💻code: <a href="https://github.com/Duankaiwen/CenterNet">Duankaiwen&#x2F;CenterNet: Codes for our paper “CenterNet: Keypoint Triplets for Object Detection” . (github.com)</a></p></blockquote><h2 id="FCOS"><a href="#FCOS" class="headerlink" title="FCOS"></a>FCOS</h2><blockquote><p>📄paper:<a href="https://openaccess.thecvf.com/content_ICCV_2019/papers/Tian_FCOS_Fully_Convolutional_One-Stage_Object_Detection_ICCV_2019_paper.pdf">FCOS: Fully Convolutional One-Stage Object Detection (thecvf.com)</a><br>💻code: <a href="https://github.com/tianzhi0549/FCOS">https://github.com/tianzhi0549/FCOS</a></p></blockquote><p> <strong>FCOS</strong>[19]网络是一种基于FCN的逐像素目标检测算法，实现了无锚点(Anchor free)，无提议(Proposal free)的解决方案，并且提出了中心度Center ness的思想。该算法通过去除Anchor，完全避免了Anchor的复杂运算，节省了训练过程中大量的内存占用，将总训练内存占用空间减少了2倍左右。</p><h2 id="FSAF"><a href="#FSAF" class="headerlink" title="FSAF"></a>FSAF</h2><blockquote><p>📄paper:<a href="https://openaccess.thecvf.com/content_CVPR_2019/papers/Zhu_Feature_Selective_Anchor-Free_Module_for_Single-Shot_Object_Detection_CVPR_2019_paper.pdf">Feature Selective Anchor-Free Module for Single-Shot Object Detection (thecvf.com)</a><br>💻code: <a href="https://github.com/hdjang/Feature-Selective-Anchor-Free-Module-for-Single-Shot-Object-Detection">hdjang&#x2F;Feature-Selective-Anchor-Free-Module-for-Single-Shot-Object-Detection: A PyTorch Implementation of Feature Selective Anchor-Free Module for Single-Shot Object Detection (CVPR’19) (github.com)</a></p></blockquote><p> <strong>FSAF</strong>[18]网络提出了一种FSAF模块用于训练特征金字塔中的Anchor free分支，让每一个对象都自动选择最合适的特征。在该模块中，Anchor box的大小不再决定选择哪些特征进行预测，使得Anchor的尺寸成为了一种无关变量，实现了模型自动化学习选择特征。</p><h2 id="CPNDet"><a href="#CPNDet" class="headerlink" title="CPNDet"></a>CPNDet</h2><h2 id="SAPD"><a href="#SAPD" class="headerlink" title="SAPD"></a>SAPD</h2><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/1911.12448">1911.12448] Soft Anchor-Point Object Detection (arxiv.org)</a><br>💻code: <a href="https://github.com/xuannianz/SAPD">xuannianz&#x2F;SAPD: SAPD (Soft Anchor-Point Object Detection) implementation in Keras and Tensorflow (github.com)</a></p></blockquote><p> <strong>SAPD</strong>[20]论文作者认为Anchor point的方法性能不高主要还是在于训练的不充分，主要是注意力偏差和特征选择。因而作者提出了两种策略：1)Soft-weighted anchor points对不同位置的样本进行权重分配 2)Soft-selected pyramid levels，将样本分配到多个分辨率，并进行权重加权。而在训练阶段，作者前6个epoch采用FSAF的方式，而后6个epoch会将特征选择的预测网络加入进行联合训练。</p><h1 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h1><h2 id="Pascal-VOC"><a href="#Pascal-VOC" class="headerlink" title="Pascal VOC"></a>Pascal VOC</h2><h2 id="MS-COCO"><a href="#MS-COCO" class="headerlink" title="MS COCO"></a>MS COCO</h2><h2 id="ILSVRC"><a href="#ILSVRC" class="headerlink" title="ILSVRC"></a>ILSVRC</h2><h2 id="OID"><a href="#OID" class="headerlink" title="OID"></a>OID</h2><blockquote><ul><li>PASCAL VOC数据集详细介绍可参考：<a href="https://arleyzhang.github.io/articles/1dc20586/">https://arleyzhang.github.io/articles/1dc20586/</a></li><li>ILSVRC数据集详细介绍可参考：<a href="https://cloud.tencent.com/developer/article/1747599">https://cloud.tencent.com/developer/article/1747599</a></li><li>MS-COCO数据集详细介绍可参考：<a href="https://blog.csdn.net/qq_41185868/article/details/82939959">https://blog.csdn.net/qq_41185868/article/details/82939959</a></li><li>Open Images(QID)数据集详细介绍可参考：<a href="https://bbs.easyaiforum.cn/thread-20-1-1.html">https://bbs.easyaiforum.cn/thread-20-1-1.html</a></li></ul></blockquote><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/1905.05055v2">1905.05055v2] Object Detection in 20 Years: A Survey (arxiv.org)</a></p></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/640.png" alt="行人检测常用数据集"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/640-1685435455696-3.png" alt="脸部检测常用数据集"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/640-1685435471682-6.png" alt="文本检测常用数据集"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/640-1685435480247-9.png" alt="交通标注检测常用数据集"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/640-1685435503945-12.png" alt="遥感图像目标检测常用数据集"></div></div></div><h1 id="evaluation"><a href="#evaluation" class="headerlink" title="evaluation"></a>evaluation</h1><p>目标检测常用的评价指标有：<strong>交并比</strong>，<strong>准确率</strong>，<strong>精度</strong>，<strong>召回率</strong>，<strong>FPR</strong>，<strong>F1-Score</strong>，<strong>PR曲线-AP值</strong>，<strong>ROC曲线-AUC值</strong>，和<strong>mAP值</strong>和<strong>FPS</strong>。</p><h2 id="交并比-IOU"><a href="#交并比-IOU" class="headerlink" title="交并比(IOU)"></a>交并比(IOU)</h2><p>IOU &#x3D; 两个矩形交集的面积 &#x2F; 两个矩形并集的面积</p><h2 id="Accuracy-Precission-Recall-F1-score-FPR"><a href="#Accuracy-Precission-Recall-F1-score-FPR" class="headerlink" title="Accuracy&#x2F;Precission&#x2F;Recall&#x2F;F1-score&#x2F;FPR"></a>Accuracy&#x2F;Precission&#x2F;Recall&#x2F;F1-score&#x2F;FPR</h2><blockquote><p>True positives (TP,真正): 预测为正,实际为正<br>True negatives (TN,真负): 预测为负,实际为负<br>False positives(FP,假正): 预测为正,实际为负<br>False negatives(FN,假负): 预测为负,实际为正</p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230530163634505.png" alt="image-20230530163634505"></p><h2 id="PR曲线-AP值"><a href="#PR曲线-AP值" class="headerlink" title="PR曲线-AP值"></a>PR曲线-AP值</h2><h2 id="ROC曲线-AUC值"><a href="#ROC曲线-AUC值" class="headerlink" title="ROC曲线-AUC值"></a>ROC曲线-AUC值</h2><h2 id="mAP"><a href="#mAP" class="headerlink" title="mAP"></a>mAP</h2><h2 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h2><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/500859130">目标检测论文总结-YOLO系列 - 知乎 (zhihu.com)</a></p><p><a href="https://mp.weixin.qq.com/s/jSV47eDR9AcIXjzX_8xnqw">YOLO之父宣布退出CV界，坦言无法忽视自己工作带来的负面影响 (qq.com)</a></p><p><a href="https://jishuin.proginn.com/p/763bfbd5b863">童心未泯的 YOLO 之父，小马哥 Joseph Redmon 笑傲 CV 江湖记-技术圈 (proginn.com)</a></p><p><a href="https://mdnice.com/writing/9cdb98fbc3704d919006f7e3220407ea">【Make YOLO Great Again】YOLOv1-v7全系列大解析（Tricks篇） - mdnice 墨滴</a></p><p><a href="https://luckmoonlight.github.io/2018/11/28/yoloV1yolov2yoloV3/">YOLO系列深度解读 | 严鸿昌的个人博客 (luckmoonlight.github.io)</a></p><p><a href="https://juejin.cn/post/7209245221888901180">yolo系列模型 - 掘金 (juejin.cn)</a></p><p><a href="https://www.jianshu.com/p/6509066e3092">YOLOv1-v7全系列大解析（汇总篇） - 简书 (jianshu.com)</a></p><p><a href="https://www.citisy.site/posts/50950.html">目标检测-YOLO系列 | citisy的炼丹房</a></p><p><a href="https://zhuanlan.zhihu.com/p/143747206">深入浅出Yolo系列之Yolov3&amp;Yolov4&amp;Yolov5&amp;Yolox核心基础知识完整讲解 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/172121380">深入浅出Yolo系列之Yolov5核心基础知识完整讲解 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/397993315">深入浅出Yolo系列之Yolox核心基础完整讲解 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/94986199">写给小白的YOLO介绍 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/183261974">你一定从未看过如此通俗易懂的YOLO系列(从v1到v5)模型解读 (上) - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/32525231">目标检测|YOLO原理与实现 - 知乎 (zhihu.com)</a></p><p><a href="https://start.oneflow.org/oneflow-yolo-doc/tutorials/00_chapter/overview.html">one-yolov5 特点解析 - oneflow-yolo-doc</a></p><p><a href="https://www.cvmart.net/community/detail/4992">综述：目标检测二十年（2001-2021）-极市开发者社区 (cvmart.net)</a></p><p><a href="https://www.zhihu.com/column/c_1364967262269693952">第二卷-基于YOLO的目标检测入门教程 - 知乎 (zhihu.com)</a></p><p><a href="https://www.zhihu.com/column/c_1178388040400302080">第一卷-目标检测入门科普教程 - 知乎 (zhihu.com)</a></p><p><a href="https://handong1587.github.io/deep_learning/2015/10/09/object-detection.html">Object Detection - handong1587</a></p><p><a href="https://github.com/amusi/awesome-object-detection">amusi&#x2F;awesome-object-detection: Awesome Object Detection based on handong1587 github: https://handong1587.github.io/deep_learning&#x2F;2015&#x2F;10&#x2F;09&#x2F;object-detection.html</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://lilianweng.github.io/posts/2017-12-15-object-recognition-part-2/">Object Detection for Dummies Part 2: CNN, DPM and Overfeat | Lil’Log (lilianweng.github.io)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://cs.brown.edu/courses/cs143/2011/lectures/DPM.pdf">DPM.pdf (brown.edu)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/364372881">1.1 YOLO入门教程：YOLOv1(1)-目标检测结构浅析 - 知乎 (zhihu.com)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://mp.weixin.qq.com/s/tZztakvzU9kl0nPbl8oCww">目标检测究竟发展到了什么程度? | CVHub带你聊一聊目标检测发展的这22年 (qq.com)</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日小知识</title>
    <link href="/blog/post/Knowledge/KnowledgeEveryday/"/>
    <url>/blog/post/Knowledge/KnowledgeEveryday/</url>
    
    <content type="html"><![CDATA[<h1 id="IEEE-Member-2024-02-27"><a href="#IEEE-Member-2024-02-27" class="headerlink" title="IEEE Member (2024.02.27)"></a>IEEE Member (2024.02.27)</h1><ul><li>Student Member &amp; Graduate Student member<ul><li> <strong>学生会员</strong>，只要是相关的本科生或者研究生，交钱就可以参加。</li></ul></li><li>Associate Member<ul><li><strong>准会员</strong>，凡对IT 领域感兴趣者均可申请加入，当在IEEE所涉及的学科领域具有六年以上的教育和工作经历，可申请升级为会员。</li><li>学生会员、准会员没有投票权。</li></ul></li><li>Member<ul><li>博士或硕士学生会员和准会员均可升级为<strong>会员</strong>。</li></ul></li><li>Senior Member<ul><li><strong>高级会员</strong>，牛人，需要会士或者高会推荐才能申请。</li><li>高级会员要求申请者需是IEEE相关领域的工程师、科学家、教师、技术主管或发明家，从业经验需达到十年，并在其中五年有杰出表现。</li><li>高级会员和会士的学术能力是得到国际上同行所承认。</li></ul></li><li>Fellow<ul><li><strong>会士</strong>，巨牛，需要会士会龄+推荐才能申请。</li><li>在IEEE所涉及的各个行业领域做出杰出成绩和突出贡献的人经过评审，IEEE董事会会授予其会士称号。</li><li>会士是一个荣誉称号，要满足两个条件，一个是要起码有5年的会龄，另外一个条件是要有5个FELLOW的推荐，一年大概有250个FELLOW产生，相当于会员总数的0.1% ，所以相当有价值。</li></ul></li><li>Life Fellow<ul><li><strong>终生会员</strong>需要同时满足以下两个条件：①会员年龄需达到65岁；②会员年龄和其成为IEEE会员的年数之和需大于100。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AnimatedDrawings</title>
    <link href="/blog/post/AI/AnimatedDrawings/"/>
    <url>/blog/post/AI/AnimatedDrawings/</url>
    
    <content type="html"><![CDATA[<p><a href="https://sketch.metademolab.com/">https://sketch.metademolab.com/</a><br><a href="https://fairanimateddrawings.com/site/home">https://fairanimateddrawings.com/site/home</a><br><a href="https://github.com/facebookresearch/AnimatedDrawings">https://github.com/facebookresearch/AnimatedDrawings</a></p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小样本条件下高光谱图像分类</title>
    <link href="/blog/post/CV/FewshotHSIC/"/>
    <url>/blog/post/CV/FewshotHSIC/</url>
    
    <content type="html"><![CDATA[<p>忙完答辩就写！</p><hr><p>忙完答辩，过了一个暑假也没写。。。。。。</p><p>开源：<a href="https://github.com/murphyhoucn/HSI-FSC">GitHub - murphyhoucn&#x2F;HSI-FSC: HSI few shot classification using embedding network and relation netwok.</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>高光谱图像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker入门</title>
    <link href="/blog/post/Knowledge/DockerBeginner/"/>
    <url>/blog/post/Knowledge/DockerBeginner/</url>
    
    <content type="html"><![CDATA[<blockquote><p>🤔: 你在看什么呀？<br>😎:我在看docker!<br>🤨:码头装卸工人吗?</p></blockquote><p><a href="https://docs.docker.com/get-docker/">Get Docker | Docker Documentation</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker version<br>docker status<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build<br>docker images<br>docker run<br>docker ps<br>docker ps<br>docker stop<br>docker <span class="hljs-built_in">kill</span><br>docker start<br>docker restart<br>docker <span class="hljs-built_in">rm</span><br>docker rmi<br>docker tag<br></code></pre></td></tr></table></figure><ul><li>容器与管理程序虚拟化</li></ul>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ILSVRC论文</title>
    <link href="/blog/post/Paper/ILSVRC/"/>
    <url>/blog/post/Paper/ILSVRC/</url>
    
    <content type="html"><![CDATA[<h1 id="ILSVRC"><a href="#ILSVRC" class="headerlink" title="ILSVRC"></a>ILSVRC</h1><h2 id="ImageNet"><a href="#ImageNet" class="headerlink" title="ImageNet"></a>ImageNet</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/40riCqvRoMs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>一切的起源：CVPR 2009，*<a href="https://ieeexplore.ieee.org/document/5206848">ImageNet: A large-scale hierarchical image database</a>*</p><blockquote><p><strong>ImageNet</strong> is an image database organized according to the <a href="http://wordnet.princeton.edu/">WordNet</a> hierarchy (currently only the nouns), in which each node of the hierarchy is depicted by hundreds and thousands of images. The project has been <a href="https://qz.com/1034972/the-data-that-changed-the-direction-of-ai-research-and-possibly-the-world/">instrumental</a> in advancing computer vision and deep learning research. The data is available for free to researchers for non-commercial use.<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ImageNet (image-net.org)](https://www.image-net.org/)">[2]</span></a></sup></p></blockquote><p>另外还有一篇2015年的论文，*<a href="https://arxiv.org/abs/1409.0575">ImageNet Large Scale Visual Recognition Challenge</a>*</p><ul><li>14,192,122 million images, 21841 thousand categories</li></ul><p>ImageNet数据集的出现，直接证明了庞大的数据是可以推动计算机视觉的进步的！</p><h2 id="ILSVRC-1"><a href="#ILSVRC-1" class="headerlink" title="ILSVRC"></a>ILSVRC</h2><p>ILSVRC无论怎么来介绍，都不如<a href="https://image-net.org/challenges/LSVRC/">ImageNet</a>官方给出的介绍来得直接明了！</p><blockquote><p>The ImageNet Large Scale Visual Recognition Challenge (ILSVRC) evaluates algorithms for object detection and image classification at large scale.<br>One high level motivation is to allow researchers to compare progress in detection across a wider variety of objects – taking advantage of the quite expensive labeling effort.<br>Another motivation is to measure the progress of computer vision for large scale image indexing for retrieval and annotation.<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ImageNet (image-net.org)](https://www.image-net.org/challenges/LSVRC/)">[1]</span></a></sup></p></blockquote><p>ILSVRC从2010年到2017年，总共举办了八届，但直到2012年AlexNet的横空出世，才使得ILSVRC得到了更多人的关注。在2017年之后，模型在ImageNet数据集上的错误率已经被“刷爆”了，再继续下去也已经没有什么意义了，ImageNet已经完成了它最初的使命了！</p><h1 id="ILSVRC-2010"><a href="#ILSVRC-2010" class="headerlink" title="ILSVRC 2010"></a>ILSVRC 2010</h1><p>2010年只有分类任务</p><blockquote><p><strong>Winner: NEC-UIUC</strong><br>Yuanqing Lin, Fengjun Lv, Shenghuo Zhu, Ming Yang, Timothee Cour, Kai Yu (NEC). LiangLiang Cao, Zhen Li, Min-Hsuan Tsai, Xi Zhou, Thomas Huang (UIUC). Tong Zhang (Rutgers).<br>[<a href="https://www.image-net.org/static_files/files/ILSVRC2010_NEC-UIUC.pdf">PDF</a>] NB: <em>This is unpublished work. Please contact the authors if you plan to make use of any of the ideas presented.</em></p></blockquote><ul><li>Fast descriptor coding</li><li>Large-scale SVM classification</li></ul><blockquote><p><strong>Honorable mention: XRCE</strong><br>Jorge Sanchez, Florent Perronnin, Thomas Mensink (XRCE)<br>[<a href="https://www.image-net.org/static_files/files/ILSVRC2010_XRCE.pdf">PDF</a>] NB: <em>This is unpublished work. Please contact the authors if you plan to make use of any of the ideas presented.</em></p></blockquote><ul><li>Fisher Vector</li></ul><h1 id="ILSVRC-2011"><a href="#ILSVRC-2011" class="headerlink" title="ILSVRC 2011"></a>ILSVRC 2011</h1><p>Categorization&amp;Localization</p><blockquote><p>Classification Winners: <a href="http://www.xrce.xerox.com/Research-Development/Document-Content-Laboratory/Textual-Visual-Pattern-Analysis-TVPA">XRCE</a><br><a href="http://www.xrce.xerox.com/Research-Development/Document-Content-Laboratory/Textual-Visual-Pattern-Analysis-TVPA/Large-scale-classification-and-retrieval">Florent Perronnin, Jorge Sanchez</a><br>[<a href="https://www.image-net.org/challenges/LSVRC/2011/ilsvrc11.pdf">PDF</a>] Compressed Fisher vectors for Large Scale Visual Recognition</p></blockquote><blockquote><p>Detection Winners: <a href="http://koen.me/research/selectivesearch/">University of Amsterdam &amp; University of Trento</a><br><a href="http://koen.me/research/">Koen van de Sande</a>, Jasper Uijlings<br>Arnold Smeulders, Theo Gevers, Nicu Sebe, Cees Snoek<br>[<a href="http://koen.me/research/pub/ILSVRC2011-UvATrento-SelectiveSearch.pdf">PDF</a>] Segmentation as Selective Search for Object Recognition</p></blockquote><h1 id="ILSVRC-2012"><a href="#ILSVRC-2012" class="headerlink" title="ILSVRC 2012"></a>ILSVRC 2012</h1><ul><li><p><a href="https://www.image-net.org/challenges/LSVRC/2012/results.html">results</a></p></li><li><p>review [ <a href="https://www.image-net.org/static_files/files/ilsvrc2012.pdf">slides</a> ]</p></li><li><p>Task 1: Classification: SuperVision [ <a href="https://www.image-net.org/static_files/files/supervision.pdf">slides</a> ];OXFORD_VGG team [ <a href="https://www.image-net.org/static_files/files/oxford_vgg.pdf">slides</a> ] </p></li><li><p>Task 2: Classification with localization: SuperVision</p></li><li><p>Task 3: Fine-grained classification: ISI [ <a href="https://www.image-net.org/static_files/files/isi.pdf">slides</a> ]</p></li></ul><h2 id="AlexNet-NeurIPS-2012-✅"><a href="#AlexNet-NeurIPS-2012-✅" class="headerlink" title="AlexNet (NeurIPS 2012)✅"></a>AlexNet (NeurIPS 2012)✅</h2><blockquote><p>📄paper: <em><a href="https://proceedings.neurips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf">ImageNet Classification with Deep Convolutional Neural Networks (neurips.cc)</a></em></p><p>💻code: </p></blockquote><ul><li><p><strong>Deep</strong> Convolutional Neural Network</p></li><li><p>No any unsupervised pre-training</p><ul><li>在AlexNet之前，机器学习界还是更关心unsupervised learning</li><li>AlexNet之后，都在做supervised learning</li><li>BERT在自然语言处理任务的兴起后，大家又把注意力放到了unsupervised learning了</li></ul></li><li><p>Computational power</p></li><li><p>next: video?</p></li><li><p><strong>深度神经网络对一张图片进行训练后得到的那个向量，在语义空间内的表示特别好！这是深度学习的一大强项！</strong></p></li><li><p>larger datasets, more powerful models, less overfitting</p></li><li><p>a model with large learning capacity</p></li><li><p>GPU</p></li><li><p>contributions: largest CNN; GPU; solve overfitting; depth!</p></li><li><p>two GTX 580 3GB GPUs(对于这篇文章来说，作者将模型划分到了两个GPU上，虽然工程上的工作量很大，但大家都不怎么care)</p></li><li><p>ImageNet中的图像大小都不一样，作者将其预处理为256×256</p><ul><li>AlexNet没用使用SIFT这种特征提取方法，而是直接对raw RGB图像进行处理，这种端到端（End to End）的工作对后续的工作有重大影响。</li></ul></li><li><p>detail</p><ul><li>SGD; batch size:128; momentum: 0.9; weight decay: 0.0005</li><li>initialized the weight: 0-means Gaussian distribution with standard deviation 0.01</li><li>initialized the biases</li><li>equal learning rate for all layers; initialized the learning rate 0.01</li></ul></li><li><p>上层神经元学到的是“全局”特征，如形状；底层神经元学到的是“局部”特征，如纹理。</p></li></ul><p>🚩<strong>Contribution 1: Architecture</strong></p><ul><li><p>ReLU</p><ul><li>Saturating nonlinearities: tanh or sigmoid</li><li>Non-saturating nonlinearities: ReLU, $ f(x) &#x3D; max(0, x)$</li><li><em><a href="https://www.cs.toronto.edu/~fritz/absps/reluICML.pdf">Rectified Linear Units Improve Restricted Boltzmann Machines (toronto.edu)</a></em></li></ul></li><li><p>Multi GPUs</p><ul><li>太工程了！</li></ul></li><li><p>Local Response Normalization</p><ul><li>现在已经有更好的Normalization技术了</li></ul></li><li><p>Overlapping Pooling</p></li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230504230831028.png" alt="ILSVRC2012的报告"><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[supervision.pdf (image-net.org)](https://www.image-net.org/static_files/files/supervision.pdf)">[3]</span></a></sup></p><ul><li>这么长的网络结构就是将一张图像的像素信息转化成了最终长为1000的向量。这个向量了丰富包含的语义信息（机器看得懂），是深度学习的一大优势所在！</li><li>所以说机器学习就是将看得懂的东西使用模型进行压缩，压缩为机器看到懂得东西，进而进行后续操作。</li><li>后面两个4096的全连接参数量太大了！</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230504230927317.png" alt="论文中的模型"></p><ul><li>为了在两个GPU上跑这个模型，Alex用了大量的代码把模型切分为两半边，分别在单个GPU进行训练，搞得这个示意图非常复杂！</li><li>AlexNet用的这个“模型并行”在此之后的很长时间都用的不多！但是<em>（没错，科技是个环，又回来了）</em>，随着GPT和BERT的出现，“模型并行”再次被提起！特别是自然语言处理任务中。</li></ul><p>🚩<strong>Contribution 2: reduce overfitting</strong></p><ul><li>Data Augmentation<ul><li>将256×256的图像随机抠出几个224×224的区域，扩大了数据量</li><li>PCA，主成分分析，在颜色通道上做一些变换</li></ul></li><li>Dropout<ul><li><em><a href="http://www.cs.toronto.edu/~nitish/dropout/">www.cs.toronto.edu/~nitish&#x2F;dropout&#x2F;</a></em></li><li>文章对Dropout的理解和现在大家对其的理解已经不一样了，现在大家认为Dropout是一种<strong>正则项</strong></li></ul></li></ul><h1 id="ILSVRC-2013"><a href="#ILSVRC-2013" class="headerlink" title="ILSVRC 2013"></a>ILSVRC 2013</h1><h2 id="ZFNet"><a href="#ZFNet" class="headerlink" title="ZFNet"></a>ZFNet</h2><blockquote><p>📄paper: <a href="https://link.springer.com/chapter/10.1007/978-3-319-10590-1_53">Visualizing and Understanding Convolutional Networks | SpringerLink</a></p><p>💻code:</p></blockquote><p>Matthew D Zeiler, New York University<br>Rob Fergus, New York University</p><p>The approach is based on a combination of large convolutional networks with a range of different architectures. The choice of architectures was assisted by visualization of model features’ using a deconvolutional network, as described in Zeiler et. al “Adaptive Deconvolutional Networks for Mid and High Level Feature Learning”, ICCV 2011.  </p><p>Each model is trained on a single Nvidia GPU for more than one week. Data is augmented by resizing the images to 256x256 pixels and then selecting random 224x224 pixel crops and horizontal flips from each example. This data augmentation is combined with the Dropout method of Hinton et al. (“Improving neural networks by preventing co-adaptation of feature detectors”), which prevents overfitting in these large networks.</p><p><a href="https://arxiv.org/abs/1311.2901">[1311.2901] Visualizing and Understanding Convolutional Networks (arxiv.org)</a><br><a href="https://www.cnblogs.com/shine-lee/p/11563237.html">ZFNet(2013)及可视化的开端 - shine-lee - 博客园 (cnblogs.com)</a></p><h2 id="Clarifai"><a href="#Clarifai" class="headerlink" title="Clarifai"></a>Clarifai</h2><p>马修·泽勒（Matthew Zeiler）利用2013年赢得ImageNet挑战赛时的程序创办了Clarifai公司，目前获得了4000万美元风险投资。<br><a href="https://developer.aliyun.com/article/814047">机器之心独家对话Clarifai创始人：从图像识别到无限可能-阿里云开发者社区 (aliyun.com)</a></p><p>Clarifai</p><p>Matthew Zeiler, Clarifai</p><p>A large deep convolutional network is trained on the original data to classify each of the 1,000 classes. The only preprocessing done to the data is subtracting a per-pixel mean. To augment the amount of training data, the image is downsampled to 256 pixels and a random 224 pixel crop is taken out of the image and randomly flipped horizontally to provide more views of each example. Additionally, the dropout technique of Hinton et al. “Improving neural networks by preventing co-adaptation of feature detectors” was utilized to further prevent overfitting.  </p><p>The architecture contains 65M parameters trained for 10 days on a single Nvidia GPU. By using a novel visualization technique based on the deconvolutional networks of Zeiler et. al, “Adaptive Deconvolutional Networks for Mid and High Level Feature Learning”, it became clearer what makes the model perform, and from this a powerful architecture was chosen. Multiple such models were averaged together to further boost performance.</p><h2 id="OverFeat"><a href="#OverFeat" class="headerlink" title="OverFeat"></a>OverFeat</h2><p>OverFeat - NYU</p><p>Pierre Sermanet, David Eigen, Michael Mathieu, Xiang Zhang, Rob Fergus, Yann LeCun</p><p>Our submission is based on an integrated framework for using Convolutional Networks for <strong>classiﬁcation, localization and detection</strong>. We use a multiscale and sliding window approach, efficiently implemented within a ConvNet. This not only improves classiﬁcation performance, but naturally allows the prediction of one or more objects’ bounding boxes within the image. The same basic framework was applied to all three tasks. For the classification task, we vote among different views presented to the network. For localization and detection, each sliding window classification is refined using a regressor trained to predict bounding boxes; we produce final predictions by combining the regressor outputs.</p><h1 id="ILSVRC-2014"><a href="#ILSVRC-2014" class="headerlink" title="ILSVRC 2014"></a>ILSVRC 2014</h1><h2 id="GoogLeNet-CVPR-2015-✅"><a href="#GoogLeNet-CVPR-2015-✅" class="headerlink" title="GoogLeNet (CVPR 2015)✅"></a>GoogLeNet (CVPR 2015)✅</h2><blockquote><p>📄paper: </p><ul><li>[<a href="https://arxiv.org/abs/1409.4842">1409.4842] Going Deeper with Convolutions (arxiv.org)</a></li><li><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2015/html/Szegedy_Going_Deeper_With_2015_CVPR_paper.html">CVPR 2015 Open Access Repository (cv-foundation.org)</a></li></ul><p>💻code: </p></blockquote><ul><li>a deep convolutional neural network architecture codenamed Inception</li><li>the main hallmark of this architecture is the improved utilization of the <strong>computing resources</strong> inside the network</li><li>increasing the depth and width of the network while keeping the computational budget constant.</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230517202517369.png" alt="inception model"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230517202539308.png" alt="GoogLeNet"></p><h2 id="VGG-ICLR-2015-✅"><a href="#VGG-ICLR-2015-✅" class="headerlink" title="VGG (ICLR 2015)✅"></a>VGG (ICLR 2015)✅</h2><blockquote><p>📄paper: [<a href="https://arxiv.org/abs/1409.1556">1409.1556] Very Deep Convolutional Networks for Large-Scale Image Recognition (arxiv.org)</a></p><p>💻code: </p></blockquote><ul><li>AlexNet -deeper-&gt; VGG</li><li>AlexNet中出现的卷积核大小为11×11，7×7和5×5，但在VGG中，这么大的卷积核已经见不到了，取而代之的是3×3的卷积核</li><li>VGG中，使用了3个3x3卷积核来代替7x7卷积核，使用了2个3x3卷积核来代替5*5卷积核，这样做的主要目的是在保证具有相同感知野的条件下，提升了网络的深度，在一定程度上提升了神经网络的效果。</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230517202351878.png" alt="ConvNet configurations"></p><h1 id="ILSVRC-2015"><a href="#ILSVRC-2015" class="headerlink" title="ILSVRC 2015"></a>ILSVRC 2015</h1><ul><li><p><a href="https://www.image-net.org/challenges/LSVRC/2015/results.php">ILSVRC2015 Results (image-net.org)</a></p></li><li><p>Two main competitions</p><ul><li><p><a href="https://www.image-net.org/challenges/LSVRC/2015/index.php#det">Object detection</a> for 200 fully labeled categories.</p></li><li><p><a href="https://www.image-net.org/challenges/LSVRC/2015/index.php#loc">Object localization</a> for 1000 categories.</p></li></ul></li><li><p>Two taster competitions</p><ul><li><a href="https://www.image-net.org/challenges/LSVRC/2015/index.php#vid">Object detection from video</a> for 30 fully labeled categories.</li><li><a href="https://www.image-net.org/challenges/LSVRC/2015/index.php#scene">Scene classification</a> for 401 categories. Joint with MIT Places team.</li></ul></li></ul><h2 id="ResNet-CVPR-2016-✅"><a href="#ResNet-CVPR-2016-✅" class="headerlink" title="ResNet (CVPR 2016)✅"></a>ResNet (CVPR 2016)✅</h2><blockquote><p>📄paper:</p><ul><li><em>[<a href="https://arxiv.org/abs/1512.03385">1512.03385] Deep Residual Learning for Image Recognition (arxiv.org)</a></em></li><li><a href="https://openaccess.thecvf.com/content_cvpr_2016/html/He_Deep_Residual_Learning_CVPR_2016_paper.html">CVPR 2016 Open Access Repository (thecvf.com)</a></li></ul><p>💻code: </p><p>🔗reference:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/349717627">ResNet：残差神经网络 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/sazass/article/details/116864275">【pytorch系列】ResNet中的BasicBlock与bottleneck-CSDN博客</a></li><li><a href="http://zh.d2l.ai/chapter_convolutional-modern/resnet.html">7.6. 残差网络（ResNet） — 动手学深度学习 2.0.0 documentation (d2l.ai)</a></li></ul></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/1PGLj-uKT1w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>🚩<strong>intro</strong></p><ul><li>deeper neural network are more difficult to train!</li><li>residual learning framework: more layers but lower complexity</li><li>residual: $F(x)&#x3D;H(x)-x$<ul><li>残差连接可以这样理解，如果新加了这些层并不能使模型表现更好的话，就让这个$H(x)-&gt;0$.</li><li>残差连接将模型的复杂度降低了</li></ul></li><li>shortcut connections(这也是很久之前提出的东西)<ul><li>the shortcut connections simply perform <strong>identity mapping</strong></li><li>identity shortcut connections add neither extra parameters nor computational complexity</li></ul></li></ul><p>🚩<strong>related work</strong></p><ul><li>Resudial Representations</li><li>Shortcut Connections</li></ul><p>🚩<strong>exp</strong></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230505112627441.png" alt="Architectures for ImageNet"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230505113324320.png" alt="basic block and bottleneck block"></p><h1 id="ILSVRC-2016"><a href="#ILSVRC-2016" class="headerlink" title="ILSVRC 2016"></a>ILSVRC 2016</h1><h2 id="Trimps-Soushen"><a href="#Trimps-Soushen" class="headerlink" title="Trimps-Soushen"></a>Trimps-Soushen</h2><blockquote><p>📄paper:</p><p>💻code: </p></blockquote><h2 id="ResNeXt-CVPR-2017"><a href="#ResNeXt-CVPR-2017" class="headerlink" title="ResNeXt(CVPR 2017)"></a>ResNeXt(CVPR 2017)</h2><blockquote><p>📄paper: <a href="https://openaccess.thecvf.com/content_cvpr_2017/html/Xie_Aggregated_Residual_Transformations_CVPR_2017_paper.html">CVPR 2017 Open Access Repository (thecvf.com)</a></p><p>💻code: </p></blockquote><h1 id="ILSVRC-2017"><a href="#ILSVRC-2017" class="headerlink" title="ILSVRC 2017"></a>ILSVRC 2017</h1><h2 id="SENet-CVPR-2018"><a href="#SENet-CVPR-2018" class="headerlink" title="SENet(CVPR 2018)"></a>SENet(CVPR 2018)</h2><blockquote><p>📄paper: <a href="https://openaccess.thecvf.com/content_cvpr_2018/html/Hu_Squeeze-and-Excitation_Networks_CVPR_2018_paper.html">CVPR 2018 Open Access Repository (thecvf.com)</a></p><p>💻code:</p></blockquote><h1 id="2017"><a href="#2017" class="headerlink" title="2017-"></a>2017-</h1><p>kaggle</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/hzhj2007/article/details/87388240">那些年我们一起追过的ILSVRC冠军_hzhj的博客-CSDN博客</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.image-net.org/challenges/LSVRC/">ImageNet (image-net.org)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.image-net.org/">ImageNet (image-net.org)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.image-net.org/static_files/files/supervision.pdf">supervision.pdf (image-net.org)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://github.com/weiaicunzai/pytorch-cifar100">weiaicunzai&#x2F;pytorch-cifar100: Practice on cifar100(ResNet, DenseNet, VGG, GoogleNet, InceptionV3, InceptionV4, Inception-ResNetv2, Xception, Resnet In Resnet, ResNext,ShuffleNet, ShuffleNetv2, MobileNet, MobileNetv2, SqueezeNet, NasNet, Residual Attention Network, SENet, WideResNet) (github.com)</a>[^xx]:<a href="https://www.kaggle.com/getting-started/149448">ImageNet Winning CNN Architectures (ILSVRC) | Data Science and Machine Learning | Kaggle</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ILSVRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不可错过的网页</title>
    <link href="/blog/post/Tools/MagicalWebPages/"/>
    <url>/blog/post/Tools/MagicalWebPages/</url>
    
    <content type="html"><![CDATA[<h1 id="CV-PR"><a href="#CV-PR" class="headerlink" title="CV&amp;PR"></a>CV&amp;PR</h1><p><a href="https://cv.gluon.ai/">GluonCV Toolkit</a></p><p><a href="https://cv.gluon.ai/model_zoo/classification.html">Classification — gluoncv 0.11.0 documentation</a></p><ul><li><p><a href="http://shawndong98.ml/">ShawnD | MrD’s Blog (shawndong98.ml)</a>：学术主页</p></li><li><p><a href="https://handong1587.github.io/index.html">handong1587’s blog - handong1587</a>：学术主页</p></li></ul><p><a href="https://tuneavideo.github.io/">Tune-A-Video (tuneavideo.github.io)</a></p><h1 id="HSI"><a href="#HSI" class="headerlink" title="HSI"></a>HSI</h1><p><a href="https://aviris.jpl.nasa.gov/dataportal/">JPL | AVIRIS Data Portal (nasa.gov)</a></p><ul><li><p><a href="https://whuhenry.github.io/">成长印记 (whuhenry.github.io)</a>：个人网站；关于遥感、计算机视觉的各种严肃的、好玩的东西的分享</p></li><li><p><a href="https://zephyrhours.github.io/about.html">Zengfu Hou - About (zephyrhours.github.io)</a>：北理工博士；个人网站；模式识别；高光谱图像处理</p></li><li><p><a href="https://ruizhaocv.github.io/">Rui Zhao (赵睿) - Homepage (ruizhaocv.github.io)</a>：新加坡国立大学博士；</p></li><li><p><a href="https://sites.google.com/site/zhaohuixuers/">Welcome to Zhaohui Xue’s Home page (google.com)</a>：薛朝辉；深度学习</p></li><li><p><a href="http://lesun.weebly.com/">My Site - Home (weebly.com)</a>：孙乐；成均馆大学博士后；高光谱图像处理</p></li><li><p><a href="https://rslab.ut.ac.ir/data">Data - rslab (ut.ac.ir)</a></p></li></ul><p><a href="http://www.cs-chan.com/source/FADL/Online_Dataset_Summary_Table.pdf">Microsoft Word - Online_Dataset_Summary_Table.docx (cs-chan.com)</a></p><p><a href="https://aistudio.baidu.com/aistudio/projectdetail/882508">深度学习 遥感影像数据集汇总 - 飞桨AI Studio (baidu.com)</a></p><p><a href="http://xudongkang.weebly.com/">Xudong Kang’s Homepage - Home (weebly.com)</a></p><p><a href="https://www.twblogs.net/c/5b7c86152b71770a43db632a/">台部落 (twblogs.net)</a></p><p><a href="http://www.hrs-cas.com/">中国科学院遥感与数字地球研究所-高光谱遥感应用技术研究室 (hrs-cas.com)</a></p><ul><li><p><a href="https://tanxy.club/">Tanxy</a>：高光谱图像</p></li><li><p><a href="https://ieeexplore.ieee.org/author/37086813991">Dehui Zhu - IEEE Xplore Author Profile</a>：武汉大学研究生</p></li><li><p><a href="https://github.com/satellite-image-deep-learning/datasets">satellite-image-deep-learning&#x2F;datasets: Datasets for deep learning with satellite &amp; aerial imagery (github.com)</a>：卫星和航空深度学习数据集</p></li><li><p><a href="https://web.xidian.edu.cn/wyxie/index.html">谢卫莹 | 个人信息 | 西安电子科技大学个人主页 (xidian.edu.cn)</a>：研究方向为卫星遥感图像在轨实时处理及轻量化实现</p></li><li><p><a href="https://zhaoxuli123.github.io/HAD100/">HAD100 (zhaoxuli123.github.io)</a>：A Beachmark Dataset for Hyperspectral Anomaly Detection</p></li></ul><h1 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h1><ul><li><p><a href="http://yann.lecun.com/">Yann LeCun’s Home Page</a>：Yann LeCun</p></li><li><p><a href="https://people.idsia.ch/~juergen/">DEEP LEARNING · Deep Learning (idsia.ch)</a>：于尔根·施密德胡伯，“（现代）AI之父”，LSTM作者</p></li><li><p><a href="https://poloclub.github.io/">Polo Club of Data Science @ Georgia Tech: Human-Centered AI, Deep Learning Interpretation &amp; Visualization, Cybersecurity, Large Graph Visualization and Mining | Georgia Tech | Atlanta, GA 30332, United States</a>：一个学术团队</p></li><li><p><a href="https://awesomeopensource.com/">Find And Compare Open Source Projects (awesomeopensource.com)</a>：找开源项目</p></li></ul><p><a href="https://easyai.tech/en/">Product Manager’s Artificial Intelligence Learning Library - easyAI</a></p><p><a href="https://nn.labml.ai/">labml.ai Annotated PyTorch Paper Implementations</a></p><p><a href="https://developers.google.cn/machine-learning/glossary?hl=zh-cn#n">机器学习术语表  | Machine Learning  | Google Developers</a></p><p><a href="https://www.jiqizhixin.com/articles/2017-07-10-8">机器之心开放中英词汇库：期待与读者的共同进步 | 机器之心 (jiqizhixin.com)</a></p><p><a href="https://www.zumolabs.ai/">ZUMO LABS | Synthetic Data for Computer Vision</a></p><p><a href="https://atcold.github.io/pytorch-Deep-Learning/">DEEP LEARNING · Deep Learning (atcold.github.io)</a></p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/25099638">博士这五年 - 知乎 (zhihu.com)</a>：李沐—博士这五年</p></li><li><p><a href="https://tqchen.com/">Tianqi Chen (tqchen.com)</a>：陈天奇；TVM</p></li><li><p><a href="https://lilianweng.github.io/">Lil’Log (lilianweng.github.io)</a>： 翁丽莲（<em>Lilian Weng</em>）；I’m leading a team on AI Safety at OpenAI.</p></li><li><p><a href="https://luckmoonlight.github.io/">严鸿昌的个人博客 (luckmoonlight.github.io)</a></p></li><li><p><a href="https://pjreddie.com/">Survival Strategies for the Robot Rebellion (pjreddie.com)</a>：Yolo作者</p></li><li><p><a href="https://pjreddie.com/darknet/yolo/">YOLO: Real-Time Object Detection (pjreddie.com)</a>：Yolo</p></li><li><p><a href="https://www.citisy.site/">citisy的炼丹房</a></p></li><li><p><a href="https://www.rossgirshick.info/">rbg’s home page (rossgirshick.info)</a>：RBG；R-CNN系列作者</p></li></ul><h1 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h1><p><a href="https://www.ruanyifeng.com/">阮一峰的个人网站 - Ruan YiFeng’s Personal Website</a></p><p><a href="https://codeantenna.com/">技术文章技术问题代码片段及聚合 - CodeAntenna</a></p><p><a href="https://www.openvim.com/">Interactive Vim tutorial (openvim.com)</a></p><ul><li><a href="https://jbhuang0604.github.io/">Jia-Bin Huang (jbhuang0604.github.io)</a>：Jia-Bin Huang</li></ul><h1 id="Knowledge"><a href="#Knowledge" class="headerlink" title="Knowledge"></a>Knowledge</h1><p><a href="https://lulaoshi.info/">主页 | 鲁老师 (lulaoshi.info)</a></p><blockquote><p>分享机器学习系统、数据管理、数据科学原创内容</p><p>Flink原理与实践；深度学习笔记；HPC教程；Python；博文</p></blockquote><p><a href="https://cn.overleaf.com/project/607c3f6c8e2b62c609cc4fa7">OUCThesis-bachelor - Online LaTeX Editor Overleaf</a></p><h1 id="Fancy"><a href="#Fancy" class="headerlink" title="Fancy"></a>Fancy</h1><ul><li><p><a href="https://www.cat-gpt.com/">CatGPT (cat-gpt.com)</a></p><ul><li>喵喵喵喵喵</li></ul></li><li><p><a href="https://academicpages.github.io/">academicpages is a ready-to-fork GitHub Pages template for academic personal websites - Your Name &#x2F; Site Title</a></p><ul><li>一个学术主题的个人网站模板</li></ul></li><li><p><a href="http://gridzzly.com/">Gridzzly.com - Make your own grid paper</a></p><ul><li>生成符合个人偏好的PDF笔记模板</li></ul></li><li><p><a href="https://arleyzhang.github.io/">arleyzhang</a></p><ul><li>计算机视觉，机器学习学习笔记</li></ul></li><li><p><a href="https://www.wolframalpha.com/">Wolfram|Alpha: Computational Intelligence (wolframalpha.com)</a></p><ul><li>万物可计算</li></ul></li><li><p><a href="https://qiyuan-z.github.io/">Yuan - 记录学习中的点点滴滴 (qiyuan-z.github.io)</a></p><ul><li>深度学习学习笔记</li></ul></li><li><p><a href="https://mathdf.com/int/cn/">积分。分步计算器 (mathdf.com)</a></p><ul><li>积分计算器</li></ul></li><li><p><a href="https://www.izhaoo.com/">zhaoo (izhaoo.com)</a></p><ul><li>一款简约的 Hexo 主题。</li></ul></li><li><p><a href="https://archive.org/download/clash_for_windows_pkg">clash_for_windows_pkg directory listing (archive.org)</a></p><ul><li>CFW存档</li></ul></li><li><p><a href="https://nagi.fun/">Nagi-ovo - Breezing</a></p><ul><li>Cpp学习笔记</li></ul></li></ul><p><a href="https://atomlab.org/">Atomlab</a></p><p><a href="https://www.zhangjiee.com/">https://www.zhangjiee.com/</a></p><p><a href="https://coolshell.cn/">https://coolshell.cn/</a></p><p><a href="https://halfrost.com/">https://halfrost.com/</a></p><p><a href="https://books.halfrost.com/leetcode/">https://books.halfrost.com/leetcode/</a></p><p><a href="https://www.cs.cmu.edu/~guyb/realworld.html">https://www.cs.cmu.edu/~guyb/realworld.html</a></p><h1 id="学术工具"><a href="#学术工具" class="headerlink" title="学术工具"></a>学术工具</h1><p>paper with code<br>Computer Science Conferences &amp; Workshops：<a href="https://dblp.org/db/conf/index.html">https://dblp.org/db/conf/index.html</a></p>]]></content>
    
    
    <categories>
      
      <category>高效工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网页</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新奇的imread</title>
    <link href="/blog/post/CV/FancyImread/"/>
    <url>/blog/post/CV/FancyImread/</url>
    
    <content type="html"><![CDATA[<p>在使用Python进行图像处理时，毫无疑问第一件事就是读取图像。Python开源社区创造了大量的库，为Python的使用带来的很多的便利。就读取图像一事，就有多个库提供了<code>imread</code>方法。但在之前使用时，从来没有对它们之间的异同进行深入地考虑过，都是拿来即用。偶然的一次尝试，发现这些方法之间好像确实存在一些不同。</p><h1 id="opencv-python"><a href="#opencv-python" class="headerlink" title="opencv-python"></a>opencv-python</h1><p><code>imread</code>API定义<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[OpenCV: Image file reading and writing](https://docs.opencv.org/4.0.0/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56)">[1]</span></a></sup></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">retval = cv.imread(filename[, flags])<br><br><span class="hljs-comment"># filename: Name of file to be loaded.</span><br><span class="hljs-comment"># flags: Flag that can take values of cv::ImreadModes</span><br></code></pre></td></tr></table></figure><blockquote><p>使用 <strong><a href="https://docs.opencv.org/4.0.0/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56">cv.imread()</a></strong> 函数读取一张图像，图片应该在工作目录中，或者应该提供完整的图像路径。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[图像入门 (apachecn.org)](https://opencv.apachecn.org/#/docs/4.0.0/2.1-tutorial_py_image_display)">[2]</span></a></sup></p><p>第二个参数是一个 flag，指定了应该读取图像的方式</p><ul><li><a href="https://docs.opencv.org/4.0.0/d4/da8/group__imgcodecs.html#gga61d9b0126a3e57d9277ac48327799c80af660544735200cbe942eea09232eb822">cv.IMREAD_COLOR</a>：加载彩色图像，任何图像的透明度都会被忽略，它是默认标志</li><li><a href="https://docs.opencv.org/4.0.0/d4/da8/group__imgcodecs.html#gga61d9b0126a3e57d9277ac48327799c80ae29981cfc153d3b0cef5c0daeedd2125">cv.IMREAD_GRAYSCALE</a>：以灰度模式加载图像</li><li><a href="https://docs.opencv.org/4.0.0/d4/da8/group__imgcodecs.html#gga61d9b0126a3e57d9277ac48327799c80aeddd67043ed0df14f9d9a4e66d2b0708">cv.IMREAD_UNCHANGED</a>：加载图像，包括 alpha 通道</li></ul><p>Note</p><ul><li>你可以简单地分别传递整数 1、0 或-1，而不是这三个 flag。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Name: opencv-python</span><br><span class="hljs-comment"># Version: 4.7.0.72</span><br><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img_path = <span class="hljs-string">&#x27;../datasets/lenna/lena_std.jpg&#x27;</span><br>img = cv2.imread(img_path)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img)) <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(img.shape) <span class="hljs-comment"># (512, 512, 3)</span><br><br>cv2.imshow(<span class="hljs-string">&quot;lenna&quot;</span>, img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-comment"># [[[125 137 225]</span><br><span class="hljs-comment"># BGR模式</span><br></code></pre></td></tr></table></figure><ul><li><p>如何理解(512, 512, 3)？</p><ul><li>直接看这就是一个512×512×3的3d array，从物理意义上说，这张图片拥有三个通道，每个通道的矩阵尺寸是512×512.</li><li>但计算机认为这个3d array是有512个通道，每个通道矩阵的尺寸是512×3.</li></ul></li><li><p>彩色图像 OpenCV 用的 BGR 模式，但是 Matplotlib 显示用的 RGB 模式。因此如果图像用 OpenCV 加载，则 Matplotlib 中彩色图像将无法正常显示。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[图像入门 (apachecn.org)](https://opencv.apachecn.org/#/docs/4.0.0/2.1-tutorial_py_image_display)">[2]</span></a></sup><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Extracting a region from an image using slicing in Python, OpenCV - Stack Overflow](https://stackoverflow.com/questions/15072736/extracting-a-region-from-an-image-using-slicing-in-python-opencv/15074748#15074748)">[4]</span></a></sup></p></li><li><p>如何将OpenCV的BGR模式转为RGB模式？</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">img2 = cv2.cvtColor(img , cv2.COLOR_BGR2RGB)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">b,g,r = cv2.split(img)<br>img2 = cv2.merge([r,g,b])<br></code></pre></td></tr></table></figure><h1 id="matplotlib-pyplot"><a href="#matplotlib-pyplot" class="headerlink" title="matplotlib.pyplot"></a>matplotlib.pyplot</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Name: matplotlib</span><br><span class="hljs-comment"># Version: 3.3.0</span><br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>img_path = <span class="hljs-string">&#x27;../datasets/lenna/lena_std.jpg&#x27;</span><br>img = plt.imread(img_path)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img)) <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(img.shape) <span class="hljs-comment"># (512, 512, 3)</span><br><br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-comment"># [[[225 137 125]</span><br><br>plt.imshow(img)<br>plt.show()<br></code></pre></td></tr></table></figure><p>后面的几种方法都可以用<code>plt.imshow()</code>方法进行图像的显示。</p><h1 id="matplotlib-image"><a href="#matplotlib-image" class="headerlink" title="matplotlib.image"></a>matplotlib.image</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Name: matplotlib</span><br><span class="hljs-comment"># Version: 3.3.0</span><br><br><span class="hljs-keyword">import</span> matplotlib.image <span class="hljs-keyword">as</span> matimage<br><br>img_path = <span class="hljs-string">&#x27;../datasets/lenna/lena_std.jpg&#x27;</span><br>img = matimage.imread(img_path)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img)) <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(img.shape) <span class="hljs-comment"># (512, 512, 3)</span><br><br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-comment"># [[[225 137 125]</span><br></code></pre></td></tr></table></figure><h1 id="imageio"><a href="#imageio" class="headerlink" title="imageio"></a>imageio</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Name: imageio</span><br><span class="hljs-comment"># Version: 2.27.0</span><br><br><span class="hljs-keyword">import</span> imageio.v2 <span class="hljs-keyword">as</span> imageio<br><br>img_path = <span class="hljs-string">&#x27;../datasets/lenna/lena_std.jpg&#x27;</span><br>img = imageio.imread(img_path)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img)) <span class="hljs-comment"># &lt;class &#x27;imageio.core.util.Array&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(img.shape) <span class="hljs-comment"># (512, 512, 3)</span><br><br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-comment"># [[[225 137 125]</span><br></code></pre></td></tr></table></figure><h1 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Name: Pillow</span><br><span class="hljs-comment"># Version: 9.5.0</span><br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img_path = <span class="hljs-string">&#x27;../datasets/lenna/lena_std.jpg&#x27;</span><br>img = Image.<span class="hljs-built_in">open</span>(img_path)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img)) <span class="hljs-comment"># &lt;class &#x27;PIL.JpegImagePlugin.JpegImageFile&#x27;&gt;</span><br><br>img = np.array(img)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img)) <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(img.shape) <span class="hljs-comment"># (512, 512, 3)</span><br><br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-comment"># [[[225 137 125]</span><br></code></pre></td></tr></table></figure><h1 id="skimage"><a href="#skimage" class="headerlink" title="skimage"></a>skimage</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Name: scikit-image</span><br><span class="hljs-comment"># Version: 0.20.0</span><br><br><span class="hljs-keyword">import</span> skimage.io <span class="hljs-keyword">as</span> io<br><br>img_path = <span class="hljs-string">&#x27;../datasets/lenna/lena_std.jpg&#x27;</span><br>img = io.imread(img_path)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img)) <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(img.shape) <span class="hljs-comment"># (512, 512, 3)</span><br><br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-comment"># [[[225 137 125]</span><br></code></pre></td></tr></table></figure><h1 id="scipy"><a href="#scipy" class="headerlink" title="scipy"></a><del>scipy</del></h1><p>scipy中的imread已经被移除了！<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[SciPy 1.3.0 Release Notes — SciPy v1.10.1 Manual](https://docs.scipy.org/doc/scipy/release.1.3.0.html)">[3]</span></a></sup></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Name: scipy</span><br><span class="hljs-comment"># Version: 1.9.1</span><br><br><span class="hljs-keyword">import</span> scipy.misc <span class="hljs-keyword">as</span> misc<br><br>img_path = <span class="hljs-string">&#x27;../datasets/lenna/lena_std.jpg&#x27;</span><br>img = misc.imread(img_path)<br><br><span class="hljs-comment"># AttributeError: module &#x27;scipy.misc&#x27; has no attribute &#x27;imread&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Name: scipy</span><br><span class="hljs-comment"># Version: 1.9.1</span><br><br><span class="hljs-keyword">import</span> scipy.ndimage <span class="hljs-keyword">as</span> spyimage<br><br>img_path = <span class="hljs-string">&#x27;../datasets/lenna/lena_std.jpg&#x27;</span><br>img = spyimage.imread(img_path)<br><br><span class="hljs-comment"># AttributeError: module &#x27;scipy.ndimage&#x27; has no attribute &#x27;imread&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.opencv.org/4.0.0/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56">OpenCV: Image file reading and writing</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://opencv.apachecn.org/#/docs/4.0.0/2.1-tutorial_py_image_display">图像入门 (apachecn.org)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://docs.scipy.org/doc/scipy/release.1.3.0.html">SciPy 1.3.0 Release Notes — SciPy v1.10.1 Manual</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://stackoverflow.com/questions/15072736/extracting-a-region-from-an-image-using-slicing-in-python-opencv/15074748#15074748">Extracting a region from an image using slicing in Python, OpenCV - Stack Overflow</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>API</tag>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>趁手工具</title>
    <link href="/blog/post/Tools/ToolsForME/"/>
    <url>/blog/post/Tools/ToolsForME/</url>
    
    <content type="html"><![CDATA[<h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="Visual-Studio-Code-Code-Editing-Redefined"><a href="#Visual-Studio-Code-Code-Editing-Redefined" class="headerlink" title="Visual Studio Code - Code Editing. Redefined"></a><a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a></h4><h4 id="Visual-Studio-IDE-and-Code-Editor-for-Software-Developers-and-Teams-microsoft-com"><a href="#Visual-Studio-IDE-and-Code-Editor-for-Software-Developers-and-Teams-microsoft-com" class="headerlink" title="Visual Studio: IDE and Code Editor for Software Developers and Teams (microsoft.com)"></a><a href="https://visualstudio.microsoft.com/">Visual Studio: IDE and Code Editor for Software Developers and Teams (microsoft.com)</a></h4><ul><li><a href="https://zhuanlan.zhihu.com/p/661815368">VS2022安装VisualAssistX番茄助手 - 知乎 (zhihu.com)</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=adrianwilczynski.one-dark-pro">One Dark Pro - Visual Studio Marketplace</a></li><li><a href="https://thecherno.com/">Cherno (thecherno.com)</a>  &amp;&amp; <a href="https://thecherno.com/vs">Cherno (thecherno.com)</a></li><li><a href="https://blog.csdn.net/qq_22642239/article/details/108093531">Visual Assist X 颜色配置习惯_visual assist 配色-CSDN博客</a></li><li><a href="https://www.youtube.com/watch?v=3KKTpB1NWww&ab_channel=TheCherno">My Top 5 Visual Assist Features - TheCherno</a></li><li><a href="https://forums.wholetomato.com/forum/topic.asp?TOPIC_ID=19103">Whole Tomato Software Forums - Syntax highlighting colors for VS dark theme</a>✅</li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/202111211548_va_dark_theme.png" alt="img"></li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240111104530664.png" alt="image-20240111104530664"></li><li><a href="https://docs.wholetomato.com/default.asp?W179">Enhanced Syntax Coloring (wholetomato.com)</a>✅</li></ul><h4 id="MATLAB-MathWorks"><a href="#MATLAB-MathWorks" class="headerlink" title="MATLAB - MathWorks"></a><a href="https://www.mathworks.com/products/matlab.html">MATLAB - MathWorks</a></h4><p>字体：<a href="https://github.com/yakumioto/YaHei-Consolas-Hybrid-1.12">GitHub - yakumioto&#x2F;YaHei-Consolas-Hybrid-1.12: YaHei Consolas Hybrid 字体</a></p><blockquote><p><a href="https://www.cnblogs.com/yutian-blogs/p/15366608.html">一种适用于matlab的代码字体解决方案 - Yu_tiann - 博客园 (cnblogs.com)</a></p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231212153215003.jpg" alt="image-20231212153215003"></p><p>主题：<a href="https://github.com/scottclowe/matlab-schemer">GitHub - scottclowe&#x2F;matlab-schemer: Apply and save color schemes in MATLAB with ease.</a></p><blockquote><p><a href="https://blog.csdn.net/weixin_42837669/article/details/115713590">Matlab如何更换主题颜色_matlab主题颜色-CSDN博客</a></p></blockquote><h4 id="PyCharm-the-Python-IDE-for-Professional-Developers-by-JetBrains"><a href="#PyCharm-the-Python-IDE-for-Professional-Developers-by-JetBrains" class="headerlink" title="PyCharm: the Python IDE for Professional Developers by JetBrains"></a><a href="https://www.jetbrains.com/pycharm/">PyCharm: the Python IDE for Professional Developers by JetBrains</a></h4><h4 id="Sublime-Text-Text-Editing-Done-Right"><a href="#Sublime-Text-Text-Editing-Done-Right" class="headerlink" title="Sublime Text - Text Editing, Done Right"></a><a href="https://www.sublimetext.com/">Sublime Text - Text Editing, Done Right</a></h4><h4 id="Windows-Terminal-installation-Microsoft-Learn"><a href="#Windows-Terminal-installation-Microsoft-Learn" class="headerlink" title="Windows Terminal installation | Microsoft Learn"></a><a href="https://learn.microsoft.com/en-us/windows/terminal/install">Windows Terminal installation | Microsoft Learn</a></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span> <br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;defaults&quot;</span><span class="hljs-punctuation">:</span> <br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;backgroundImage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\NPU481\\Nutstore\\1\\MyLife\\Murphy-Pic\\\u4fdd\u5b58\u7167\u7247\\moon.jpg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;useAcrylic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 是否使用 亚克力效果</span><br>        <span class="hljs-attr">&quot;acrylicOpacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 亚克力效果 透明度</span><br>        <span class="hljs-attr">&quot;bellStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none&quot;</span> <span class="hljs-comment">// 关闭提示音</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows PowerShell&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%SystemRoot%\\System32\\cmd.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\u547d\u4ee4\u63d0\u793a\u7b26&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Azure Cloud Shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows.Terminal.Azure&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;c5ec29e0-1ab8-5490-b5d1-093f190e051e&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Developer Command Prompt for VS 2022&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows.Terminal.VisualStudio&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;5b2e6b29-70ef-5225-acea-5828b646054b&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Developer PowerShell for VS 2022&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows.Terminal.VisualStudio&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;2ece5bfe-50ed-5f3a-ab87-5cd4baafed2b&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Git Bash&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Git&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><h4 id="Git-git-scm-com"><a href="#Git-git-scm-com" class="headerlink" title="Git (git-scm.com)"></a><a href="https://git-scm.com/">Git (git-scm.com)</a></h4><h4 id="Node-js-nodejs-org"><a href="#Node-js-nodejs-org" class="headerlink" title="Node.js (nodejs.org)"></a><a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></h4><h4 id="MinGW-w64"><a href="#MinGW-w64" class="headerlink" title="MinGW-w64"></a><a href="https://www.mingw-w64.org/">MinGW-w64</a></h4><h4 id="Miniconda-—-conda-documentation"><a href="#Miniconda-—-conda-documentation" class="headerlink" title="Miniconda — conda documentation"></a><a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda — conda documentation</a></h4><h4 id="CUDA-Toolkit-Free-Tools-and-Training-NVIDIA-Developer"><a href="#CUDA-Toolkit-Free-Tools-and-Training-NVIDIA-Developer" class="headerlink" title="CUDA Toolkit - Free Tools and Training | NVIDIA Developer"></a><a href="https://developer.nvidia.com/cuda-toolkit">CUDA Toolkit - Free Tools and Training | NVIDIA Developer</a></h4><h4 id="Java-Downloads-Oracle-Singapore"><a href="#Java-Downloads-Oracle-Singapore" class="headerlink" title="Java Downloads | Oracle Singapore"></a><del><a href="https://www.oracle.com/sg/java/technologies/downloads/">Java Downloads | Oracle Singapore</a></del></h4><h3 id="文本图表类"><a href="#文本图表类" class="headerlink" title="文本图表类"></a>文本图表类</h3><h4 id="Microsoft-Office-2021-Microsoft-365"><a href="#Microsoft-Office-2021-Microsoft-365" class="headerlink" title="Microsoft Office 2021 | Microsoft 365"></a><a href="https://www.microsoft.com/en-us/microsoft-365/get-started-with-office-2021">Microsoft Office 2021 | Microsoft 365</a></h4><h4 id="Typora-—-a-markdown-editor-markdown-reader"><a href="#Typora-—-a-markdown-editor-markdown-reader" class="headerlink" title="Typora — a markdown editor, markdown reader."></a><a href="https://typora.io/">Typora — a markdown editor, markdown reader.</a></h4><h4 id="Adobe-Acrobat-a-complete-PDF-Solution-Adobe-Acrobat"><a href="#Adobe-Acrobat-a-complete-PDF-Solution-Adobe-Acrobat" class="headerlink" title="Adobe Acrobat a complete PDF Solution | Adobe Acrobat"></a><a href="https://www.adobe.com/sg/acrobat/complete-pdf-solution.html">Adobe Acrobat a complete PDF Solution | Adobe Acrobat</a></h4><h4 id="Drawboard-PDF-Real-time-PDF-markup-tools"><a href="#Drawboard-PDF-Real-time-PDF-markup-tools" class="headerlink" title="Drawboard PDF - Real-time PDF markup tools."></a><a href="https://www.drawboard.com/">Drawboard PDF - Real-time PDF markup tools.</a></h4><h4 id="飞书-——-先进团队，先用飞书。-feishu-cn"><a href="#飞书-——-先进团队，先用飞书。-feishu-cn" class="headerlink" title="飞书 —— 先进团队，先用飞书。 (feishu.cn)"></a><a href="https://www.feishu.cn/">飞书 —— 先进团队，先用飞书。 (feishu.cn)</a></h4><h4 id="Diagram-Software-and-Flowchart-Maker"><a href="#Diagram-Software-and-Flowchart-Maker" class="headerlink" title="Diagram Software and Flowchart Maker"></a><a href="https://www.diagrams.net/">Diagram Software and Flowchart Maker</a></h4><h4 id="AxSoft-–-AxMath-WYSIWYG-equation-editor-AxGlyph-scientific-graph-editor"><a href="#AxSoft-–-AxMath-WYSIWYG-equation-editor-AxGlyph-scientific-graph-editor" class="headerlink" title="AxSoft – AxMath WYSIWYG equation editor, AxGlyph scientific graph editor"></a><a href="https://www.axsoft.co/">AxSoft – AxMath WYSIWYG equation editor, AxGlyph scientific graph editor</a></h4><h4 id="Home-miktex-org"><a href="#Home-miktex-org" class="headerlink" title="Home (miktex.org)"></a><a href="https://miktex.org/">Home (miktex.org)</a></h4><h3 id="社交类"><a href="#社交类" class="headerlink" title="社交类"></a>社交类</h3><h4 id="WeChat-Free-messaging-and-calling-app"><a href="#WeChat-Free-messaging-and-calling-app" class="headerlink" title="WeChat - Free messaging and calling app"></a><a href="https://www.wechat.com/">WeChat - Free messaging and calling app</a></h4><h4 id="QQ官网"><a href="#QQ官网" class="headerlink" title="QQ官网"></a><a href="https://im.qq.com/index/">QQ官网</a></h4><h4 id="Telegram-Messenger"><a href="#Telegram-Messenger" class="headerlink" title="Telegram Messenger"></a><a href="https://telegram.org/">Telegram Messenger</a></h4><h4 id="Discord-Your-Place-to-Talk-and-Hang-Out"><a href="#Discord-Your-Place-to-Talk-and-Hang-Out" class="headerlink" title="Discord | Your Place to Talk and Hang Out"></a><a href="https://discord.com/">Discord | Your Place to Talk and Hang Out</a></h4><h4 id="腾讯会议官方——腾讯会议-会开会-tencent-com"><a href="#腾讯会议官方——腾讯会议-会开会-tencent-com" class="headerlink" title="腾讯会议官方——腾讯会议 会开会 (tencent.com)"></a><a href="https://meeting.tencent.com/">腾讯会议官方——腾讯会议 会开会 (tencent.com)</a></h4><h4 id="钉钉，让进步发生-dingtalk-com"><a href="#钉钉，让进步发生-dingtalk-com" class="headerlink" title="钉钉，让进步发生 (dingtalk.com)"></a><a href="https://www.dingtalk.com/">钉钉，让进步发生 (dingtalk.com)</a></h4><p><a href="https://www.thunderbird.net/en-US/">Thunderbird — Make Email Easier. — Thunderbird</a></p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="Microsoft-Edge"><a href="#Microsoft-Edge" class="headerlink" title="Microsoft Edge"></a><a href="https://www.microsoft.com/en-us/edge?exp=e519&form=MA13FJ">Microsoft Edge</a></h4><h4 id="Google-Chrome-Web-Browser"><a href="#Google-Chrome-Web-Browser" class="headerlink" title="Google Chrome Web Browser"></a><a href="https://www.google.com/intl/en_sg/chrome/">Google Chrome Web Browser</a></h4><h4 id="Download-Firefox-for-Desktop-—-from-Mozilla"><a href="#Download-Firefox-for-Desktop-—-from-Mozilla" class="headerlink" title="Download Firefox for Desktop — from Mozilla"></a><a href="https://www.mozilla.org/en-US/firefox/new/">Download Firefox for Desktop — from Mozilla</a></h4><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="Nutstore-Official-Website-jianguoyun-com"><a href="#Nutstore-Official-Website-jianguoyun-com" class="headerlink" title="Nutstore Official Website (jianguoyun.com)"></a><a href="https://www.jianguoyun.com/">Nutstore Official Website (jianguoyun.com)</a></h4><h4 id="阿里云盘-aliyundrive-com"><a href="#阿里云盘-aliyundrive-com" class="headerlink" title="阿里云盘 (aliyundrive.com)"></a><a href="https://www.aliyundrive.com/">阿里云盘 (aliyundrive.com)</a></h4><h4 id="百度网盘-baidu-com"><a href="#百度网盘-baidu-com" class="headerlink" title="百度网盘 (baidu.com)"></a><a href="https://pan.baidu.com/disk/main#/index?category=all">百度网盘 (baidu.com)</a></h4><h4 id="个人云储存空间-Microsoft-OneDrive登录下载使用-OneDrive"><a href="#个人云储存空间-Microsoft-OneDrive登录下载使用-OneDrive" class="headerlink" title="个人云储存空间-Microsoft OneDrive登录下载使用 | OneDrive"></a><a href="https://www.microsoft.com/zh-cn/microsoft-365/onedrive/online-cloud-storage">个人云储存空间-Microsoft OneDrive登录下载使用 | OneDrive</a></h4><h4 id="Zotero-Your-personal-research-assistant"><a href="#Zotero-Your-personal-research-assistant" class="headerlink" title="Zotero | Your personal research assistant"></a><a href="https://www.zotero.org/">Zotero | Your personal research assistant</a></h4><ul><li><a href="https://zhuanlan.zhihu.com/p/437714189">批量修改Zotero附件路径（位置） - 知乎 (zhihu.com)</a></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> itemAttachments <br><span class="hljs-keyword">set</span> path <span class="hljs-operator">=</span> replace(path,<span class="hljs-string">&#x27;AA&#x27;</span>,<span class="hljs-string">&#x27;aa&#x27;</span>) <br><span class="hljs-keyword">where</span> path <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%AA%&#x27;</span>;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 把AA换成aa<br></code></pre></td></tr></table></figure><h4 id="FileZilla-The-free-FTP-solution-filezilla-project-org"><a href="#FileZilla-The-free-FTP-solution-filezilla-project-org" class="headerlink" title="FileZilla - The free FTP solution (filezilla-project.org)"></a><a href="https://filezilla-project.org/">FileZilla - The free FTP solution (filezilla-project.org)</a></h4><h3 id="影音类"><a href="#影音类" class="headerlink" title="影音类"></a>影音类</h3><h4 id="Download-Adobe-Photoshop-Lightroom-Photo-editing-and-organising"><a href="#Download-Adobe-Photoshop-Lightroom-Photo-editing-and-organising" class="headerlink" title="Download Adobe Photoshop Lightroom | Photo editing and organising"></a><a href="https://www.adobe.com/sg/products/photoshop-lightroom.html">Download Adobe Photoshop Lightroom | Photo editing and organising</a></h4><h4 id="Edit-anything-you-imagine-in-video-Adobe-Premiere-Pro"><a href="#Edit-anything-you-imagine-in-video-Adobe-Premiere-Pro" class="headerlink" title="Edit anything you imagine in video | Adobe Premiere Pro"></a><a href="https://www.adobe.com/sg/products/premiere/campaign/pricing.html">Edit anything you imagine in video | Adobe Premiere Pro</a></h4><h4 id="Motion-graphics-software-Adobe-After-Effects"><a href="#Motion-graphics-software-Adobe-After-Effects" class="headerlink" title="Motion graphics software | Adobe After Effects"></a><a href="https://www.adobe.com/sg/products/aftereffects.html">Motion graphics software | Adobe After Effects</a></h4><h4 id="Official-Adobe-Photoshop-Photo-design-software"><a href="#Official-Adobe-Photoshop-Photo-design-software" class="headerlink" title="Official Adobe Photoshop - Photo &amp; design software"></a><a href="https://www.adobe.com/sg/products/photoshop.html">Official Adobe Photoshop - Photo &amp; design software</a></h4><h4 id="Global-Potplayer-daum-net"><a href="#Global-Potplayer-daum-net" class="headerlink" title="Global Potplayer (daum.net)"></a><a href="https://potplayer.daum.net/">Global Potplayer (daum.net)</a></h4><h4 id="qView-Practical-and-Minimal-Image-Viewer-interversehq-com"><a href="#qView-Practical-and-Minimal-Image-Viewer-interversehq-com" class="headerlink" title="qView - Practical and Minimal Image Viewer (interversehq.com)"></a><a href="https://interversehq.com/qview/">qView - Practical and Minimal Image Viewer (interversehq.com)</a></h4><h4 id="GIMP-GNU-Image-Manipulation-Program"><a href="#GIMP-GNU-Image-Manipulation-Program" class="headerlink" title="GIMP - GNU Image Manipulation Program"></a><a href="https://www.gimp.org/">GIMP - GNU Image Manipulation Program</a></h4><h3 id="专业相关"><a href="#专业相关" class="headerlink" title="专业相关"></a>专业相关</h3><h4 id="ENVI®-L3Harris®-Fast-Forward"><a href="#ENVI®-L3Harris®-Fast-Forward" class="headerlink" title="ENVI® | L3Harris® Fast. Forward."></a><a href="https://www.l3harris.com/all-capabilities/envi">ENVI® | L3Harris® Fast. Forward.</a></h4><h4 id="The-HDF-Group"><a href="#The-HDF-Group" class="headerlink" title="The HDF Group"></a><a href="https://www.hdfgroup.org/">The HDF Group</a></h4><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="KeePass-Password-Safe"><a href="#KeePass-Password-Safe" class="headerlink" title="KeePass Password Safe"></a><a href="https://keepass.info/">KeePass Password Safe</a></h4><h4 id="Releases-·-Fndroid-clash-for-windows-pkg-github-com"><a href="#Releases-·-Fndroid-clash-for-windows-pkg-github-com" class="headerlink" title="Releases · Fndroid&#x2F;clash_for_windows_pkg (github.com)"></a><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">Releases · Fndroid&#x2F;clash_for_windows_pkg (github.com)</a></h4><h4 id="CopyTranslator"><a href="#CopyTranslator" class="headerlink" title="CopyTranslator"></a><a href="https://copytranslator.github.io/">CopyTranslator</a></h4><h4 id="PicGo-is-Here-PicGo"><a href="#PicGo-is-Here-PicGo" class="headerlink" title="PicGo is Here | PicGo"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo is Here | PicGo</a></h4><h4 id="TreeSize-Free-JAM-Software-jam-software-com"><a href="#TreeSize-Free-JAM-Software-jam-software-com" class="headerlink" title="TreeSize Free | JAM Software (jam-software.com)"></a><a href="https://www.jam-software.com/treesize_free?ca=1">TreeSize Free | JAM Software (jam-software.com)</a></h4><h4 id="voidtools"><a href="#voidtools" class="headerlink" title="voidtools"></a><a href="https://www.voidtools.com/">voidtools</a></h4><h4 id="Planshit-ProjectEye-😎-一个基于20-20-20规则的用眼休息提醒Windows软件-github-com"><a href="#Planshit-ProjectEye-😎-一个基于20-20-20规则的用眼休息提醒Windows软件-github-com" class="headerlink" title="Planshit&#x2F;ProjectEye: 😎 一个基于20-20-20规则的用眼休息提醒Windows软件 (github.com)"></a><a href="https://github.com/Planshit/ProjectEye">Planshit&#x2F;ProjectEye: 😎 一个基于20-20-20规则的用眼休息提醒Windows软件 (github.com)</a></h4><h4 id="Twinkle-Tray-Brightness-Slider-for-Windows"><a href="#Twinkle-Tray-Brightness-Slider-for-Windows" class="headerlink" title="Twinkle Tray: Brightness Slider for Windows"></a><a href="https://twinkletray.com/">Twinkle Tray: Brightness Slider for Windows</a></h4><p><a href="https://github.com/wpdu/FnLock">wpdu&#x2F;FnLock: HP keyboard fn lock (github.com)</a></p><p><a href="https://github.com/avestura/EyesGuard">avestura&#x2F;EyesGuard: 👀 Windows Application for protecting your eyes (github.com)</a></p><p><a href="https://github.com/LC044/WeChatMsg">LC044&#x2F;WeChatMsg: 提取微信聊天记录，将其导出成HTML、Word、CSV文档永久保存，对聊天记录进行分析生成年度聊天报告 (github.com)</a></p><p><a href="https://mh-nexus.de/en/hxd/">HxD - Freeware Hex Editor and Disk Editor | mh-nexus</a></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><a href="https://www.jianguoyun.com/s/downloads/linux">Get Linux App - Nutstore - Cloud Storage|Cloud Disk|Network Disk|Synchronous|Backup|Unlimited Space|Free Network Hard Disk|Dropbox|Box|Onedrive|Google Drive (jianguoyun.com)</a></p><p><a href="https://sunlogin.oray.com/download/linux?type=personal">向日葵远程控制app官方下载 - 贝锐向日葵官网 (oray.com)</a></p><p><a href="https://code.visualstudio.com/Download">Download Visual Studio Code - Mac, Linux, Windows</a></p><p><a href="https://www.google.com/chrome/dr/download/?brand=SJWC&ds_kid=43700075934933123&gclid=Cj0KCQiAtOmsBhCnARIsAGPa5yZ6NwQy62q-ZVeeidPJM_CUsdDHn_PbWbUKfwuAceKLnYLzhs2tlRMaAp73EALw_wcB&gclsrc=aw.ds">Google Chrome - Download the Fast, Secure Browser from Google</a></p><p><a href="https://archive.org/download/clash_for_windows_pkg">clash_for_windows_pkg directory listing (archive.org)</a></p><p><a href="https://flameshot.org/">Flameshot | Open Source Screenshot Software</a></p><h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><h2 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h2><h3 id="忒修斯之PC"><a href="#忒修斯之PC" class="headerlink" title="忒修斯之PC"></a><del>忒修斯之PC</del></h3><p>小学六年级的时候买的电脑，惠普整机，被我用来学习、看视频和打CF，CPU是奔腾GXXXX（忘了），GPU是GT620 OEM，内存DDR3 2G, 存储是希捷HDD 500GB，显示器是惠普21寸 LCD 720p。</p><p><strong>第一次被电脑店坑！</strong>在我还在上初中的时候，电脑开不了机了，拿去电脑维修店，给我看了看说是电脑的机械硬盘坏了，给我换了一个120GB的固态硬盘。当时还跟我讲是<strong>固态硬盘</strong>坏了，给我换了个<strong>液态硬盘</strong>（我真的是。。。。）。当时的我对电脑的软硬件一无所知，也相信了他的“鬼话”。这个120GB的杂牌子硬盘要了我400块钱！店家说这个“坏了”的机械硬盘可以抵扣50块钱，但是我家人不同意，说要拿回来，于是这个机械硬盘就一直放在了家里。后来我了解了一点儿后发现，这个机械硬盘根本就没坏，拔了电脑的光驱之后，接在了电脑上继续用，一直用到了现在。但这个给我换的固态硬盘，去年（2022年）坏了。。。。大概用了六年的时间吧。</p><p><strong>第二次被电脑店坑！</strong>在我高考完之后（2019年），需要用到电脑查资料报志愿，而电脑很长时间没有开机了，这次需要用到的时候电脑已经开不了机了，不知道是什么原因，于是跟家人一起拿到电脑维修店去，检查了一番说是主板坏了，给我换了主板，MSI H61，要了我300块钱（而这个二手的主板在淘宝店只要100块钱）。并且说我电脑的CPU很老了，给我换了一个，只要了几十块钱。</p><p><strong>第三次被电脑店坑！</strong>在第二次修好的次日，电脑就又开不了机了，我这次是自己拿到店里去的，但是由于他不在店里，只能先放在店里。等我再去拿的时候，他说已经修好了，指着内存条上的电容就说电容掉了，给我焊上了一个电容，跟我要50块钱，但其实根本就没有任何焊接的痕迹。我当时非常气愤更他对峙，但我终究是没有什么办法，最后还是给了他。后来在淘宝上搜了一下，当时一根2GB的内存条才10多块钱。。。</p><p>修了三次电脑，被坑三次，当了三次冤大头，还都是在同一家店里，因为家附近只有这一个修电脑的地方。这三次被坑得到的教训就是：“再也不要相信这些第三方维修店”。““ 人类从历史中学到的唯一教训，就是没有从历史中吸取到任何教训。”因为后文还有一次被坑的经历。😅😭</p><table><thead><tr><th align="center"></th><th align="center">origin</th><th align="center">now</th></tr></thead><tbody><tr><td align="center">Operation System</td><td align="center">Windows 7</td><td align="center">Ubuntu 20.04</td></tr><tr><td align="center">CPU</td><td align="center">Intel Pentium Gxxxx</td><td align="center">Intel Core I3-3240</td></tr><tr><td align="center">GPU</td><td align="center">NVIDIA GT620</td><td align="center">NVIDIA GT620</td></tr><tr><td align="center">Memory</td><td align="center"></td><td align="center">ADATA 8GB</td></tr><tr><td align="center">Mainboard</td><td align="center">HP</td><td align="center">MSI H61</td></tr><tr><td align="center">Power</td><td align="center">Great Wall</td><td align="center"></td></tr><tr><td align="center">Disk</td><td align="center">Seageta HDD 500GB</td><td align="center">Colorful SSD 120GB</td></tr><tr><td align="center">CPU Fan</td><td align="center">Intel</td><td align="center">Intel(new)</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>2023年暑假回家，电脑坏了，觉得这台电脑也用不到了，就打算不再修了，也没有什么维修的价值了。巧的是下午就有一个收电子废品的，紧接着就给买了。除了硬盘和屏幕外，就买了30块钱，唉。再见了，陪伴我这么久的电脑。</p><h3 id="捡破烂的PC"><a href="#捡破烂的PC" class="headerlink" title="捡破烂的PC"></a><del>捡破烂的PC</del></h3><table><thead><tr><th align="center"></th><th align="center">Detail</th></tr></thead><tbody><tr><td align="center">Operation System</td><td align="center">Windows 10</td></tr><tr><td align="center">CPU</td><td align="center">Intel Xeon E3-1230v2</td></tr><tr><td align="center">GPU</td><td align="center">NVIDIA GTX650ti (GALAX)&#x2F;NVIDIA GTX1060 3G (GALAX)</td></tr><tr><td align="center">Memory</td><td align="center">Samsung DDR3 8GB</td></tr><tr><td align="center">Mainboard</td><td align="center">GIGABYTE B75</td></tr><tr><td align="center">Power</td><td align="center">Segotep S7 400W</td></tr><tr><td align="center">Disk</td><td align="center">Colorful SSD 120GB</td></tr><tr><td align="center">CPU Fan</td><td align="center">九州风神 玄冰300</td></tr></tbody></table><p>2023暑假刚开始的时候就打算换个好一点儿的GPU，然后把电脑接到电视上面，这样就能在电视上玩一玩游戏，也能看看电视什么的。看来看去买了一个二手影驰1060 3G，花费380块钱，用了一段时间，挺好用的。由于暑假的时候一直都不在家，很久很久没开电脑，再看的时候电脑就开不来机了，感觉可能是电源的问题，去问了淘宝店家，结果电源还可以保修，就把电源寄修了。两周多发了一个好的电源回来，结果还是不行，遂放弃维修，直接将电脑拆了。至于新买的显卡，自己留着也没什么用了，于是就带到了学校，在学校二手平台发了发，卖给了一个同学，买了300元。再见了，自己攒的这台洋垃圾~</p><p>这台“破烂”电脑除了电源跟散热器之外全是二手的，二手的品质是真的不行，一段时间没开机之后再开机就会无限重启，插拔内存条无数次之后才能开机。<strong>二手的品质不能相信啊！</strong></p><h3 id="NPU-481"><a href="#NPU-481" class="headerlink" title="NPU 481"></a>NPU 481</h3><p>这不是我的电脑，这是我在教研室工位的电脑，它将陪伴我三年的时间，我也想记录一下。</p><table><thead><tr><th align="center"></th><th align="center">Detail</th></tr></thead><tbody><tr><td align="center">Operation System</td><td align="center">Windows 10&#x2F;Ubuntu 20.04</td></tr><tr><td align="center">CPU</td><td align="center">Intel Core I5-9400F 2.90GHz</td></tr><tr><td align="center">GPU</td><td align="center">NVIDIA GTX1050ti (GALAX) 4GB</td></tr><tr><td align="center">Memory</td><td align="center">DDR4 24GB</td></tr><tr><td align="center">Mainboard</td><td align="center">GIGABYTE</td></tr><tr><td align="center">Power</td><td align="center">GreatWall</td></tr><tr><td align="center">Disk</td><td align="center">KIOXIA 480GB&#x2F;KIOXIA 480GB&#x2F;KINGSTON 240GB&#x2F;Seageta HDD 1000GB</td></tr><tr><td align="center">CPU Fan</td><td align="center">Intel</td></tr></tbody></table><h2 id="laptop"><a href="#laptop" class="headerlink" title="laptop"></a>laptop</h2><h4 id="Dell-G3-3590-2019"><a href="#Dell-G3-3590-2019" class="headerlink" title="Dell G3 3590 2019"></a>Dell G3 3590 2019</h4><table><thead><tr><th align="center"></th><th align="center">origin</th><th align="center">now</th></tr></thead><tbody><tr><td align="center">Operation System</td><td align="center">Windows 10 Home</td><td align="center">Windows 11 Pro</td></tr><tr><td align="center">CPU</td><td align="center">Intel Core I5-9300H 2.4GHz</td><td align="center"></td></tr><tr><td align="center">GPU</td><td align="center">NVIDIA GTX1650 (4GB)</td><td align="center"></td></tr><tr><td align="center">GPU</td><td align="center">NVIDIA GTX1650 (4GB)</td><td align="center"></td></tr><tr><td align="center">Memory</td><td align="center">Crucial 8GB 2666MHz</td><td align="center">SK hynix 32GB 2666MHz</td></tr><tr><td align="center">Mainboard</td><td align="center">Dell</td><td align="center"></td></tr><tr><td align="center">Battery</td><td align="center">Dell</td><td align="center">Dell(new)</td></tr><tr><td align="center">Disk</td><td align="center">TOSHIBA 256GB SSD + 1TB HDD</td><td align="center">ZhiTai TiPlus 5000 1TB + SC001 Active 1TB</td></tr><tr><td align="center">Fans</td><td align="center">Dell</td><td align="center"></td></tr><tr><td align="center">Wireless Ddapters</td><td align="center">Qualcomm QCA9377</td><td align="center"></td></tr></tbody></table><p>糟心事，开学不久电脑就坏了！！！啊啊啊啊！！！电脑显示的症状是开机不多时间，外接显示器会黑屏，电脑卡住，然后蓝屏，重启之后独立显卡显示为掉了。因为暑假在家的时候，基本没有外界过显示器，也基本上没有用过独立显卡，在家里的时候没有出现过这种情况。在家里的时候电脑也有点儿异样，就是电脑特别特别烫，风扇转得很响。</p><p>三月底在学校的时候在换内存的时候把硅脂也换了，在换过硅脂之后，电脑的散热扇不转了，我当时都怀疑是清灰的时候把风扇搞坏了，因为怕把CPU和GPU烧了，烤机也只烤几分钟。这时电脑温度很高了但是风扇依然不转，只能是判定为散热扇坏了。在淘宝下单了散热扇之后就只能用风扇吹着将就着用。网上会宿舍之后因为不死心就又再次开机用了用，结果发现，风扇根本就没有坏，只是电脑的温度并不高，风扇没必要转。之前电脑的风扇一直在转原来是之前的硅脂都干了，电脑散热存在问题，积热严重。而换了硅脂之后，风扇不转，就是因为硅脂的导热性很好，温度低了。在整个毕设期间，电脑表现一直很正常。但是暑假在家电脑就出现了温度不正常的现象，因为在家的时候用电脑用得一直不多，也没有很在意。开学的前一天把电脑拆了，打算再换一次硅脂看看，但是硅脂并没有干，重新换了硅脂之后，电脑的温度依然是很高。</p><p><strong>第三次被电脑店坑！</strong></p><h4 id="Lenovo-ThinkBook-16-2023"><a href="#Lenovo-ThinkBook-16-2023" class="headerlink" title="Lenovo ThinkBook 16+ 2023"></a>Lenovo ThinkBook 16+ 2023</h4><table><thead><tr><th align="center"></th><th align="center">origin</th><th align="center">now</th></tr></thead><tbody><tr><td align="center">Operation System</td><td align="center">Windows 11 Home</td><td align="center"></td></tr><tr><td align="center">CPU</td><td align="center">AMD Ryzen 7 7480H</td><td align="center"></td></tr><tr><td align="center">GPU0</td><td align="center">AMD Radeon 780M Graphics</td><td align="center"></td></tr><tr><td align="center">GPU</td><td align="center">NVIDIA GeForce RTX 4050 Laptop GPU</td><td align="center"></td></tr><tr><td align="center">Memory</td><td align="center">SK hynix 32GP LPDDR5 6400MHz（8GB×4）</td><td align="center"></td></tr><tr><td align="center">Mainboard</td><td align="center">Lenovo</td><td align="center"></td></tr><tr><td align="center">Battery</td><td align="center">Lenovo</td><td align="center"></td></tr><tr><td align="center">Disk</td><td align="center">UMIS 1TB</td><td align="center"></td></tr><tr><td align="center">Fans</td><td align="center">Lenovo</td><td align="center"></td></tr><tr><td align="center">Wireless Dapters</td><td align="center">MediaTek Wi-Fi 6 MT7921</td><td align="center"></td></tr></tbody></table><h2 id="tablet"><a href="#tablet" class="headerlink" title="tablet"></a>tablet</h2><h4 id="Surface-Go-2018"><a href="#Surface-Go-2018" class="headerlink" title="Surface Go 2018"></a>Surface Go 2018</h4><p><a href="https://cosmicdusty.cc/post/Tools/SurfaceGo/">SurfaceGo - MurphyHou (cosmicdusty.cc)</a></p><table><thead><tr><th align="center"></th><th align="center">origin</th><th align="center">now</th></tr></thead><tbody><tr><td align="center">Operation System</td><td align="center">Windows 10s</td><td align="center">Windows 10 Home</td></tr><tr><td align="center">CPU</td><td align="center">Intel Pentium Gold 4415Y</td><td align="center"></td></tr><tr><td align="center">GPU</td><td align="center">Intel HD Graphics 615</td><td align="center"></td></tr><tr><td align="center">Memory</td><td align="center">8GB RAM</td><td align="center"></td></tr><tr><td align="center">Mainboard</td><td align="center">Microsoft</td><td align="center"></td></tr><tr><td align="center">Power</td><td align="center">Microsoft</td><td align="center"></td></tr><tr><td align="center">Disk</td><td align="center">128GB SSD</td><td align="center"></td></tr></tbody></table><h4 id="HUAWEI-MatePad-Pro-12-6-2021"><a href="#HUAWEI-MatePad-Pro-12-6-2021" class="headerlink" title="HUAWEI MatePad Pro 12.6 2021"></a>HUAWEI MatePad Pro 12.6 2021</h4><p><a href="https://cosmicdusty.cc/post/Tools/HUAWEIMatePadPro/">HUAWEI-MatePad-Pro - MurphyHou (cosmicdusty.cc)</a></p><table><thead><tr><th align="center"></th><th align="center">Detail</th></tr></thead><tbody><tr><td align="center">Operation System</td><td align="center">HarmonyOS</td></tr><tr><td align="center">SoC</td><td align="center">HUAWEI Kirin 9000E</td></tr><tr><td align="center">CPU</td><td align="center">1 × Cortex-A77 @3.13GHz + 3 × Cortex-A77 @2.54GHz + 4 × Cortex-A55 @2.05GHz</td></tr><tr><td align="center">GPU</td><td align="center">22 核 Mali-G78</td></tr><tr><td align="center">NPU</td><td align="center">大核 NPU + 微核 NPU（神经网络处理单元）</td></tr><tr><td align="center">Memory</td><td align="center">8GB</td></tr><tr><td align="center">Disk</td><td align="center">128GB</td></tr></tbody></table><h2 id="外设"><a href="#外设" class="headerlink" title="外设"></a>外设</h2><p>&emsp;&emsp;之前只写了电脑，但其实外设也是很重要的工具。</p><h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20240109_131249.jpg" alt="IMG_20240109_131249"></p><h3 id="Dell-KM117"><a href="#Dell-KM117" class="headerlink" title="Dell KM117"></a>Dell KM117</h3><h3 id="HP-HSA-P003K"><a href="#HP-HSA-P003K" class="headerlink" title="HP HSA-P003K"></a>HP HSA-P003K</h3><p>细心的你可能已经发现了，这两把键盘的按键怎么不一样呢？仔细看的话，就又能发现，上面的那一把键盘上出现了一些奇奇怪怪的符号！如你所见，我买了一把德文键盘！这把键盘的型号是惠普HSA-P003K，且这是一个在德语地区销售的版本。为什么我要买这样一把键盘呢？</p><p>前段时间我身边的好友们都换了新键盘，一直秉承着“键盘能用就行”准则的我也有了一丝丝的动摇，我也想换一把新键盘了。之前在用的是戴尔KM117，一个标准的办公键鼠套装，键盘是火山口结构的薄膜键盘。这把键鼠套装挺不错的，我前前后后买了3套，放在了不同的地方使用，现在工位上在用的这个键盘已经用了三四年时间了，常用的按键上面已经磨得发亮了。身边好友们都比较喜欢机械键盘，但我对机械键盘并没有什么感觉，喜欢不上来，而对笔记本电脑上的剪刀脚结构的薄膜键盘情有独钟。</p><p>罗技MX Keys是种类型的键盘的天花板，但高昂的售价直接劝退我，所以我前段时间一直在搜索一个合我心意的键盘，直到我看到了这个视频：<a href="https://www.bilibili.com/video/BV173411A7cb/?spm_id_from=333.337.search-card.all.click&vd_source=6d46640a443a49f050af078d1f65143e">【电脑配件】惠普剪刀脚与戴尔剪刀脚打成平手？真实上手对比视频！全B站唯一对比视频_哔哩哔哩_bilibili</a>，那就是它了！HP HSA-P003K！不过，略有遗憾的是，这把键盘并没有中文版本，在网上我看到了韩文，日文，希伯来语，美版，欧版……太多太多了，欧版德语键盘的这个比较便宜，于是我就选择了这个！</p><p>用了一下，对我个人而言很不错，是我喜欢的那种感觉，触发力度合适，反馈力度合适，没有连带的误触，快打起来也非常安静……至于键盘上的符号与文中键盘不一样的问题，这确实是有一点儿奇怪，因为我写C++和Pytthon比较多，需要打一些符号，键盘上画着是“（”但打出来的却是“*”……那要怎么用这个键盘呢？有一个方法是可以贴上键盘的贴纸，把不对应的符号给改过来；另一个方法就是盲打，不要看上面画的什么，就根据用中文键盘的感觉，去按对应的符号的键位就好了。后者是我现在在用的方法，用起来其实也没有什么大问题。另外，这其实是一个键鼠套装，但鼠标的手感稀烂，纯属赠品！</p><p>总的来说，八十来块钱的价格能带来这样的体验，那是相当的棒了！当然，键盘这个东西，每个人都有自己喜欢的手感，试一试再做决定才是最应该的事情！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20240109_142241.jpg" alt="IMG_20240109_142241"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20240109_133226.jpg" alt="IMG_20240109_133226"></p><h3 id="logitech-k380"><a href="#logitech-k380" class="headerlink" title="logitech k380"></a>logitech k380</h3><h3 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h3><h3 id="ASUS-WT425"><a href="#ASUS-WT425" class="headerlink" title="ASUS WT425"></a>ASUS WT425</h3><h3 id="Dell-KM117-1"><a href="#Dell-KM117-1" class="headerlink" title="Dell KM117"></a>Dell KM117</h3><h3 id="HP-HSA-P003M"><a href="#HP-HSA-P003M" class="headerlink" title="HP HSA-P003M"></a>HP HSA-P003M</h3><h3 id="显示器"><a href="#显示器" class="headerlink" title="显示器"></a>显示器</h3><h3 id="AOC-I2490PXH5"><a href="#AOC-I2490PXH5" class="headerlink" title="AOC I2490PXH5"></a>AOC I2490PXH5</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20240109_135646.jpg" alt="IMG_20240109_135646"></p><h3 id="SAMSUNG-S24R352F"><a href="#SAMSUNG-S24R352F" class="headerlink" title="SAMSUNG S24R352F"></a>SAMSUNG S24R352F</h3>]]></content>
    
    
    <categories>
      
      <category>高效工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子设备</tag>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人的一生要做多少决定啊</title>
    <link href="/blog/post/MyLife/HowtoMakeDecisions/"/>
    <url>/blog/post/MyLife/HowtoMakeDecisions/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">“我们懂了很多的道理，却依旧过不好这一生。”</p><p class="note note-second">虽然现在已经22岁了，但我一直都是在学校里待着，很多困难与琐事都是父母在顶着，我所作出的选择与决定很多时候都是很不成熟的，有时候想起来，若让我自己独当一面，真的觉得好难啊！年轻时看人生也许觉得很难，或许老了再回看只觉得那些所谓的困难其实也就那样吧。</p><h1 id="👨‍🎓学业"><a href="#👨‍🎓学业" class="headerlink" title="👨‍🎓学业"></a>👨‍🎓学业</h1><p>我目前本科都还没毕业，但如果没有什么意外的话，我最起码是985本硕，虽然学校没有特别好，但其实学历方面基本上不存在什么门槛了，对很大一批人都在学历上有一定程度是“碾压”。硕士之后还会再读吗？去哪儿读？这是我在这个寒假考虑的比较多的一件事情，我觉得还是<strong>要读</strong>。参考了老师和几个同学的想法，我想或许选择去读博士，是一个不错的选择。用人生中最美好、最有干劲、最富激情的这十年，去做这件很了不起的事情，我觉得很值得！但真正做这个决定，也许是在我读硕士研究生的第一年或第二年，在那时，希望我可以大胆地做出决定。</p><h1 id="💻事业"><a href="#💻事业" class="headerlink" title="💻事业"></a>💻事业</h1><p>这个假期回到家，发现周边的朋友们，就只有我和我的一个发小<em>（医学研究生）</em>在读书了，其他人中有的毕业不打算继续读了，去找工作去了；有的已经工作稳定，生活自给自足了；有的已经成家立业，老婆孩子热炕头了；有的也对工作迷茫，打算换工作了；有的只知道吃喝玩乐，混迹社会……</p><p>而我或许要三五甚至十年之后才能去工作赚钱，我问我妈，如果我真的要十年后才能赚钱，那时候爸妈已经六十多了，那该怎么办？</p><p>前段时间裁员潮席卷整个互联网等各大行业，寒气传递到了每个行业，每一个人，就业形势不太乐观。虽然我在这个将要来的毕业季并不需要去找工作，但这波寒潮或许会持续到我未来工作的那个时候。我这个假期也在想，未来我回去哪里工作呢？</p><p>我一开始的想法非常坚定，去华为，去百度，去字节跳动……用二三十岁的时光在大厂狂卷，然后退居二线。但理性来看，虽然全网都在说互联网工资高，但互联网的头部效应太明显了，真的会有多少人拿到了那个水平的工资和福利。我身边也有互联网从业者，基层员工拿的工资也没有比其他行业高多少是，但受到的压力却高了好多倍。</p><p>我的内心动摇了，另外产生动摇的还有一件事，就是我看到了入职央企的专科毕业生过的生活是那么的滋润，我酸了。</p><p>我研究生所学专业最对口的方向是“航天”，航天研究所是一份讲<code>情怀</code>的工作，研究所对学历的要去很高，比较好的所目前已经非博士生不收了。由于我现在还不认识在航天口工作的人，我现在只能根据网上的信息进行判断，只能说是“褒贬不一”。或许得深入了解之后才能做判断。</p><p>在山东，宇宙的今天的“公务员”！或许我也会走向考公大军吗？我也不知道……</p><p>在高校当个老师？我也不知道……</p><blockquote><p>安慰自己一句，未来还很远，不要整天想太多，搞得很累了，我知道自己要担负起许多的责任与担当，但有时候确实得走一步看一步，越努力越幸运。</p></blockquote><h1 id="👨‍👩‍👧‍👦家庭"><a href="#👨‍👩‍👧‍👦家庭" class="headerlink" title="👨‍👩‍👧‍👦家庭"></a>👨‍👩‍👧‍👦家庭</h1><h2 id="👨👩父母"><a href="#👨👩父母" class="headerlink" title="👨👩父母"></a>👨👩父母</h2><p>父母是我永远放不下的牵挂啊。</p><blockquote><p>“父母在，不远游，游必有方。”</p></blockquote><p>父母总是无条件地支持我的任何想法，希望我做的决定是好的吧，即使是坏的决定，也要努力让不好的结果变成好的结果。</p><h2 id="👧👦兄弟姐妹"><a href="#👧👦兄弟姐妹" class="headerlink" title="👧👦兄弟姐妹"></a>👧👦兄弟姐妹</h2><p>在家靠有亲缘关系的兄弟姐妹，在外靠没有亲缘关系的兄弟姐妹。</p><p>总希望有那么一两个情谊契合、亲如兄弟的朋友，既为兄弟，亦是知己，患难始终，休戚与共。</p><h2 id="💖恋爱"><a href="#💖恋爱" class="headerlink" title="💖恋爱"></a>💖恋爱</h2><p>恋爱是个老大难的问题啊，虽然整日喊着找个好看的女朋友，找个知心的女朋友什么的，但真正去找的话，又有些许怯懦。春节期间见了很多亲戚，他们也没有很高的学历和很新潮的观念，却一致地建议我早一点找个对象，早一点结婚。这个寒假我也见了哥哥、姐姐们的婚后相处方式，吵架拌嘴如同家常便饭，磨合磨合着两个人就那样接受了彼此，让我对婚姻有了不小的期待，这也是挺美好的。</p><p>每次和<a href="https://mfqwq.cn/">Murphy</a>聊到这个话题，我俩总是感叹，像我们这样的人，都被别人降维打击了，一次次地就不想这个事情了。Murphy抱怨我不是女生，我抱怨Murphy不是女生。我们曾开玩笑说“疫情结束后再找对象”，现在疫情是不是结束了，是不是应该大胆一点了。</p><h1 id="🏃‍♂️健康"><a href="#🏃‍♂️健康" class="headerlink" title="🏃‍♂️健康"></a>🏃‍♂️健康</h1><p>仗着自己年轻，总是胡作为非，老了会后悔的。</p><p>正好返校后的这个大四学期没有课，只有一个期末考试和毕设，学习压力没有那么大，空余时间也不少，去做一点点改变吧。</p><blockquote><ol><li>早睡早起，一日三餐。少油少肉少盐少糖，多蛋白多青菜多水果多开水。</li><li>不长时间连续看屏幕，不长时间高音量带耳机，不长时间坐那儿一动不动。</li><li>早上去晨走，晚上去夜跑。去和朋友们约羽毛球、乒乓球、篮球、足球……</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书影音2023</title>
    <link href="/blog/post/MyLife/BookMovieMusic2023/"/>
    <url>/blog/post/MyLife/BookMovieMusic2023/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Todo List</p><p>红辣椒，李米的猜想，心灵猎人，被讨厌的勇气</p><p>博雯推荐：</p><ul><li><a href="https://www.bilibili.com/bangumi/play/ss30729">爱德华大夫-电影-高清在线观看-bilibili-哔哩哔哩</a></li><li>汉密尔顿</li><li>摇滚莫扎特</li><li>摇滚红与黑</li></ul></blockquote><h1 id="🎥《布达佩斯大饭店》"><a href="#🎥《布达佩斯大饭店》" class="headerlink" title="🎥《布达佩斯大饭店》"></a>🎥《布达佩斯大饭店》</h1><blockquote><p>跟博雯在线一起看的电影。</p></blockquote><table><thead><tr><th align="center">🧑导演：【美国】韦斯·安德森</th><th align="center">📌类别：剧情</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.12.03</td></tr></tbody></table><p>极致的色彩与构图！演员阵容很强，出现了好多好多熟悉的面孔。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2553388598.webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2175449045.webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2497604373.webp"></div></div></div><h1 id="🎶-《独家记忆》"><a href="#🎶-《独家记忆》" class="headerlink" title="🎶 《独家记忆》"></a>🎶 《独家记忆》</h1><blockquote><p>来自博雯的分享</p></blockquote><table><thead><tr><th align="center">🧑歌手：【中国】陈小春</th><th align="center">📌类别：流行</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.11.27</td></tr></tbody></table><iframe src="//player.bilibili.com/player.html?aid=631683579&bvid=BV1rb4y1k74n&cid=369835890&p=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><h1 id="🎥《菊次郎的夏天》"><a href="#🎥《菊次郎的夏天》" class="headerlink" title="🎥《菊次郎的夏天》"></a>🎥《菊次郎的夏天》</h1><blockquote><p>跟博雯在线一起看的电影。<br>同时按下播放键，开着语音，一起看电影，是一种很奇妙的体验耶~</p></blockquote><table><thead><tr><th align="center">🧑导演：【日本】北野武</th><th align="center">📌类别：剧情</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.11.25</td></tr></tbody></table><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2640319066.webp"></p><h1 id="🎶-《多少》"><a href="#🎶-《多少》" class="headerlink" title="🎶 《多少》"></a>🎶 《多少》</h1><blockquote><p>来自博雯的分享</p></blockquote><table><thead><tr><th align="center">🧑歌手：【中国】阿云嘎（《父辈的荣耀》片尾曲）</th><th align="center">📌类别：流行</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.11</td></tr></tbody></table><iframe src="//player.bilibili.com/player.html?aid=232991183&bvid=BV13841167ns&cid=1251625290&p=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><h1 id="🎥《河边的错误》"><a href="#🎥《河边的错误》" class="headerlink" title="🎥《河边的错误》"></a>🎥《河边的错误》</h1><blockquote><p>跟博雯去影院看的电影</p></blockquote><table><thead><tr><th align="center">🧑导演：【中国】魏书钧</th><th align="center">📌类别：悬疑</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.11.17</td></tr></tbody></table><p>在影院里没看懂，出来看豆瓣影评才看懂是讲的什么事情。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2891246896.webp"></p><h1 id="🎶-《想把我唱给你听》"><a href="#🎶-《想把我唱给你听》" class="headerlink" title="🎶 《想把我唱给你听》"></a>🎶 《想把我唱给你听》</h1><table><thead><tr><th align="center">🧑歌手：【中国】老狼、王婧</th><th align="center">📌类别：流行</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.11</td></tr></tbody></table><iframe src="//player.bilibili.com/player.html?aid=910049968&bvid=BV15M4y1y7xD&cid=1096283456&p=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><h1 id="📚《99-诱拐》"><a href="#📚《99-诱拐》" class="headerlink" title="📚《99%诱拐》"></a>📚《99%诱拐》</h1><table><thead><tr><th align="center">🧑作者：【日本】冈岛二人</th><th align="center">📌类别： 悬疑&#x2F;小说</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.11.07</td></tr></tbody></table><p>&emsp;&emsp;上一次读“冈岛二人”的作品还是在2021年的时候了，当时读了就觉得这根本看不出来是这是两位作家和著的一本书。之后转向微信读书后再去搜索冈岛的作品时，发现都没上架。后来看到《诱拐》这本书后，就很兴奋，立马决定去读。但这次并没有如之前那般，一口气就读完。研究生开学后，受一些琐事和要适应新环境等因素的英语，断断续续地在读这本书。不过，还是在一个晚上，在教研室摸鱼，趁这个时候，一口气把这部作品读完了。这本书其实并没有很复杂，但是我在读到一半的时候，就差不多能知道这是个什么事情了。人工智能的理念在现在已经并不新鲜了，问答机器人也逐步成为现实。这部书中，使用了一个程序来完成绑架案，虽然这个程序并不具有如当前一般的智能，而是人在背后的操控。这并不是一本科幻作品，而是一部悬疑作品，作者要考虑其可行性。看到这本书的介绍是30年前的一本书，就觉得作者的想法还是挺超前的了。</p><h1 id="🎬《神探夏洛克-Season-1-2-3-4-》"><a href="#🎬《神探夏洛克-Season-1-2-3-4-》" class="headerlink" title="🎬《神探夏洛克(Season 1,2,3&amp;4)》"></a>🎬《神探夏洛克(Season 1,2,3&amp;4)》</h1><table><thead><tr><th align="center">🧑作者：【英国】BBC</th><th align="center">📌类别： 悬疑&#x2F;英剧</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.10.19</td></tr></tbody></table><p>在教研室疯狂刷剧😅</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/v2-c4f6290dfe116a1f7368c97983f62d9b_720w.webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p612565074.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p789477059.webp"></div></div></div><h1 id="🎮《无主之地3》"><a href="#🎮《无主之地3》" class="headerlink" title="🎮《无主之地3》"></a>🎮《无主之地3》</h1><table><thead><tr><th align="center">🧑创作：Gearbox Software开发，2K Games发行</th><th align="center">📌类别： FPS、RPG</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">🎮时间：2023.10</td></tr></tbody></table><p>《无主之地3》比《无主之地2》做的更精美了。但我也只玩了几个小时，后面就没怎么玩游戏了。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/89971897.jpg"></p><h1 id="📚《高智商犯罪》"><a href="#📚《高智商犯罪》" class="headerlink" title="📚《高智商犯罪》"></a>📚《高智商犯罪》</h1><table><thead><tr><th align="center">🧑作者：【中国】紫金陈</th><th align="center">📌类别： 悬疑&#x2F;小说</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.9.9</td></tr></tbody></table><p>网络小说感太重了！</p><h1 id="🎥《活着》"><a href="#🎥《活着》" class="headerlink" title="🎥《活着》"></a>🎥《活着》</h1><table><thead><tr><th align="center">🧑导演：【中国】张艺谋</th><th align="center">📌类别：剧情&#x2F;历史</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.08.31</td></tr></tbody></table><p>整体很不错，但没有小说那么震撼、感染、有冲击力。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2533776835.webp"></p><h1 id="🎥《封神第一部：朝歌风云》"><a href="#🎥《封神第一部：朝歌风云》" class="headerlink" title="🎥《封神第一部：朝歌风云》"></a>🎥《封神第一部：朝歌风云》</h1><table><thead><tr><th align="center">🧑导演：【中国】乌尔善</th><th align="center">📌类别：神话&#x2F;动作&#x2F;史诗</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.08.25</td></tr></tbody></table><p>视听不错，叙事差点事。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2895564900.webp"></p><h1 id="🎬《真探》"><a href="#🎬《真探》" class="headerlink" title="🎬《真探》"></a>🎬《真探》</h1><table><thead><tr><th align="center">🧑作者：【美国】凯瑞·福永</th><th align="center">📌类别： 悬疑&#x2F;美剧</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.8.19</td></tr></tbody></table><p>不愧为悬疑美剧榜TOP1!</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2169873384.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2168221025.webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2226071458.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2167203882.webp"></div></div></div><h1 id="📚《数独》"><a href="#📚《数独》" class="headerlink" title="📚《数独》"></a>📚《数独》</h1><table><thead><tr><th align="center">🧑作者：【中国】慕容漪汐</th><th align="center">📌类别： 数独</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.8.15</td></tr></tbody></table><h1 id="📚《骆驼祥子》"><a href="#📚《骆驼祥子》" class="headerlink" title="📚《骆驼祥子》"></a>📚《骆驼祥子》</h1><table><thead><tr><th align="center">🧑作者：【中国】老舍</th><th align="center">📌类别： 文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.8.15</td></tr></tbody></table><p>城市贫民的悲剧命运。</p><blockquote><p>◆  骆驼祥子</p><ul><li>祥子，在与“骆驼”这个外号发生关系以前，是个较比有自由的洋车夫，这就是说，他是属于年轻力壮，而且自己有车的那一类：自己的车，自己的生活，都在自己手里，高等车夫。</li></ul><p>2023&#x2F;8&#x2F;10 发表想法<br>现在又何尝不是呢？<br>每个时代都有这样那样的阶层，而阶层的跨越往往是那么难。</p><ul><li><p>一年，二年，至少有三四年；一滴汗，两滴汗，不知道多少万滴汗，才挣出那辆车。从风里雨里的咬牙，从饭里茶里的自苦，才赚出那辆车，那辆车是他的一切挣扎与困苦的总结果与报酬，像身经百战的武士的一颗徽章。</p></li><li><p>祥子的手哆嗦得更厉害了，揣起保单，拉起车，几乎要哭出来。拉到个僻静地方，细细端详自己的车，在漆板上试着照照自己的脸！越看越可爱，就是那不尽合自己的理想的地方也都可以原谅了，因为已经是自己的车了。</p></li><li><p>拉了半年，他的希望更大了：照这样下去，干上二年，至多二年，他就又可以买辆车，一辆，两辆……他也可以开车厂子了！</p></li><li><p>外面的谣言他不大往心里听，什么西苑又来了兵，什么长辛店又打上了仗，什么西直门外又在拉伕，什么齐化门已经关了半天，他都不大注意。</p></li><li><p>春雨不一定顺着人民的盼望而降落，可是战争不管有没有人盼望总会来到。</p></li><li><p>还没拉到便道上，祥子和光头的矮子连车带人都被十来个兵捉了去！</p></li><li><p>他一天到晚只知道怎样把最后的力气放在手上脚上，心中成了块空白。</p></li><li><p>到了夜晚，头一挨地他便像死了过去，而永远不再睁眼也并非一定是件坏事。</p></li><li><p>毛病似乎是在他太老实，老实就必定吃亏，没有情理可讲！</p></li><li><p>原先，他以为拉车是他最理想的事，由拉车他可以成家立业。现在他暗暗摇头了。</p></li><li><p>在小马儿身上，他似乎看见了自己的过去；在老者身上，似乎看到了自己的将来！</p></li><li><p>这样一想，对虎妞的要胁，似乎不必反抗了；反正自己跳不出圈儿去，什么样的娘们不可以要呢？况且她还许带过几辆车来呢，干吗不享几天现成的福！看透了自己，便无须小看别人，虎妞就是虎妞吧，什么也甭说了！</p></li><li><p>干脆对你说吧，姓曹的是乱党，拿住就枪毙，他还是跑不了！</p></li><li><p>处处洁白，只有他的身后留着些大黑脚印。</p></li><li><p>一场雨，也许多添几个妓女或小贼，多有些人下到监狱去；大人病了，儿女们作贼作娼也比饿着强！雨下给富人，也下给穷人；下给义人，也下给不义的人。其实，雨并不公道，因为下落在一个没有公道的世界上。</p></li><li><p>爱与不爱，穷人得在金钱上决定，“情种”只生在大富之家。</p></li><li><p>因为他明白了这些事并非是只为糟蹋钱，而是有些必须尽到的人情。</p></li><li><p>看着一条瘦得出了棱的狗在白薯挑子旁边等着吃点皮和须子，他明白了他自己就跟这条狗一样，一天的动作只为捡些白薯皮和须子吃。将就着活下去是一切，什么也无须乎想了。</p></li><li><p>原先他以为拉车是拉着条人命，一不小心便有摔死人的危险。现在，他故意的耍坏；摔死谁也没大关系，人都该死！</p></li><li><p>礼教之邦的人民热烈的爱看杀人呀。</p></li><li><p>他已不是为自己思索，他已成为钱的附属物，一切要听它的支配。</p></li><li><p>不敢再在街市上走，因为他卖了阮明。</p></li><li><p>体面的，要强的，好梦想的，利己的，个人的，健壮的，伟大的，祥子，不知陪着人家送了多少回殡；不知道何时何地会埋起他自己来，埋起这堕落的，自私的，不幸的，社会病胎里的产儿，个人主义的末路鬼！</p></li></ul></blockquote><h1 id="📚《围棋（小学生版）》"><a href="#📚《围棋（小学生版）》" class="headerlink" title="📚《围棋（小学生版）》"></a>📚《围棋（小学生版）》</h1><table><thead><tr><th align="center">🧑作者：【中国】刘保谦 等</th><th align="center">📌类别： 围棋</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.8.13</td></tr></tbody></table><h1 id="📚《聂卫平围棋教程（从入门到15级）》"><a href="#📚《聂卫平围棋教程（从入门到15级）》" class="headerlink" title="📚《聂卫平围棋教程（从入门到15级）》"></a>📚《聂卫平围棋教程（从入门到15级）》</h1><table><thead><tr><th align="center">🧑作者：【中国】聂卫平</th><th align="center">📌类别： 围棋</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.8.12</td></tr></tbody></table><h1 id="📚《挽救计划》"><a href="#📚《挽救计划》" class="headerlink" title="📚《挽救计划》"></a>📚《挽救计划》</h1><table><thead><tr><th align="center">🧑作者：【美国】安迪·威尔</th><th align="center">📌类别： 科幻&#x2F;文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.8.3</td></tr></tbody></table><p>这本书的情节从头到尾全是跌宕起伏，作者太喜欢一直揪着读者的心了，最后的结局是真的很难猜到。</p><blockquote><ul><li>“我把你的身体托付给群星。”</li><li>“就是你架设起一大批镜子，把太阳光反射到一座塔顶。假如用几百平方米的镜子把所有反射的阳光聚焦到一点，你就能给水加热，让它沸腾，推动汽轮机。”</li><li>核反应堆、火电厂、太阳能电厂……归根结底，它们做的事情都一样，利用热能烧水，利用蒸汽驱动汽轮机。</li><li>“我擅长，”我说，“我是一名人类科学家，你擅长制造修理设备。我们一起把这件事弄明白。”</li><li>老天爷啊，洛基比美国还年长，他跟乔治·华盛顿大约出生在同一个时代。对他的种族而言，他甚至都没有那么老。还有年长的波江座人在哥伦布发现（已经有人居住的）北美洲时就</li><li>一颗行星上的全部智慧生命，根据错误的科学假设打造出一艘飞船，可是船员中唯一的生还者聪明透顶，奇迹般地通过试错法解决问题，居然把飞船开到了目的地。</li><li>十千米长的链条，每一个链节只有五厘米，那就是二十万个，每一个都靠我的手或洛基的手爪连接起来。我们俩只连接锁链不干别的，每天工作八小时，也花了两周才干完。我一闭上眼睛就看见链条，每天晚上都梦见链条。有一顿饭我的餐包里装的是意面，可我只能看见光滑的白色链条，却看不见面条。</li><li>当年读研究生时我就记住了一个教训：当你累得犯傻时，你要承认这一点，不要尝试解决问题。</li><li>一号科学法则：假如要发生意料之外的变化，那就把它记录下来。</li><li>他推动身体回到气密过渡舱的门前，打开后又停在那里，“再见，我的朋友格雷斯。”我谦和地摆手。“再见，我的朋友洛基。”</li><li>历史对大多数人来说意味着没完没了的苦难，历史越悠久，苦难就越深重。</li></ul></blockquote><h1 id="📚《动物庄园》"><a href="#📚《动物庄园》" class="headerlink" title="📚《动物庄园》"></a>📚《动物庄园》</h1><table><thead><tr><th align="center">🧑作者：【英国】乔治·奥威尔</th><th align="center">📌类别： 社会&#x2F;文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.7.23</td></tr></tbody></table><p>这本书太恐怖了，恐怖到我甚至觉得这本书我不应该读到。</p><h1 id="📚《熔炉》"><a href="#📚《熔炉》" class="headerlink" title="📚《熔炉》"></a>📚《熔炉》</h1><table><thead><tr><th align="center">🧑作者：【韩国】孔枝泳</th><th align="center">📌类别： 社会&#x2F;文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.7.11</td></tr></tbody></table><p>韩国的文学和影视作品都反应了一些韩国的社会现实，虽然韩国人说出来，但现状并没有多少改进。虽然有“熔炉”法案，但真正能得到实施的又有多少呢？<br>这本书同样有同名电影，但我还没有看过。</p><p>读这本书的过程中，一直充斥着一种无力感。</p><blockquote><ul><li>这是什么疯狂……狂乱的熔炉啊？</li><li>真实的唯一缺点就是太懒惰了。</li><li>女人的怒骂依然蕴含着男尊女卑的封建性，结果成了纵容丈夫犯罪的共犯。</li><li>徐幼真想了很久，世界上最恐怖的是什么？如果有人这样问，她大概能够回答，是谎言。谎言。</li><li>对于那些认为世界一定要透明澄净的人而言，雾就像障壁。反之，如果接受世界本来就有雾的话，反而会觉得没雾的日子是意外的礼物。</li></ul></blockquote><h1 id="📚《怦然心动》"><a href="#📚《怦然心动》" class="headerlink" title="📚《怦然心动》"></a>📚《怦然心动》</h1><table><thead><tr><th align="center">🧑作者：【美国】文德琳·范·德拉安南</th><th align="center">📌类别： 爱情&#x2F;文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.7.5</td></tr></tbody></table><p>喜欢朱莉🤗<br>同名电影同样非常出色，和小说的剧情基本上一样。</p><blockquote><ul><li>“布莱斯和朱莉坐在树梢上，K-I-S-S-I-N-G（kissing，接吻）……”</li><li>朱莉又朝我抛来了媚眼，而我又回到了原点。</li><li>遇见布莱斯·罗斯基的第一天，我就对他怦然心动。</li><li>我追着他上了人行道，从这一刻起，一切都变了。这么说吧，我追上他，抓住他的胳膊，只想在他被困在屋里之前截住他，跟我玩一会儿。然后突然之间，他牵起我的手，直直地看着我的眼睛。</li><li>“一个人的性格是在童年时代养成的，孩子。你现在做出的选择将会影响你的一生。”</li><li>“想想我说的话，下次面临选择的时候，做出正确的决定。从长远来看，对所有人的伤害都是最小的决定。”</li><li>“有人住高楼，有人在深沟。有人光万丈，有人一身锈。世人万千种，浮云莫去求。斯人若彩虹，遇上方知有。”</li><li>如果说我从朱莉安娜·贝克身上学到什么东西，那就是，我必须全心全意地去尝试。</li><li>我再也不是过去的我了。</li></ul></blockquote><h1 id="📚《穿条纹睡衣的男孩》"><a href="#📚《穿条纹睡衣的男孩》" class="headerlink" title="📚《穿条纹睡衣的男孩》"></a>📚《穿条纹睡衣的男孩》</h1><table><thead><tr><th align="center">🧑作者：【德国】约翰·伯恩</th><th align="center">📌类别： 二战&#x2F;文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.6.30</td></tr></tbody></table><p>小说前面相对来说比较平淡，但在最后，特别是最后一节，给与作者足够的震撼！<br>这本小说也有同名电影，两个小演员的表演非常出色，值得一看。</p><blockquote><ul><li>布鲁诺想给什穆埃尔一个拥抱，让他知道自己多么喜欢他，这一年来，和他聊天是多么快乐。什穆埃尔也想给布鲁诺一个拥抱，感谢他如此善良，感谢他带来许多食物，还要感谢他愿意帮自己找爸爸。</li><li>要么是穿着军装的士兵，他们都很高兴，大笑着，叫喊着；要么是穿着条纹睡衣的人，他们一脸悲伤，甚至哭泣着，大多数人目光呆滞，好像睡着了一样。</li></ul></blockquote><h1 id="🎶-《署前街少年》"><a href="#🎶-《署前街少年》" class="headerlink" title="🎶 《署前街少年》"></a>🎶 《署前街少年》</h1><table><thead><tr><th align="center">🧑歌手：【中国】赵雷</th><th align="center">📌类别：民谣</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.06</td></tr></tbody></table><iframe src="//player.bilibili.com/player.html?aid=563820387&bvid=BV1iv4y197F1&cid=923135738&p=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><p>最喜欢《我记得》、《署前街少年》和《程艾影》~</p><h1 id="📚《夏洛的网》"><a href="#📚《夏洛的网》" class="headerlink" title="📚《夏洛的网》"></a>📚《夏洛的网》</h1><table><thead><tr><th align="center">🧑作者：【美国】怀特</th><th align="center">📌类别： 文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.6.24</td></tr></tbody></table><p>“威尔伯永远忘不了夏洛。”</p><blockquote><ul><li>“我可以做你的朋友，我喜欢你。睡觉吧。明天早晨你就看见我了。”</li><li>当胜利的消息传来，也是夏洛自觉衰老将亡的一刻，故事在此达到最高潮。</li><li>“我可以做你的朋友。我观察你一整天了，我喜欢你。”</li><li>你是有人用桶子送东西给你吃。可没有人给我东西吃。我得自己谋生。我靠自己的本事过活。我得机智灵活，要不然就挨饿。</li><li>生活里有许多事威尔伯还不懂，”它想，“它的确是只非常天真的小猪。它甚至不知道到了圣诞节有什么事要临头；它一点不知道，朱克曼先生和勒维正在阴谋杀掉它。”</li><li>在夏洛凶猛残忍的外表下，有一颗善良的心，到头来，它会显示出自己是个多么忠实的朋友。</li><li>“我救你。”夏洛说。</li><li>福特车、雪佛莱汽车、别克车、通用小卡车、普利茅斯汽车、史蒂倍克汽车、帕卡德汽车、带螺旋转动装置的德索托、带火箭发动机的奥尔兹汽车、吉普旅行车、庞蒂亚克汽车。</li><li>也许如果人少说话，动物就会多说些。</li></ul></blockquote><h1 id="📚《小王子》"><a href="#📚《小王子》" class="headerlink" title="📚《小王子》"></a>📚《小王子》</h1><table><thead><tr><th align="center">🧑作者：【法国】圣埃克絮佩里</th><th align="center">📌类别： 文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.6.22</td></tr></tbody></table><p>写给大人的童书，值得反复看，反复品读。</p><blockquote><ul><li>所有的大人起先都是孩子</li><li>她这个人，应该看她做什么，而不是听她说什么。</li><li>可惜当时我太年轻，还不懂得怎么去爱她。</li><li>国王其实是要别人尊重他的权威。</li><li>在爱虚荣的人眼里，别人都是他们的崇拜者。爱虚荣的人只听得见颂扬的话。</li><li>语言是误解的根源。</li><li>如果你能在下午四点钟来，那么我在三点钟就会开始有一种幸福的感觉。</li><li>只有用心才能看见。本质的东西用眼是看不见的。</li><li>正是我为我的玫瑰花费的时光，才使我的玫瑰变得如此重要</li><li>人们对自己的地方从来不会满意</li><li>“他们在里面睡觉 ，或者打哈欠。只有孩子把鼻子贴在窗上看外面。”</li><li>在这个熟睡的小王子身上，最让我感动的，是他对一朵花儿的忠贞，这朵玫瑰的影像，即使在他睡着时，仍然在他身上发出光芒，就像一盏灯的火焰一样……</li></ul></blockquote><h1 id="📚《西线无战事》"><a href="#📚《西线无战事》" class="headerlink" title="📚《西线无战事》"></a>📚《西线无战事》</h1><table><thead><tr><th align="center">🧑作者：【德国】埃里希·玛丽亚·雷马克</th><th align="center">📌类别： 一战&#x2F;文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.6.19</td></tr></tbody></table><p>寒假的时候读了前半部分，但是感觉剧情推进的很慢，情绪一直都是很低落的一种状态，看不太进去了。之后，由于不知道看什么书了，就又把这本书拿出来读了。可能这本书所改编的电影很不错，但我还没看过这部电影，但这本小说读起来稍微有点枯燥。</p><blockquote><ul><li>战场上没有胜利，只有死亡。</li><li>我们已不再年少。我们不再想征服世界。我们是逃兵。我们既逃避自己，又逃避生活。我们才十八岁，刚开始热爱世界，热爱生活，却不得不对这一切开炮。第一颗榴弹，第一次袭击射向了我们的心脏。我们与行动、追求和进步断绝了关系。我们再不相信这一切：我们只相信战争。</li><li>“想想真奇怪。”克罗普接着说，“我们在这儿，是为了保卫我们的祖国。可法国人在那儿，也是为了保卫他们的祖国。到底谁是对的？”“也许双方都对。”我说着连自己都不相信的话。</li><li>秋天了。老兵已剩不多。我们班的七个人，只剩下我一个。</li><li>那天，整个前线寂静无声。军队指挥部战报上的记录仅有一句：西线无战事。</li></ul></blockquote><h1 id="📚《未来学大会》"><a href="#📚《未来学大会》" class="headerlink" title="📚《未来学大会》"></a>📚《未来学大会》</h1><table><thead><tr><th align="center">🧑作者：【波兰】莱姆</th><th align="center">📌类别： 科幻</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.6.19</td></tr></tbody></table><p>没怎么看懂，稀里糊涂，就像是做梦一般，读书的过程就像是吃了云南毒菌子一般。</p><blockquote><ul><li>人与机器的边界在哪里？人可以“从原子中”构建出来吗？人工智能时代的道德标准究竟在哪里？</li><li>众所周知，当今有两种学者，一种静如处子，另一种动若脱兔。前者遵循老传统，只会伏案研究；后者到处溜达，参加所有你能想象到的国际会议或论坛。</li></ul></blockquote><h1 id="📚《白鹿原》"><a href="#📚《白鹿原》" class="headerlink" title="📚《白鹿原》"></a>📚《白鹿原》</h1><table><thead><tr><th align="center">🧑作者：【中国】陈忠实</th><th align="center">📌类别： 历史&#x2F;文学</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.6.16</td></tr></tbody></table><p>鸿篇巨制！</p><blockquote><ul><li>好饭耐不得三顿吃，好衣架不住半月穿，好书却经得住一辈子诵读。</li><li>白嘉轩在思索人生奥秘的时候，总是想起自古流传着的一句咒语：白鹿村的人口总是冒不过一千，啥时候冒过了肯定就要发生灾难，人口一下子又得缩回到千人以下。他在自己的有生之年里，第一次经历了这个人口大回缩的过程而得以验证那句咒语，便从怀疑到认定：白鹿村上空的冥冥苍穹之中，有一双监视着的眼睛，掌握着白鹿村乃至整个白鹿原上各个村庄人口的繁衍和稀稠……</li><li>活着就要记住，人生最痛苦最绝望的那一刻是最难熬的一刻，但不是生命结束的最后一刻；熬过去挣过去就会开始一个重要的转折，开始一个新的辉煌历程；心软一下熬不过去就死了，死了一切就都完了。</li><li>这里宁静安谧的田园景致与整个即将沦陷的中国是如此不协调，他怨愤以至蔑视中国的军人，无法理解如此泱泱大国如此庞大的军队怎么就打不过一个弹丸之地的倭寇？</li></ul></blockquote><h1 id="🎶-Town-of-windmill"><a href="#🎶-Town-of-windmill" class="headerlink" title="🎶 Town of windmill"></a>🎶 <em>Town of windmill</em></h1><table><thead><tr><th align="center">🧑歌手：【日本】a_hsia(Aihara Hisa)</th><th align="center">📌类别：纯音乐</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.06</td></tr></tbody></table><iframe src="//player.bilibili.com/player.html?aid=49541335&bvid=BV1rb411j7pS&cid=86743750&p=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><p>很安静，很动听</p><h1 id="📚《被讨厌的勇气》"><a href="#📚《被讨厌的勇气》" class="headerlink" title="📚《被讨厌的勇气》"></a>📚《被讨厌的勇气》</h1><table><thead><tr><th align="center">🧑作者：【日本】岸见一郎&amp;古贺史健</th><th align="center">📌类别： 人际关系&#x2F;心理学&#x2F;哲学</th></tr></thead><tbody><tr><td align="center">💖推荐：</td><td align="center">✔时间：2023</td></tr></tbody></table><blockquote><p>这本书在去年读过一部分，但是没有读完。现在要重新拾起来，坚持将其读完！</p></blockquote><p><strong>青年</strong>：青年自幼就缺乏自信，他对自己的出身、学历甚至容貌都抱有强烈的自卑感。也许是因为这样，他往往过于在意他人的目光；而且，他无法衷心地去祝福别人的幸福，从而常常陷入自我嫌恶的痛苦境地。<em>（这不就是我吗？！呜呜呜┭┮﹏┭┮）</em><br><strong>哲人</strong>：人可以改变、世界极其简单、人人能获得幸福。</p><p><strong>🚩第一夜 我们的不幸是谁的错？</strong></p><p>心理学：弗洛伊德、荣格、阿德勒</p><ol><li><p>世界很简单。我觉得世界很复杂是我的主管作用。我把人生复杂化了，所以难以获得幸福；</p><ul><li>人生不是由别人赋予的，而是自己选择的，是自己选择自己如何生活。</li><li>“重要的不是被给予了什么，而是如何利用被给予的东西。”</li></ul></li><li><p>阿德勒的目的论而不是弗洛伊德的原因论；</p><ul><li><p>无论过去发生了什么样的事情，现在的状态取决于你赋予既有事件的意义。</p></li><li><p>“无论之前的人发生过什么，都对今后的人生如何读过没有影响。”</p></li><li><p>决定自己人生的是活在“此时此刻”的你自己。</p></li></ul></li><li><p>人可以改变。我无法改变是因为我下定了不改变的决心。</p><ul><li>阿德勒心理学就是勇气心理学。你之所以不幸并不是因为过去或者环境，更不是因为能力不足，你只不过是缺乏“勇气”，可以说是缺乏“获得幸福的勇气”。</li></ul></li></ol><p>🚩<strong>第二夜 一切烦恼都来自人际关系</strong></p><ul><li><p>为什么讨厌自己？</p><ul><li>这一节写的真的是鞭辟入里，现实中的我其实就是和<em>青年</em>是一模一样的人，“对自己没有自信，对一切都持悲观态度；还有就是太过固执；非常注重别人的看法，而且总是活在对别人的怀疑之中；不能活得自然，总觉得像是在演戏。而且，如果只是性格倒还好，自己的长相和身材也没有一样让人满意的。”</li><li><em>哲人</em>说的很多，我之前到了自己的缺点就是因为我下定了“不喜欢自己” 的决心，就是为了达到自己的目的，当我遇到一切挫折的时候，我都会将其归结到自己的缺点身上；</li><li>“如果……就好了”这也是我逃避现实常用口头禅，但这个“如果”真的实现了，事态真的会变化吗？我感觉应该也不会改变，因为我还会找另外的借口；</li><li>“你为什么讨厌自己呢？为什么只盯着缺点就是不肯去喜欢自己呢？那是因为你太害怕被他人讨厌、害怕在人际关系中受伤。”为了达成自己不被他人讨厌，不在人际交往中受伤的目前，我确实选择了“逃避”，我只看自己的缺点，厌恶自己，不涉入人际关系，遇到问题就以此为理由安慰自己。“心里就会想：因为我有这样的缺点才会遭人拒绝，只要我没有这个缺点也会很讨人喜欢。”</li><li>“保持满是缺点的“这样的自己”对你来说是一种不可替代的“善”，也就是说“有好处”。”</li></ul></li><li><p>一切烦恼都是人际关系的烦恼</p><ul><li>关于“感到孤独”<ul><li>“要想消除烦恼，只有一个人在宇宙中生存”</li><li>感到孤独并不是因为只有自己一个人，而是<strong>感觉自己被周围的他人、社会和共同体所疏远才会孤独</strong>。</li></ul></li><li>“你由于太惧怕人际关系所以才会变得讨厌自己，你是在通过自我厌弃来逃避人际关系。”</li></ul></li><li><p>自卑感来自主观的臆造</p><ul><li>困扰我们的自卑感不是“客观性的事实”而是“主观性的解释”</li><li>我们无法改变客观事实，但可以任意改变主观解释。</li></ul></li><li><p>自卑情结只是一种借口</p><ul><li>阿德勒说“无论是追求优越性还是自卑感，都不是病态，而是一种能够促进健康、正常的努力和成长的刺激”。只要处理得当，自卑感也可以成为努力和成长的催化剂。</li><li>“自卑感”与”自卑情结”<ul><li>自卑感本身并不是坏事。自卑感也可以成为促成努力和进步的契机。</li><li>自卑情结是指把自己的自卑感当作某种借口使用的状态。</li></ul></li></ul></li><li><p>越自负的人越自卑</p><ul><li>阿德勒指出“没有人能够长期忍受自卑感”，自卑感虽然人人都有，但它沉重得没人能够一直忍受这种状态。</li><li>自卑感即感觉我目前在某方面有所欠缺，但只要有勇气就可以去弥补自己欠缺的部分，但是如果没有勇气就会陷入自卑情结。</li><li>自卑情结有时候会发展成另外一种特殊的心理状态——“优越情结”，如“权势张扬”、骄傲于自我功绩、沉迷于往日光辉</li><li>阿德勒明确指出“如果有人骄傲自大，那一定是因为他有自卑感”。</li><li>暴露出自己的自卑感以当作武器</li></ul></li><li><p>人生不是与他人的比赛</p><ul><li>健全的自卑感不是来自与别人的比较，而是来自与“理想的自己”的比较。</li><li>不与任何人竞争，只要自己不断前进即可。</li></ul></li><li><p>在意你长相的，只有你自己</p></li><li><p>人际关系中的“权力斗争”与复仇</p><ul><li><p>个人的愤怒（私愤）和对社会矛盾或不公平产生的愤怒（公愤）不属于同一种类。个人的愤怒很快就会冷却，而公愤则会长时间地持续。因私愤而流露的发怒只不过是为了让别人屈服的一种工具而已。</p></li><li><p>人际关系一旦发展到复仇阶段，那么当事人之间几乎就不可能调和了。为了避免这一点，在受到争权挑衅时绝对不可以上当。</p></li></ul></li><li><p>承认错误，不代表你失败了</p><ul><li>“忍耐”这种想法本身就表明你依然拘泥于权力之争。而是要对对方的行为不做任何反应。我们能做的就只有这一点。</li><li>易怒的人并不是性情急躁，而是不了解发怒以外的有效交流工具。</li><li>无论认为自己多么正确，也不要以此为理由去责难对方。</li><li>承认错误、赔礼道歉、退出权力之争，这些都不是“失败”。</li></ul></li><li><p>人生的三大课题：交友课题、工作课题以及爱的课题</p><ul><li>阿德勒把这些过程中产生的人际关系分为“工作课题”“交友课题”和“爱的课题”这三类，又统称为“人生课题”。</li></ul></li><li><p>浪漫的红线和坚固的锁链</p><ul><li>如果对方过得幸福，那就能够真诚地去祝福，这就是爱。相互束缚的关系很快就会破裂。</li><li>当人能够感觉到“与这个人在一起可以无拘无束”的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种平静而自然的状态。真正的爱应该是这样的。</li><li>另一方面，束缚是想要支配对方的表现，也是一种基于不信任感的想法。</li><li>阿德勒说：“如果想要和谐地生活在一起，那就必须把对方当成平等的人。”</li><li>假如恋爱是用红色丝线系起来的关系的话，那亲子关系就是用坚固的锁链联结起来的关系。</li></ul></li><li><p>“人生谎言”教我们学会逃避</p><ul><li>人就是这么任性而自私的生物，一旦产生这种想法，无论怎样都能发现对方的缺点。即使对方是圣人君子一样的人物，也能够轻而易举地找到对方值得讨厌的理由。正因为如此，世界才随时可能变成危险的所在，人们也就有可能把所有他人都看成“敌人”。</li><li>阿德勒把这种企图设立种种借口来回避人生课题的情况叫作“人生谎言”。</li></ul></li><li><p>阿德勒心理学是“勇气的心理学”</p></li></ul><p>第三夜 让干涉你生活的人见鬼去</p><ul><li><p>自由就是不再寻求认可？</p><ul><li>根本没必要被别人认可，也不要去寻求认可。</li></ul></li><li><p>要不要活在别人的期待中？</p><ul><li>我们“并不是为了满足别人的期待而活着”。</li><li>倘若自己都不为自己活出自己的人生，那还有谁会为自己而活呢？”</li><li>你就活在自己的人生中。要说为谁活着，那当然是为你自己。假如你不为自己而活的话，那谁会为你而活呢？我们最终还是为自己活着。没理由不可以这样想。</li><li>过于希望得到别人的认可，就会按照别人的期待去生活。也就是舍弃真正的自我，活在别人的人生之中。</li></ul></li><li><p>把自己和别人的“人生课题”分开来</p><ul><li>不干涉他人的课题。</li><li>基本上，一切人际关系矛盾都起因于对别人的课题妄加干涉或者自己的课题被别人妄加干涉。只要能够进行课题分离，人际关系就会发生巨大改变。</li></ul></li><li><p>即使父母也得放下孩子的课题</p></li><li><p>放下别人的课题，烦恼轻轻飞走</p></li><li><p>砍断“格尔迪奥斯绳结”</p><ul><li>像这样盘综错节的绳结也就是人际关系中的“羁绊”，已经无法用普通方法解开了，必须用全新的手段将其切断。</li><li>阿德勒说：“没有学会直面困难的孩子最终会想要逃避一切困难。”</li></ul></li><li><p>对认可的追求，扼杀了自由</p></li><li><p>自由就是被别人讨厌</p><ul><li>真正的自由是一种把滚落下来的自己从下面向上推的态度。</li><li>不要害怕被人讨厌。</li><li>不畏惧被人讨厌而是勇往直前，不随波逐流而是激流勇进，这才是对人而言的自由。</li></ul></li><li><p>人际关系“王牌”，握在你自己手里</p></li></ul><p>🚩<strong>第四夜 要有被讨厌的勇气</strong></p><ul><li>个体心理学和整体论</li><li>人际关系的终极目标</li><li>“拼命寻求认可”反而是以自我为中心？</li><li>你不是世界的中心，只是世界地图的中心</li><li>在更广阔的天地寻找自己的位置</li><li>只要存在着，就有价值</li><li>无论在哪里，都可以有平等的关系</li></ul><p>🚩<strong>第五夜 认真的人生“活在当下”</strong></p><ul><li>过多的自我意识，反而会束缚自己<ul><li>我不是热爱自己的自恋者，而是厌弃自己的现实主义者。正因为厌恶自己，所以才只关注自己；正因为对自己没有自信，所以才会自我意识过剩。</li><li>自我意识总是牵绊着自己、严重束缚着自己的言行。我的自我意识根本不允许自己无拘无束地行动。</li></ul></li><li>不是肯定自我，而是接纳自我<ul><li>“自我接纳”“他者信赖”和“他者贡献”。</li></ul></li></ul><h1 id="🏫Jia-Jiang-What-I-learned-from-100-days-of-rejection-TED-Talk"><a href="#🏫Jia-Jiang-What-I-learned-from-100-days-of-rejection-TED-Talk" class="headerlink" title="🏫Jia Jiang: What I learned from 100 days of rejection | TED Talk"></a>🏫<em>Jia Jiang: What I learned from 100 days of rejection | TED Talk</em></h1><iframe src="//player.bilibili.com/player.html?aid=7909069&bvid=BV1Ps411h72q&cid=12983446&p=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><table><thead><tr><th align="center">👨‍🏫创作：[TED] Jia Jiang</th><th align="center">📌类别： 演讲</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">👨‍🎓时间：2023.05.31</td></tr></tbody></table><p>TED Links：<a href="https://www.ted.com/talks/jia_jiang_what_i_learned_from_100_days_of_rejection">Jia Jiang: What I learned from 100 days of rejection | TED Talk</a></p><p>&emsp;&emsp;我第一次看这个演讲的视频应该是很久很久之前了，我已经记不清楚是在什么时候了，也许是我初中的时候吧，当时这个演讲给了我很大的震撼。我本人是一个非常害怕被拒绝的人，别人的一点点小小的拒绝都会使我伤心和自己怀疑很久，这可能和个人的性格相关。在我看完Jia Jiang的演讲之后，让我觉得也许“被拒绝”并不是一件令人羞耻的事情，“被拒绝”也许并不是我做的不好，我不应该害怕“被拒绝”，更应该做的是从“被拒绝”中学到一些东西，让下一次不再“被拒绝”。</p><p>&emsp;&emsp;第二次是在高中的时候了，在一张英语阅读理解卷子上，我又看到了熟悉的Jia Jiang这个名字，但那次我并没有多思考这个演讲本身，可能是因为高中阶段的关注点更多的在于“试卷的得分”，在看到这个关于这个演讲的英语题目的时候，只是在窃喜自己之前看过这个，对英文文章的理解会更容易了。</p><p>&emsp;&emsp;说来其实很奇怪，这次再去看这个演讲，仅仅是因为不知道为什么脑子里突然冒出了“Jia Jiang”这个名字。这次再看这个演讲，内心其实略显羞愧，因为这么些年过去了，我依然害怕“被拒绝”，这个演讲并没有“改变”我。但，其实也并不是什么问题，就哪有那么地容易用一个演讲就把一个人彻头彻尾地改变了。真正重要的是，当我在面对“被拒绝”的时候，我能想起这个演讲，那就足够了。慢慢地用这个<strong>“不怕被拒绝”</strong>的思想来来潜移默化自己。</p><h1 id="📚《圣母》"><a href="#📚《圣母》" class="headerlink" title="📚《圣母》"></a>📚《圣母》</h1><table><thead><tr><th align="center">🧑作者：【日本】秋吉理香子</th><th align="center">📌类别：</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.05.31</td></tr></tbody></table><p>把悬疑留到了最后！这情节的发展是我怎么也没有想到的！</p><blockquote><ul><li>柔弱稚嫩的身体，似乎只要圈紧双臂就会被折断。薄薄的眼皮上隐隐透出几条青色的血管。白里透红的脸颊。脸上一层细细的绒毛。微张的嘴唇间露出小小的门齿。所有这些，都令保奈美觉得可爱至极。可爱到让她心痛。</li><li>常有人说治疗不孕症是一条看不见前路的隧道，可对保奈美来说，更像深不见底的泥沼。</li><li>男人是在孩子出生后才成为父亲的，但从小生命来到体内的那一瞬间起，女性就成了母亲。</li><li>初次见面就能马上成为朋友，这是小孩子的优点。</li><li>强奸是谋杀灵魂。谋杀肉体。谋杀未来。</li><li>另一个为了女儿，宁愿化身为恶魔的母亲</li></ul></blockquote><h1 id="📚《变形记》"><a href="#📚《变形记》" class="headerlink" title="📚《变形记》"></a>📚《变形记》</h1><table><thead><tr><th align="center">🧑作者：【奥地利】卡夫卡</th><th align="center">📌类别：</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.05.28</td></tr></tbody></table><p>&emsp;&emsp;这荒诞离奇的故事却是对卡夫卡的一生真实的写照。</p><h1 id="📚《Blue》"><a href="#📚《Blue》" class="headerlink" title="📚《Blue》"></a>📚《Blue》</h1><table><thead><tr><th align="center">🧑作者：【日本】叶真中显</th><th align="center">📌类别：犯罪&#x2F;悬疑</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.05.27</td></tr></tbody></table><p>&emsp;&emsp;叶真中显的这本小说和去年读的《绝叫》非常类似，两者都不算是本格派推理作品而是社会派推理作品，表面是是一件或多件悬疑案件，深层里其实是一种对社会现象的思考与探讨。</p><blockquote><ul><li>正如无人知晓邪马台国的卑弥呼爱过谁，正如无人知晓阿道夫·希特勒最后看到的风景是什么，也正如无人知晓耶稣基督的奇迹是否真实。</li></ul></blockquote><h1 id="📚《恶徒的救赎》"><a href="#📚《恶徒的救赎》" class="headerlink" title="📚《恶徒的救赎》"></a>📚《恶徒的救赎》</h1><table><thead><tr><th align="center">🧑作者：【日本】高野和明</th><th align="center">📌类别：犯罪&#x2F;悬疑</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.05.25</td></tr></tbody></table><p>&emsp;&emsp;反转反转再反转！</p><p>&emsp;&emsp;这本书和《人类灭绝》一样，都是多线性叙事，这本书也是写了好几个事情同时发生，并且居然还是再一天的时间里。</p><blockquote><ul><li>“爱春天的人呀，内心纯洁。”</li><li>“爱夏天的人呀，内心坚强。”</li><li>“爱秋天的人呀，内心深沉。”</li><li>“爱冬天的人呀，内心宽广。”</li><li>美女真是个奇怪的物种，你相信她也好，怀疑她也好，总会给你带来灾祸。</li></ul></blockquote><h1 id="🎥《海边的曼彻斯特》"><a href="#🎥《海边的曼彻斯特》" class="headerlink" title="🎥《海边的曼彻斯特》"></a>🎥《海边的曼彻斯特》</h1><table><thead><tr><th align="center">🧑作者：【美国】肯尼思·洛纳根</th><th align="center">📌类别：剧情</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.05.23</td></tr></tbody></table><iframe src="//player.bilibili.com/player.html?aid=64652943&bvid=BV144411d7Ld&cid=112236306&page=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><p>&emsp;&emsp;现实生活中，往往没有那么多的鸡汤。真正经历过痛苦的人，往往也没有那么容易走出来。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2402150318.webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2402150512.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2464976213.webp"></div></div></div><h1 id="📚《人类灭绝》"><a href="#📚《人类灭绝》" class="headerlink" title="📚《人类灭绝》"></a>📚《人类灭绝》</h1><table><thead><tr><th align="center">🧑作者：【日本】高野和明</th><th align="center">📌类别：科幻&#x2F;悬疑</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.05.23</td></tr></tbody></table><p>&emsp;&emsp;两口气，十小时读完27万字</p><p>&emsp;&emsp;感觉这本书写的很有刘慈欣的感觉，或许是译者受到刘慈欣风格的影响了。</p><blockquote><ul><li>不幸这种东西，在旁观者眼中和当事者眼中截然不同。</li><li>你血液中流动的铁元素，是四十五亿年前超新星爆炸时产生的。它们在太空中飘游，于太阳系形成时汇集到地球这颗行星上，然后以食物的形式进入你的体内。进一步说，你身体中无处不在的氢元素，也是宇宙诞生时产生的。此前的一百三十七亿年中，它们都存在于这个宇宙中。而现在，它们成了你身体的一部分。</li><li>“潜入作战地域后，如果不想看到地狱，就千万不要接触人类。”</li><li>所谓父母，大概会用自己的生命给孩子上最后也是最重要的一堂课，不管这课是好是坏</li><li>在文科领域，擅长花言巧语、弄虚作假的人也可能混出头，但在理科领域就不能有半点儿虚假。</li><li>所谓士兵，就是打着保卫国家的名号上战场杀人，越善良的人，越会受到良心的谴责。</li><li>社会生活中可见的所有竞争的原动力，都可以归结为两种欲望：食欲和性欲。</li><li>战争当事者中最为残忍、决定发动战争的最高权力者，往往与敌人的心理距离和物理距离最远。</li><li>因为所谓国家的人格，本质上就是国家最高决策者的人格。</li><li>欲恶同物，欲多而物寡，寡则必争矣。</li><li>“上帝是不可捉摸的，但并无恶意。”</li><li>我只能告诉你一件事，人生难免不如意，你可能在失败中奋起，也可能在失败中沉沦，都看你自己。人只有通过失败才会变得更强。这句话请你一定要记住。</li></ul></blockquote><h1 id="🏫Steve-Jobs’-2005-Stanford-Commencement-Address"><a href="#🏫Steve-Jobs’-2005-Stanford-Commencement-Address" class="headerlink" title="🏫Steve Jobs’ 2005 Stanford Commencement Address"></a>🏫<em>Steve Jobs’ 2005 Stanford Commencement Address</em></h1><iframe width="560" height="315" src="https://www.youtube.com/embed/UF8uR6Z6KLc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><table><thead><tr><th align="center">👨‍🏫创作：[Stanford] Steve Jobs</th><th align="center">📌类别： 演讲</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">👨‍🎓时间：2023.05.16</td></tr></tbody></table><blockquote><p>“Stay hungry, Stay foolish.”</p></blockquote><h1 id="🎬-《漫长的季节》"><a href="#🎬-《漫长的季节》" class="headerlink" title="🎬 《漫长的季节》"></a>🎬 《漫长的季节》</h1><table><thead><tr><th align="center">🧑创作：</th><th align="center">📌类别：剧情 &#x2F; 悬疑</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.05.15</td></tr></tbody></table><p>强推！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2891809997.webp"></p><h1 id="🎥《宇宙探索编辑部》"><a href="#🎥《宇宙探索编辑部》" class="headerlink" title="🎥《宇宙探索编辑部》"></a>🎥《宇宙探索编辑部》</h1><table><thead><tr><th align="center">🧑创作：</th><th align="center">📌类别：剧情 &#x2F; 悬疑</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.05.14</td></tr></tbody></table><p>文艺片，看不懂。</p><blockquote><p><strong>我们所有人生活的地球，就好比是，我手里的这颗沙子，宇宙里面所有的星球比我们地球上所有的沙子加在一起还要多得多得多</strong>。所以不可能只有地球上存在着生命，所以我是坚信有外星人存在的。</p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2889955038.webp"></p><h1 id="🏫Randy-Pausch-Last-Lecture-Achieving-Your-Childhood-Dreams"><a href="#🏫Randy-Pausch-Last-Lecture-Achieving-Your-Childhood-Dreams" class="headerlink" title="🏫Randy Pausch Last Lecture: Achieving Your Childhood Dreams"></a>🏫<em>Randy Pausch Last Lecture: Achieving Your Childhood Dreams</em></h1><iframe width="560" height="315" src="https://www.youtube.com/embed/ji5_MqicxSo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><table><thead><tr><th align="center">👨‍🏫创作：[CMU] Randy Pausch</th><th align="center">📌类别： 演讲</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">👨‍🎓时间：2023.05.05</td></tr></tbody></table><p><a href="https://jamesclear.com/great-speeches/achieving-your-childhood-dreams-by-randy-pausch">“Achieving Your Childhood Dreams” by Randy Pausch speech transcript (jamesclear.com)</a></p><blockquote><p>这个演讲是我在学习李沐老师的《动手学习深度学习》系列课程的时候，李沐老师在一个视频中提到了这个演讲，在网络上搜索了一下，网络上对此演讲给与了极高的评价，对Randy给予了极高的敬重。</p><blockquote><p>或许我以后不会从事关于CS的工作，但是我不会忘记Randy。</p></blockquote></blockquote><p>🚩<strong>My childhood dreams</strong></p><ul><li><p>Fundamentals &amp; Hard Work</p></li><li><p>“Experience is what you get when you didn’t get what you wanted”<br>“经验是在你无法获得想要之物时才会学到”</p></li><li><p>Most of what we learn, we lean indirectly (or by <strong>“head fake”</strong>)</p></li><li><p><strong>“Brick wall are there for a reason: they let us prove how badly we want things”</strong></p><p>“墙的存在是阻止哪些不够热爱的人”</p></li><li><p>“waiting long enough, people will supervise and impress you”</p></li></ul><p>🚩<strong>Enabling the dreams of others</strong> </p><ul><li>这相当不错，但我知道你们可以做的更好；你显然不知道标准应该在哪里，你定下的任何标准都是在帮倒忙</li><li>当你拥有极为珍贵的东西十年之久时，将它转交给别人是世上最困难的事情。</li><li>Entertainment Technology Center(ETC) </li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230505142352012.png" alt="image-20230505142352012" style="zoom:50%;" /></li><li>“Alice” project</li></ul><p>🚩<strong>Lessons learned: how you can achieve your dreams or enable the dreams of others</strong></p><ul><li>help others</li><li>sale something worthwhile? like education…</li><li>“我不知道如何不快乐地生活，我都快死了，但我依然很快乐，剩下的人生中，每一天我都要继续快乐地生活。”</li><li>Never lose the child-like wonder</li><li>Help others</li><li>loyalty is a two-way street</li><li>Sil:当男人为你着迷时，忽略所有他们讲的话，只需要注意他们的所作所为。</li><li>Never Give Up</li><li>How to Get People to Help You<ul><li>You can’t get there alone,  and I believe in Karma.</li><li>Tell the truth</li><li>Be earnest</li><li>Apologize when you screw up</li><li>Focus on others, not yourself</li></ul></li><li>Don’t bail; the best gold is at the bottom if barrels of crap.</li><li>Get a feedback loop; and listen to it!<br>“当人们给你反馈时，请珍惜，并善用！”</li><li>Show Gratitude</li><li>Don’t complain; just work harder.</li><li>Important Advice<ul><li>Be good at something: it makes you valuable</li><li>Work hard… &lt;-  “what’s your secret?”</li><li>Find the best in everybody; no matter how you have to wait for them to show it</li><li>Be prepared: “luck” is where preparation meets opportunity.</li></ul></li><li><strong>关键不在于如何达成梦想，而是如何过无悔的人生。如果你能好好地过人生，人生自会为你寻找答案，你的梦想自会实现。</strong></li></ul><p class="note note-light">足够震撼内心的演讲！</br></p>　<p>&emsp;&emsp;我们该以什么样的态度去对待生命与死亡。<strong>“我不知道如何不快乐地生活，我都快死了，但我依然很快乐，剩下的人生中，每一天我都要继续快乐地生活。”</strong></p><p>&emsp;&emsp;总结下来就是两句话：<strong>积极乐观直到生命的结束；永远怀揣童年美好的梦想</strong></p><p>1.永远怀揣童年美好的梦想</p><p>2.积极乐观直到生命的结束</p><h1 id="🎮《奥义与黑暗森林》"><a href="#🎮《奥义与黑暗森林》" class="headerlink" title="🎮《奥义与黑暗森林》"></a>🎮《奥义与黑暗森林》</h1><table><thead><tr><th align="center">🧑创作：</th><th align="center">📌类别：</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">🎮时间：2023.05</td></tr></tbody></table><p>&emsp;&emsp;为了玩这个游戏买了一个游戏手柄，只玩过两次，太容易死了，比较考验技术。</p><p>&emsp;&emsp;游戏画风和音乐真的的绝美。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/5EBB55F54DEC8F29F597E5C5D67B697A.jpg"></p><h1 id="🎮《消逝的光芒》"><a href="#🎮《消逝的光芒》" class="headerlink" title="🎮《消逝的光芒》"></a>🎮《消逝的光芒》</h1><table><thead><tr><th align="center">🧑创作：Techland开发，华纳兄弟娱乐发行</th><th align="center">📌类别： 动作</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">🎮时间：2023.04</td></tr></tbody></table><p>&emsp;&emsp;从Epic平台白嫖来的！</p><p>&emsp;&emsp;只玩过了几次，玩起来有点晕。</p><p>&emsp;&emsp;有一个任务是在晚上赶回家，需要摆脱夜魔的追击，死掉了非常多次才把这个任务完成，这惊心动魄的感觉太爽了，代入感很强！被夜魔发现时真的是肾上腺素飙升，心脏“咚咚咚咚”地跳。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/OIP-C-17064446497586.jpeg"></p><h1 id="🎮《无主之地2》"><a href="#🎮《无主之地2》" class="headerlink" title="🎮《无主之地2》"></a>🎮《无主之地2》</h1><blockquote><p>游戏虽然不属于“书影音”，但游戏作为“第九艺术”也值得被记录！</p></blockquote><table><thead><tr><th align="center">🧑创作：Gearbox Software开发，2K Games发行</th><th align="center">📌类别： FPS、RPG</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">🎮时间：2023.04</td></tr></tbody></table><p>&emsp;&emsp;强推啊！</p><p>&emsp;&emsp;只在每周末打开一次做几个任务，现在还没有通关。</p><p>&emsp;&emsp;2023年10月份，主线通关。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240128213429613.png"></p><h1 id="🎬《怪物》"><a href="#🎬《怪物》" class="headerlink" title="🎬《怪物》"></a>🎬《怪物》</h1><table><thead><tr><th align="center">🧑导演：【韩国】申娜妍</th><th align="center">📌类别： 悬疑&#x2F;犯罪</th></tr></thead><tbody><tr><td align="center">💖推荐：</td><td align="center">✔时间：2023</td></tr></tbody></table><p>&emsp;&emsp;这部剧一直在故弄玄虚，看到过程中根本不知道到底是谁有问题，剧情推进很慢，有时间的时候就看一点点，现在还没有看完。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2640533196.webp"></p><h1 id="🎬《黑暗荣耀1-2》"><a href="#🎬《黑暗荣耀1-2》" class="headerlink" title="🎬《黑暗荣耀1&amp;2》"></a>🎬《黑暗荣耀1&amp;2》</h1><table><thead><tr><th align="center">🧑导演：【韩国】安吉镐</th><th align="center">📌类别： 剧情</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.04</td></tr></tbody></table><p>&emsp;&emsp;复仇爽剧，基本上是一口气看完了！🤣</p><blockquote><ul><li>我希望有一天，能忘了你的名字，忘了你长什么样，在某个地方再次见到你时能说，你是谁来着？希望能把你忘得一干二净。想到我的世界里满满都是你，是不是感觉很残忍?</li><li>有些人自己像在水里一般宁静，却使别人站在暴风雨中！</li><li>你为什么喜欢围棋，我喜欢在沉默中拼命交锋的感觉。对方精心建造的领地，要摧毁它才能获胜，这一点我也喜欢。</li><li>那是个感觉既像永昼，又像永夜的夜晚，我已经不剩一丝尊严，是不能再荒芜的废墟，我想要更忠诚地信仰愤怒和邪恶！</li><li>我需要的并非王子，而是一个能与我一起跳剑舞的刽子手。</li><li>Memento Mori，拉丁文是莫忘你终有一死。</li><li>如果用一句话来定义围棋，就是由地盘较多的人获胜的对决，所以我们要从棋盘边缘往中间，好好围起自己的地，同时破坏别人的地，慢慢把中间围起来，沉默却猛烈！</li></ul></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2885050208.webp"></p><h1 id="📚《一口好牙：把口腔医生带回家》"><a href="#📚《一口好牙：把口腔医生带回家》" class="headerlink" title="📚《一口好牙：把口腔医生带回家》"></a>📚《一口好牙：把口腔医生带回家》</h1><table><thead><tr><th align="center">🧑作者：【中国】郝泽良 郝帅</th><th align="center">📌类别：科普</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.05.27</td></tr></tbody></table><p>&emsp;&emsp;第一次看这种口腔医学科普书，只那吃饭的这种零零散散的时间读的，看完了没记住很多东西。</p><blockquote><p>◆  第一章 牙疼——一颗坏牙的前世今生</p><ul><li><p>牙周病的牙菌斑容易黏附在牙齿和牙龈交界处；龋齿的牙菌斑容易黏附在牙齿的点隙窝沟内。</p></li><li><p>牙齿是由三个部分组成的：最外层是牙釉质；其次是牙本质；中间是牙髓。牙髓中有丰富的神经和血管，不仅可以感受外界的冷热刺激，还能促进修复牙本质，是牙齿的“心脏”。</p></li><li><p>牙釉质的弱点是不能耐酸，酸性物质可以破坏牙釉质导致牙釉质的丧失。</p></li><li><p>同时牙釉质还有一个特性，就是一旦发育形成后无法改变、无法代谢、无法愈合，</p></li><li><p>公认的龋病发生的“四联因素”。龋齿的出现取决于食物、细菌、宿主、时间这四个因素的共同作用。</p></li><li><p>因此每一餐后口腔都会经历pH（酸碱度）的先降后升，延长进食间隔时间可以有效减少牙釉质暴露于酸性环境的时间。但如果三餐之间增加很多零食，那么进食后pH（酸碱度）还没有升起来就再次降下去，牙釉质暴露于酸性环境的时间增加，就会增加患龋齿的风险。所以预防龋齿最好的办法就是减少吃零食的次数！</p></li><li><p>吃消炎药可不可以缓解牙疼？一般是没用的。急性牙髓炎的原因是牙髓腔像高压锅受压一样的状态，什么物质都进不去也出不来，但凡能进去能出来就不会形成“高压锅”了。所以只有钻开牙髓才可以瞬间止痛。</p></li><li><p>我们曾经见到过以牙疼的主诉来就诊，接连拔了一颗又一颗牙，直到拔光所有的牙，这种疼痛仍然存在，才发现并不是牙疼。三叉神经痛通常有固定的扳机点，可能每天刷牙碰到一个区域或者洗脸碰到一个区域就会引发这种类似的针刺样、闪电样疼痛，并且也不存在夜间痛、冷热刺激加剧等典型的牙疼症状。</p></li></ul><p>◆  第二章 智齿之痛——退化还是进化？</p><ul><li>除了正畸医生会根据情况考虑留下智齿外，所有智齿都应当拔除。</li></ul><p>◆  第四章 口腔黏膜病——龇牙咧嘴为哪般？</p><ul><li><p>复发性口腔溃疡的病因至今也没有找到</p></li><li><p>口腔溃疡和心理状态有极大的关系</p></li><li><p>民间有各种偏方治疗口腔溃疡。有些人在溃疡面撒盐撒糖，有些人吃猕猴桃，有些人含漱白酒，有些人把维生素C片直接压在溃疡面，有些人吃消炎药，有些人喝浓茶水……有些貌似很管用，但都不是靠谱的办法。首先，需要强调的是，消炎药对口腔溃疡没有任何帮助；其次，高浓度的任何溶液，维生素C溶液、糖水、盐水对口腔溃疡都没有作用，反而会增加溃疡面的疼痛，烧灼溃疡面的黏膜，甚至造成更大的溃疡。我曾经在临床上见到一个神奇的大溃疡病例：患者下唇内侧可见3cm×5cm大溃疡面，仔细询问了病史，才知道原来在下唇内侧只是一个小溃疡，患者把维生素C片放在溃疡面上，结果溃疡越来越大。因为下唇内侧的口腔前庭很少会有唾液进入，高浓度的维生素C烧灼黏膜不仅让溃疡无法愈合，还产生了更大的溃疡。而治疗方法则是用清水漱口，降低局部药物的浓度，几天以后溃疡就愈合了。所以千万不要把维C片直接放在溃疡面上！</p></li><li><p>很多家长都觉得“是药三分毒”，一看症状好转就立即停药，但是没过多久，这些白色绒膜就又跑出来了。这样的用药方法是完全错误的。</p></li></ul><p>◆  第五章 “脸科”在哪儿——口腔科还能看这些病？</p><ul><li><p>口腔医院急诊科是处理面部外伤最权威的科室，不仅可以处理颌骨骨折及牙外伤，还可以处理颌面部的间隙感染及各种急症牙疼。</p></li><li><p>中国的学科划分沿袭自苏联模式。我们认为口腔是全身的一部分，就像我们去看呼吸科一样，口腔也是大临床的一部分，而不是单独分出来的牙科。口腔作为全身的一部分，和全身有千丝万缕的关系，因此被称作口腔医学。</p></li><li><p>你查看高考填报志愿，会发现是没有牙医学的，只有口腔医学。中国每一个培养出来的从事口腔事业的医生都被叫作口腔医生，而不只是牙医。</p></li></ul><p>◆  第六章 成人正畸——年龄不能阻止对美的追求</p><ul><li><p>首先，正畸治疗一定会打破原先已经适应的平衡，建立一个新的平衡。打破旧平衡和建立新平衡之间就会有风险——本人能不能适应这个新的平衡。</p></li><li><p>不需要改变的情况：在医生看来，直面型是不需要矫正的。直面型的意思是，在鼻尖和颏部连一条直线，下唇在这条直线上。而这条从鼻尖到下巴颏的连线，叫作审美线。</p></li></ul></blockquote><h1 id="🎬《中国奇谭》"><a href="#🎬《中国奇谭》" class="headerlink" title="🎬《中国奇谭》"></a>🎬《中国奇谭》</h1><blockquote><p>和晓瑾聊天的时候，提到了这部国产动画</p></blockquote><table><thead><tr><th align="center">🧑导演：【中国】</th><th align="center">📌类别：动画</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐</td><td align="center">✔时间：2023.05.16</td></tr></tbody></table><table><thead><tr><th align="center">单集</th><th align="center">✍</th></tr></thead><tbody><tr><td align="center">《小妖怪的夏天》</td><td align="center"></td></tr><tr><td align="center">《鹅鹅鹅》</td><td align="center"></td></tr><tr><td align="center">《林林》</td><td align="center"></td></tr><tr><td align="center">《乡村巴士带走了王孩儿和神仙》</td><td align="center"></td></tr><tr><td align="center">《小满》</td><td align="center"></td></tr><tr><td align="center">《玉兔》</td><td align="center"></td></tr><tr><td align="center">《小卖部》</td><td align="center"></td></tr><tr><td align="center">《飞鸟与鱼肉》</td><td align="center"></td></tr></tbody></table><p>&emsp;&emsp;不知道说了些啥，啥也没看懂！部分剧集感觉和寓言一般，有点含义的。</p><p>&emsp;&emsp;比较有意思的地方是，每一集的动画风格都是不一样的。</p><iframe src="//player.bilibili.com/player.html?aid=777122885&bvid=BV1T14y1G7wm&cid=946815421&page=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><h1 id="🎥《流浪地球2》"><a href="#🎥《流浪地球2》" class="headerlink" title="🎥《流浪地球2》"></a>🎥《流浪地球2》</h1><table><thead><tr><th align="center">🧑导演：【中国】郭凡</th><th align="center">📌类别：科幻</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.02</td></tr></tbody></table><p>&emsp;&emsp;一句话，巨tmd好看。真后悔没有早点去看啊~</p><p>&emsp;&emsp;《球2》相比于《球1》的提升是巨大的，最突出的特点的多故事并行的叙事能力，讲述的故事非常的精彩，扣人心弦；第二个就是特效，太哇塞了，特效水平我觉得能达到好莱坞电影工业的水平，金属感拉满，非常有《环太平洋1》的感觉。太空电梯这一段看的我是真的震撼啊；第三个是OST，影院音响系统给力，听觉感受是真的满足，很有《星际穿越》OST的感觉。还需到提到的一点是，其中也有一些只有中国人看得懂的笑点，突然来这么一句，观众都会跟着笑起来。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2893366368.webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2893366365.webp"></div></div></div><h1 id="🎶-《和光同尘》"><a href="#🎶-《和光同尘》" class="headerlink" title="🎶 《和光同尘》"></a>🎶 《和光同尘》</h1><table><thead><tr><th align="center">🧑歌手：【中国】周深</th><th align="center">📌类别：</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.02</td></tr></tbody></table><iframe src="//player.bilibili.com/player.html?aid=585673059&bvid=BV1Pz4y1r7av&cid=267667008&page=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><div align=center><p class="note note-light">和光同行 跌跌撞撞的摸索</br>和光同舞 奋不顾身的坎坷</br>和光同尘 不为盛名而来 不为低谷而去</br></p></div><h1 id="📚《刘慈欣科幻小说合集》"><a href="#📚《刘慈欣科幻小说合集》" class="headerlink" title="📚《刘慈欣科幻小说合集》"></a>📚《刘慈欣科幻小说合集》</h1><table><thead><tr><th align="center">🧑作者：【中国】刘慈欣</th><th align="center">📌类别：科幻小说</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.02</td></tr></tbody></table><table><thead><tr><th align="center">📕目录</th><th align="center">✍</th></tr></thead><tbody><tr><td align="center">《诗云》</td><td align="center">我感觉这一篇不是很好看，导致我拖拖拉拉看了好久才看完的。</td></tr><tr><td align="center">《太原之恋》</td><td align="center">刘慈欣居然写了这样一部“不正经”的“科幻小说”，这一篇太搞笑了。</td></tr><tr><td align="center">《坍缩》</td><td align="center">当你知道宇宙的万物即将消失时，你会干什么？</td></tr><tr><td align="center">《天使时代》</td><td align="center">“21世纪是生物的世纪”😋</td></tr><tr><td align="center">《吞食者》</td><td align="center">战争是什么？无非就是资源掠夺。</td></tr><tr><td align="center">《微观尽头》</td><td align="center">宇宙的负片，这个脑洞太大了。</td></tr><tr><td align="center">《微纪元》</td><td align="center">将人类变小也是人类留在地球继续生存的一种方式。我们对“小蓝球”的情愫啊。</td></tr><tr><td align="center">《西洋》</td><td align="center">现实中如果郑和当年继续西行，我们当今的生活又会是什么样呢？</td></tr><tr><td align="center">《纤维》</td><td align="center">多元宇宙的奇思。</td></tr><tr><td align="center">《信使》</td><td align="center">会不会这个世界上真有信使，只是我们普通人见不到而已。🤔</td></tr><tr><td align="center">《圆圆的肥皂泡》</td><td align="center">吹泡泡也能吹出一番天地。100年后，东汽西输会实现吗？</td></tr><tr><td align="center">《中国太阳》</td><td align="center">太空蜘蛛人</td></tr><tr><td align="center">《乡村教师》</td><td align="center">没有他们，宇宙中的地球就是低等的</td></tr></tbody></table><blockquote><p>刘慈欣的科幻脑洞确实太大了，科幻确实够硬，但是有一个问题是，大刘太喜欢在宏大的世界观中讲个小的事情了，看多了会有一些审美疲劳，所以说最好还是讲一篇篇零散起来读，而不是一下子读完好几篇。</p></blockquote><blockquote><p>◆  流浪地球</p><p>“你在平原上走着走着，突然迎面遇到一堵墙，这墙向上无限高，向下无限深，向左无限远，向右无限远，这墙是什么？”</p><p>只有像地球这样规模的生态系统，这样气势磅礴的生态循环，才能使生命万代不息！人类在宇宙间离开了地球，就像婴儿在沙漠里离开了母亲！</p><p>人类的逃亡分为五步：第一步，用地球发动机使地球停止转动，使发动机喷口固定在地球运行的反方向；第二步，全功率开动地球发动机，使地球加速到逃逸速度，飞出太阳系；第三步，在外太空继续加速，飞向比邻星；第四步，在中途使地球重新自转，掉转发动机方向，开始减速；第五步，地球泊入比邻星轨道，成为这颗恒星的卫星。人们把这五步分别称为刹车时代、逃逸时代、流浪时代I（加速）、流浪时代II（减速）、新太阳时代。</p><p>整个移民过程将延续两千五百年时间，一百代人。</p><p>所有的人都用泪眼探望着老师指的方向，星空在泪水中扭曲抖动，唯有那个星星是不动的，那是黑夜大海狂浪中远方陆地的灯塔，那是冰雪荒原中快要冻死的孤独旅人前方隐现的火光，那是我们心中的太阳，是人类在未来一百代人的苦海中惟一的希望和支撑……</p><p>我盯着那个泡泡，看到它表面上光和色的狂澜，那狂澜以人的感觉无法把握的复杂和精细在涌动，好像那个泡泡知道自己生命的长度，疯狂地把自己渺如烟海的记忆中无数的梦幻和传奇向世界演绎。很快，光和色的狂澜在一次无声的爆炸中消失了，我看到了一小片似有似无的水汽，这水汽也只存在了半秒钟，然后什么都没有了，好像什么都没有存在过。</p><p>◆  2018年4月1日</p><p>基延是基因改造延长生命技术的简称，通过去除人类基因中产生衰老时钟的片段，可将人类的正常寿命延长至三百岁。</p><p>程序员、网络工程师、数据库管理员这类人构成了IT共和国的主体，这个阶层是19世纪的产业大军在21世纪的再现，只不过劳作的部分由肢体变成大脑，繁重程度却有增无减。</p><p>在浩如烟海的程序代码和迷宫般的网络软硬件中，他们如两百多年前的码头搬运工般背起重负，如妓女般彻夜赶工。信息技术的发展一日千里，除了部分爬到管理层的幸运儿，其他人的知识和技能很快过时，新的IT专业毕业生如饥饿的白蚁般成群涌来，老的人（其实不老，大多三十出头）被挤到一边，被代替和抛弃，但新来者没有丝毫得意，这也是他们中大多数人不算遥远的前景……这个阶层被称作技术无产阶级。</p><p>世界格式化，真的只是IT共和国中极端分子的疯话？真的只是一个愚人节玩笑？吊着这把悬剑的那根头发还能支持多久？</p><p>我知道自己又猜错了，她不是要做基延，而是要冬眠。</p><p>◆  创世纪</p><p>记住，一定要和省一级领导机关联系，再往下更细的事情由他们去做，否则，你们是绝对顾不过来的。</p><p>◆  地火</p><p>我们不必留恋所谓过去的好时光，那个时候生活充满艰难危险和迷惘；我们也不必为今天的时代过分沮丧，因为今天，也总有一天会被人们称作是——过去的好时光。</p><p>◆  欢乐颂</p><p>当文明达到了一定的程度，它可能也通过反射宇宙来表现自己的存在。</p><p>◆  混沌蝴蝶</p><p>输入端微小的差别能够迅速放大到输出端，变成压倒一切的差别。这种现象被称为“对初始条件的敏感性”。</p><p>你害怕已久的事发生，有时是一种解脱。</p><p>◆  鲸歌</p><p>鲸歌在响着，这是大海的灵魂在歌唱。鲸歌中，上古的闪电击打着的原始的海洋，生命如萤火在混沌的海水中闪现；鲸歌中，生命睁着好奇而畏惧的眼睛，用带着鳞片的脚，第一次从大海踏上火山还没熄灭的陆地；鲸歌中，恐龙帝国在寒冷中灭亡，时光飞逝，沧海桑田，智慧如小草，在冰川过后的初暖中萌生；鲸歌中，文明幽灵般出现在各个大陆，亚特兰蒂斯在闪光和巨响中沉入洋底……一次次海战，鲜血染红了大海；数不清的帝国诞生了，又灭亡了，一切的一切都是过眼烟云……蓝鲸用它那古老得无法想象的记忆唱着生命之歌，全然没有感觉到它含在嘴中的渺小的罪恶……</p><p>◆  梦之海</p><p>大海是船儿的陆地，黑夜是爱情的白天。</p><p>◆  命运</p><p>船长摇摇头，他不感兴趣，好奇心只属于巅峰物种，他们没有任何好奇心，就像在我们的世界里蚂蚁和蜜蜂没有好奇心一样。</p><p>“进化的命运是冷酷的，人类曾经生在幸运中而不知幸运，但现在，比起蚂蚁和蜜蜂来，我们仍有更多的机会，我们应该抓住这些机会，不向命运屈服。”</p><p>◆  太原之恋</p><p>在这个IT从业者人数急剧膨胀的年代，真正精通系统底层编程的人却并未增加，因为能用的工具太多了，也太方便了，没必要像苦力似的一行行编代码，大部分都可以用工具直接生成。</p><p>诅咒诞生之日，正是写科幻的刘慈欣第264次因公来太原之时，尽管这是他最讨厌的一座城市</p></blockquote><h1 id="🎻《一步之遥》"><a href="#🎻《一步之遥》" class="headerlink" title="🎻《一步之遥》"></a>🎻《一步之遥》</h1><iframe src="//player.bilibili.com/player.html?aid=3973196&bvid=BV15s411Q7tD&cid=6402414&page=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><h1 id="🎥《当幸福来敲门》"><a href="#🎥《当幸福来敲门》" class="headerlink" title="🎥《当幸福来敲门》"></a>🎥《当幸福来敲门》</h1><table><thead><tr><th align="center">🧑导演：【美国】加布里埃莱·穆奇诺</th><th align="center">📌类别：剧情&#x2F;家庭&#x2F;传记</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.01</td></tr></tbody></table><blockquote><p>Chris Gardner：People can’t do something by themselves; they wanna tell you you can not do it. </p><p>克里斯•加德纳：当人们做不到一些事情的时候，他们就会对你说你也同样不能。 </p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p811966985.webp" alt="克里斯！他做到了！为他鼓掌！"></p><h1 id="🎥《三块广告牌》"><a href="#🎥《三块广告牌》" class="headerlink" title="🎥《三块广告牌》"></a>🎥《三块广告牌》</h1><table><thead><tr><th align="center">🧑导演：【英国】马丁·麦克唐纳</th><th align="center">📌类别：剧情&#x2F;犯罪</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐</td><td align="center">✔时间：2023.01</td></tr></tbody></table><blockquote><p>You don’t even need a gun. </p><p>And you definitely don’t need hate.</p><p>Hate never solved nothing…But calm did.</p><p>And thought did. try it.</p><p>你甚至不需要枪，更不需要仇恨，仇恨解决不了问题，但冷静可以，思考可以，试试吧。</p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2515373495.webp" alt="燃烧的广告牌，弗兰西斯·麦克多蒙德（科恩嫂）演技大爆发"></p><h1 id="🎥《白日梦想家》"><a href="#🎥《白日梦想家》" class="headerlink" title="🎥《白日梦想家》"></a>🎥《白日梦想家》</h1><table><thead><tr><th align="center">🧑导演：【美国】本·斯蒂勒</th><th align="center">📌类别：剧情&#x2F;冒险</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2023.01</td></tr></tbody></table><blockquote><p>To see the world,  things dangerous to come to, to see behind walls, to draw closer, to find each other and to feel. That is the purpose of LIFE.<br>开拓视野，冲破艰险，洞悉所有，贴近生活，寻找真爱，感受彼此。 这就是人生的目的。</p></blockquote><iframe src="//player.bilibili.com/player.html?aid=506426459&bvid=BV11u411o7rs&cid=435294265&page=1&high_quality=1&danmaku=0&autoplay=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2176074878.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2175374591.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2179776895.webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2160227131.webp"></div></div></div><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2207333224-1676526357672-11.webp" alt="献给创造这部杂志的人"></p><p class="note note-light">观后感</br></p>　<p>&emsp;&emsp;想去冰岛，去格陵兰岛，去尼泊尔，去喜马拉雅山，在没有人烟的地方骑自行车，在风景如画的地方滑滑板，在夕阳下的高原上踢足球，去坐渔船去跳海，去爬飞机去看火山，去看野生动物但不按下快门键。</p><blockquote><p>如果你见过格陵兰，喜马拉雅和冰岛的火山，就再不会被生活打败。 </p><p>每个人都想突破自己的平淡生活，成就不凡冒险。不是每个人都有机会完成生命中的精彩，但有一种电影能让我们有那么片刻的怅然所失。</p></blockquote><p>&emsp;&emsp;’LIFE’杂志的创刊词一直都被我放在网站的<code>关于</code>页面的最下方，这是我一直所期望的。生活中有很多的枷锁，但我想尽我所能去体验这样的人生。<strong>开拓视野，冲破艰险，洞悉所有，贴近生活，寻找真爱，感受彼此。 这就是人生的目的。</strong></p><h1 id="🎬《请回答1988》"><a href="#🎬《请回答1988》" class="headerlink" title="🎬《请回答1988》"></a>🎬《请回答1988》</h1><blockquote><p>来自燕燕的推荐！</p></blockquote><table><thead><tr><th align="center">🧑导演：【韩国】申元浩</th><th align="center">📌类别：剧情 &#x2F; 喜剧 &#x2F; 爱情</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2022.12</td></tr></tbody></table><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2540057334.webp" alt="双门洞全家福"></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2292035063.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2286972329.webp"></div></div></div><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/2821002558.jpg" alt="好喜欢长头发的德善呀"></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/2821176459.jpg" alt="2821176459"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/2821145898.jpg" alt="2821145898"></div></div></div><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/2820764300.jpg" alt="磕CP"></p><p class="note note-light">经典台词</br></p><p class="note note-sencond">第1集 心手相连</br></p><ul><li>或许家人最不懂，但懂不懂有什么可重要的呢，最终，消除隔阂的，不是无所不知的脑袋，而是手拉手，坚决不放手的那颗心，归根到底是家人，别说是英雄，哪怕是英雄他爷爷，最后那一刻，也要回到家人身边。出了家门从外面世界所受的伤害，各自在生活中留下的伤疤，甚至，把家人留给我们的伤痕也会来抚摸的最后一个安慰，归根到底是家人。还有，不，即便如此，历史还是在重演。</li></ul><p class="note note-sencond">第2集 你对我的一个误解</br></p><ul><li><p>大人们只是在忍，只是在忙着大人们的事，只是在用故作坚强来承担年龄的重担，大人们，也会疼。</p></li><li><p>懂事的孩子，只是不撒娇罢了。只是适应了环境做懂事的孩子，适应了别人错把他当成大人的眼神。懂事的孩子，也只是孩子而已。错觉是短暂的，但误会是长久的，所以，错觉是个人自由，但误会是不可有的。</p></li></ul><p class="note note-sencond">第3集 有钱无罪，没钱有罪</br></p><ul><li>朋友，说什么朋友，那种人还算什么朋友啊。什么朋友哪个样子啊。你的朋友怎么都那个样子。听说我们一夜暴富都想着跟我们要钱，以前我们连煤饼都没有，孩子们就睡在冰冷的炕上，那时候没人理会我们。不过，当时那个朋友在干嘛，就是那个，正峰这么大的时候，得了感冒，没钱买药，我到处借钱的时候，就那个，你的老乡，一起来首尔的那个朋友。突然找了跟你喝了杯烧酒吧。我心想，这人真没有眼力见，我们都穷死了，还要招待客人。可是，那个朋友走的时候说，给正峰正焕买好吃的吧，然后偷偷塞了我5万。他也是勉强糊口的处境呢。真是，当时的5万。哎呦。当时那个朋友，在我心中简直是上帝，救世主。去找那样的朋友吧，不要去找没用的朋友，自找苦吃。给他打个电话。</li></ul><p class="note note-sencond">第4集旁白和台词Can'thelp~ing</br></p><ul><li>没有再比我的房间更讨厌更简陋的地方了，但是讨厌和简陋的另一种说法，可能是熟悉和舒适。一起度过漫长岁月再熟悉不过的我的所有，和让我舒适的我的人，才能真正了解我，拥抱我，安抚我。因为讨厌和简陋有时候可能烦得要死，但在世上能守护我的，只有我的人，熟悉和舒适的，对的，我的人，所以，不能不爱，我们不能不爱他们。不能不爱。</li><li>正焕：哎呦，听说你输惨了啊。厉害啊，小子。小区脸都丢光了，还怎么出去混啊<br>东龙：听说阿泽输了啊，哎呦<br>善宇：喂，听说你黄了啊。哎呦，是啊，也是时候输一次了，差不多也到了输一次的时候了嘛。<br>阿泽：是我失误了<br>东龙：什么狗屁失误啊，天才围棋手怎么能失误啊。<br>阿泽：我难道就只能一直赢吗<br>东龙：你就得一直赢，不能输，也不能有点背儿，不能有低谷，不能拉……不，屎还是能拉的，但是不能有味儿。<br>正焕：呀，现在是笑的时候吗？开骂啊，倒不如开骂啊。瞧好了啊，像这样，这该死的XXX。呀，善宇呀。<br>善宇：这该死的XXX。你也试试呀<br>正焕：赶紧试试啦<br>阿泽：这该死的XXX<br>东龙：呀，你倒是好好说啊。这该死的XXX该死的，该死的<br>阿泽：这该死的XXX，该死的</li></ul><p class="note note-sencond">第5集 过冬准备</br></p><ul><li><p>善宇妈妈：我也是我妈妈的宝贝女儿，如果我妈妈知道我听着这种话过日子，她会流血泪的，就算是可怜我妈妈，以后我也不会再听这种话过日子了。婆婆，以后您不要再来我家了。我的孩子，我会养，就算把头发剪了，我也会供他们念大学的，就算不能给他们买名牌鞋，但绝不会让他们饿肚子，也会给他们买好看的衣服，绝不会让他们在别人面前丢人，我们会过得很好的。所以，婆婆，拜托您，不要再来这里了，婆婆。让我们三个人过得舒服一点吧。拜托以后，再也不要来这里了。我以后再也不想见婆婆了，就算找来这里，我也不会再给您开门了。知道了吧，婆婆。</p></li><li><p>宝拉妈妈：我女儿不是的，可不能抓走她。你知道我女儿是什么样的人吗，在这一片学习是最好的，甩开有钱人家的孩子，她一直是第一，完全可以去首尔大学法律学院，就因为奖学金把志愿改成了师范专业，考上首尔大学，还拿了一年奖学金。她小时候的梦想是律师，检察官，法官，为了不让父母担心学费，自己做主跟老师说，改了志愿。你知道首尔大学吧，我们国家的精英才能考上的，她连课都没有补过，也没有请过家教，一下子就考上了。我女儿就是这样的人。你知道我们这一片庆祝了几天吗？她爸爸的公司也说恭喜，还送来了花篮，她高中毕业的时候可是作为学生代表从校长那儿领取了大奖，数学还是全国前十名。她舅舅是道厅的高官，是和道知事一起吃饭的那种关系，堂兄妹中还有一个医科大大学生。你知道她爸爸吗？在韩一银行上了二十多年班，还得到过银行行长颁发过的奖项，行长和她一起吃过饭，说没有比她更聪明更乖巧的女儿，银行行长还给她零花钱，亲自开车送她回家了。</p></li><li><p>偶尔觉得妈妈很丢人，妈妈为什么连起码的脸面和自尊心都没有呢。我都觉得上火。比起她自己，她有更想守护的，那就是我。但当时我并不知道。人真正变强大，不是因为守护着自尊心，而是抛开自尊心的时候，所以妈妈很强大。</p></li><li><p>听说神不能无处不在，所以创造了妈妈。到了妈妈的年龄，妈妈仍然是妈妈的守护神。妈妈这个词，只是叫一叫，也触动心弦。妈妈，依然力大无比。</p></li><li><p>好不容易到了能够安慰妈妈的年龄时，已经太懂事了，真不好意开口说，谢谢妈，我爱你。现在，想让妈妈高兴的话，就说，我现在需要妈妈，就这一句话就足够了。</p></li></ul><p class="note note-sencond">第6集 初雪来临</br></p><ul><li><p>正峰：宝拉是我们小区里最聪明的孩子，女高时期包揽了全校第一的位置，以全国排名第80的优异成绩考入了首尔大学数学教育系，可谓秀才中的秀才。有些大人，说成宝拉脾气犟，可怕，也有人说成宝拉让人胆战心惊，可我认识的成宝拉，只是表现得很粗狂罢了，其实是内心很温暖的女孩。</p></li><li><p>夜星李文世：是今天最后的内容，这位说自己一直掰着手指头等待着今天，就是下第一场雪的这一天，很多夜星的听众们都说，想和喜欢的人一起看初雪，在这些人中这位的来信内容是最迫切的。是双门洞的善儿写来的信：”你好，文世哥哥。我是正在初恋中的双门洞善儿，我喜欢上了住在一个胡同里的朋友，还有他也喜欢着我，但是他还没有向我表白，因为他容易害羞，应该是鼓不起勇气吧。偶吧，我的愿望是在下初雪的那一天，从他那里得到表白，所以一定要在下初雪的那天读我的来信，因为那天就算我没有接受到告白，但我的信能够传播到全国，我也能得到少许的安慰。当然，下初雪的那一天信也被读人家也表白那就再好不过了。文世哥哥，一定要一起祈祷，祝我的初恋成功。我相信哥哥，全靠你了。”非常有负担，相信……相信我是好的，但……双门洞善儿写来的故事，相信有同样故事的人很多。双门洞善儿，你知道吧，外面在下第一场雪，那位朋友向你表白了吗？真好奇。下第一场雪的时候接受初恋的告表白，会是什么感觉呢，今晚估计是世上最幸福的两个人，有这种想法，就像正在下的美丽的初雪一样，希望两位的爱情也能长长久久美丽下去。夜星的听众你们知道吗？下第一场雪的时候表白的话，成功率超过90%，有可能是因为浪漫的气氛吧。你若，正在爱着某一个人，或者正在犹豫怎么表白，机会正是今天晚上，鼓起勇气表白吧，成功率高达90%，然后，剩下的10%，是命吧，也就是交给运气。好，加油哦。希望今天表白的所有人都能终成眷属，最后，如果还有人没有得到心爱的人的表白的话，或者，正在为爱情的伤痛难过的话，不要太悲伤，或许，另外一个人正在爱着你呢。然后，突然向你表白也不一定哦，在意想不到的时候跟你说已经暗恋了你很久。好，今天的最后一首曲子，非常符合今晚的氛围，李定锡演唱的下第一场雪。</p></li></ul><p class="note note-sencond">第7集 致你</br></p><ul><li><p>宗教之所以在地球上存在，或许是因为这帮女儿和儿子们，是因为父母们急切地抓住任何一样东西，为儿女们祈福。为世上的父母和他们的儿女，上帝、菩萨、阿拉神，还有圣诞老人，必须存在。</p></li><li><p>已到了不相信圣诞老人的年龄，不相信守护天使游戏，偷偷放下礼物，暗暗地喜欢对方，从中得不到满足。若不表白，因为心里充满了对方呼吸都困难，若要表白，因为太羞涩，心脏都要蹦出来，很想张扬，但又不想被人发现，88年的那个悸动，我们正值18岁。</p></li><li><p>时间会流逝，所以时间带来离别，因此，时间给人们留下遗憾。若爱一个人，现在就说吧，在忙碌的这个瞬间，在变成遗憾之前说出口，或许时间给我们最大的礼物是，爱过的记忆，所以，在更晚之前，战胜羞涩，表白心声，向心爱的他。</p></li></ul><p class="note note-sencond">第8集 温暖的一句话</br></p><ul><li><p>正焕：哥，那手术失败的几率都不到百分之三，我都查过了<br>正峰：小时候得心脏病的几率连百分之二都不到，所以哥哥很害怕那百分之三。<br>秀京：他是第一个跟我说不要抽烟的人。去年父母去世之后，大家都跟我说好话，没关系，都不错，做得很好。但是余晖是第一个跟我发火让我戒烟，还是很真诚的，真的谢谢你。<br>正峰妈妈：快睡吧，明天早晨做手术。<br>正峰：我睡不着。<br>正峰妈妈：为什么睡不着，害怕吗？<br>正峰：有点。<br>正峰妈妈：正峰啊，妈妈今天问了所有的护士，手术会不会不成功，说是完全不会，真的。你见过妈妈说谎吗？还有啊，晚上妈妈和爸爸出去吃了排骨，如果我担心手术，还能出去吃饭吗。爸爸妈妈真的一点都不担心你的手术，所以你也不要担心。快点，好好睡一觉，知道了吗。怎么了，我的儿子。那么大的手术也挺过来了。<br>正峰：妈妈很坚强……妈妈很坚强，但是我身体也弱心也软。<br>正峰妈妈：我儿子哪儿弱了，你像妈妈一样很坚强。那么大的手术，不是谁都能挺过来的。正峰啊，那已经很厉害了。你是比妈妈更坚强、更厉害的人。快睡吧，妈妈去看会儿电视。</p></li><li><p>话里带着心情，所以每一句话都带着体温，在这冷冰冰的恶言相向的世界里，让你坚持活下去的，维持生活体温的，也不是名言，也不是有知识的话语，而是带着你粗鲁的体温的温暖的一句话。</p></li></ul><p class="note note-sencond">第9集 所谓越线</br></p><ul><li><p>阿泽爸爸：死亡哪有顺序呀，人活着就是这样啊。拼命活着有什么用，一夜之间就人走了。<br>善宇妈妈：偶吧呀，我，因为太丢人了。<br>阿泽爸爸：丫头啊，丢什么人啊，我可是偶吧。看我，就我这样，我也不觉得丢人。善英，人活着，有些事情需要欠人情麻烦别人，别人都那样活着，不要一个人憋着。<br>善宇妈妈：我只想让哥哥看到我过得好<br>阿泽爸爸：说什么呢，你已经很好了，难道不好吗，怎样才能比你活得更好。善宇、珍珠，你养得很好，那就已经足够了。会过日子，养好了子女，而且还愿意照顾老乡哥哥。善英，当时你要是没叫我来首尔，估计我至今还没忘记阿泽的母亲，整天酗酒度日，谢谢。谢谢你叫我来。<br>善宇妈妈：谢什么呀。<br>阿泽爸爸：我这辈子做的最好的事情就是搬到了首尔，这次也是，要不是邻居们我早就死了，欠了不少人情，麻烦大家了，很抱歉，但我不要想那么多。以后，总有一天我也有机会还人情吧。你也是，不要一个人全部扛着，欠人情又怎么了呢。</p></li><li><p>所谓界限，就是到那里为止的意思。守住那界限，就是继续现在所熟悉的感觉，那意味着维持那里的世界、那里的规则和关系，那也代表着，如果不越界，就无法遇见另一个世界的规则和关系。如果想要崭新的关系，如果想拥有爱情，就必须越界。若是守住了界限，她&#x2F;他跟你就只能到那里为止。当然，这世上也有绝对不能逾越的界限。</p></li></ul><p class="note note-sencond">第10集 回忆</br></p><ul><li>宝拉：呀，还不快进去。你这年纪，还需要爸爸妈妈照顾了吗？闹什么别扭啊。你现在穿着什么鞋，LA标志，对吧。呀，可成德善已经穿了三年阿提斯了。上衣是sergiovalente，还穿jordache牛仔裤，你这年纪重要的不是父母慈祥而是父母有钱，懂不懂。所以别嘚瑟，赶紧回家去。还有，下回还有什么不满，就别离家出走，而是直接发火，干嘛忍着，你说了他们才会懂啊。你不说他们怎么知道啊。呀，你爸妈已经够忙了，怎么可能还顾得上你的精神世界，先回家，郑重道歉，说对不起了，如果气氛还是不好，到时候再离家出走。</li></ul><p class="note note-sencond">第12集 所谓爱一个人</br></p><ul><li>你不高兴让妈妈受苦是吧？那样你才能更加安心。但妈妈是不高兴买不起给你的耐克运动鞋。你只为自己着想吗，不为妈妈着想吗，你这个不懂事的家伙。所谓爱一个人是，不是宽裕了想要给予，而是恳切地必须给予。善宇呀，你爱妈妈是吧？呀，所谓爱一个人，真的是一件难事。所谓爱一个人，不是喜欢对方的体温，而是要跟对方的体温越来越接近。所谓爱一个人是，即便对方一直折磨你，你想要一直讨厌对方，但怎么也讨厌不起来。所谓爱是，不是不讨厌，而是绝对不能讨厌的意思。</li></ul><p class="note note-sencond">第13集 超人回来了</br></p><ul><li><p>善宇妈妈：哎呦，行了行了。我可不想善宇难受，就算为了善宇，我也绝不会再婚的。还有啊，阿泽他爸确实是个好人，在金海也是，出了名的好人啊，好人，所以我才想多照顾他一下，可你们继续这样的话，从今天开始我就绝不踏进阿泽家半步了。<br>德善妈妈：知道了。可我还是觉得有点可惜。<br>正焕妈妈：可善英啊，你的人生呢，孩子固然好，你可能觉得我没资格和你说这些话，你的人生也就一回。对不对？你也至少应该幸福地生活一回啊。你说呢。我是觉得你这年纪太可惜了，太年轻了，要说把一切献给孩子，你的年纪还是太年轻，可惜了你的青春。<br>善宇妈妈：哎呦，行了行了，大姐。只要我的孩子能幸福……大蒜好辣啊……我也就幸福了……这就够了，这就够了啊。</p></li><li><p>小的时候，我家住着超人，他是个能修理世上所有东西的百战天龙，何时何地有谁遇到了麻烦他就会出现，然后解决一切，就像万能侠客一样，他是个不会懦弱的超级英雄般的存在，但是，当我懂事之后才好不容易明白了，只是没有被发现罢了，超人也是人。有多少肮脏、卑鄙、令人作呕、悲伤、可怕、累人的世界，从爸爸的面前闪过了呢。而现在，我才好不容易懂得了，无论多么肮脏、卑鄙、令人作呕、悲伤、可怕或者累人，他之所以能够坚强地挺过来，是因为有要守护的人，因为有家人，有我在，不是出于别的理由，是因为他要以父亲的名义生活下去。</p></li></ul><p class="note note-sencond">第14集 亲爱的，不要担心</br></p><ul><li><p>1989年的残冬，现在这个狂跳的心脏，是因为病呢，还是因为她，我很想确认一下。</p></li><li><p>宝拉爸爸：爸妈很抱歉到现在才和你说这些，现在还不晚，爸妈也会支持你，你就学你想学的，准备司法考试吧，作为父母不能让自己的孩子实现梦想，爸爸觉得很对不起。爸妈至今，一想到那件事就没脸见你，所以不要担心钱，已经都还完了，你就放下心，准备司法考试吧。无论多久，爸爸都会支持你的。</p></li><li><p>德善：东龙，我想问件事<br>东龙：问吧<br>德善：为什么没有人喜欢我呢<br>东龙：哦，阿泽……哎呦，看错了<br>德善：我是认真的。<br>东龙：我也是认真的。<br>德善：为什么没有人喜欢我？看来我没资格被爱。<br>东龙：德善呐<br>德善：恩？<br>东龙：你喜欢水分多的番薯还是面面的番薯？<br>德善：水分多的<br>东龙：你喜欢李文世还是朴南正？<br>德善：李文世<br>东龙：喜欢我还是喜欢阿泽？<br>德善：阿泽<br>东龙：烦死了。讨厌我吗？<br>德善：还是更喜欢阿泽<br>东龙：那么，喜欢正八还是喜欢善宇？<br>德善：干嘛问这个<br>东龙：德善呐，你呢，别在乎谁喜欢你，而是你，你喜欢的人是谁。那么肯定地说喜欢什么番薯，难道没有你喜欢的类型吗。德善，不，秀妍呐，除了等待别人喜欢你，你大可以喜欢别人。是吧？现在的孩子啊，只懂求根公式，不懂人生。可是你，不懂求根公式，人生也不懂。你懂什么呀？什么呀你？真是的。快起来吧。<br>德善：去哪儿啊？<br>东龙：披萨来了。</p></li></ul><p class="note note-sencond">第16、17集 人生真是个迷1、2</br></p><ul><li><p>德善爸爸：不过，我们德善的梦想是什么呀？你最想做什么样的人啊？爸爸在背后偷偷支持你胜过宝拉，你就说说看。别担心了啦，爸现在已经还清了债务，也攒了不少钱了。怎么，梦想也要保密吗？<br>德善：没有，我没有梦想，爸。很让人寒心吧。可能我真的很蠢吧。<br>德善爸爸：什么蠢啊？怎么就蠢了？这个梦想，慢慢拥有就好了嘛。<br>德善：真的吗？<br>德善爸爸：当然是真的了。你爸我啊，在你这个年纪，真的什么都没想过，德善啊，大家都这样，没关系的，德善啊。不是只有你才这样的，一点都不用担心。爸也不是一开心就梦想当银行职员的，不是的，只不过，只不过是为了混口饭吃就这么按部就班地走了，再然后就走到了现在这一步。<br>德善：那爸你现在的梦想是什么？那爸你这会儿的梦想是什么？<br>德善爸爸：爸这会儿的梦想啊，就是我家宝拉、我家德善、我家余晖没有病痛，健健康康的。爸的梦想就只有这一个。<br>德善：不是我的梦想，是爸的梦想。爸爸的梦想是什么？<br>德善爸爸：没错啊，这就是爸爸的梦想啊。三个孩子都健健康康的，没有病痛，除了这个，爸还能有什么梦想啊。没有了，就这个。<br>德善：这算什么嘛。<br>德善爸爸：哎呦，臭丫头，你哭什么呀。</p></li><li><p>东龙爸爸：我对跳舞的执念连这么大丁点都没有了。<br>德善爸爸：当真吗？<br>东龙爸爸：是，一点都没有。我最担心我们家那小子，完全像我，学习不好好学，整天疯玩跳舞，这最让我担心了。我家东龙这浑小子，得清醒清醒才是，我这个当爸的真是树了个好榜样啊。真是树了个好榜样。<br>阿泽爸爸：我也希望阿泽没有像我。这就是我的梦想，我的梦想。<br>正焕爸爸：那是什么话呀？像凤凰堂多实在多成熟啊？你就一点也别担心阿泽。<br>阿泽爸爸：得像好的方面啊，好的方面。我们阿泽也得像其他孩子似的，会撒娇、会发脾气、会发火，真希望他能够把自己内心的情感流露出来。从小就开始玩围棋，一直在大人们之间长大，所以习惯了忍气吞声，他本来不是那么内向的孩子。我不期望别的，我只希望他能像他那年纪的人一样生活，希望他能不再吃安眠药，能放心得睡觉，那就是我的愿望。<br>正焕爸爸：我也没别的，我家正峰，能像现在一样不生病，健健康康就好，别的我一点都不期待。<br>德善爸爸：你们怎么都在担心子女。</p></li><li><p>正焕妈妈：哎呦，这都是以前的事儿了。现在我的愿望就是我们正峰能上大学。这就是我的梦想，梦想啊。<br>德善妈妈：我也是，我也是，我也是。还有，宝拉那丫头性格能圆滑点，那我就再也没有别的希望了。真想让德善余晖和她放在一起全部搅和了平均起来。<br>善宇妈妈：我们善宇也是，他跟他爸爸一模一样，真是FM啊。太那样的话，到社会上就不太好了。</p></li><li><p>德善：为什么只有我一个人没有梦想呢？我一直很受挫。但今天爸爸的话给了我很多安慰，不过我还是羡慕有梦想的人，羡慕想成为美容师的子贤，虽然像在吹牛，但梦想着当歌手的余晖也让我很羡慕，他们怎么会准确地知道自己做什么呢，我为什么又连想做的事儿都没有呢，今晚格外觉得自己好窝囊。</p></li><li><p>1989年4月8日星期六，是我人生最大屈辱的日子，我竟然被成宝拉抱在怀里哭鼻子了，怎么会这样，真是后悔不已。<br>曼玉终于在收到第35封信之后给哥哥回了一封信，而那回信是两个人之间的最后一封信。曼玉在夏天还没到来前去美国留学了。之后和我们也断了联系。<br>1989年7月15日星期六，暑假开始了，正峰哥出发去寺庙了。然后。我今天平生第一次流鼻血了。看来我真的是高三学生。<br>1989年11月1日，今年的优胜棒球队是海泰老虎，没有任何变化，对了，有个小小的变化，太平洋海豚队进入附加赛了。<br>1989年12月5日，下了今年的第一场雪。<br>1989年12月8日，这该死的高三生活也剩下不到一周了。七天，只要再挺过七天就可以了。我们在度过高三时间的期间，阿泽今年更新了三大记录，一年通算最高胜率，最多连胜，还有，最多对弈，阿泽今年一年足足对弈了111局。<br>1989年12月23日，雪要下不下的天气，平安夜前一天，我们去看了大学生歌谣祭，而这一天是我们一起度过的十几岁的最后一天。</p></li><li><p>新年到了，进入了陌生的1990年。然后我们步入了20岁。正焕去了清州，因为空军士官学院在那里，善宇考上了医大并且拿到了全额奖学金。然后，正峰哥哥结束漫长的高考生涯，终于考上了大学。就这样，大家都朝着梦想迈开了一步，我也向自己的梦想开始了新的挑战。春暖花开的三月，我考上了鹭粱津大学一泉学院，但我不孤单，因为我有永远的搭档娃娃鱼。</p></li></ul><p class="note note-sencond">第18集 再见初恋</br></p><ul><li><p>缘分是不会经常找来的，如果要用到缘分这个单词，必须是偶尔，很偶然地出现的戏剧性的时刻，那才叫缘分，所以缘分的另一个名字，是时机（timing）。如果今天，我没有被那该死的红绿灯拦住，那要命的红灯若帮我一次，我有可能就会命运般地站在她的面前，我的初恋一直都是被那该死的，被那该死的时机绊住了脚，被那该死的时机。</p></li><li><p>但是缘分，还有时机，不是自动找上门的偶然，是带着恳切的盼望做出的无数选择创造的奇迹般的瞬间，毫不迟疑的放弃和当机立断，弄出了时机。那家伙更恳切，我应该鼓起更大的勇气，搞怪的不是红绿灯，不是时机，而是我数不清的犹豫。</p></li><li><p>善宇：姐姐，你真厉害。再怎么也是，你怎么能跟我同校、同系甚至是同期出来联谊啊。你对我已经都懒得费心了吗？<br>宝拉：我赌上百分之一的希望盼着你会出来，但是说外号是垃圾，所以想，百分之一的希望飞走了。但是我又想了想，希望百分之一的可能性在别处，被你听到，因为是同一个学校同一个系，又是同期，被你听到吧。被你听到，真的只是百分之一的概率，但如果你还喜欢我，我们能不能重新开始呢，抱着这么期待出来了。善宇啊，可能听起来像是在胡说八道，我很想你。</p></li><li><p>人生就像一盒巧克力，打开之前永远都不知道下一个吃到的是什么味道，就算是拿到了一颗超苦的巧克力豆，也无能为力，这就是我所选择的命运，不能后悔，不能哭哭啼啼，也不能……心痛。</p></li><li><p>德善呐，我原本打算毕业的时候给你的，现在给你。我喜欢你。我说我喜欢你。你知道我为了你都做到什么地步了吗？为了和你一起上学，每天在大门口等你一个多小时，你从读书室回来之前我担心得都不能入睡，她怎么这么晚，是不是又睡着了，我一心想着你，你。在公交车里偶然遇见你的时候，一起去演唱会时候，还有我的生日你送我衬衫的时候，我真的是开心得要死，一天会想你十几次，能看到你就是开心。以前就想说的，我真的喜欢你，我爱你。</p></li></ul><p class="note note-sencond">第19集 你已经竭尽全力了</br></p><ul><li><p>感谢牌：26年来，为韩一银行奉献的成东日科长，谢谢你的辛勤劳动。以后不再是成东日科长了，但不变的是，成东日是李一花的丈夫，是成宝拉、成德善、成余晖三姐弟的值得骄傲的爸爸。我爸最常说的话是：该死和去死。我爸最讨厌听到的话是：万年代理和做担保。我爸最拿手的是：买没用的东西，亲亲我们。最爱的食物是：调味泥蚶和烧酒。还有我爸的最爱，正是我们一家人。作为爸爸的女儿，和作为儿子，没能说一句暖心的话，没能陪你喝一杯酒，没能先拥抱你，没能说我爱你，还有，没明白爸那个称呼的重量，所以抱歉，又抱歉。即便如此，就像毫不吝啬的树木那样，对宝拉是值得尊敬的父亲，对德善是朋友一样的父亲，对余晖是可以依靠的父亲，我们带着那份感谢，赠予您这个牌。1994年11月5日，全体子女。</p></li><li><p>成东日：老婆，你听过花无百日红吗？<br>李一花：嗯。听过。<br>成东日：美丽也是一时的，花无百日红。我现在要打起精神做点什么，但那个也只是奢望而已啊。我的人生就这样过完了。<br>李一花：不光是我们的岁月在流逝，别人的岁月也在流逝，能跟谁诉苦呢。就当那样吧。<br>成东日：我今天悟到了一个大道理。<br>李一花：什么？<br>成东日：我以为叶子掉了，就完了。可是，叶子掉了之后，又结果子。我一时忘了那个，只顾着可惜我的叶子掉了。我，我没看到那一点，虽然被公司辞退了，但养子女，真的是，真的是很成功啊。<br>李一花：哎呦。可是，谁知道啊，谁又操我们的心。<br>成东日：是吗？我高兴得太早了。就是啊，父母的这种心情，子女们总有一天会应答的，说谢谢。进去吧。</p></li><li><p>赵秀香：我呀，我的人生，一直被人叫东龙妈妈、大龙妈妈，不高兴这样，我的名字叫赵秀香。照顾孙子的时候突然胸闷，我在这里做什么呢，无法接受，这样下去，怕自己疯掉，趁孙子们睡着了，直接去了大田妹妹家。</p></li></ul><p class="note note-sencond">第20集 我的青春再见双门洞</br></p><ul><li><p>最早离开双门洞的是吉东叔一家，吉东叔打算趁着阿姨还年轻让她住进新公寓里享福，所以第一个离开了这胡同，之后是娃娃鱼一家，再之后是双门洞永远的豹子女士离开了这胡同，最后一个离开胡同的就是我家了，以我们家搬家为止，双门洞10-2胡同变成了一条无人街。</p></li><li><p>当再次回到凤凰堂胡同之时，就如流逝的岁月般，胡同也上了年岁，但无论是我的青春还是这条胡同，再也无法回到过去了。岁月依然流逝，一切终将过去，岁月渐长。青春之所以美丽，恐怕这就是原因。在刹那的瞬间耀眼闪烁之后，再也无法回去。涌出眼泪的青涩岁月，我也有过，这种青春。</p></li><li><p>双八年，我们双门洞的故事就此结束，怀念那个时期，怀念那个胡同，并不只是怀念年轻时候的自己，而是因为那里有爸爸的青春，妈妈的青春，朋友们的青春，和我所有爱着的青春，也因为对那些再也无法聚到一起的年轻的风景最后问候一声而感到惋惜。如今对已经逝去的东西，对再也无法回去的时间，说一声迟到的问候，再见，我的青春，goodbye，双门洞。</p></li></ul><p>　</p><p class="note note-light">观后感</br></p>　这是我看的第一部韩剧，是豆瓣韩剧榜单上评分最高的韩剧，之前听朋友们说过这个剧非常适合在冬季躲在被窝里刷，但是我不是很喜欢看电视剧，就没有放在心上。在看了朋友的推荐下，我看了日剧《非自然死亡》之后，对电视剧也不是那么不能接受了，于是在朋友的安利下，我去看了这部广受好评的《请回答1988》。看完之后我的评价是确实的一部非常好的电视剧，一点也不愧对豆瓣上如此的高分！<p>在看第一集的时候我的感觉是没有这么好看，特别是我接受不了<code>韩国人的聒噪</code>，太能大喊大叫了，对比下来<code>日本人就相对礼貌谦恭</code>，这是我电视剧中为数不多不能接受的地方，但或许这就是文化差异吧。</p><p>在故事线、人物成长线、历史背景等方面这部剧给予了极佳的视听体验，其中很多的情节有很深的教育意义，让我在亲情，爱情，友情方面有了更多的感悟，其中的一些感动人心的情节让我这个188&#x2F;180的山东糙汉子哭的稀里哗啦的。*现在听到剧中的OST我还能想起一些情节，我还想哭，我哭&#x2F;(ㄒoㄒ)&#x2F;~~*就像豆瓣《请回答1988》小组中的很多人一样，我未来可能也会选择去再刷几遍，经历了更多事情之后，再回过头来看也会有不一样的感觉。也非常期待有一天，我也能在大雪纷飞的寒冬腊月，坐在沙发上，搂着自己所爱之人，一起嗑CP，一起哭得稀里哗啦的。</p><blockquote><p>附一个知乎上我觉得写得非常好的评价。</p><blockquote><p>“他们带我重新过了一遍自己曾经的生活，明白了当时没能明白的事。”</p><p>如何评价电视剧《请回答1988》？ - 知乎 (zhihu.com)](<a href="https://www.zhihu.com/question/37297976/answer/239283117">https://www.zhihu.com/question/37297976/answer/239283117</a>)</p></blockquote></blockquote><h1 id="🎬《非自然死亡》"><a href="#🎬《非自然死亡》" class="headerlink" title="🎬《非自然死亡》"></a>🎬《非自然死亡》</h1><blockquote><p>来自Murphy的推荐！</p></blockquote><table><thead><tr><th align="center">🧑导演：【美国】本·斯蒂勒</th><th align="center">📌类别：剧情 &#x2F; 悬疑</th></tr></thead><tbody><tr><td align="center">💖推荐：⭐⭐⭐⭐⭐</td><td align="center">✔时间：2022.12</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2517628617.webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2529346414.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2529346390.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2518498708.webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2518496722.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2518497741.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2518496141.webp"></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2518496211.webp"></div></div></div><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/p2516020255.webp" alt="啊啊啊，她对我笑了，她邀请我去吃肉，她心里有我，我哭~"></p><p class="note note-light">经典台词</br></p><ul><li>人死了哪会分什么好人坏人，只是碰巧死了，我们也只是碰巧还活着。碰巧还活着的我们，不能把死亡当作不吉利的东西。</li><li>有工夫绝望的话，还不如吃点好吃的去睡觉呢!</li><li>人无论在何时何地，一旦切开剥皮都只是一块肉，死了就知道了。</li><li>梦想什么的，用不着那么夸张的东西吧，有个目标就行了。目标吗?比如，发了工资要买什么，或者下次休假去哪玩，又或者为了谁而工作。</li><li>世道如何，是看自己如何处世吧。</li><li>伴侣就要找那种睡相让你觉得很喜欢的人。</li><li>已死之人无法给你答案，今后的人生，你就为了能获得他的原谅，而活下去吧。所有的物质都有毒，没有无毒的东西，毒与药的区别就在于用量。</li><li>医学是为未来而生的工作。</li><li>谁儒弱，谁的声音小，谁就吃亏，现在这个社会就是这样，可悲啊。</li><li>即使一辈子孤零零的，至少在最后变成了花啊。如果能在温暖的，散发着香气的地方，变成一朵漂亮的花，不也是一件幸福的事吗?。</li><li>你的人生，属于你自己。杀人的人就该有被杀的觉悟。</li><li>如果想念能让人见到死去的人，那看来我的想念还不够深啊。</li><li>如果有话要说，只能趁活着的时候啊。</li><li>劳动是一种罪，每个人都是罪人，为了赎罪而工作，所以大家都急着结束工作，下班回家。</li><li>搭理笨蛋的人也是笨蛋。机器可以强行关掉，但我不想强迫别人。</li><li>干嘛把全世界的不幸都背负在自己身上啊，一个人怎么可能承受得来。</li><li>我们法医的工作，就是调查遗体，检视细节，找出真正的死因。将事实写到鉴定书中，当然不会把犯人的感情和心情写进去。遗体摆在我们面前就说明了，生命被剥夺，这个无法挽回的事实。不用知道犯人的心情，也没有必要理解你，我们对于不幸的身世不感兴趣，也不管动机是什么。</li><li>你有想过吗，反复着永远得不到答案的人生，现在必须查清楚。如果不查清楚，一生都必须要面对永远得不出答案的问题。这样的人能少一个是一个，这难道不是法医的工作吗?</li><li>你一口一个女人，我也不是自愿生为女人的。你出生的时候能选择性别吗?没有人能选择吧。</li><li>没必要不惜忍受痛苦一起工作，有的人是无法互相理解的。</li><li>虽然伦理上，多少存在些问题。但如果能拯救某个人的一生的话，到底要不要睁一眼闭一只眼。</li><li>你有没有考虑过，不断进行提问，却永远没有答案的人生。如果现在不找出结论，那就再也无法得知，这个人为什么会死。屏住呼吸一动不动的话就能坚持2，3分钟失去意识一分钟呼吸停止后3分钟之内心脏还是跳动的只要在此期间被救出去的话就有可能活下来。</li></ul><p class="note note-light">观后感</br></p>​这是我第一次看日剧(emmm，如果算上奥特曼和动画片的话不是第一次了唉😅)，看《非自然死亡》时，让我对日剧和日本文化有了一种与之前不一样的看法。<p>​从剧集本身来说，这是非常优秀的法医片，讲述法医的书籍和影视剧其实并不少，这些作品中的很大一部分都很平庸或者说是没有那么出色，因为这些作品的着力点还是大家对法医的刻板印象。带有刻板印象的作品加重了人们的刻板印象，人们的刻板印象反过来又使带有刻板印象的作品更多。这种刻板印象来源于法医是与死亡打交道的，人们恐惧死亡，恐惧尸体，空间杀人放火的犯罪现场……《非自然死亡》这部作品毫无一丝这样的刻板印象，反而让我觉得法医这一职业是多么得有意义。剧中又非常多的经典台词，对死亡，对活着，都进行了深刻的讨论。</p><p>​从日本文化方面来说，东亚中日韩三国的文化有相近之处，但也各具特色，就我个人，我所喜欢的程度是中国&gt;日本&gt;韩国。我用一个关键词来描述<code>日本文化</code>就是<code>奇怪</code>，小日子人天天都在想些什么东西啊，在日本文化中我比较喜欢的就是<code>悬疑小说</code>类作品，写的确实厉害。对<code>韩国文化</code>我的了解就又是更少了，用一个词来说的话就是<code>压迫</code>（基于我对韩国文化仅有的认知）。韩国的影视作品做到还是比较成功的，是一波不小的文化输出，我喜爱其中充满<code>人性黑暗</code>的电影。回到对日本文化的讨论之中，看完这部《非自然死亡》之后，我对日剧的接受度更高了，以后可能会更多的接触到日本的文化产品。</p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>读书</tag>
      
      <tag>电影</tag>
      
      <tag>音乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MY YEAR 2022</title>
    <link href="/blog/post/MyLife/MYYEAR2022/"/>
    <url>/blog/post/MyLife/MYYEAR2022/</url>
    
    <content type="html"><![CDATA[<div align = center><p>2022年，经历了很多，收获了很多😄<p>但这一年也留下了很多的遗憾😔<p>“在重复中找到意义” <p>A Future Without Disappointment! </div><hr><iframe src="//player.bilibili.com/player.html?aid=564484854&bvid=BV1cv4y1B7Ty&cid=942390095&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><hr><p>每次年终回顾，都会有一种感觉，时间整个看总是很慢，但回过头来看，却是那么地快。</p><h1 id="⏩一月"><a href="#⏩一月" class="headerlink" title="⏩一月"></a>⏩一月</h1><p>2023年元旦，我和朋友们去看了日出，去吃了火锅，给森哥过生日。之后便准备期末考试了，直到考试结束，整个期末周我都是在宿舍里学习。因为宿舍学长都在忙自己的事情，都没有咋咋呼呼地，所以在宿舍也能很安静地学习。<br>期末考试之后，我决定去做美赛，为保研做最后的争取，这也几乎是最后的机会了。寒假回家，年前基本都是在学习MATLAB，临近过年开始学习清风的课程。<br>这期间还尝试了安卓APP的开发，不过只做了一个界面就没有再做了；学习使用Hexo框架来代替HTML暴力写前段的方法，使用Hexo框架极大地节省了写博客花费的时间，而且可以使用一些非常优秀的主题，让界面美观了很多，使用了第一个模板<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[bennyxguo/hexo-theme-obsidian: 🎨 A dark Hexo theme, it's responsive, simple but elegant. (github.com)](https://github.com/bennyxguo/hexo-theme-obsidian)">[1]</span></a></sup>，很酷！</p><blockquote></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220101_191033.jpg" alt="给森哥过生日"></p><h1 id="⏩二月"><a href="#⏩二月" class="headerlink" title="⏩二月"></a>⏩二月</h1><p>2月1日是春节，今年的春节有些无聊，也或许是我内心一直很焦虑的原因吧。春节过后，我就开始学习了，学习是时光是有些许枯燥的，但转眼就美赛就到来了，与队友约好提前几天回到了学校，准备迎接比赛的到来。由于其他同学还没到，我们之前跟同学借的一个会议室没拿到钥匙，然后产生了一系列的坎坷，但最后还是找了临时的应对方法。比赛<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[2022美赛总结 - MurphyHou (cosmicdusty.cc)](https://cosmicdusty.cc/post/Mathematics/SummaryOfMCM2022/)">[2]</span></a></sup>结束之后，新学期就开始了，这学期是测算保研成绩的最后一个学期，优秀的同学或许已经开始准备夏令营，决定考研的同学也或多或少地确定了自己的目标，但像我这样的人只能是无限的焦虑。</p><blockquote></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220208_153159.jpg" alt="数学建模学习"></p><h1 id="⏩三月"><a href="#⏩三月" class="headerlink" title="⏩三月"></a>⏩三月</h1><p>三月份是非常我非常焦虑的一个月，那时我觉得保研无望，就去看考研的事情，越看越是焦虑。2022年3月，疫情肆虐上海，3月11日，学校也进行了紧急封锁，禁止堂食，线上上课，不允许出宿舍区的范围。这段时间，每天都在盯着电脑，与自己和解不了，只有数不尽的焦虑。这段时间，我坐在电脑前的时间很多，更新了挺多的博客，看了点深度学习方面的知识，也更新了博客的主题<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[auroral-ui/hexo-theme-aurora: 🏳️‍🌈 Futuristic auroral Hexo theme. (github.com)](https://github.com/auroral-ui/hexo-theme-aurora)">[3]</span></a></sup>，买了域名，买了阿里云OSS对象存储服务器，去尝试和探索了很多新鲜的内容和知识</p><blockquote></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220314_110811.jpg" alt="封校，线上上课"></p><h1 id="⏩四月"><a href="#⏩四月" class="headerlink" title="⏩四月"></a>⏩四月</h1><p>四月的上旬和三月份一样，依旧是封校，但封锁的力度有所减弱。这个月学校也组织了几次保研分享会，我也加了几个学长的联系方式。班级进行了成绩的测算，看到成绩，再次感到无尽的焦虑。四月末终于解封了，这段时间过得真的不好，没有对什么事情有很深刻的记忆，只有那无尽的焦虑。在月底买了新的平板，决定拿出一部分时间来复习考研的科目。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220423_124055.jpg" alt="电脑全家桶"></p><h1 id="⏩五月"><a href="#⏩五月" class="headerlink" title="⏩五月"></a>⏩五月</h1><p>五月有个好消息，也有坏消息，好消息是美赛拿了M奖，坏消息是参赛队伍三人中只有两人能有参加答辩的资格，情况好的话，三个人一起保研，但要是有意外的话，只能两个人保研。这个月都在考研自习室学习，有个同学总是在我眼睛余光视角内抖腿，搞得我很烦。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220522_183936.jpg" alt="美赛M奖"></p><h1 id="⏩六月"><a href="#⏩六月" class="headerlink" title="⏩六月"></a>⏩六月</h1><p>这个月就两个事情，期末考试和准备参加夏令营<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[2023推免记录 - MurphyHou (cosmicdusty.cc)](https://cosmicdusty.cc/post/MyLife/PostgraduateRecommendation2023/)">[4]</span></a></sup>。期末考试前后准备了一些夏令营的材料，幸好的是夏令营都在期末考试之后，时间错开了。未来准备和参加夏令营，暑假我决定留校了。宿舍只有自己一个人，宿舍的三个学长毕业了，整个宿舍都是我的了，而留校的朋友们也在各自忙自己的事情，这其实是一个比较孤独的暑假。</p><blockquote></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220626_230650.jpg" alt="自己一个人占了整个宿舍"></p><h1 id="⏩七月"><a href="#⏩七月" class="headerlink" title="⏩七月"></a>⏩七月</h1><p>夏令营的主战场是在七月，参加了三场夏令营，并在这个月确定去西工大。虽然是回想起来很简单，但做出这个决定还是很艰难的！七月下旬我的夏令营就基本结束了，也不想回家，就打算在学校待着吧，放松放松也稍微学点东西。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220716_105603.jpg" alt="夏令营"></p><h1 id="⏩八月"><a href="#⏩八月" class="headerlink" title="⏩八月"></a>⏩八月</h1><p>夏令营结束后，整个人其实是很轻松的了，留在学校也没有很多事情做，每天看看书，看看英语单词，学习了一下数字图像处理，也就这样很快暑假就结束了。夏季小学期开始，也意味着推免工作快要开始了。这个月底，六级成绩出了，我通过了；学校进行了搬迁，我所在的学部和部分学院从崂山校区搬到了西海岸校区，我换了一个新的环境，非常幸运的是我们分到了一个很大的宿舍。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220827_191806.jpg" alt="西海岸的新校区"></p><h1 id="⏩九月"><a href="#⏩九月" class="headerlink" title="⏩九月"></a>⏩九月</h1><p>推免工作在有序地进行，我拿到了去参加竞赛推免答辩的资格，顺利通过了答辩，拿到了推免生的资格。在9月28日，我生日这一天，国家推免系统开放，我填报志愿，顺利上岸西北工业大学。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/%E8%A5%BF%E5%B7%A5%E5%A4%A7%E6%8E%A8%E5%85%8D%E8%AF%81%E6%98%8E.jpg" alt="上岸西北工业大学"></p><h1 id="⏩十月"><a href="#⏩十月" class="headerlink" title="⏩十月"></a>⏩十月</h1><p>推免结束后，半年多的焦虑与紧张消失了许多，我也允许自己放纵几天，跟同学们打打游戏，玩了一周的时间。期间还萌生了找个对象的想法，但由于保研去西工大的同学很少，也就放弃了找个想法。推免后的第二周，我便又开始了学习，从吴恩达老师的《机器学习》开始，去一点点地学习一直以来另我着迷的深度学习。十月末，我决定去图书馆学习，那里更有学习氛围，图书馆的设备很棒！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20221031_080814.jpg" alt="图书馆的条件真不错"></p><h1 id="⏩十一月"><a href="#⏩十一月" class="headerlink" title="⏩十一月"></a>⏩十一月</h1><p>十一月的第一周在图书馆愉快地学习，认识了三个计算机专业保研的大佬，然后我们每天一起学习，很棒的学习体验。第二三周，都在写入党材料，上党课等，搞得我心态有点爆炸。不过最后，材料都顺利上交，正式成为了中共预备党员。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20221115_170845.jpg" alt="学习啊"></p><h1 id="⏩十二月"><a href="#⏩十二月" class="headerlink" title="⏩十二月"></a>⏩十二月</h1><p>十二月初，国家疫情防控政策发生了变化，感觉情况不妙，就赶紧给自己和家里备了药品。之后学校政策频繁变化，我等到考完六级之后就回家了，第一次回去这么早。回家的这段时间，看完了韩剧《请回答1988》，读了几篇论文，这个月也就这么过去了，幸运的是，这波疫情没有把我带走，我也没有被感染，活着真好，健康真好。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20221210_191100.jpg" alt="回家前收拾一下宿舍的桌面~"></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/bennyxguo/hexo-theme-obsidian">bennyxguo&#x2F;hexo-theme-obsidian: 🎨 A dark Hexo theme, it’s responsive, simple but elegant. (github.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://cosmicdusty.cc/post/Mathematics/SummaryOfMCM2022/">2022美赛总结 - MurphyHou (cosmicdusty.cc)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/auroral-ui/hexo-theme-aurora">auroral-ui&#x2F;hexo-theme-aurora: 🏳️‍🌈 Futuristic auroral Hexo theme. (github.com)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://cosmicdusty.cc/post/MyLife/PostgraduateRecommendation2023/">2023推免记录 - MurphyHou (cosmicdusty.cc)</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AutoInstall</title>
    <link href="/blog/post/Ideas/AutoInstall/"/>
    <url>/blog/post/Ideas/AutoInstall/</url>
    
    <content type="html"><![CDATA[<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><font size = 5 color = yellow>构思</font></p><ul><li>语言：Python</li><li>预期<ul><li>GUI，自己选择需要下载和安装的软件</li><li>打开软件，弹出GUI，自己对软件进行选择，<code>Next</code>,弹出下载进度条；</li><li>下载完成后，自动安装。</li></ul></li><li>库：<ul><li>requests爬虫，爬取软件的安装包的下载地址</li><li>wget：下载软件的安装包</li><li>pywinauto：自动化打开软件安装包，并进行安装。</li></ul></li><li>难点：<ul><li>不会win32编程，不知道如何让安装过程自动化。</li><li>wget下载有点慢。</li><li>生成的软件怎么获取？解决方法：<ul><li>上传到阿里云OSS，并把下载链接放在博客网站上，电脑开机后访问博客网站，然后下载。但这样的问题是，这个打包生成的exe文件太大了，网络流量太大了，会产生好大一笔费用，如果每天都下载一次的话，估计月底阿里云的余额就空了。</li><li>依赖第三方服务，如：AirPortal，但这个的问题是，文件只能暂存，且下载次数有限。</li><li>百度网盘获其他网盘：麻烦，下载链接记不住。</li><li>U盘，其实也是一个选择，但不够优雅！</li><li>ftp服务，我觉得这个不错，如果我写的好的话，所有人都觉得不错，想用的话，能不能申请放到学校的ftp服务器上，这样就是一个非常不错的解决方案啊！可是我写的不好，还有好多问题。</li></ul></li></ul></li></ul><p><font size = 5 color = yellow>进度</font></p><ul><li>2022.11.11——v1.0&amp;v2.0<ul><li>实现了QQ和微信的安装包自动下载；</li><li>爬虫请求头轮转池；</li><li>实现了QQ的自动化安装。</li></ul></li></ul><h1 id="v2-0-autoDownload-Install"><a href="#v2-0-autoDownload-Install" class="headerlink" title="v2.0 autoDownload&amp;Install"></a>v2.0 autoDownload&amp;Install</h1><h2 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> wget<br><br><span class="hljs-keyword">from</span> pywinauto <span class="hljs-keyword">import</span> application<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> Install <span class="hljs-keyword">import</span> installQQ<br><span class="hljs-keyword">from</span> Install <span class="hljs-keyword">import</span> installWechat<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ua</span>():<br>    user_agents = [<br>        <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60&#x27;</span>,<br>    <span class="hljs-string">&#x27;Opera/8.0 (Windows NT 5.1; U; en)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2 &#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0) &#x27;</span>,<br>    ]<br>    user_agent = random.choice(user_agents) <span class="hljs-comment"># 随机抽取对象</span><br>    <span class="hljs-keyword">return</span> user_agent<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">downloadQQ</span>():<br>    <span class="hljs-comment">## QQ</span><br>    urlQQ = <span class="hljs-string">&#x27;https://im.qq.com/pcqq&#x27;</span><br>    ua = get_ua()<br>    headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: ua&#125;<br>    html = requests.get(urlQQ, headers = headers)<br>    websourceQQ = html.text <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><br>    <span class="hljs-comment">#  &lt;a href=&quot;https://dldir1.qq.com/qqfile/qq/PCQQ9.6.8/QQ9.6.8.28823.exe&quot; class=&quot;download&quot;&gt;&lt;/a&gt;</span><br><br>    indexStart = websourceQQ.find(<span class="hljs-string">&#x27;https://dldir1.qq.com/qqfile/qq&#x27;</span>)<br>    indexEnd = websourceQQ.find(<span class="hljs-string">&#x27;class=&quot;download&quot;&#x27;</span>)<br>    indexEnd = indexEnd - <span class="hljs-number">2</span><br>    <span class="hljs-comment"># print(websourceQQ[indexStart:indexEnd])</span><br>    qqDownloadUrl = websourceQQ[indexStart:indexEnd]<br>    <span class="hljs-comment"># print(qqDownloadUrl)</span><br>    <span class="hljs-keyword">return</span> qqDownloadUrl<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">downloatWechat</span>():<br>    <span class="hljs-comment">## Wechat</span><br>    urlWechat = <span class="hljs-string">&#x27;https://pc.weixin.qq.com/&#x27;</span><br>    ua = get_ua()<br>    headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: ua&#125;<br>    html = requests.get(urlWechat, headers = headers)<br>    websourceUrlWechat = html.text <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><br>    <span class="hljs-comment"># &lt;a class=&quot;download-button&quot; id=&quot;downloadButton&quot; href=&quot;https://dldir1.qq.com/weixin/Windows/WeChatSetup.exe&quot;&gt;&lt;i class=&quot;download-icon&quot;&gt;&lt;/i&gt;&lt;div class=&quot;download-info&quot;&gt;&lt;div&gt;立即下载&lt;/div&gt;&lt;span class=&quot;download-version&quot;&gt;3.8.0&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;</span><br><br>    indexStart = websourceUrlWechat.find(<span class="hljs-string">&#x27;https://dldir1.qq.com/weixin/Windows&#x27;</span>)<br>    indexEnd = websourceUrlWechat.find(<span class="hljs-string">&#x27;&lt;i class=&quot;download-icon&quot;&gt;&#x27;</span>)<br>    indexEnd = indexEnd - <span class="hljs-number">2</span><br>    <span class="hljs-keyword">global</span> wechatDownloadUrl<br>    wechatDownloadUrl = websourceUrlWechat[indexStart:indexEnd]<br>    <span class="hljs-comment"># print(wechatDownloadUrl)</span><br>    <span class="hljs-keyword">return</span> wechatDownloadUrl<br><br><span class="hljs-comment">#### wget.download(url, out=None, bar=bar_adaptive)</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    fileList = os.listdir()<br>    <br>    flag = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fileList:<br>      <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;installer&#x27;</span>:<br>        flag = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:<br>      os.mkdir(<span class="hljs-string">&#x27;installer&#x27;</span>)<br><br>    basePath = os.getcwd() + <span class="hljs-string">&#x27;\\&#x27;</span><br>    downloadList = []<br>    downloadList.append(downloadQQ())  <span class="hljs-comment"># index = 0</span><br>    downloadList.append(downloatWechat()) <span class="hljs-comment"># index = 1</span><br>    targetName = [<span class="hljs-string">&#x27;0QQ.exe&#x27;</span>, <span class="hljs-string">&#x27;1Wechat.exe&#x27;</span>]<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(downloadList)):<br>        wget.download(downloadList[i], out = basePath + <span class="hljs-string">&#x27;installer\\&#x27;</span> + targetName[i])<br>        <span class="hljs-comment">#  print(downloadList[i])</span><br><br>    installQQ(basePath + <span class="hljs-string">&#x27;installer\\&#x27;</span> + targetName[<span class="hljs-number">0</span>])<br>    installWechat(basePath + <span class="hljs-string">&#x27;installer\\&#x27;</span> + targetName[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="Install-py"><a href="#Install-py" class="headerlink" title="Install.py"></a>Install.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">from</span> pywinauto <span class="hljs-keyword">import</span> application<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">installQQ</span>(<span class="hljs-params">path</span>):<br>app = application.Application().start(path)<br>time.sleep(<span class="hljs-number">2</span>)<br>window_title=<span class="hljs-string">&#x27;腾讯QQ安装向导&#x27;</span><br>app[window_title].child_window(title=<span class="hljs-string">&quot;阅读并同意&quot;</span>).click()<br>app[window_title].child_window(class_name=<span class="hljs-string">&quot;#32770&quot;</span>).child_window(title=<span class="hljs-string">&quot;立即安装&quot;</span>, class_name=<span class="hljs-string">&quot;Button&quot;</span>).click()<br><span class="hljs-comment"># time.sleep(30) # 啊？这个时间好像不是很好把控</span><br><span class="hljs-comment"># app[window_title].child_window(class_name=&quot;#32770&quot;).child_window(title=&quot;完成安装&quot;, class_name=&quot;Button&quot;).click()</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">installWechat</span>(<span class="hljs-params">path</span>):<br>app = application.Application().start(path)<br>time.sleep(<span class="hljs-number">15</span>)<span class="hljs-comment"># 啊？这个时间好像不是很好把控</span><br>window_title=<span class="hljs-string">&#x27;微信安装向导&#x27;</span><br>    <br>    <span class="hljs-comment"># 这里有问题，不知道如何定位</span><br><span class="hljs-comment"># app[window_title].child_window(title=&quot;我已阅读并同意服务协议和隐私协议&quot;).click()  </span><br><span class="hljs-comment"># app[window_title].child_window(title=&quot;安装&quot;, class_name=&quot;Button&quot;).click()</span><br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/Anec/p/10370401.html">python模块 - pywinauto(windows自动化安装软件) - Anec - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/xp1315458571/p/13892205.html">python基于pywinauto实现PC端自动化 python操作微信自动化 - www.pu - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_44090294/article/details/115731303">爬虫请求头headers-User-Agent轮转池_等会吃个橘子的博客-CSDN博客_请求头池</a></p><p><a href="https://github.com/blackrosezy/gui-inspect-tool">GitHub - blackrosezy&#x2F;gui-inspect-tool: Gui Inspect tool for Windows</a></p>]]></content>
    
    
    <categories>
      
      <category>奇思妙想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NovelAI</title>
    <link href="/blog/post/AI/StableDiffusionNovelAI/"/>
    <url>/blog/post/AI/StableDiffusionNovelAI/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">GitHub - AUTOMATIC1111&#x2F;stable-diffusion-webui: Stable Diffusion web UI</a></p><h1 id="Required-Dependencies"><a href="#Required-Dependencies" class="headerlink" title="Required Dependencies"></a>Required Dependencies</h1><p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">GitHub - AUTOMATIC1111&#x2F;stable-diffusion-webui: Stable Diffusion web UI</a></p><h2 id="Python-3-10-6-and-Git"><a href="#Python-3-10-6-and-Git" class="headerlink" title="Python 3.10.6 and Git"></a>Python 3.10.6 and Git</h2><p><a href="https://blog.csdn.net/qq_41956139/article/details/122748299">miniconda 换源（添加镜像）_哈！小白要成长！的博客-CSDN博客_miniconda换源</a></p><p><a href="https://pytorch.org/get-started/previous-versions/">Previous PyTorch Versions | PyTorch</a></p><p><a href="https://blog.csdn.net/Harvery_/article/details/125081810">Anaconda的虚拟环境的包在哪里？（详细教程）_仭的博客-CSDN博客_anaconda创建的虚拟环境存储在哪</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/win-64/">Index of &#x2F;anaconda&#x2F;cloud&#x2F;pytorch&#x2F;win-64&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p><a href="https://git-scm.com/">Git (git-scm.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建虚拟环境，python版本是3.10.6</span><br>conda create -n novelai python==3.10.6<br><br><span class="hljs-comment"># 激活虚拟环境</span><br>conda activate novelai<br><br><span class="hljs-comment"># 查看CUDA信息</span><br>nvcc -V<br>nvidia-smi<br><br><span class="hljs-comment"># 查看conda信息，改一下conda源，下载是时候不至于掉线。</span><br>conda info<br><br><span class="hljs-comment"># 下载对于cuda版本的PyTorch，不要下载CPU版本的，而是GPU版本的</span><br>conda install pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 cudatoolkit=11.3 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/win-64/<br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221101135349737.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221101135427324.png"/><h2 id="PyTorch-VERIFICATION"><a href="#PyTorch-VERIFICATION" class="headerlink" title="PyTorch VERIFICATION"></a>PyTorch VERIFICATION</h2><p><a href="https://pytorch.org/get-started/locally/">Start Locally | PyTorch</a></p><p>To ensure that PyTorch was installed correctly, we can verify the installation by running sample PyTorch code. Here we will construct a randomly initialized tensor.</p><p>From the command line, type:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">python</span><br></code></pre></td></tr></table></figure><p>then enter the following code:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> torch<br><span class="hljs-attribute">x</span> = torch.rand(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(x)<br></code></pre></td></tr></table></figure><p>The output should be something similar to:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">tensor(<span class="hljs-comment">[<span class="hljs-comment">[0.3380, 0.3845, 0.3217]</span>,</span><br><span class="hljs-comment">        <span class="hljs-comment">[0.8337, 0.9050, 0.2650]</span>,</span><br><span class="hljs-comment">        <span class="hljs-comment">[0.2979, 0.7141, 0.9069]</span>,</span><br><span class="hljs-comment">        <span class="hljs-comment">[0.1449, 0.1132, 0.1375]</span>,</span><br><span class="hljs-comment">        <span class="hljs-comment">[0.4675, 0.3947, 0.1426]</span>]</span>)<br></code></pre></td></tr></table></figure><p>Additionally, to check if your GPU driver and CUDA is enabled and accessible by PyTorch, run the following commands to return whether or not the CUDA driver is enabled:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">import</span> torch<br>torch.cuda.<span class="hljs-keyword">is</span><span class="hljs-number">_</span>available()<br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221101141744552.png"/><h2 id="Code-from-this-repository"><a href="#Code-from-this-repository" class="headerlink" title="Code from this repository"></a>Code from this repository</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Clone 仓库到本地</span><br>git <span class="hljs-built_in">clone</span> https://github.com/AUTOMATIC1111/stable-diffusion-webui.git<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在仓库根目录下，安装依赖库</span><br>python -m pip install -r .\requirements.txt<br></code></pre></td></tr></table></figure><h2 id="The-Stable-Diffusion-model-checkpoint"><a href="#The-Stable-Diffusion-model-checkpoint" class="headerlink" title="The Stable Diffusion model checkpoint"></a>The Stable Diffusion model checkpoint</h2><p>The Stable Diffusion model checkpoint, a file with <code>.ckpt</code> extension, needs to be downloaded and placed in the <code>models/Stable-diffusion</code> directory.</p><p><a href="https://www.bilibili.com/video/BV1q84y1i78L/?spm_id_from=333.999.0.0&vd_source=6d46640a443a49f050af078d1f65143e">AI作画保姆级教程来了！逆天，太强了！_哔哩哔哩_bilibili</a></p><p>权重文件下载地址（提取码: o89H ）：<a href="https://pan.baidu.com/s/1ADjKFoXqBEXRR_hHbOddHg?pwd=o89H">链接</a></p><p>显卡显存不足，生成图是全黑的，使用下面的命令来解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python .\launch.py --lowvram --precision full --no-half<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>PyTorch</tag>
      
      <tag>Stable Diffusion</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/blog/post/AI/MachineLearning/"/>
    <url>/blog/post/AI/MachineLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="吴恩达《机器学习（2022）》"><a href="#吴恩达《机器学习（2022）》" class="headerlink" title="吴恩达《机器学习（2022）》"></a>吴恩达《机器学习（2022）》</h1><p>这个up做的中文翻译真的非常不错！我看视频用的是主字幕是英文，副字幕是中文，体验非常棒！</p><p>[<a href="https://www.bilibili.com/video/BV1Zt4y1H78P/?spm_id_from=333.999.0.0">双语人译|带测试]吴恩达2022机器学习专项课程(一）监督学习_哔哩哔哩_bilibili</a></p><p>[<a href="https://www.bilibili.com/video/BV1nt4y1h7jc/?spm_id_from=333.999.0.0&vd_source=6d46640a443a49f050af078d1f65143e">双语人译|带测试]吴恩达2022机器学习专项课程(二）：高级学习算法 Advanced Learning Algorithms_哔哩哔哩_bilibili</a></p><p>[<a href="https://www.bilibili.com/video/BV1ja411S7Wq/?spm_id_from=333.999.0.0&vd_source=6d46640a443a49f050af078d1f65143e">双语人译|带测试]吴恩达2022机器学习专项课程(三）：无监督学习&#x2F;推荐系统&#x2F;强化学习_哔哩哔哩_bilibili</a></p><p>从2022年10月11日开学学习，在2022年11月2号学习完了所有的课程，但是代码部分没有怎么学习。学完了理论课程部分，也要着手一代码了。<br>这是我第一次从头到尾学习完成一个全英文的课程，其实也不算是全英文的，基本全程都在看翻译的字幕，但其实还是非常有成就感的。吴恩达老师讲的课程非常感觉非常的简单，至少入门机器学习是完全够用的了，没有讲很多数学方面的东西。当然，我也知道机器学习的理论还有非常多，仅仅学完这一门课程肯定是不够的。这门课是我探索机器学习的开始，希望我能摸索出自己的一条路。</p><h2 id="conda-install-c"><a href="#conda-install-c" class="headerlink" title="conda install -c"></a>conda install -c</h2><p><a href="https://blog.csdn.net/qq_43564436/article/details/126652345">jupyter book执行lab报错No module named ‘ipympl‘</a><br><a href="https://blog.csdn.net/u011119817/article/details/101272459">【开发环境搭建】3.Anaconda安装包和channels管理</a></p><p><a href="https://blog.csdn.net/I_LOVE_MCU/article/details/108311698">jupyter notebook添加、删除内核_IC学习者的博客-CSDN博客_jupyter notebook内核</a></p><p><a href="https://blog.csdn.net/gaoyi135/article/details/102701423">jupyter notebook怎么切换到特定的anaconda虚拟环境_Yee_Ko的博客-CSDN博客</a></p><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><p><a href="https://blog.csdn.net/weixin_43283397/article/details/104315148">python中的copy.deepcopy()_北木.的博客-CSDN博客_copy.deepcopy</a></p><p> <code>copy.copy()</code>是浅拷贝，只拷贝父对象，不会拷贝对象的内部的子对象。<br> <code>copy.deepcopy()</code>是深拷贝，会拷贝对象及其子对象，哪怕以后对其有改动，也不会影响其第一次的拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>List1 = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span>, [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]]<br>List2 = List1        <span class="hljs-comment"># 将List1赋给List2</span><br>List3 = copy.copy(List1)       <span class="hljs-comment"># 浅拷贝</span><br>List4 = copy.deepcopy(List1)   <span class="hljs-comment"># 深拷贝</span><br><br>List1.append(<span class="hljs-string">&#x27;test&#x27;</span>)     <span class="hljs-comment"># 在List1末尾添加&#x27;test&#x27;</span><br>List1[<span class="hljs-number">4</span>].append(<span class="hljs-string">&#x27;d&#x27;</span>)     <span class="hljs-comment"># 在List1中[&#x27;b&#x27;,&#x27;c&#x27;]的末尾添加&#x27;d&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;List1:%s&#x27;</span> % List1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;List2:%s&#x27;</span> % List2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;List3:%s&#x27;</span> % List3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;List4:%s&#x27;</span> % List4)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">List1:[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, 3, <span class="hljs-string">&#x27;a&#x27;</span>, [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], <span class="hljs-string">&#x27;test&#x27;</span>]<br>List2:[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, 3, <span class="hljs-string">&#x27;a&#x27;</span>, [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], <span class="hljs-string">&#x27;test&#x27;</span>]<br>List3:[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, 3, <span class="hljs-string">&#x27;a&#x27;</span>, [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]]<br>List4:[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, 3, <span class="hljs-string">&#x27;a&#x27;</span>, [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]]<br></code></pre></td></tr></table></figure><h2 id="Flynn’s-taxonomy"><a href="#Flynn’s-taxonomy" class="headerlink" title="Flynn’s taxonomy"></a>Flynn’s taxonomy</h2><p><a href="https://en.wikipedia.org/wiki/Flynn's_taxonomy">Flynn’s taxonomy - Wikipedia</a><br>A classification of computer architectures!</p><ul><li>Single instruction stream, single data stream (SISD)</li><li>Single instruction stream, multiple data streams (SIMD)</li><li>Multiple instruction streams, single data stream (MISD)</li><li>Multiple instruction streams, multiple data streams (MIMD)</li></ul><h2 id="np-c"><a href="#np-c" class="headerlink" title="np.c_"></a>np.c_</h2><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.c_.html">numpy.c_ — NumPy v1.23 Manual</a></p><h2 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h2><p><a href="https://stackoverflow.com/questions/46113732/modulenotfounderror-no-module-named-sklearn">python - ModuleNotFoundError: No module named ‘sklearn’ - Stack Overflow</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install scikit-learn<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/259732614">机器学习最佳Python库：Scikit-learn入门指南 - 知乎 (zhihu.com)</a><br><a href="https://scikit-learn.org/stable/index.html">scikit-learn: machine learning in Python — scikit-learn 1.1.3 documentation</a></p><h1 id="supervised-learning"><a href="#supervised-learning" class="headerlink" title="supervised learning"></a>supervised learning</h1><p>AGI: artificial general intelligence</p><h2 id="supervised-learning-1"><a href="#supervised-learning-1" class="headerlink" title="supervised learning"></a>supervised learning</h2><ol><li>regression: predict a number from infinitely many possible outputs.</li><li>classification: predict categories from small number of  possible outputs.</li></ol><h2 id="unsupervised-learning"><a href="#unsupervised-learning" class="headerlink" title="unsupervised learning"></a>unsupervised learning</h2><ol><li>clustering: group similar  data points together.</li><li>anomaly detection: find unusual data points.</li><li>dimensional reduction: compress data using fewer number.</li></ol><h2 id="Linear-Regression-Model"><a href="#Linear-Regression-Model" class="headerlink" title="Linear Regression Model"></a>Linear Regression Model</h2><p>learning algorithm<br>cost function</p><h2 id="gradient-descent"><a href="#gradient-descent" class="headerlink" title="gradient descent"></a>gradient descent</h2><p>gradient descent algorithm<br>learning rate<br>batch gradient descent</p><h2 id="multiple-features"><a href="#multiple-features" class="headerlink" title="multiple features"></a>multiple features</h2><p>vectorization<br>feature scaling<br>normalization<br>learning curve<br>feature engineering</p><h2 id="classification"><a href="#classification" class="headerlink" title="classification"></a>classification</h2><p>logistic regression<br>decision boundary<br>cost function<br>gradient descent</p><h2 id="regulation-to-reduce-overfitting"><a href="#regulation-to-reduce-overfitting" class="headerlink" title="regulation to reduce overfitting"></a>regulation to reduce overfitting</h2><p>underfit<br>overfit<br>addressing overfitting</p><blockquote><ol><li>collect more training examples</li><li>select features to include&#x2F;exclude</li><li><strong>regularization</strong></li></ol></blockquote><h1 id="Advanced-algorithms"><a href="#Advanced-algorithms" class="headerlink" title="Advanced algorithms"></a>Advanced algorithms</h1><h2 id="neural-networks"><a href="#neural-networks" class="headerlink" title="neural networks"></a>neural networks</h2><h2 id="neural-networks-model"><a href="#neural-networks-model" class="headerlink" title="neural networks model"></a>neural networks model</h2><ol><li>create the model</li><li>loss and cost function</li><li>gradient descent</li><li>activation functions</li></ol><h2 id="multiclassification"><a href="#multiclassification" class="headerlink" title="multiclassification"></a>multiclassification</h2><p>softmax</p><h2 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h2><p>Adam</p><p>CNN</p><h2 id="machine-learning-diagnostic"><a href="#machine-learning-diagnostic" class="headerlink" title="machine learning diagnostic"></a>machine learning diagnostic</h2><p>diagnostic<br>evaluating<br>model section<br>training set &#x2F; validation set &#x2F; test set<br>bias &#x2F; variance<br>baseline level of performance<br>learning curves</p><h2 id="machine-learning-development-process"><a href="#machine-learning-development-process" class="headerlink" title="machine learning development process"></a>machine learning development process</h2><p>iterative loop of ml development<br>error analysis<br>adding data<br>transfer learning</p><h2 id="skewed-datasets"><a href="#skewed-datasets" class="headerlink" title="skewed datasets"></a>skewed datasets</h2><p>error metrics: precision and recall<br>F1 score</p><h2 id="decision-tree"><a href="#decision-tree" class="headerlink" title="decision tree"></a>decision tree</h2><p>one-hot encoding<br>regression trees<br>tree ensemble</p><h2 id="random-forest-algorithm"><a href="#random-forest-algorithm" class="headerlink" title="random forest algorithm"></a>random forest algorithm</h2><h1 id="unsupervised-learning-1"><a href="#unsupervised-learning-1" class="headerlink" title="unsupervised learning"></a>unsupervised learning</h1><h2 id="unsupervised-learning-2"><a href="#unsupervised-learning-2" class="headerlink" title="unsupervised learning"></a>unsupervised learning</h2><h3 id="clustering"><a href="#clustering" class="headerlink" title="clustering"></a>clustering</h3><p>k-means</p><h3 id="anomaly-detection"><a href="#anomaly-detection" class="headerlink" title="anomaly detection"></a>anomaly detection</h3><h2 id="recommender-systems"><a href="#recommender-systems" class="headerlink" title="recommender systems"></a>recommender systems</h2><h2 id="reinforcement-learning"><a href="#reinforcement-learning" class="headerlink" title="reinforcement learning"></a>reinforcement learning</h2><p>A key point to a reinforcement learning is something called <strong>reward or reward function</strong>.</p><p>One way to think of why reinforcement learning is so powerful is you have to tell it <strong>what to do</strong> rather than how to do it.</p><p>the return in reinforcement learning</p><p>making decision: policies in reinforcement learning</p><p>markov decision process</p><p>state-action value function</p><p>Q function</p><p>bellmen equation </p><p>continuous state space </p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>Jupyter Notebook</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCV延时相机</title>
    <link href="/blog/post/Ideas/OpenCVTimeLapseCamera/"/>
    <url>/blog/post/Ideas/OpenCVTimeLapseCamera/</url>
    
    <content type="html"><![CDATA[<p>这次用的是电脑的摄像头。暑假夏令营的时候买了两个摄像头来参加面试，现在被我闲置了。摄像头也能拍照啊，于是乎我就用摄像头来做延时相机了。这次想法比较简单，但也是遇到了很多的问题，特别是GUI方面。值得注意的是，这次程序我用来很多类与对象的东西，这个东西太难了，一直以来我都是能不能就不用，但这次是硬着头皮上了！</p><h1 id="学习OpenCV"><a href="#学习OpenCV" class="headerlink" title="学习OpenCV"></a>学习OpenCV</h1><table><thead><tr><th>param</th><th>define</th><th></th></tr></thead><tbody><tr><td>cv2.VideoCapture.get(0)</td><td>视频文件的当前位置（播放）以毫秒为单位</td><td>CV_CAP_PROP_POS_MSEC Current position of the video file in milliseconds or video capture timestamp.</td></tr><tr><td>cv2.VideoCapture.get(1)</td><td>基于以0开始的被捕获或解码的帧索引</td><td>CV_CAP_PROP_POS_FRAMES 0-based index of the frame to be decoded&#x2F;captured next.</td></tr><tr><td>cv2.VideoCapture.get(2)</td><td>视频文件的相对位置（播放）：0&#x3D;电影开始，1&#x3D;影片的结尾。</td><td>CV_CAP_PROP_POS_AVI_RATIO Relative position of the video file: 0 - start of the film, 1 - end of the film.</td></tr><tr><td>cv2.VideoCapture.get(3)</td><td>在视频流的帧的宽度</td><td>CV_CAP_PROP_FRAME_WIDTH Width of the frames in the video stream.</td></tr><tr><td>cv2.VideoCapture.get(4)</td><td>在视频流的帧的高度</td><td>CV_CAP_PROP_FRAME_HEIGHT Height of the frames in the video stream.</td></tr><tr><td>cv2.VideoCapture.get(5)</td><td>帧速率</td><td>CV_CAP_PROP_FPS Frame rate.</td></tr><tr><td>cv2.VideoCapture.get(6)</td><td>编解码的4字-字符代码</td><td>CV_CAP_PROP_FOURCC 4-character code of codec.</td></tr><tr><td>cv2.VideoCapture.get(7)</td><td>视频文件中的帧数</td><td>CV_CAP_PROP_FRAME_COUNT Number of frames in the video file.</td></tr><tr><td>cv2.VideoCapture.get(8)</td><td>返回对象的格式</td><td>CV_CAP_PROP_FORMAT Format of the Mat objects returned by retrieve() .</td></tr><tr><td>cv2.VideoCapture.get(9)</td><td>返回后端特定的值，该值指示当前捕获模式</td><td>CV_CAP_PROP_MODE Backend-specific value indicating the current capture mode.</td></tr><tr><td>cv2.VideoCapture.get(10)</td><td>图像的亮度(仅适用于照相机)</td><td>CV_CAP_PROP_BRIGHTNESS Brightness of the image (only for cameras).</td></tr><tr><td>cv2.VideoCapture.get(11)</td><td>图像的对比度(仅适用于照相机)</td><td>CV_CAP_PROP_CONTRAST Contrast of the image (only for cameras).</td></tr><tr><td>cv2.VideoCapture.get(12)</td><td>图像的饱和度(仅适用于照相机)</td><td>CV_CAP_PROP_SATURATION Saturation of the image (only for cameras).</td></tr><tr><td>cv2.VideoCapture.get(13)</td><td>色调图像(仅适用于照相机)</td><td>CV_CAP_PROP_HUE Hue of the image (only for cameras).</td></tr><tr><td>cv2.VideoCapture.get(14)</td><td>图像增益(仅适用于照相机)（Gain在摄影中表示白平衡提升）</td><td>CV_CAP_PROP_GAIN Gain of the image (only for cameras).</td></tr><tr><td>cv2.VideoCapture.get(15)</td><td>曝光(仅适用于照相机)</td><td>CV_CAP_PROP_EXPOSURE Exposure (only for cameras).</td></tr><tr><td>cv2.VideoCapture.get(16)</td><td>指示是否应将图像转换为RGB布尔标志</td><td>CV_CAP_PROP_CONVERT_RGB Boolean flags indicating whether images should be converted to RGB.</td></tr><tr><td>cv2.VideoCapture.get(17)</td><td>× 暂时不支持</td><td>CV_CAP_PROP_WHITE_BALANCE Currently not supported</td></tr><tr><td>cv2.VideoCapture.get(18)</td><td>立体摄像机的矫正标注（目前只有DC1394 v.2.x后端支持这个功能）</td><td>CV_CAP_PROP_RECTIFICATION Rectification flag for stereo cameras (note: only supported by DC1394 v 2.x backend currently)</td></tr></tbody></table><p><em>Note: 如果查询的视频属性是VideoCapture类不支持的，将会返回0</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">VideoCapture_shuxing</span>():<br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_POS_MSEC:&quot;</span> + <span class="hljs-built_in">str</span>(cap.get()))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_POS_MSEC:&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">0</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_POS_FRAMES:&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">1</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_POS_AVI_RATIO :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">2</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_FRAME_WIDTH :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">3</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_FRAME_HEIGHT :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">4</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_FPS :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">5</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_FOURCC :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">6</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_FRAME_COUNT :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">7</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_FORMAT :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">8</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_MODE :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">9</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_BRIGHTNESS :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">10</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_CONTRAST  :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">11</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_SATURATION  :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">12</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_HUE :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">13</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_GAIN :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">14</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_EXPOSURE :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">15</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_CONVERT_RGB :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">16</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_WHITE_BALANCE :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">17</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV_CAP_PROP_RECTIFICATION :&quot;</span> + <span class="hljs-built_in">str</span>(cap.get(<span class="hljs-number">18</span>)))<br><br>cap.release()<br>cv2.destroyAllWindows()<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>VideoCapture_shuxing()<br>   <br><br><br>=================================================<br>(base) PS D:\Develop_Python\Progect\CamTimeLapse&gt; python .\VideoCapture.get_demo01.py<br>CV_CAP_PROP_POS_MSEC:<span class="hljs-number">0.0</span><br>CV_CAP_PROP_POS_FRAMES:<span class="hljs-number">0.0</span><br>CV_CAP_PROP_POS_AVI_RATIO :-<span class="hljs-number">1.0</span><br>CV_CAP_PROP_FRAME_WIDTH :<span class="hljs-number">640.0</span><br>CV_CAP_PROP_FRAME_HEIGHT :<span class="hljs-number">480.0</span><br>CV_CAP_PROP_FPS :<span class="hljs-number">30.0</span><br>CV_CAP_PROP_FOURCC :<span class="hljs-number">22.0</span><br>CV_CAP_PROP_FRAME_COUNT :-<span class="hljs-number">1.0</span><br>CV_CAP_PROP_FORMAT :-<span class="hljs-number">1.0</span><br>CV_CAP_PROP_MODE :<span class="hljs-number">1.0</span><br>CV_CAP_PROP_BRIGHTNESS :<span class="hljs-number">128.0</span><br>CV_CAP_PROP_CONTRAST  :<span class="hljs-number">128.0</span><br>CV_CAP_PROP_SATURATION  :<span class="hljs-number">135.0</span><br>CV_CAP_PROP_HUE :-<span class="hljs-number">1.0</span><br>CV_CAP_PROP_GAIN :<span class="hljs-number">128.0</span><br>CV_CAP_PROP_EXPOSURE :-<span class="hljs-number">1.0</span><br>CV_CAP_PROP_CONVERT_RGB :<span class="hljs-number">1.0</span><br>CV_CAP_PROP_WHITE_BALANCE :<span class="hljs-number">1.0</span><br>CV_CAP_PROP_RECTIFICATION :<span class="hljs-number">1.0</span><br>(base) PS D:\Develop_Python\Progect\CamTimeLapse&gt;<br></code></pre></td></tr></table></figure><h1 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h1><p>实现功能：调用相机捕获一帧照片，并用当前时间进行文件命名保存。</p><p>要点</p><ol><li><p>cv2.VideoCapture().set(propId, value)的使用</p></li><li><p>retval &#x3D; cv2.imwrite(filename, img [, paras])</p><blockquote><p>filename：要保存的文件的路径和名称，包括文件扩展名</p><p>img：要保存的 OpenCV 图像，nparray 多维数组</p><p>paras：不同编码格式的参数，可选项</p><p>cv2.CV_IMWRITE_JPEG_QUALITY：设置 .jpeg&#x2F;.jpg 格式的图片质量，取值为 0-100（默认值 95），数值越大则图片质量越高；<br>cv2.CV_IMWRITE_WEBP_QUALITY：设置 .webp 格式的图片质量，取值为 0-100；<br>cv2.CV_IMWRITE_PNG_COMPRESSION：设置 .png 格式图片的压缩比，取值为 0-9（默认值 3），数值越大则压缩比越大。</p></blockquote></li><li><p>ret, frame &#x3D; cap.read()</p><ul><li>ret 为True 或者False,代表有没有读取到图片</li><li>frame表示截取到一帧的图片</li></ul></li></ol><p>main.p</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br>import os<br>import <span class="hljs-keyword">time</span><br>import cv2<br><br>def takephoto():<br><span class="hljs-built_in">cap</span> = cv2.VideoCapture(0)<br>cap.set(3,1920)<br>cap.set(4,1080)<br><span class="hljs-comment"># print(&quot;CV_CAP_PROP_POS_AVI_RATIO :&quot; + str(cap.get(3)))</span><br><span class="hljs-comment"># print(&quot;CV_CAP_PROP_FRAME_WIDTH :&quot; + str(cap.get(4)))</span><br>ret, frame = cap.read()<br><br><span class="hljs-comment"># print(frame)</span><br><span class="hljs-keyword">while</span> ret:<br><span class="hljs-comment"># frame = cv2.resize(frame, (1920,1080))  # 尺寸更改</span><br>cv2.imwrite(time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span>, frame,[int(cv2.IMWRITE_JPEG_QUALITY), 100])  <span class="hljs-comment"># 无损保存</span><br><span class="hljs-built_in">print</span>(time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span>+<span class="hljs-string">&#x27;-done&#x27;</span>)<br><br>time.sleep(10)  <span class="hljs-comment"># 10s进行一次图像获取</span><br>ret, frame = cap.read()<br><br>cap.release()<br>cv2.destroyAllWindows()<br><span class="hljs-built_in">return</span> 0<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始&#x27;</span>)<br>takephoto()<br></code></pre></td></tr></table></figure><h1 id="v1-1"><a href="#v1-1" class="headerlink" title="v1.1"></a>v1.1</h1><p>新功能:以日期为分类，建立文件夹</p><p>main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> makeDir <span class="hljs-keyword">import</span> makedir<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takephoto</span>():<br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1920</span>)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1080</span>)<br><span class="hljs-comment"># print(&quot;CV_CAP_PROP_POS_AVI_RATIO :&quot; + str(cap.get(3)))</span><br><span class="hljs-comment"># print(&quot;CV_CAP_PROP_FRAME_WIDTH :&quot; + str(cap.get(4)))</span><br>ret, frame = cap.read()<br><br><span class="hljs-comment"># print(frame)</span><br><span class="hljs-keyword">while</span> ret:<br>makedir()  <span class="hljs-comment"># 以日期为分类，建立文件夹</span><br>picName = os.getcwd() + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>) + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span><br>cv2.imwrite(picName, frame,[<span class="hljs-built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="hljs-number">100</span>])  <span class="hljs-comment"># 无损保存</span><br><span class="hljs-built_in">print</span>(time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span>+<span class="hljs-string">&#x27;-done&#x27;</span>)<br><br>time.sleep(<span class="hljs-number">10</span>)<br>ret, frame = cap.read()<br><br>cap.release()<br>cv2.destroyAllWindows()<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始&#x27;</span>)<br>takephoto()<br></code></pre></td></tr></table></figure><p>makeDir.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makedir</span>():<br>flag = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir():<br><span class="hljs-keyword">if</span> i == time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>):<br>flag = <span class="hljs-literal">True</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:<br>os.mkdir(os.getcwd() + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="v1-2"><a href="#v1-2" class="headerlink" title="v1.2"></a>v1.2</h1><ul><li>修改了程序运行逻辑,使用函数的方式,对摄像头进行调用和释放,保证摄像头只在工作是时候处于激活状态.睡眠状态时,摄像头是关闭状态.</li></ul><p>main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> makeDir <span class="hljs-keyword">import</span> makedir<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">caminit</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======init=======&#x27;</span>)<br><span class="hljs-keyword">global</span> cap <br>cap = cv2.VideoCapture(<span class="hljs-number">1</span>)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1920</span>)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1080</span>)<br><span class="hljs-comment"># ret, frame = cap.read()</span><br>praList = <span class="hljs-built_in">list</span>(cap.read())<br><span class="hljs-comment"># print(praList)</span><br><span class="hljs-keyword">return</span> praList<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">camrelease</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======rels=======&#x27;</span>)<br>cap.release()<br>cv2.destroyAllWindows()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takephoto</span>(<span class="hljs-params">praList</span>):<br><span class="hljs-keyword">while</span> praList[<span class="hljs-number">0</span>]:<br>makedir()  <span class="hljs-comment"># 以日期为分类，建立文件夹</span><br>picName = os.getcwd() + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>) + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span><br>cv2.imwrite(picName, praList[<span class="hljs-number">1</span>],[<span class="hljs-built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="hljs-number">100</span>])  <span class="hljs-comment"># 无损保存</span><br><span class="hljs-built_in">print</span>(time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span>+<span class="hljs-string">&#x27;-done&#x27;</span>)<br>praList[<span class="hljs-number">0</span>] = <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>takephoto(caminit())<br>time.sleep(<span class="hljs-number">1</span>)<br>camrelease()<br>time.sleep(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>makeDir.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makedir</span>():<br>flag = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir():<br><span class="hljs-keyword">if</span> i == time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>):<br>flag = <span class="hljs-literal">True</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:<br>os.mkdir(os.getcwd() + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="v2-0-程序运行有问题"><a href="#v2-0-程序运行有问题" class="headerlink" title="v2.0 - 程序运行有问题"></a>v2.0 - 程序运行有问题</h1><ul><li>加入了GUI（图形用户接口），但是这个UI做的其实是有问题的，不能实时显示控制台信息！可能需要更改文本框的属性</li></ul><p>main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-keyword">from</span> makeDir <span class="hljs-keyword">import</span> makedir<br><br><span class="hljs-keyword">from</span> GUI <span class="hljs-keyword">import</span> Ui_Form<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtWidgets<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPyQT_Form</span>(QtWidgets.QWidget,Ui_Form):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number, option, interval, praList</span>):<br><span class="hljs-built_in">super</span>(MyPyQT_Form, <span class="hljs-variable language_">self</span>).__init__()<br><span class="hljs-variable language_">self</span>.setupUi(<span class="hljs-variable language_">self</span>)<br><br><span class="hljs-variable language_">self</span>.number = number<br><span class="hljs-variable language_">self</span>.option = option<br><span class="hljs-variable language_">self</span>.interval = interval<br><span class="hljs-variable language_">self</span>.praList = praList<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">caminit</span>(<span class="hljs-params">self</span>):<br><span class="hljs-variable language_">self</span>.textEdito.setPlainText(<span class="hljs-string">&#x27;=======init=======&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======init=======&#x27;</span>)<br><span class="hljs-keyword">global</span> cap <br>cap = cv2.VideoCapture(<span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.number))<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1920</span>)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1080</span>)<br><span class="hljs-comment"># ret, frame = cap.read()</span><br><span class="hljs-variable language_">self</span>.praList = <span class="hljs-built_in">list</span>(cap.read())<br><span class="hljs-comment"># print(praList)</span><br><span class="hljs-comment"># return self.praList</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">camrelease</span>(<span class="hljs-params">self</span>):<br><span class="hljs-variable language_">self</span>.textEdito.setPlainText(<span class="hljs-string">&#x27;=======rels=======&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======rels=======&#x27;</span>)<br>cap.release()<br>cv2.destroyAllWindows()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takephoto</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.praList[<span class="hljs-number">0</span>]:<br>makedir()  <span class="hljs-comment"># 以日期为分类，建立文件夹</span><br>picName = os.getcwd() + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>) + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span><br>cv2.imwrite(picName, <span class="hljs-variable language_">self</span>.praList[<span class="hljs-number">1</span>],[<span class="hljs-built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="hljs-number">100</span>])  <span class="hljs-comment"># 无损保存</span><br><span class="hljs-built_in">print</span>(time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span>+<span class="hljs-string">&#x27;-done&#x27;</span>)<br><span class="hljs-variable language_">self</span>.textEdito.setPlainText(time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span>+<span class="hljs-string">&#x27;-done&#x27;</span>)<br><span class="hljs-variable language_">self</span>.praList[<span class="hljs-number">0</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">camstart</span>(<span class="hljs-params">self</span>):<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>my_pyqt_form.caminit()<br>my_pyqt_form.takephoto()<br>time.sleep(<span class="hljs-number">1</span>)<br>my_pyqt_form.camrelease()<br>time.sleep(<span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.interval))<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-comment"># for i in range(2):</span><br><span class="hljs-comment"># my_pyqt_form.caminit()</span><br><span class="hljs-comment"># my_pyqt_form.takephoto()</span><br><span class="hljs-comment"># time.sleep(1)</span><br><span class="hljs-comment"># my_pyqt_form.camrelease()</span><br><span class="hljs-comment"># time.sleep(int(self.interval))</span><br><span class="hljs-comment"># print()</span><br><br><span class="hljs-comment"># 获取窗口所输入的信息的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pushButton1_click</span>(<span class="hljs-params">self</span>):<br><br><span class="hljs-comment"># 获取Windows界面输入的内容</span><br><span class="hljs-variable language_">self</span>.number=<span class="hljs-variable language_">self</span>.lineEdit_1.text()<br><span class="hljs-variable language_">self</span>.option=<span class="hljs-variable language_">self</span>.lineEdit_2.text()<br><span class="hljs-variable language_">self</span>.interval=<span class="hljs-variable language_">self</span>.lineEdit_3.text()<br><br><span class="hljs-comment"># print(self.number)</span><br><span class="hljs-comment"># print(self.option)</span><br><span class="hljs-comment"># print(self.interval)</span><br><br><span class="hljs-variable language_">self</span>.textEditi.setPlainText(<span class="hljs-string">&quot;当前信息：\n&quot;</span>+ <span class="hljs-string">&quot;相机号:&quot;</span> + <span class="hljs-variable language_">self</span>.number <br>+<span class="hljs-string">&#x27;\n&#x27;</span>+ <span class="hljs-string">&quot;模式选择:&quot;</span> + <span class="hljs-variable language_">self</span>.option <br>+<span class="hljs-string">&#x27;\n&#x27;</span>+ <span class="hljs-string">&quot;间隔:&quot;</span> + <span class="hljs-variable language_">self</span>.interval +<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>my_pyqt_form.camstart()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>app = QtWidgets.QApplication(sys.argv)<br>my_pyqt_form = MyPyQT_Form(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,[])<br><br><span class="hljs-comment"># 窗口的打开和关闭</span><br>my_pyqt_form.show()<br>sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><p>GUI.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore,QtWidgets<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QIcon<br><span class="hljs-keyword">import</span> ctypes<br>ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(<span class="hljs-string">&quot;myappid&quot;</span>)<br><br><span class="hljs-comment"># from PyQt5.QtWidgets import QDesktopWidget,QMainWindow,QApplication</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ui_Form</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setupUi</span>(<span class="hljs-params">self, Form</span>):<br>        <span class="hljs-comment"># 建立Windows窗口，并设置合适的大小</span><br><br>        Form.setObjectName(<span class="hljs-string">&quot;Form&quot;</span>)<br>        Form.resize(<span class="hljs-number">1300</span>, <span class="hljs-number">600</span>)<br><br>        Form.setWindowIcon(QIcon(<span class="hljs-string">&quot;ICON.ico&quot;</span>))<br><br>        <span class="hljs-comment"># QRect ( int x, int y, int width, int height )</span><br>        <span class="hljs-comment"># 构造一个以（x，y）为左上角、宽度和高度为width，height的矩形。</span><br>        <span class="hljs-variable language_">self</span>.widget = QtWidgets.QWidget(Form)<br>        <span class="hljs-variable language_">self</span>.widget.setGeometry(QtCore.QRect(<span class="hljs-number">130</span>, <span class="hljs-number">70</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">400</span>))<br>        <span class="hljs-variable language_">self</span>.widget.setObjectName(<span class="hljs-string">&quot;widget&quot;</span>)<br><br><br>        <span class="hljs-variable language_">self</span>.verticalLayout = QtWidgets.QVBoxLayout(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.setObjectName(<span class="hljs-string">&quot;verticalLayout&quot;</span>)<br><br>        <span class="hljs-comment"># 界面标题</span><br>        <span class="hljs-variable language_">self</span>.formtitle = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.formtitle.setObjectName(<span class="hljs-string">&quot;formtitle&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.addWidget(<span class="hljs-variable language_">self</span>.formtitle)<br><br>        <span class="hljs-comment"># 界面脚注</span><br>        <span class="hljs-variable language_">self</span>.footer = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.footer.setObjectName(<span class="hljs-string">&quot;footer&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.addWidget(<span class="hljs-variable language_">self</span>.footer)<br><br>        <span class="hljs-variable language_">self</span>.gridLayout = QtWidgets.QGridLayout()<br>        <span class="hljs-variable language_">self</span>.gridLayout.setObjectName(<span class="hljs-string">&quot;gridLayout&quot;</span>)<br><br><br>        <span class="hljs-comment"># int fromRow     // 横坐标</span><br>        <span class="hljs-comment"># int fromColumn  // 纵坐标</span><br>        <span class="hljs-comment"># int rowSpan     // 横向跨越几个单元格</span><br>        <span class="hljs-comment"># int columnSpan  // 纵向跨越几个单元格</span><br><br>        <span class="hljs-comment"># 建立三个单行文本输入框QLineEdit</span><br>        <span class="hljs-variable language_">self</span>.lineEdit_1 = QtWidgets.QLineEdit(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.lineEdit_1.setObjectName(<span class="hljs-string">&quot;lineEdit_1&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.lineEdit_1, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>        <span class="hljs-variable language_">self</span>.lineEdit_2 = QtWidgets.QLineEdit(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.lineEdit_2.setObjectName(<span class="hljs-string">&quot;lineEdit_2&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.lineEdit_2, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>        <span class="hljs-variable language_">self</span>.lineEdit_3 = QtWidgets.QLineEdit(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.lineEdit_3.setObjectName(<span class="hljs-string">&quot;lineEdit_3&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.lineEdit_3, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br><br>        <span class="hljs-comment"># 建立三个文本标签框QLabel</span><br>        <span class="hljs-variable language_">self</span>.number = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.number.setObjectName(<span class="hljs-string">&quot;number&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.number, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>        <span class="hljs-variable language_">self</span>.option = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.option.setObjectName(<span class="hljs-string">&quot;option&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.option, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>  <br>        <span class="hljs-variable language_">self</span>.interval = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.interval.setObjectName(<span class="hljs-string">&quot;interval&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.interval, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br><br>        <span class="hljs-variable language_">self</span>.verticalLayout.addLayout(<span class="hljs-variable language_">self</span>.gridLayout)<br>        <br>        <span class="hljs-comment"># 建立一个用户交互按键QPushButton</span><br>        <span class="hljs-variable language_">self</span>.pushButton1 = QtWidgets.QPushButton(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.pushButton1.setObjectName(<span class="hljs-string">&quot;pushButton1&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.addWidget(<span class="hljs-variable language_">self</span>.pushButton1)  <span class="hljs-comment"># 待解决：怎么更改这个按键的格式</span><br><br>        <span class="hljs-comment"># 更改格式保存</span><br>        <span class="hljs-comment"># self.verticalLayout.addWidget(self.pushButton1, 4, 2, 1, 1)</span><br>        <span class="hljs-comment"># TypeError: addWidget(self, QWidget, stretch: int = 0, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()): argument 3 has unexpected type &#x27;int&#x27;</span><br><br>        <span class="hljs-variable language_">self</span>.retranslateUi(Form)<br>        <span class="hljs-variable language_">self</span>.pushButton1.clicked.connect(Form.pushButton1_click)<br><br>        <span class="hljs-comment"># 设置两个显示文本框</span><br>        <span class="hljs-variable language_">self</span>.textEditi = QtWidgets.QTextEdit()<br>        <span class="hljs-variable language_">self</span>.textEditi.setObjectName(<span class="hljs-string">&quot;lineEditi&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.textEditi, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>        <span class="hljs-variable language_">self</span>.textEdito = QtWidgets.QTextEdit()<br>        <span class="hljs-variable language_">self</span>.textEditi.setObjectName(<span class="hljs-string">&quot;textEdito&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.textEdito, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>        QtCore.QMetaObject.connectSlotsByName(Form)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">retranslateUi</span>(<span class="hljs-params">self, Form</span>):<br>        _translate = QtCore.QCoreApplication.translate<br>        Form.setWindowTitle(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;CamTimeLapse&quot;</span>))  <span class="hljs-comment">#设置窗口标题</span><br><br>        <span class="hljs-comment"># 设置界面标题</span><br>        <span class="hljs-variable language_">self</span>.formtitle.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, \<br>            <span class="hljs-string">&quot;&lt;html&gt;\</span><br><span class="hljs-string">                &lt;head/&gt;\</span><br><span class="hljs-string">                    &lt;body&gt;\</span><br><span class="hljs-string">                        &lt;p align=\&quot;center\&quot;&gt;\</span><br><span class="hljs-string">                            &lt;span style=\&quot; font-size:30pt; font-weight:600; font-family: Times New Roman;\&quot;&gt;\</span><br><span class="hljs-string">                                CamTimeLapse\</span><br><span class="hljs-string">                            &lt;/span&gt;\</span><br><span class="hljs-string">                        &lt;/p&gt;\</span><br><span class="hljs-string">                    &lt;/body&gt;\</span><br><span class="hljs-string">            &lt;/html&gt;&quot;</span>))<br><br><br>        <span class="hljs-variable language_">self</span>.footer.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, \<br>            <span class="hljs-string">&quot;&lt;html&gt;\</span><br><span class="hljs-string">                &lt;head/&gt;\</span><br><span class="hljs-string">                    &lt;body&gt;\</span><br><span class="hljs-string">                        &lt;p align=\&quot;center\&quot;&gt;\</span><br><span class="hljs-string">                            &lt;span style=\&quot; font-size:15pt; font-weight:300; font-family: Times New Roman;\&quot;&gt;\</span><br><span class="hljs-string">                                Designed by Murphy\</span><br><span class="hljs-string">                            &lt;/span&gt;\</span><br><span class="hljs-string">                        &lt;/p&gt;\</span><br><span class="hljs-string">                    &lt;/body&gt;\</span><br><span class="hljs-string">            &lt;/html&gt;&quot;</span>))<br>        <br>        <span class="hljs-variable language_">self</span>.number.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;相机号（0/1/2）&quot;</span>))<br><br>        <span class="hljs-variable language_">self</span>.option.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;时间/数量选择（0/1）&quot;</span>))<br><br>        <span class="hljs-variable language_">self</span>.interval.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;间隔（s）&quot;</span>))<br><br>        <span class="hljs-variable language_">self</span>.pushButton1.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;开始&quot;</span>))<br><br><br>        <br></code></pre></td></tr></table></figure><p>makeDir.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makedir</span>():<br>flag = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir():<br><span class="hljs-keyword">if</span> i == time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>):<br>flag = <span class="hljs-literal">True</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:<br>os.mkdir(os.getcwd() + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="v2-1-GUI还没改完"><a href="#v2-1-GUI还没改完" class="headerlink" title="v2.1 - GUI还没改完"></a>v2.1 - GUI还没改完</h1><p><a href="https://maicss.gitbooks.io/pyqt5/content/hello_world.html">Hello World · PyQt5 中文教程 (gitbooks.io)</a></p><p><a href="https://blog.csdn.net/qq_47203885/article/details/110676076">pyqt5实现—GUI界面实时显示控制台输出_跌跌撞撞进大坑的博客-CSDN博客_pyqt5 textbrowser实时输出</a></p><p><a href="https://blog.csdn.net/qq_41340996/article/details/120270410">【Qt】控制台信息输出到GUI中（在TensorFlow、PySide6环境下，将训练信息实时输出在文本框中）_KyrieLiu52的博客-CSDN博客_qt输出文本框</a></p><h1 id="v3-0"><a href="#v3-0" class="headerlink" title="v3.0"></a>v3.0</h1><ul><li>无GUI</li><li>实现了分别调用两个摄像头的功能</li><li>出现了长时间运行内存会爆掉的问题！</li></ul><h1 id="v3-1"><a href="#v3-1" class="headerlink" title="v3.1"></a>v3.1</h1><ul><li>定时重启，解决长时间运行，内存爆掉的问题（但为什么会出现爆内存的问题没解决）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> makeDir <span class="hljs-keyword">import</span> makedir<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">import</span> gc<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">caminit</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======侧面：init=======&#x27;</span>)<br><span class="hljs-keyword">global</span> cap<br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1920</span>)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1080</span>)<br><span class="hljs-comment"># ret, frame = cap.read()</span><br>praList = <span class="hljs-built_in">list</span>(cap.read())<br><span class="hljs-comment"># print(praList)</span><br><span class="hljs-keyword">return</span> praList<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">camrelease</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======侧面：rels=======&#x27;</span>)<br>cap.release()<br>cv2.destroyAllWindows()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takephoto</span>(<span class="hljs-params">praList</span>):<br><span class="hljs-keyword">while</span> praList[<span class="hljs-number">0</span>]:<br>makedir()  <span class="hljs-comment"># 以日期为分类，建立文件夹</span><br>picName = os.getcwd() + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>) + <span class="hljs-string">&#x27;\\&#x27;</span> + <span class="hljs-string">&#x27;cemian&#x27;</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span><br>cv2.imwrite(picName, praList[<span class="hljs-number">1</span>],[<span class="hljs-built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="hljs-number">100</span>])  <span class="hljs-comment"># 无损保存</span><br><span class="hljs-built_in">print</span>(time.strftime(<span class="hljs-string">&#x27;侧面：&#x27;</span>+<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span>+<span class="hljs-string">&#x27;-done&#x27;</span>)<br>praList[<span class="hljs-number">0</span>] = <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">caminit2</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======正面：init=======&#x27;</span>)<br><span class="hljs-keyword">global</span> cap2<br>cap2 = cv2.VideoCapture(<span class="hljs-number">2</span>)<br>cap2.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1920</span>)<br>cap2.<span class="hljs-built_in">set</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1080</span>)<br>praList = <span class="hljs-built_in">list</span>(cap2.read())<br><span class="hljs-comment"># print(praList)</span><br><span class="hljs-keyword">return</span> praList<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">camrelease2</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======正面：rels2=======&#x27;</span>)<br>cap2.release()<br>cv2.destroyAllWindows()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takephoto2</span>(<span class="hljs-params">praList</span>):<br><span class="hljs-keyword">while</span> praList[<span class="hljs-number">0</span>]:<br>makedir()  <span class="hljs-comment"># 以日期为分类，建立文件夹</span><br>picName = os.getcwd() + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>) + <span class="hljs-string">&#x27;\\&#x27;</span> + <span class="hljs-string">&#x27;zhengmian&#x27;</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span><br>cv2.imwrite(picName, praList[<span class="hljs-number">1</span>],[<span class="hljs-built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="hljs-number">100</span>])  <span class="hljs-comment"># 无损保存</span><br><span class="hljs-built_in">print</span>(time.strftime(<span class="hljs-string">&#x27;正面：&#x27;</span>+<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)+<span class="hljs-string">&#x27;.jpg&#x27;</span>+<span class="hljs-string">&#x27;-done-2&#x27;</span>)<br>praList[<span class="hljs-number">0</span>] = <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><br>nowtime = time.strftime(<span class="hljs-string">&#x27;%H_%M_%S&#x27;</span>)<br><br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-keyword">if</span> nowtime[<span class="hljs-number">3</span>:<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;00&#x27;</span>:<br>time.sleep(<span class="hljs-number">60</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;restart...&quot;</span>)<br>os.execl(sys.executable,sys.executable,*sys.argv)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># print(&quot;run&quot;)</span><br><span class="hljs-comment"># time.sleep(10)</span><br><br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;****************************************&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;********************<span class="hljs-subst">&#123;nowtime&#125;</span>********************&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;****************************************&#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><br>takephoto(caminit())<br>time.sleep(<span class="hljs-number">1</span>)<br>camrelease()<br><br><span class="hljs-built_in">print</span>()<br><br>takephoto2(caminit2())<br>time.sleep(<span class="hljs-number">1</span>)<br>camrelease2()<br><br><span class="hljs-keyword">del</span> cap<br><span class="hljs-keyword">del</span> cap2<br><span class="hljs-keyword">del</span> nowtime<br>gc.collect()<br><br>time.sleep(<span class="hljs-number">30</span>)  <span class="hljs-comment"># 实际约60s</span><br><br><br></code></pre></td></tr></table></figure><h1 id="v4-0"><a href="#v4-0" class="headerlink" title="v4.0"></a>v4.0</h1><ul><li><p>把程序进行了重写，改写了程序运行逻辑，尽可能减少一次循环占用的内存资源</p></li><li><p>比较复杂的功能都封装成了函数</p></li><li><p>使用百度PaddlePaddle深度学习框架，调用一个现成的深度学习的模型实现了抠图功能</p></li><li><p>main.py</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> gc<br><br><span class="hljs-keyword">from</span> makeDir <span class="hljs-keyword">import</span> makedir<br><span class="hljs-keyword">from</span> camInit <span class="hljs-keyword">import</span> caminit<br><span class="hljs-keyword">from</span> takePic <span class="hljs-keyword">import</span> takepic<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">restart</span>(<span class="hljs-params">nowTime</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;nowTime&#125;</span> : 60s - restart...&quot;</span>)<br>time.sleep(<span class="hljs-number">60</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;restart...&quot;</span>)<br>os.execl(sys.executable,sys.executable,*sys.argv)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">picname</span>):<br>nowTime = picname[-<span class="hljs-number">24</span>:-<span class="hljs-number">4</span>]<br><span class="hljs-comment"># print(nowTime) # 2022_10_08__23_07_05</span><br><span class="hljs-comment"># print(nowTime[15:17])</span><br><br><span class="hljs-comment"># 创建存储文件夹</span><br>makedir(picname)<br><br><span class="hljs-comment"># 一小时内三次重启三次</span><br><span class="hljs-keyword">if</span> nowTime[<span class="hljs-number">15</span>:<span class="hljs-number">17</span>] == <span class="hljs-string">&#x27;00&#x27;</span>:<br>restart(nowTime[<span class="hljs-number">15</span>:<span class="hljs-number">17</span>])<br><span class="hljs-keyword">elif</span> nowTime[<span class="hljs-number">15</span>:<span class="hljs-number">17</span>] == <span class="hljs-string">&#x27;20&#x27;</span>:<br>restart(nowTime[<span class="hljs-number">15</span>:<span class="hljs-number">17</span>])<br><span class="hljs-keyword">elif</span> nowTime[<span class="hljs-number">15</span>:<span class="hljs-number">17</span>] == <span class="hljs-string">&#x27;40&#x27;</span>:<br>restart(nowTime[<span class="hljs-number">15</span>:<span class="hljs-number">17</span>])<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 开始拍照</span><br>takepic(picname, caminit())<br><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-comment"># 设置文件名</span><br><span class="hljs-comment"># D:\Develop_Python\Progect\CamTimeLapse\v4.0\2022_10_08\sid\2022_10_08__20_30_46.jpg</span><br>pwd = os.getcwd()<br>dirName = time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>)<br>nowTime = time.strftime(<span class="hljs-string">&#x27;%Y_%m_%d__%H_%M_%S&#x27;</span>)<br>picClass = <span class="hljs-string">&#x27;sid&#x27;</span><br>fileClass = <span class="hljs-string">&#x27;.jpg&#x27;</span><br>picName = pwd + <span class="hljs-string">&#x27;\\&#x27;</span> + dirName + <span class="hljs-string">&#x27;\\&#x27;</span> + picClass + <span class="hljs-string">&#x27;\\&#x27;</span> + nowTime + fileClass<br><br><span class="hljs-comment"># print(picName)</span><br><br><span class="hljs-comment"># print(picName[-24:-4]) # nowTime</span><br><span class="hljs-comment"># print(picName[-24:-14]) # dirName</span><br><span class="hljs-comment"># print(picName[:-29])</span><br><span class="hljs-comment"># print(picName[-28:-25])</span><br><br><span class="hljs-comment"># picName = picName.replace(&#x27;sid&#x27;, &#x27;fro&#x27;)</span><br><span class="hljs-comment"># print(picName[:-4])</span><br><span class="hljs-comment"># time.sleep(10)</span><br><br><br><br><br><br><span class="hljs-comment"># ==================kaishi===================</span><br><br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;**********&#123;start&#125;**********&quot;</span>)<br><span class="hljs-built_in">print</span>()<br>start(picName)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;**********&#123;finish&#125;**********&quot;</span>)<br><span class="hljs-built_in">print</span>()<br><br>time.sleep(<span class="hljs-number">30</span>)  <span class="hljs-comment"># 实际约60s</span><br><br><br></code></pre></td></tr></table></figure><ul><li>makeDir.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makedir</span>(<span class="hljs-params">picname</span>):<br>flag = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir():<br><span class="hljs-comment"># print(i)</span><br><span class="hljs-keyword">if</span> i == picname[-<span class="hljs-number">24</span>:-<span class="hljs-number">14</span>]:<br>flag = <span class="hljs-literal">True</span><br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:<br>os.mkdir(picname[:-<span class="hljs-number">29</span>])<br>os.mkdir(picname[:-<span class="hljs-number">24</span>])<br>os.mkdir(picname[:-<span class="hljs-number">29</span>] + <span class="hljs-string">&#x27;\\&#x27;</span> + <span class="hljs-string">&#x27;fro&#x27;</span>)<br>os.mkdir(picname[:-<span class="hljs-number">29</span>] + <span class="hljs-string">&#x27;\\&#x27;</span> + <span class="hljs-string">&#x27;seg&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>camInit.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">caminit</span>():<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======side:init=======&#x27;</span>)<br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======front:init=======&#x27;</span>)<br>cap = cv2.VideoCapture(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 相机参数设置</span><br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1920</span>)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1080</span>)<br><br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>praListSide = <span class="hljs-built_in">list</span>(cap.read())<br><span class="hljs-comment"># print(praListSide)</span><br>cap.release()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======side:rels=======&#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-keyword">else</span>:<br>praListFront = <span class="hljs-built_in">list</span>(cap.read())<br><span class="hljs-comment"># print(praListFront)</span><br>cap.release()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=======front:rels=======&#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><br>praList = np.array([praListSide,praListFront])<br><br><span class="hljs-keyword">return</span> praList<br><span class="hljs-comment"># print(type(praList))</span><br><span class="hljs-comment"># print(praList)</span><br></code></pre></td></tr></table></figure><ul><li>takePic.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> handleFigure <span class="hljs-keyword">import</span> handlefigure<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takepic</span>(<span class="hljs-params">picname, praList</span>):<br><span class="hljs-comment"># side:</span><br><span class="hljs-comment"># praList[0][0] ret</span><br><span class="hljs-comment"># praList[0][1] fra</span><br><br><span class="hljs-comment"># front </span><br><span class="hljs-comment"># praList[1][0] ret</span><br><span class="hljs-comment"># praList[1][1] fra</span><br><br><span class="hljs-keyword">if</span> praList[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-literal">True</span>:<br>cv2.imwrite(picname, praList[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],[<span class="hljs-built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="hljs-number">100</span>])  <span class="hljs-comment"># 无损保存</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sid:&#x27;</span> + picname[-<span class="hljs-number">24</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27; - done&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sid:&#x27;</span> + picname[-<span class="hljs-number">24</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27; - wrong&#x27;</span>)<br><br><br>picname = picname.replace(<span class="hljs-string">&#x27;sid&#x27;</span>, <span class="hljs-string">&#x27;fro&#x27;</span>)<br><span class="hljs-keyword">if</span> praList[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == <span class="hljs-literal">True</span>:<br>cv2.imwrite(picname, praList[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],[<span class="hljs-built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="hljs-number">100</span>])  <span class="hljs-comment"># 无损保存</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;fro:&#x27;</span> + picname[-<span class="hljs-number">24</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27; - done&#x27;</span>)<br>handlefigure(picname)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;fro:&#x27;</span> + picname[-<span class="hljs-number">24</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27; - wrong&#x27;</span>)<br><br></code></pre></td></tr></table></figure><ul><li>handleFigure.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-comment"># pip install  matplotlib</span><br><span class="hljs-comment"># pip install  pillow</span><br><span class="hljs-comment"># pip install  PaddlePaddle</span><br><span class="hljs-comment"># pip install paddlehub</span><br><span class="hljs-comment"># hub install deeplabv3p_xception65_humanseg</span><br><br><br><span class="hljs-comment"># paddle-bfloat           0.1.7</span><br><span class="hljs-comment"># paddle2onnx             1.0.1</span><br><span class="hljs-comment"># paddlefsl               1.1.0</span><br><span class="hljs-comment"># paddlehub               2.3.0</span><br><span class="hljs-comment"># paddlenlp               2.4.0</span><br><span class="hljs-comment"># paddlepaddle            2.3.2</span><br><span class="hljs-comment"># hub install deeplabv3p_xception65_humanseg==1.1.2</span><br><br><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> paddlehub <span class="hljs-keyword">as</span> hub<br><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handlefigure</span>(<span class="hljs-params">picname</span>):<br><br>    <span class="hljs-comment"># 加载模型</span><br>    human_seg = hub.Module(name=<span class="hljs-string">&#x27;deeplabv3p_xception65_humanseg&#x27;</span>)<br><br>    img = cv2.imread(picname)<br><br>    picname = picname.replace(<span class="hljs-string">&#x27;fro&#x27;</span>, <span class="hljs-string">&#x27;seg&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1) 正在提取人体轮廓...&#x27;</span>)<br>    results = human_seg.segmentation(images = [], visualization=<span class="hljs-literal">True</span>, use_gpu=<span class="hljs-literal">False</span>, output_dir = picname[:-<span class="hljs-number">25</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;2) 提取人体轮廓完成。&#x27;</span>)<br>    <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-comment"># print(result[&#x27;save_path&#x27;])</span><br>        oldname = result[<span class="hljs-string">&#x27;save_path&#x27;</span>]<br>    os.renames(oldname, picname[:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;_seg&#x27;</span> + <span class="hljs-string">&#x27;.jpg&#x27;</span>)<br><br><br><span class="hljs-comment"># if __name__==&#x27;__main__&#x27;:</span><br><span class="hljs-comment">#     picname = r&#x27;D:\Develop_Python\Progect\CamTimeLapse\v4.0\2022_10_08\fro\2022_10_08__22_28_49.jpg&#x27;</span><br><span class="hljs-comment">#     handlefigure(picname)</span><br><br><br><br><br><br><br><br><span class="hljs-comment"># 案例学习</span><br><br><span class="hljs-comment"># import paddlehub as hub</span><br><span class="hljs-comment"># import numpy as np</span><br><span class="hljs-comment"># import cv2</span><br><span class="hljs-comment"># import time</span><br><span class="hljs-comment"># from PIL import Image</span><br><br><span class="hljs-comment"># if __name__ == &#x27;__main__&#x27;:</span><br><span class="hljs-comment">#         #第一次运行会自动下载deeplabv3p_xception65_humanseg模型，会慢一点</span><br><span class="hljs-comment">#     human_seg = hub.Module(name=&quot;deeplabv3p_xception65_humanseg&quot;)</span><br><span class="hljs-comment">#     src_img = cv2.imread(&#x27;/Users/luoye/Downloads/WechatIMG281.jpeg&#x27;)</span><br><span class="hljs-comment">#     #visualization默认是false，当设置为true时会生成分割后的图片并保存在humanseg_output目录下</span><br><span class="hljs-comment">#     results = human_seg.segmentation(images=[src_img], visualization=True)</span><br><span class="hljs-comment">#     for result in results:</span><br><span class="hljs-comment">#         image_alpha = result[&#x27;data&#x27;].astype(np.uint8)</span><br><span class="hljs-comment">#         #这里我把背景换成了红色</span><br><span class="hljs-comment">#         img_bg = Image.new(&#x27;RGBA&#x27;, (src_img.shape[1], src_img.shape[0]), (255, 0, 0, 255))</span><br><span class="hljs-comment">#         image_temp = Image.fromarray(cv2.cvtColor(src_img, cv2.COLOR_BGR2RGBA))</span><br><span class="hljs-comment">#         img_bg.paste(image_temp, (0, 0), Image.fromarray(image_alpha))</span><br><br><span class="hljs-comment">#         path = &quot;./&quot; + str(int(time.time_ns() / 1000)) + &quot;.png&quot;</span><br><span class="hljs-comment">#         img_bg.save(path)</span><br><span class="hljs-comment">#         print(&quot;add successful path=&quot; + path)</span><br><br><br><br><br><br><br><span class="hljs-comment">## 官方演示代码</span><br><span class="hljs-comment"># https://www.paddlepaddle.org.cn/hubdetail?name=deeplabv3p_xception65_humanseg&amp;en_category=ImageSegmentation</span><br><br><span class="hljs-comment"># import paddlehub as hub</span><br><span class="hljs-comment"># import cv2</span><br><br><span class="hljs-comment"># human_seg = hub.Module(name=&quot;deeplabv3p_xception65_humanseg&quot;)</span><br><span class="hljs-comment"># result = human_seg.segmentation(images=[cv2.imread(&#x27;/PATH/TO/IMAGE&#x27;)])</span><br><br><span class="hljs-comment">## API</span><br><span class="hljs-comment"># def segmentation(images=None,</span><br><span class="hljs-comment">#                 paths=None,</span><br><span class="hljs-comment">#                 batch_size=1,</span><br><span class="hljs-comment">#                 use_gpu=False,</span><br><span class="hljs-comment">#                 visualization=False,</span><br><span class="hljs-comment">#                 output_dir=&#x27;humanseg_output&#x27;)</span><br><br><br><span class="hljs-comment">## 参数</span><br><span class="hljs-comment"># images (list[numpy.ndarray]): 图片数据，ndarray.shape 为 [H, W, C]，BGR格式；</span><br><span class="hljs-comment"># paths (list[str]): 图片的路径；</span><br><span class="hljs-comment"># batch_size (int): batch 的大小；</span><br><span class="hljs-comment"># use_gpu (bool): 是否使用 GPU；</span><br><span class="hljs-comment"># visualization (bool): 是否将识别结果保存为图片文件；</span><br><span class="hljs-comment"># output_dir (str): 图片的保存路径。</span><br><br><span class="hljs-comment">##返回</span><br><span class="hljs-comment"># res (list[dict]): 识别结果的列表，列表中每一个元素为 dict，关键字有 &#x27;save_path&#x27;, &#x27;data&#x27;，对应的取值为：</span><br>    <span class="hljs-comment"># save_path (str, optional): 可视化图片的保存路径（仅当visualization=True时存在）；</span><br>    <span class="hljs-comment"># data (numpy.ndarray): 人像分割结果，仅包含Alpha通道，取值为0-255 (0为全透明，255为不透明)，也即取值越大的像素点越可能为人体，取值越小的像素点越可能为背景。</span><br></code></pre></td></tr></table></figure><ul><li>findCamID.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findcamid</span>():<br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># cap = cv2.VideoCapture(1)</span><br><span class="hljs-comment"># cap = cv2.VideoCapture(2)</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>ret, frame = cap.read()<br><span class="hljs-comment"># frame = cv2.flip(frame,1)   #镜像操作</span><br>cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>, frame)<br>key = cv2.waitKey(<span class="hljs-number">50</span>)<br><span class="hljs-comment">#print(key)</span><br><span class="hljs-keyword">if</span> key  == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br><span class="hljs-keyword">break</span><br>cv2.destroyAllWindows()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始&#x27;</span>)<br>findcamid()<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/676bef32e655">OpenCV VideoCapture.get()参数详解 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/zhouzongzong/article/details/92830076">【OpenCV + Python】ret, frame &#x3D; cap.read()返回值含义&amp;视频读取_胖子工作室的博客-CSDN博客_cap.read</a></p><p><a href="https://www.kancloud.cn/aollo/aolloopencv/269602">说明 · OpenCV-Python初学自码 · 看云 (kancloud.cn)</a></p><p><a href="https://opencv.apachecn.org/#/">python-opencv 中文文档</a></p><p><a href="https://blog.csdn.net/weixin_47965042/article/details/113359922">OpenCV的VideoCapture类的get、set参数列表_EmbedDebugger的博客-CSDN博客_videocapture参数</a></p><p><a href="https://blog.csdn.net/youcans/article/details/121169014">【OpenCV 例程300篇】02. 图像的保存（cv2.imwrite）_YouCans的博客-CSDN博客_cv2.imwrite</a></p><p><a href="https://blog.csdn.net/babybin/article/details/122044565">python获取所有可用摄像头(id + 名称)可用于opencv_babybin的博客-CSDN博客_python 获取摄像头列表</a></p>]]></content>
    
    
    <categories>
      
      <category>奇思妙想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>Python</tag>
      
      <tag>OpenCV</tag>
      
      <tag>GUI</tag>
      
      <tag>NumPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32CAM延时相机</title>
    <link href="/blog/post/Ideas/ESP32CAMTimeLapseCamera/"/>
    <url>/blog/post/Ideas/ESP32CAMTimeLapseCamera/</url>
    
    <content type="html"><![CDATA[<h1 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*********</span><br><span class="hljs-comment">  Rui Santos</span><br><span class="hljs-comment">  Complete project details at https://RandomNerdTutorials.com/esp32-cam-take-photo-save-microsd-card</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  IMPORTANT!!! </span><br><span class="hljs-comment">   - Select Board &quot;AI Thinker ESP32-CAM&quot;</span><br><span class="hljs-comment">   - GPIO 0 must be connected to GND to upload a sketch</span><br><span class="hljs-comment">   - After connecting GPIO 0 to GND, press the ESP32-CAM on-board RESET button to put your board in flashing mode</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  Permission is hereby granted, free of charge, to any person obtaining a copy</span><br><span class="hljs-comment">  of this software and associated documentation files.</span><br><span class="hljs-comment">  The above copyright notice and this permission notice shall be included in all</span><br><span class="hljs-comment">  copies or substantial portions of the Software.</span><br><span class="hljs-comment">*********/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_camera.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Arduino.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FS.h&quot;</span>                <span class="hljs-comment">// SD Card ESP32</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;SD_MMC.h&quot;</span>            <span class="hljs-comment">// SD Card ESP32</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;soc/soc.h&quot;</span>           <span class="hljs-comment">// Disable brownour problems</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;soc/rtc_cntl_reg.h&quot;</span>  <span class="hljs-comment">// Disable brownour problems</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/rtc_io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;EEPROM.h&gt;</span>            <span class="hljs-comment">// read and write from flash memory</span></span><br><br><span class="hljs-comment">// define the number of bytes you want to access</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EEPROM_SIZE 1</span><br><br><span class="hljs-comment">// Pin definition for CAMERA_MODEL_AI_THINKER</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PWDN_GPIO_NUM     32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESET_GPIO_NUM    -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> XCLK_GPIO_NUM      0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIOD_GPIO_NUM     26</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIOC_GPIO_NUM     27</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y9_GPIO_NUM       35</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y8_GPIO_NUM       34</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y7_GPIO_NUM       39</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y6_GPIO_NUM       36</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y5_GPIO_NUM       21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y4_GPIO_NUM       19</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y3_GPIO_NUM       18</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y2_GPIO_NUM        5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VSYNC_GPIO_NUM    25</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HREF_GPIO_NUM     23</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PCLK_GPIO_NUM     22</span><br><br><span class="hljs-type">int</span> pictureNumber = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, <span class="hljs-number">0</span>); <span class="hljs-comment">//disable brownout detector</span><br>  pinMode(<span class="hljs-number">33</span>, OUTPUT);<br>  Serial.begin(<span class="hljs-number">115200</span>);<br>  <span class="hljs-comment">//Serial.setDebugOutput(true);</span><br>  <span class="hljs-comment">//Serial.println();</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">take_pictures</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">camera_config_t</span> config;<br>  config.ledc_channel = LEDC_CHANNEL_0;<br>  config.ledc_timer = LEDC_TIMER_0;<br>  config.pin_d0 = Y2_GPIO_NUM;<br>  config.pin_d1 = Y3_GPIO_NUM;<br>  config.pin_d2 = Y4_GPIO_NUM;<br>  config.pin_d3 = Y5_GPIO_NUM;<br>  config.pin_d4 = Y6_GPIO_NUM;<br>  config.pin_d5 = Y7_GPIO_NUM;<br>  config.pin_d6 = Y8_GPIO_NUM;<br>  config.pin_d7 = Y9_GPIO_NUM;<br>  config.pin_xclk = XCLK_GPIO_NUM;<br>  config.pin_pclk = PCLK_GPIO_NUM;<br>  config.pin_vsync = VSYNC_GPIO_NUM;<br>  config.pin_href = HREF_GPIO_NUM;<br>  config.pin_sscb_sda = SIOD_GPIO_NUM;<br>  config.pin_sscb_scl = SIOC_GPIO_NUM;<br>  config.pin_pwdn = PWDN_GPIO_NUM;<br>  config.pin_reset = RESET_GPIO_NUM;<br>  config.xclk_freq_hz = <span class="hljs-number">20000000</span>;<br>  config.pixel_format = PIXFORMAT_JPEG; <br>  <br>  <span class="hljs-keyword">if</span>(psramFound())&#123;<br>    config.frame_size = FRAMESIZE_UXGA; <span class="hljs-comment">// FRAMESIZE_ + QVGA|CIF|VGA|SVGA|XGA|SXGA|UXGA</span><br>    config.jpeg_quality = <span class="hljs-number">1</span>;<br>    config.fb_count = <span class="hljs-number">2</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    config.frame_size = FRAMESIZE_SVGA;<br>    config.jpeg_quality = <span class="hljs-number">12</span>;<br>    config.fb_count = <span class="hljs-number">1</span>;<br>  &#125;<br>  <br>  <span class="hljs-comment">// Init Camera</span><br>  <span class="hljs-type">esp_err_t</span> err = esp_camera_init(&amp;config);<br>  <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Camera init failed with error 0x%x&quot;</span>, err);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <br>  <span class="hljs-comment">//Serial.println(&quot;Starting SD Card&quot;);</span><br>  <span class="hljs-comment">//if(!SD_MMC.begin())&#123;  //保持FLASH常量</span><br>  <span class="hljs-keyword">if</span>(!SD_MMC.begin(<span class="hljs-string">&quot;/sdcard&quot;</span>, <span class="hljs-literal">true</span>))&#123;    <span class="hljs-comment">//保持FLASH不亮</span><br>    Serial.println(<span class="hljs-string">&quot;SD Card Mount Failed&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <br>  <span class="hljs-type">uint8_t</span> cardType = SD_MMC.cardType();<br>  <span class="hljs-keyword">if</span>(cardType == CARD_NONE)&#123;<br>    Serial.println(<span class="hljs-string">&quot;No SD Card attached&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <br>  <span class="hljs-type">camera_fb_t</span> * fb = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">// Take Picture with Camera</span><br>  fb = esp_camera_fb_get();  <br>  <span class="hljs-keyword">if</span>(!fb) &#123;<br>    Serial.println(<span class="hljs-string">&quot;Camera capture failed&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// initialize EEPROM with predefined size</span><br>  EEPROM.begin(EEPROM_SIZE);<br>  pictureNumber = EEPROM.read(<span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">// Path where new picture will be saved in SD Card</span><br>  String path = <span class="hljs-string">&quot;/picture&quot;</span> + String(pictureNumber) +<span class="hljs-string">&quot;.jpg&quot;</span>;<br><br>  fs::FS &amp;fs = SD_MMC; <br>  Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Picture file name: %s\n&quot;</span>, path.c_str());<br>  <br>  File file = fs.open(path.c_str(), FILE_WRITE);<br>  <span class="hljs-keyword">if</span>(!file)&#123;<br>    Serial.println(<span class="hljs-string">&quot;Failed to open file in writing mode&quot;</span>);<br>  &#125; <br>  <span class="hljs-keyword">else</span> &#123;<br>    file.write(fb-&gt;buf, fb-&gt;len); <span class="hljs-comment">// payload (image), payload length</span><br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Saved file to path: %s\n&quot;</span>, path.c_str());<br>    EEPROM.write(<span class="hljs-number">0</span>, pictureNumber);<br>    EEPROM.commit();<br>  &#125;<br>  file.close();<br>  esp_camera_fb_return(fb); <br>  <br>  <span class="hljs-comment">// Turns off the ESP32-CAM white on-board LED (flash) connected to GPIO 4</span><br>  <span class="hljs-comment">//pinMode(4, OUTPUT);</span><br>  <span class="hljs-comment">//digitalWrite(4, LOW);</span><br>  <span class="hljs-comment">//rtc_gpio_hold_en(GPIO_NUM_4); // 低功耗保持状态</span><br>  <br>  delay(<span class="hljs-number">2000</span>);<br>  Serial.println(<span class="hljs-string">&quot;Going to sleep now&quot;</span>);<br>  <span class="hljs-comment">//delay(2000);</span><br>  <span class="hljs-comment">//esp_deep_sleep_start();</span><br>  <span class="hljs-comment">//Serial.println(&quot;This will never be printed&quot;);</span><br>  Serial.println(<span class="hljs-string">&quot;finished!&quot;</span>);<br>  <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  take_pictures();<br>  digitalWrite(<span class="hljs-number">33</span>, LOW);<span class="hljs-comment">// 亮</span><br>  delay(<span class="hljs-number">100</span>);<br>  digitalWrite(<span class="hljs-number">33</span>, HIGH);<span class="hljs-comment">// 灭</span><br>  delay(<span class="hljs-number">100</span>);<br>  <br>  delay(<span class="hljs-number">5000</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="延时相机"><a href="#延时相机" class="headerlink" title="延时相机"></a>延时相机</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// https://www.cnblogs.com/codeit/p/15580267.html</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_camera.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SPI.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SD.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;SD_MMC.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WiFi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WebServer.h&gt;</span></span><br><span class="hljs-comment">// Set web server port number to 80</span><br>WebServer <span class="hljs-title function_">server</span><span class="hljs-params">(<span class="hljs-number">80</span>)</span>; <br><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ntpServer = <span class="hljs-string">&quot;cn.pool.ntp.org&quot;</span>;  <span class="hljs-comment">//pool.ntp.org为获取时间得接口，可以尝试更多得接口。比如微软的time.windows.com，美国国家标准与技术研究院的time.nist.gov</span><br><span class="hljs-type">const</span> <span class="hljs-type">long</span>  gmtOffset_sec = <span class="hljs-number">8</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>;<span class="hljs-comment">//这里采用UTC计时，中国为东八区，就是 8*60*60</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>   daylightOffset_sec = <span class="hljs-number">0</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> <span class="hljs-title">timeinfo</span>;</span>  <span class="hljs-comment">//创建一个结构体用于存储时间</span><br><span class="hljs-type">char</span> * path = <span class="hljs-string">&quot;/2020_6_18_TIME_19_0_47.jpg&quot;</span>;<br><span class="hljs-type">char</span> timr_str[<span class="hljs-number">40</span>] = <span class="hljs-string">&quot;test.jpg&quot;</span>;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    *******************</span><br><span class="hljs-comment">    ***** 网络部分 *****</span><br><span class="hljs-comment">    *******************</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//以下是WIFI的链接用户名和密码</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ssid <span class="hljs-string">&quot;MERCURY&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> password <span class="hljs-string">&quot;11235813&quot;</span> </span><br><span class="hljs-comment">// 网络链接</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">connectToNetwork</span><span class="hljs-params">()</span>&#123;<br>  WiFi.begin(ssid,password);<br>  WiFi.setAutoReconnect(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">while</span> (WiFi.status()!= WL_CONNECTED) &#123;<br>    delay(<span class="hljs-number">1000</span>);<br>    Serial.println(<span class="hljs-string">&quot;try to connecting ...&quot;</span>);<br>  &#125;<br>  Serial.println(<span class="hljs-string">&quot;Connectedto network&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">wifi_connect</span><span class="hljs-params">()</span>&#123;<br>  connectToNetwork();<span class="hljs-comment">//链接到wifi</span><br>  Serial.println(WiFi.macAddress());    <span class="hljs-comment">//打印出mac地址</span><br>  Serial.println(WiFi.localIP());    <span class="hljs-comment">//打印出本地ip地址</span><br>  Serial.println(<span class="hljs-string">&quot;wifi连接成功&quot;</span>);    <span class="hljs-comment">//打印出本地ip地址</span><br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">    ***** 摄像头初始化参数 *****</span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">camera_config_t</span> camera_config = &#123;<br>    .pin_pwdn = <span class="hljs-number">32</span>,<br>    .pin_reset = <span class="hljs-number">-1</span>,<br>    .pin_xclk = <span class="hljs-number">0</span>,<br>    .pin_sscb_sda = <span class="hljs-number">26</span>,<br>    .pin_sscb_scl = <span class="hljs-number">27</span>,<br>    <br>    .pin_d7 = <span class="hljs-number">35</span>,<br>    .pin_d6 = <span class="hljs-number">34</span>,<br>    .pin_d5 = <span class="hljs-number">39</span>,<br>    .pin_d4 = <span class="hljs-number">36</span>,<br>    .pin_d3 = <span class="hljs-number">21</span>,<br>    .pin_d2 = <span class="hljs-number">19</span>,<br>    .pin_d1 = <span class="hljs-number">18</span>,<br>    .pin_d0 = <span class="hljs-number">5</span>,<br>    .pin_vsync = <span class="hljs-number">25</span>,<br>    .pin_href = <span class="hljs-number">23</span>,<br>    .pin_pclk = <span class="hljs-number">22</span>,<br>    <br>    .xclk_freq_hz = <span class="hljs-number">20000000</span>,<br>    .ledc_timer = LEDC_TIMER_0,<br>    .ledc_channel = LEDC_CHANNEL_0,<br>    <br>    .pixel_format = PIXFORMAT_JPEG,  <span class="hljs-comment">//YUV422,GRAYSCALE,RGB565,JPEG</span><br>    .frame_size = FRAMESIZE_UXGA,   <span class="hljs-comment">// FRAMESIZE_ + QVGA|CIF|VGA|SVGA|XGA|SXGA|UXGA</span><br>    <br>    .jpeg_quality = <span class="hljs-number">10</span>, <span class="hljs-comment">//0-63 lower number means higher quality</span><br>    .fb_count = <span class="hljs-number">1</span> <span class="hljs-comment">//if more than one, i2s runs in continuous mode. Use only with JPEG</span><br><br>&#125;;<br><br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">camera_init</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//initialize the camera</span><br>    <span class="hljs-type">esp_err_t</span> err = esp_camera_init(&amp;camera_config);<br>    <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>        Serial.print(<span class="hljs-string">&quot;Camera Init Failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> err;<br>    &#125;<br>    <span class="hljs-type">sensor_t</span> * s = esp_camera_sensor_get();<br>    <span class="hljs-comment">//initial sensors are flipped vertically and colors are a bit saturated</span><br>    <span class="hljs-keyword">if</span> (s-&gt;id.PID == OV2640_PID) &#123;<br>    <span class="hljs-comment">//        s-&gt;set_vflip(s, 1);//flip it back</span><br>    <span class="hljs-comment">//        s-&gt;set_brightness(s, 1);//up the blightness just a bit</span><br>    <span class="hljs-comment">//        s-&gt;set_contrast(s, 1);</span><br>    &#125;<br>    Serial.print(<span class="hljs-string">&quot;Camera Init OK&quot;</span>);<br>    <span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">    ***** SD卡路径操作函数 *****</span><br><span class="hljs-comment">    **** 列出路径，创建路径，删除路径******</span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 列出路径</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">listDir</span><span class="hljs-params">(fs::FS &amp;fs, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * dirname, <span class="hljs-type">uint8_t</span> levels)</span>&#123;<br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Listing directory: %s\n&quot;</span>, dirname);<br><br>    File root = fs.open(dirname);<br>    <span class="hljs-keyword">if</span>(!root)&#123;<br>        Serial.println(<span class="hljs-string">&quot;Failed to open directory&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!root.isDirectory())&#123;<br>        Serial.println(<span class="hljs-string">&quot;Not a directory&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    File file = root.openNextFile();<br>    <span class="hljs-keyword">while</span>(file)&#123;<br>        <span class="hljs-keyword">if</span>(file.isDirectory())&#123;<br>            Serial.print(<span class="hljs-string">&quot;  DIR : &quot;</span>);<br>            Serial.print (file.name());<br>            <span class="hljs-type">time_t</span> t= file.getLastWrite();<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> * <span class="hljs-title">tmstruct</span> =</span> localtime(&amp;t);<br>            Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  LAST WRITE: %d-%02d-%02d %02d:%02d:%02d\n&quot;</span>,(tmstruct-&gt;tm_year)+<span class="hljs-number">1900</span>,( tmstruct-&gt;tm_mon)+<span class="hljs-number">1</span>, tmstruct-&gt;tm_mday,tmstruct-&gt;tm_hour , tmstruct-&gt;tm_min, tmstruct-&gt;tm_sec);<br>            <span class="hljs-keyword">if</span>(levels)&#123;<br>                listDir(fs, file.name(), levels <span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Serial.print(<span class="hljs-string">&quot;  FILE: &quot;</span>);<br>            Serial.print(file.name());<br>            Serial.print(<span class="hljs-string">&quot;  SIZE: &quot;</span>);<br>            Serial.print(file.size());<br>            <span class="hljs-type">time_t</span> t= file.getLastWrite();<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> * <span class="hljs-title">tmstruct</span> =</span> localtime(&amp;t);<br>            Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  LAST WRITE: %d-%02d-%02d %02d:%02d:%02d\n&quot;</span>,(tmstruct-&gt;tm_year)+<span class="hljs-number">1900</span>,( tmstruct-&gt;tm_mon)+<span class="hljs-number">1</span>, tmstruct-&gt;tm_mday,tmstruct-&gt;tm_hour , tmstruct-&gt;tm_min, tmstruct-&gt;tm_sec);<br>        &#125;<br>        file = root.openNextFile();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">    ***** SD卡初始化参数 *****</span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sd_init</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(!SD_MMC.begin())&#123;<br>    Serial.println(<span class="hljs-string">&quot;Card Mount Failed&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-type">uint8_t</span> cardType = SD_MMC.cardType();<br>  <span class="hljs-keyword">if</span>(cardType == CARD_NONE)&#123;<br>    Serial.println(<span class="hljs-string">&quot;No SD card attached&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  Serial.print(<span class="hljs-string">&quot;SD Card Type: &quot;</span>);<br>  <span class="hljs-keyword">if</span>(cardType == CARD_MMC)&#123;<br>    Serial.println(<span class="hljs-string">&quot;MMC&quot;</span>);<br>    &#125; <br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cardType == CARD_SD)&#123;  Serial.println(<span class="hljs-string">&quot;SDSC&quot;</span>);  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cardType == CARD_SDHC)&#123;  Serial.println(<span class="hljs-string">&quot;SDHC&quot;</span>);  &#125; <br>  <span class="hljs-keyword">else</span> &#123;  Serial.println(<span class="hljs-string">&quot;UNKNOWN&quot;</span>);  &#125;<br>  <br>  <span class="hljs-type">uint64_t</span> cardSize = SD_MMC.cardSize() / (<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);    <span class="hljs-comment">//获取SD卡大小，大小单位是MB</span><br>  Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SD 卡容量大小: %lluMB\n&quot;</span>, cardSize);  <br><br>  <span class="hljs-comment">//***************  调用SD卡的 路径操作函数  **********************************************************************</span><br>  Serial.println(<span class="hljs-string">&quot;现在列出目前SD卡内部根目录下所有的路径：&quot;</span>);<br>  listDir(SD_MMC, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-number">0</span>);<br>  &#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">    ***** 获取当前时间作为返回的函数部分 *****</span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_time_path</span><span class="hljs-params">()</span>  <span class="hljs-comment">//获取目前时间返回字符串</span><br>&#123;<br>  <span class="hljs-built_in">memset</span>(timr_str, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(timr_str));<br>  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);<br>  <span class="hljs-keyword">if</span>(!getLocalTime(&amp;timeinfo))<br>  &#123;<br>    Serial.println(<span class="hljs-string">&quot;Failed to obtain time&quot;</span>);<br>    <span class="hljs-built_in">sprintf</span>(timr_str, <span class="hljs-string">&quot;/TIME_get_failed.jpg&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">//Serial.println(&amp;timeinfo, &quot;%A, %B %d %Y %H:%M:%S&quot;);</span><br>    Serial.print(<span class="hljs-string">&quot;现在时间是：&quot;</span>);<br><span class="hljs-comment">//    Serial.print(&quot;年份是：&quot;);Serial.println(timeinfo.tm_year + 1900);</span><br><span class="hljs-comment">//    Serial.print(&quot;月份是：&quot;);Serial.println(timeinfo.tm_mon + 1);</span><br><span class="hljs-comment">//    Serial.print(&quot;号数是：&quot;);Serial.println(timeinfo.tm_mday);</span><br><span class="hljs-comment">//    Serial.print(&quot;小时数是：&quot;);Serial.println(timeinfo.tm_hour );  //中国区</span><br><span class="hljs-comment">//    Serial.print(&quot;分钟数是：&quot;);Serial.println(timeinfo.tm_min);</span><br><span class="hljs-comment">//    Serial.print(&quot;秒数是：&quot;);Serial.println(timeinfo.tm_sec);</span><br>    <br>    <span class="hljs-built_in">sprintf</span>(timr_str, <span class="hljs-string">&quot;/%d_%d_%d_TIME_%d_%d_%d.jpg&quot;</span>,timeinfo.tm_year+<span class="hljs-number">1900</span>,timeinfo.tm_mon + <span class="hljs-number">1</span>,timeinfo.tm_mday,timeinfo.tm_hour,timeinfo.tm_min,timeinfo.tm_sec);<br>    Serial.println(timr_str);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">    ***** webserver *****</span><br><span class="hljs-comment">    ***************************</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handle_OnConnect</span><span class="hljs-params">()</span> &#123;<br><br>  server.send(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;text/html&quot;</span>, SendHTML(timr_str)); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handle_NotFound</span><span class="hljs-params">()</span>&#123;<br>  server.send(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;text/plain&quot;</span>, <span class="hljs-string">&quot;Not found&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">webserver_init</span><span class="hljs-params">()</span>&#123;<br>  server.on(<span class="hljs-string">&quot;/&quot;</span>, handle_OnConnect);<br>  server.onNotFound(handle_NotFound);<br><br>  server.begin();<br>  Serial.println(<span class="hljs-string">&quot;HTTP server started&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">  ***************************</span><br><span class="hljs-comment">  ***** 主函数部分 *****</span><br><span class="hljs-comment">  ***************************</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">115200</span>);<br>  wifi_connect();<br>  camera_init();  <span class="hljs-comment">//摄像头初始化</span><br>  sd_init();  <span class="hljs-comment">//SD卡初始化</span><br>  webserver_init();<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> <br>&#123;<br>  delay(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 1 000 ms</span><br>  get_time_path();<br>  <br>  server.handleClient();<br><br>  <span class="hljs-comment">//拍照并且把图片保存到SD卡当中，而照片名字就保存为目前的时间</span><br>  <span class="hljs-comment">// delay(60000);  // 延时摄影，时间间隔:60 000 ms</span><br>  <span class="hljs-keyword">while</span> (timeinfo.tm_sec == <span class="hljs-number">0</span>)<br>  &#123;<br>    delay(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 1 000 ms</span><br>    get_time_path();<br><br>    <span class="hljs-keyword">if</span> (timeinfo.tm_min == <span class="hljs-number">30</span>) <span class="hljs-comment">// 整点重启</span><br>    &#123;<br>      <br>      Serial.println(<span class="hljs-string">&quot;Resetting ESP&quot;</span>);<br>      ESP.restart(); <span class="hljs-comment">//ESP.reset();</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 非整点拍照</span><br>    &#123;<br>      Serial.println(<span class="hljs-string">&quot;即将进行拍照!!!&quot;</span>);<br>      <span class="hljs-type">camera_fb_t</span> * fb = esp_camera_fb_get();<br>      <span class="hljs-comment">// get_time_path();</span><br>      Serial.print(<span class="hljs-string">&quot;存入的图片名称为:&quot;</span>);Serial.println(timr_str);<br>      path = timr_str;    <br>      <span class="hljs-keyword">if</span>(fb == <span class="hljs-literal">NULL</span>)<br>      &#123; <br>        Serial.println( <span class="hljs-string">&quot;get picture failed&quot;</span>);  <span class="hljs-comment">//代表获取图片失败 </span><br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123; <br>          <span class="hljs-comment">//char * path = time_str;</span><br>          fs::FS &amp;fs = SD_MMC;<br>          Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Writing file: %s\n&quot;</span>, path);<br>          File file = fs.open(path, FILE_WRITE);<br>          <span class="hljs-keyword">if</span> (!file) <br>          &#123;<br>            Serial.println(<span class="hljs-string">&quot;文件创建失败&quot;</span>);<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            file.write(fb-&gt;buf , fb-&gt;len); <span class="hljs-comment">//payload , lengte vd payload</span><br>            Serial.println(<span class="hljs-string">&quot;成功写入照片&quot;</span>);<br>          &#125;<br>          <span class="hljs-comment">//return the frame buffer back to the driver for reuse</span><br>          esp_camera_fb_return(fb);<br>      &#125;  <br>    &#125;<br>  &#125;<span class="hljs-comment">// while 结束</span><br>&#125;<br><br><br><br><br>String <span class="hljs-title function_">SendHTML</span><span class="hljs-params">(<span class="hljs-type">char</span>* timr_str)</span>&#123;<br>  String ptr = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; &lt;html&gt;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;head&gt;&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0, user-scalable=no\&quot;&gt;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;title&gt;ESP32CAM STATUS&lt;/title&gt;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;style&gt;html &#123; font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;&#125;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;body&#123;margin-top: 50px;&#125; h1 &#123;color: #444444;margin: 50px auto 30px;&#125;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;p &#123;font-size: 24px;color: #444444;margin-bottom: 10px;&#125;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;/style&gt;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;/head&gt;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;body&gt;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;div id=\&quot;webpage\&quot;&gt;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;h1&gt;ESP32CAM PIC INFOMATION&lt;/h1&gt;\n&quot;</span>;<br>  <br>  ptr +=<span class="hljs-string">&quot;&lt;p&gt;TIME: &quot;</span>;<br>  ptr +=timr_str;<br><br>  <br>  <span class="hljs-comment">//  ptr +=&quot;&lt;p&gt;Pressure: &quot;;</span><br>  <span class="hljs-comment">//  ptr +=pressure;</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">//  ptr +=&quot;&lt;p&gt;Altitude: &quot;;</span><br>  <span class="hljs-comment">//  ptr +=altitude;</span><br><br>  ptr +=<span class="hljs-string">&quot;&lt;/div&gt;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;/body&gt;\n&quot;</span>;<br>  ptr +=<span class="hljs-string">&quot;&lt;/html&gt;\n&quot;</span>;<br>  <span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="公网映射监控"><a href="#公网映射监控" class="headerlink" title="公网映射监控"></a>公网映射监控</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_camera.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WiFi.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssid = <span class="hljs-string">&quot;xxxxxxxx&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* password = <span class="hljs-string">&quot;xxxxxxxxx&quot;</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PWDN_GPIO_NUM     32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESET_GPIO_NUM    -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> XCLK_GPIO_NUM      0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIOD_GPIO_NUM     26</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIOC_GPIO_NUM     27</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y9_GPIO_NUM       35</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y8_GPIO_NUM       34</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y7_GPIO_NUM       39</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y6_GPIO_NUM       36</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y5_GPIO_NUM       21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y4_GPIO_NUM       19</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y3_GPIO_NUM       18</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y2_GPIO_NUM        5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VSYNC_GPIO_NUM    25</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HREF_GPIO_NUM     23</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PCLK_GPIO_NUM     22</span><br><br>WiFiServer <span class="hljs-title function_">server</span><span class="hljs-params">(<span class="hljs-number">80</span>)</span>;<br><span class="hljs-type">bool</span> connected = <span class="hljs-literal">false</span>;<br>WiFiClient live_client;<br><br><br>String index_html = <span class="hljs-string">&quot;&lt;meta charset=\&quot;utf-8\&quot;/&gt;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;&lt;style&gt;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;#content &#123;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;display: flex;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;flex-direction: column;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;justify-content: center;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;align-items: center;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;text-align: center;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;min-height: 100vh;&#125;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;&lt;/style&gt;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;&lt;body bgcolor=\&quot;#000000\&quot;&gt;&lt;div id=\&quot;content\&quot;&gt;&lt;h2 style=\&quot;color:#ffffff\&quot;&gt;Murphy LIVE&lt;/h2&gt;&lt;img src=\&quot;video\&quot;&gt;&lt;/div&gt;&lt;/body&gt;&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">configCamera</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">camera_config_t</span> config;<br>  config.ledc_channel = LEDC_CHANNEL_0;<br>  config.ledc_timer = LEDC_TIMER_0;<br>  config.pin_d0 = Y2_GPIO_NUM;<br>  config.pin_d1 = Y3_GPIO_NUM;<br>  config.pin_d2 = Y4_GPIO_NUM;<br>  config.pin_d3 = Y5_GPIO_NUM;<br>  config.pin_d4 = Y6_GPIO_NUM;<br>  config.pin_d5 = Y7_GPIO_NUM;<br>  config.pin_d6 = Y8_GPIO_NUM;<br>  config.pin_d7 = Y9_GPIO_NUM;<br>  config.pin_xclk = XCLK_GPIO_NUM;<br>  config.pin_pclk = PCLK_GPIO_NUM;<br>  config.pin_vsync = VSYNC_GPIO_NUM;<br>  config.pin_href = HREF_GPIO_NUM;<br>  config.pin_sscb_sda = SIOD_GPIO_NUM;<br>  config.pin_sscb_scl = SIOC_GPIO_NUM;<br>  config.pin_pwdn = PWDN_GPIO_NUM;<br>  config.pin_reset = RESET_GPIO_NUM;<br>  config.xclk_freq_hz = <span class="hljs-number">20000000</span>;<br>  config.pixel_format = PIXFORMAT_JPEG;<br><br>  config.frame_size = FRAMESIZE_QVGA;<br>  config.jpeg_quality = <span class="hljs-number">9</span>;<br>  config.fb_count = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-type">esp_err_t</span> err = esp_camera_init(&amp;config);<br>  <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Camera init failed with error 0x%x&quot;</span>, err);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//continue sending camera frame</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">liveCam</span><span class="hljs-params">(WiFiClient &amp;client)</span>&#123;<br>  <span class="hljs-type">camera_fb_t</span> * fb = esp_camera_fb_get();<br>  <span class="hljs-keyword">if</span> (!fb) &#123;<br>      Serial.println(<span class="hljs-string">&quot;Frame buffer could not be acquired&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br>  client.print(<span class="hljs-string">&quot;--frame\n&quot;</span>);<br>  client.print(<span class="hljs-string">&quot;Content-Type: image/jpeg\n\n&quot;</span>);<br>  client.flush();<br>  client.write(fb-&gt;buf, fb-&gt;len);<br>  client.flush();<br>  client.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>  esp_camera_fb_return(fb);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">115200</span>);<br>  WiFi.begin(ssid, password);<br>  Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    delay(<span class="hljs-number">500</span>);<br>    Serial.print(<span class="hljs-string">&quot;.&quot;</span>);<br>  &#125;<br>  Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>  String IP = WiFi.localIP().toString();<br>  Serial.println(<span class="hljs-string">&quot;IP address: &quot;</span> + IP);<br>  index_html.replace(<span class="hljs-string">&quot;server_ip&quot;</span>, IP);<br>  server.begin();<br>  configCamera();<br>&#125;<br>    <br><span class="hljs-type">void</span> <span class="hljs-title function_">http_resp</span><span class="hljs-params">()</span>&#123;<br>  WiFiClient client = server.available();                           <br>  <span class="hljs-keyword">if</span> (client.connected()) &#123;     <br>      String req = <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-keyword">while</span>(client.available())&#123;<br>        req += (<span class="hljs-type">char</span>)client.read();<br>      &#125;<br>      Serial.println(<span class="hljs-string">&quot;request &quot;</span> + req);<br>      <span class="hljs-type">int</span> addr_start = req.indexOf(<span class="hljs-string">&quot;GET&quot;</span>) + <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;GET&quot;</span>);<br>      <span class="hljs-type">int</span> addr_end = req.indexOf(<span class="hljs-string">&quot;HTTP&quot;</span>, addr_start);<br>      <span class="hljs-keyword">if</span> (addr_start == <span class="hljs-number">-1</span> || addr_end == <span class="hljs-number">-1</span>) &#123;<br>          Serial.println(<span class="hljs-string">&quot;Invalid request &quot;</span> + req);<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br>      req = req.substring(addr_start, addr_end);<br>      req.trim();<br>      Serial.println(<span class="hljs-string">&quot;Request: &quot;</span> + req);<br>      client.flush();<br>  <br>      String s;<br>      <span class="hljs-keyword">if</span> (req == <span class="hljs-string">&quot;/&quot;</span>)<br>      &#123;<br>          s = <span class="hljs-string">&quot;HTTP/1.1 200 OK\n&quot;</span>;<br>          s += <span class="hljs-string">&quot;Content-Type: text/html\n\n&quot;</span>;<br>          s += index_html;<br>          s += <span class="hljs-string">&quot;\n&quot;</span>;<br>          client.print(s);<br>          client.stop();<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req == <span class="hljs-string">&quot;/video&quot;</span>)<br>      &#123;<br>          live_client = client;<br>          live_client.print(<span class="hljs-string">&quot;HTTP/1.1 200 OK\n&quot;</span>);<br>          live_client.print(<span class="hljs-string">&quot;Content-Type: multipart/x-mixed-replace; boundary=frame\n\n&quot;</span>);<br>          live_client.flush();<br>          connected = <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>          s = <span class="hljs-string">&quot;HTTP/1.1 404 Not Found\n\n&quot;</span>;<br>          client.print(s);<br>          client.stop();<br>      &#125;<br>    &#125;       <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  http_resp();<br>  <span class="hljs-keyword">if</span>(connected == <span class="hljs-literal">true</span>)&#123;<br>    liveCam(live_client);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>奇思妙想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>ESP</tag>
      
      <tag>C/C++</tag>
      
      <tag>Ngrok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023推免记录</title>
    <link href="/blog/post/MyLife/PostgraduateRecommendation2023/"/>
    <url>/blog/post/MyLife/PostgraduateRecommendation2023/</url>
    
    <content type="html"><![CDATA[<blockquote><p>能写的还是比较多的，可能要花点时间整理一下。（挖坑😉</p></blockquote><p>​大三上学期期末考试结束，成绩出来之后，自己的成绩排名距离历年来说的保研线差了三四名左右，就当时的情况，保研对我来说是遥遥无期的。在询问了几个学长与学姐之后，决定再放手一搏最后一次，用寒假的时间参加“美国大学生数学建模竞赛”，走竞赛推免的路。</p><p>​关于美赛的学习与竞赛过程我在博客的<code>数学</code>分类下已经写了三篇文章了，不再赘述。美赛结束后已经三月份了，打比赛时感觉并没有做得很好，于是感觉保研的路彻底断了。也曾想过询问老师看看能不能有机会去实验室，跟着师兄和师姐发一篇文章，走论文推免的路，但最后还是没有去做，感觉希望也没有很大。于是，我就打算全身心投入到考研的状态，但在择校过程中也同样是充满了焦虑和不安，最后打算去中科院声学所的专硕。四月份因为疫情封校了一个月，吃饭、上课、学习都在宿舍，这一个月的时间，考虑了一些考研的事情。五月带来了一个好消息和一个坏消息，美赛结果出来了，M奖，这意味着三个人中只有两个人有参加答辩获得加分的资格（这是个坏消息😭）。五月份就主要是学习其实内心也和很焦虑的，六月初开学复习准备期末考试，期间完成了几个学校的报名，考试结束之后之后就是全身心地投入到夏令营的准备中了。</p><hr><h1 id="📑材料准备"><a href="#📑材料准备" class="headerlink" title="📑材料准备"></a>📑材料准备</h1><blockquote><p>在报名阶段有需要的其他材料顺手就补充一下，在报名过程中也对自己前期准备的材料随时修改完善。</p></blockquote><p>💻软件和工具</p><ul><li>简历制作：<a href="https://www.mujicv.com/">木及简历 - 免费MarkDown在线简历 (mujicv.com)</a></li><li>PDF软件：<a href="https://www.adobe.com/acrobat/acrobat-pro.html">Adobe Acrobat Pro</a> &amp; <a href="https://www.drawboard.com/pdf/pdf">Drawboard PDF</a></li><li>1寸照片换底：<a href="https://www.adobe.com/cn/products/photoshop.html">Adobe Photoshop</a></li><li>文字工具：<a href="https://www.microsoftstore.com.cn/software/office">Microsoft Office</a> &amp; <a href="https://www.sublimetext.com/">Sublime Text</a> &amp; <a href="https://typoraio.cn/">Typora</a> </li><li>保研公众号（自己搜索关注几个就行，都差不多，都是各学校夏令营通知的信息整合）</li></ul><p>📝材料</p><ul><li>教务处盖章的专业排名证明 &amp; 成绩单</li><li>英语四六级证书 &amp; 奖学金证书 &amp; 竞赛获奖证书</li><li>个人自述（中英文，长篇短篇） &amp; 个人介绍的PPT</li><li>个人照片，建议拍得好看精神一点（我的照片就非常不好看😅</li><li>个人简历（多修改几次，找老师或学长学姐给看看需要进行什么更改）</li></ul><hr><h1 id="📢夏令营报名"><a href="#📢夏令营报名" class="headerlink" title="📢夏令营报名"></a>📢夏令营报名</h1><h2 id="🏫南京大学（未入营）"><a href="#🏫南京大学（未入营）" class="headerlink" title="🏫南京大学（未入营）"></a>🏫南京大学（未入营）</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/9015-kftfpiw3068375.jpg" alt="南京大学北大楼的满墙爬山虎，向往啊~"></p><p><a href="https://ese.nju.edu.cn/b3/d2/c22673a570322/page.htm">2022年南京大学电子科学与工程学院优秀大学生夏令营报名通知 (nju.edu.cn)</a></p><p>​南京满足来我对中国现代化城市的所有幻想，拥有悠久了历史文明但同时也有高涨的现代化发展势头，因此我非常喜欢南京这个城市，特别想未来能留在南京发展。</p><p>​南京的大学有很多，我只考虑了南京大学和东南大学，东南大学在一些理工科比南京大学要好，而南京大学在综合排名上比东南大学要好。东南是通信强校，我所知道的信息是我们专业只有一个特别特别优秀的学姐去了去东南大学<em>（18级通信第一名去东南</em>据说<em>是因为3月份找好了老师，老师给了她一个项目，她做好了这个项目之后，老师同意接受了她）</em>，所以东南大学，对我来说，无论是考研还是读研，上岸的难度很大，不在考虑范围内。南京大学上岸的难度不必东南大学小，但我在大二的时候，年少轻狂不懂事，打算去南京大学读研，所以不管结果如何，还是投了一下南大。</p><p>​南大的夏令营报名是南大自己做的一个类似于表单信息收集的网页，非常清晰明了。报名需要准备简历，但我之前由于时间原因没有准备，打算现做一份。我所使用的工具是上文所说的木及简历，做出来的效果还是很清晰明了的，但是内容上没有考虑很多，由于这是我第一次做简历，自我感觉还算良好，但这其实是非常<strong>不明智</strong>的，还是应该请教一下之前有相关经验的学长学姐的。</p><p>​6月3日端午假期，填写完成信息，材料合并，上传提交，南京大学夏令营是我一个报名的学习。</p><p>​最后的结果就是被默拒了，也是意料之中的啦😣</p><h2 id="🏫中国科学院声学研究所（入营）"><a href="#🏫中国科学院声学研究所（入营）" class="headerlink" title="🏫中国科学院声学研究所（入营）"></a>🏫中国科学院声学研究所（入营）</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/W020091204538104149565.jpg" alt="DSP大楼"></p><p><a href="http://www.ioa.cas.cn/yjs/zsxx/zstz/202205/t20220505_6443031.html">中科院声学所2022年全国“声学和信息学科大学生夏令营”通知–中国科学院声学研究所-研究生教育 (cas.cn)</a></p><p>​我在大一刚入学的时候，对科研这件事还完全不懂，但我知道中国科学院是中国最顶尖的科研院所是世界级的科研殿堂，对中科院的研究所有了一些向往，感觉去中科院是一个非常不错的选择。转眼<em>两年半（警觉🐓</em>过去了，有了一些学习的经历和对科研的一点点甚至还可能是错误地认知后，在之前选择考研院校时，选择了中科院的科研院所，在多个研究所的对比之下，最终决定去中科院声学所。另外也有中科院考研相对于高校来说，竞争压力略小一些，因为中科院很多人基于或这或那的原因，都不会考虑的。</p><p>​基于“不搞电路搞算法，不搞通信搞信号”的想法，最想去的实验室是“语音”实验室，但是这个实验室竞争特别特别激烈，不容易进，最后我选择了<code>先进水下信息技术重点实验室</code>。</p><p>​中科院夏令营都在国科大的科教平台上都是一个系统，每个院所报名时候都需要一个<strong>新的用户名和邮箱</strong>！报名系统比较复杂，要填的条目比较多，并且都有字数限制，比较抓狂！</p><p>​最后的结果是入营了，还是比较开心的，距离夏令营的时间还有很久，有比较充足的时间进行复习和准备。</p><h2 id="🏫中国科学院上海技术物理研究所（入营）"><a href="#🏫中国科学院上海技术物理研究所（入营）" class="headerlink" title="🏫中国科学院上海技术物理研究所（入营）"></a>🏫中国科学院上海技术物理研究所（入营）</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230217173028284.png" alt="SITP"></p><p><a href="http://www.sitp.cas.cn/yjs/zsxx/ssszs/202205/t20220505_6443043.html">2022年上海技术物理研究所“慧眼寻光”优秀大学生暑期夏令营报名通知–上海技术物理研究所 (cas.cn)</a></p><p>​我们学校去声学所和技物所的学长有很多，海洋技术专业去声学所的比较多，电子系去技物所的比较多，在询问学长学姐的时候，他们也多次推荐了这两个研究所。专业比较对口，那优营的难度也不算大。在夏令营阶段认识了一个去技物所读研的一个学长，学长给我推荐了课题组的一个博士后师兄，他们在整个夏令营阶段，在材料修改等方面帮助了我很多！非常感谢他们对我的帮助。</p><p>​技物所和声学所的报名平台一样，所需要填的东西也都一样，所以很快就完成了技物所的报名。</p><p>​技物所在报名还没结束的时候，就已经出了入营的结果了（不知道是全部还是一批次一批次的）。参营时间不冲突，于是我确认了参加技物所的夏令营。</p><h2 id="🏫中国海洋大学（未入营）"><a href="#🏫中国海洋大学（未入营）" class="headerlink" title="🏫中国海洋大学（未入营）"></a>🏫中国海洋大学（未入营）</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6.png" alt="海大的建筑风格还是非常耐看的"></p><p><a href="https://it.ouc.edu.cn/2022/0518/c21608a370713/page.htm">关于举办2022年中国海洋大学信息学部“优秀大学生夏令营”活动的通知 (ouc.edu.cn)</a></p><p>​很多人参加本校的夏令营都是想拿本校保底，当然我也是这样的想法，也想换个学习环境，也想更进一步，去更好的平台。</p><p>​海大的夏令营报名非常繁琐，需要学院和学部的盖章，系统做的也非常简陋，体验非常不好。</p><p>​海大拒了我还是挺意外的，我们班大概只要了前十名吧。</p><h2 id="🏫山东大学（未入营）"><a href="#🏫山东大学（未入营）" class="headerlink" title="🏫山东大学（未入营）"></a>🏫山东大学（未入营）</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/ECC4294ABBB5A4B9D2BE70A22E6_2A9D1539_60101.png" alt="山东大学青岛校区距离我们崂山校区还是很近的，可惜没去过，有点遗憾"></p><p><a href="https://yz.sdu.edu.cn/info/1009/5176.htm">山东大学2022年“优秀大学生暑期夏令营” 通知汇总（持续更新）-山东大学研究生招生信息网 (sdu.edu.cn)</a></p><p>​山东大学是山东最好的大学，山东大学的信息学院在青岛校区，而青岛是山东最好的城市，作为山东人，未来留在青岛也是一个很不错的选择，所以也非常期望能去山东大学读研。去年我们电子系的情况是，只有一个学长去了，所以入营并拿优营还是难度很大的。</p><p>​上面所报名的四所（南声技海）的报名基本都是在6.20报名截止，那个时候山大还没有夏令营的通知。报名完南声极海之后就准备期末考试了。</p><p>​山大的报名是在考试周中完成的，期间山大还换过一次系统，之前的报名系统界面和海大是一样的，估计是一个外包公司做的，但之后网站突然上不去了，不知道怎么回事，报名通知也没说，也没有建山大的报名交流群，也因为考试比较紧张，没怎么放心上。临近截止的前几天，问了同学才知道山大换了系统，需要重新注册填写信息。这个新系统做的比原系统要好太多了，有西安交通大学报名系统的感觉（西交我也注册，但是没有提交报名，报名期间总时在自我怀疑，最后还是没报名西交）。</p><p>​山大信院的夏令营入营结果是通过学院官网的通知发布的，电子系通信班没有一个入营的，电工和电科班有几个同学成功入营。</p><h2 id="🏫西北工业大学（入营）"><a href="#🏫西北工业大学（入营）" class="headerlink" title="🏫西北工业大学（入营）"></a>🏫西北工业大学（入营）</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/npuschoolgate20220928.jpg" alt="这个校门很气派啊"></p><p><a href="https://yzb.nwpu.edu.cn/info/1174/8126.htm">西北工业大学2022年全国优秀大学生暑期夏令营招生简章-研究生招生信息网 (nwpu.edu.cn)</a></p><p>​西安是除了南京之外，第二个我觉得有文化韵味和科技发展的城市，并且西安的高校是真的多，但西安的体量并不大，都不如青岛大，再加上是在祖国大西北地区，纯纯二线城市，所以并没有特别想西安。报名之前对西工大的了解也不是很多，西工大并不是我的首选学校。</p><p>​一个有意思的事情，在中科大的夏令营群里认识了NPU的Murphy同学，世另我！</p><h2 id="🏫其他"><a href="#🏫其他" class="headerlink" title="🏫其他"></a>🏫其他</h2><p>​夏令营阶段，其实也填了一些其他学校的夏令营系统，如西安交通大学等，但因为不是很自信，就没有提交。确实因为自己的成绩没有特别好，就不是很自信自己能有资格，于是就浪费了很多机会。</p><ul><li>西安交通大学<ul><li>好想去啊，但是电子系往年的夏令营情况并不好，西交的报名系统非常复杂，填报了一半就放弃了，唉😢</li></ul></li><li>哈尔滨工业大学<ul><li>工科学科实力是真的强，但哈尔滨这个地理位置劝退，唉😢</li></ul></li><li>中国科学技术大学<ul><li>按照往年的情况，去中科大的成绩排名得非常考前，但也有9推捡漏的情况，所以难度很大，唉😢</li></ul></li><li>华中科技大学<ul><li>我最想去的学校啊，但往年的情况也不是很好，再加上华科和技物所夏令营时间冲突，所以没有报名，唉😢</li></ul></li><li>中国科学院空天创新研究院<ul><li>冬令营，春令营，夏令营面试了一批又一批，夏令营时间很晚了，唉😢</li></ul></li><li>西安电子科技大学<ul><li>学科实力确实强，但211的tittle有点膈应，唉😢</li></ul></li><li>电子科技大学<ul><li>按照往年的情况，去成电太看成绩了，唉😢</li></ul></li><li>中国科学院国家授时中心<ul><li>在中科院研究所中并没有很出名，唉😢</li></ul></li><li>华南理工大学<ul><li>广州是个非常好的城市，但广州太南方了，感觉文化上或许有些难接受<em>（但这其实是我所想象的）</em>，唉😢</li></ul></li><li>中国科学院国家空间科学中心<ul><li>在中科院研究所中并没有很出名，唉😢</li></ul></li></ul><hr><h1 id="🛫夏令营参营"><a href="#🛫夏令营参营" class="headerlink" title="🛫夏令营参营"></a>🛫夏令营参营</h1><h2 id="🏫西北工业大学（西安）"><a href="#🏫西北工业大学（西安）" class="headerlink" title="🏫西北工业大学（西安）"></a>🏫西北工业大学（西安）</h2><p>西工大的夏令营其实就是一天，整个学院的课题组分别进行了课题组的简要介绍，听过了介绍之后才对西工大有了一点点的了解。学院的安排是，在听完宣讲后如果对课题组感兴趣的话，自己就去联系课题组老师！整体听下来的话，收获还是很多的，至少对每个课题组都或多或少的了解了一些！不知道会不会涉及到信息安全问题，课题组信息我就不放出来了。</p><p>我对其中几个涉及图像处理的课题组比较感兴趣，就加了课题组招生群，然后最终选了两个课题组进行面试！</p><h3 id="🔬A课题组"><a href="#🔬A课题组" class="headerlink" title="🔬A课题组"></a>🔬A课题组</h3><p>类型：课题组面试，几个老师根据你的简历轮番进行提问，主要就是围绕着项目进行提问，从而判断我是不是真懂这个东西。</p><p>结果：无果~</p><h3 id="🔬B课题组"><a href="#🔬B课题组" class="headerlink" title="🔬B课题组"></a>🔬B课题组</h3><p>类型：课题组面试，提前给老师发了简历，课题组老师进行面试。主要提问的内容也是所做的项目。</p><p>结果：课题组老师打来电话，问我想不想去，我考虑了一下，就说想去，这个时候才7月15号（技物所夏令营之后），而我基本上就有点躺平了，想见好就收了。因为我自己的成绩并不突出，科研经历也没有多少，感觉个学校能上就行<em>（这其实是个不太好的想法，最好不要先妄自菲薄，这是我的一大缺点）</em>！</p><h2 id="🏫中科院技物所（上海）"><a href="#🏫中科院技物所（上海）" class="headerlink" title="🏫中科院技物所（上海）"></a>🏫中科院技物所（上海）</h2><p>技物所的夏令营非常具有参与感，时间比较长，活动也很多，负责老师也非常友善和有耐心，最后也有一个优营大礼包，真的非常用心了！之前没有疫情的时候，技物所会带着营员游玩上海，非常不错了！但是课题组宣讲感觉没有听出什么东西来，听完了还是对每个研究室和工程室所做的东西不了解，并且每个室做到东西<em>感觉</em>都一样，都是红外方向的卫星。听宣讲有一些无聊。</p><p>面试分为综合面试和英语面试，综合面试不记得问什么了，反正没问专业课知识也没问项目，更多的是你对技物所的了解和你的兴趣方向。英语面试也挺水的。</p><p>入营了的三个所中我最开始是最想去技物所的，上海这个地理位置对我的吸引力实在是太大了。</p><h2 id="🏫中科院声学所（北京）"><a href="#🏫中科院声学所（北京）" class="headerlink" title="🏫中科院声学所（北京）"></a>🏫中科院声学所（北京）</h2><p>声学所夏令营前期宣传了很多，准备活动也很多，有些繁琐！声学所前期可能进行了两次宣讲，但两次课题组老师讲的东西都是一样的。夏令营开始前，也进行了全流程模拟，也进行了两次。夏令营开始仍然是课题组宣讲，和之前讲的内容基本一样，老师非常卖力的在讲，感觉都挺厉害的，如果想做声学方面的话，声学所确实是一个非常不错的选择！</p><p>面试：全问的是专业课内容，我一点都没准备<em>（因为面了西工大后就有点想躺平了，看不进去了）</em>，回答得一塌糊涂，很完蛋。英语面试问的是什么我也没听懂，唉！</p><p>面试前躺平是非常不好的，会给老师一个不好的印象。因为考虑到声学所更多的是对声信号的处理，不是更喜欢的图像方向，最后就不是很想去声学所。和我一起面试声学所的还有好几个同学，最后有一个很优秀的电科的同学去了声学所。</p><hr><h1 id="📢夏令营结果"><a href="#📢夏令营结果" class="headerlink" title="📢夏令营结果"></a>📢夏令营结果</h1><p>夏令营结束之后，我拿到了西工大的优营也和面试好了课题组，就差导师没选定了，西工大是我首选；技物所拿了优营，课题组也确认了，联系了一个博导，但是与老师的沟通并不好，更多的是与课题组的博后师兄在沟通，进入课题组后也更多地是博后师兄在带我，所以技物所是第二为此；声学所面试得很烂，我本来以为没有什么希望了，但是老师还是给我打了电话，问我的意向，最后拒绝了老师，老师也就没有给我优营。</p><hr><h1 id="📢预推免"><a href="#📢预推免" class="headerlink" title="📢预推免"></a>📢预推免</h1><p>预推免阶段我只参加了西工大的，因为我在夏令营面试过了，所以基本就是走流程的东西，我在夏令营是确定了课题组，预推免是确定自己的导师！这里有个小插曲，我本来想去课题组的博导那里的，但最后还是选择了硕导，因为之前一直都是和这个老师在沟通，我感觉老师还是很不错的😁。</p><p>夏令营还没结束我就跟老师确定好了去西工大了，躺平得非常早了！看到周围同学都在冲击更好的学校的时候，其实我也是有点眼红的，后悔有点过早自我满足了，但其实也还行吧。但每个人都有每个人的情况，还是希望以后的学弟学妹们不要躺平，为自己不断争取一个个更好的选择。</p><h1 id="📢九推"><a href="#📢九推" class="headerlink" title="📢九推"></a>📢九推</h1><p>呜呜，我的瓜大🤤，嘿嘿，瓜大，我的瓜大🤤~（发癫</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220928235217491.png" alt="我的瓜大，我来了"></p><h1 id="🧾总结"><a href="#🧾总结" class="headerlink" title="🧾总结"></a>🧾总结</h1><h2 id="👨‍🎓👩‍🎓海大同学的情况"><a href="#👨‍🎓👩‍🎓海大同学的情况" class="headerlink" title="👨‍🎓👩‍🎓海大同学的情况"></a>👨‍🎓👩‍🎓海大同学的情况</h2><p>我所属的信息科学与工程学部电子工程学院共三个专业：电科，电工，通信</p><p class="note note-primary">电科</p><table><thead><tr><th align="center">学校</th><th align="center">人数</th></tr></thead><tbody><tr><td align="center">中国科学院上海技术物理研究所</td><td align="center">3</td></tr><tr><td align="center">中国科学技术大学</td><td align="center">2</td></tr><tr><td align="center">中国海洋大学</td><td align="center">2</td></tr><tr><td align="center">山东大学</td><td align="center">2</td></tr><tr><td align="center">厦门大学</td><td align="center">1</td></tr><tr><td align="center">中国科学院声学研究所</td><td align="center">1</td></tr><tr><td align="center">北京理工大学</td><td align="center">1</td></tr></tbody></table><p class="note note-primary">电工</p><table><thead><tr><th align="center">学校</th><th align="center">人数</th></tr></thead><tbody><tr><td align="center">中国科学院上海技术物理研究所</td><td align="center">4</td></tr><tr><td align="center">西安交通大学</td><td align="center">1</td></tr><tr><td align="center">浙江大学</td><td align="center">1</td></tr><tr><td align="center">华南理工大学</td><td align="center">1</td></tr><tr><td align="center">中山大学</td><td align="center">1</td></tr><tr><td align="center">西安电子科技大学</td><td align="center">1</td></tr><tr><td align="center">没问到（好像是海大</td><td align="center">2</td></tr></tbody></table><p class="note note-primary">通信</p><table><thead><tr><th align="center">学校</th><th align="center">人数</th></tr></thead><tbody><tr><td align="center">西安交通大学</td><td align="center">3</td></tr><tr><td align="center">北京理工大学</td><td align="center">2</td></tr><tr><td align="center">哈尔滨工业大学</td><td align="center">1</td></tr><tr><td align="center">中山大学</td><td align="center">1</td></tr><tr><td align="center">四川大学</td><td align="center">1</td></tr><tr><td align="center">华南理工大学</td><td align="center">1</td></tr><tr><td align="center">天津大学</td><td align="center">1</td></tr><tr><td align="center">西安电子科技大学</td><td align="center">1</td></tr><tr><td align="center">中国海洋大学</td><td align="center">1</td></tr><tr><td align="center">西北工业大学</td><td align="center">1</td></tr></tbody></table><blockquote><p>有一个去北理的同学在九推才拿到的offer，所以，不要躺平！</p></blockquote><h2 id="🏃‍♂️🏃‍♂️我自己的想法"><a href="#🏃‍♂️🏃‍♂️我自己的想法" class="headerlink" title="🏃‍♂️🏃‍♂️我自己的想法"></a>🏃‍♂️🏃‍♂️我自己的想法</h2><p>从来个方面来谈我自己，一个过早的躺平，另一个是自己对学校的选择。</p><p>关于“<strong>躺平</strong>”：经历过后，我给未来要参加推免的学弟和学妹们一个建议就是不要过早的躺平，至少与推免的机会不要放弃，我身边好多同学都是在与推免阶段拿的offer。我为什么会躺平呢，第一个原因是我的推免资格还不确定，我得等到九月中旬参加科技竞赛类推免答辩之后才能确定自己的推免生资格，所以整个人都很慌。第二个原因就是我自己性格使然，就是不自信，对自己的成绩不自信，对英语不自信，对科研不自信，对面试表现不自信，在这种情况下，我认定了西工大对我来说是一个不错的选择。我的成绩让我再去冲击更好的学校时会有一定的困难，反而不如见好就收了，西工大我已经很满意了，确实是一个不错的平台。但没尝试过谁知道呢，所以其实也是有些许后悔的，对我自己的启示就是改掉妄自菲薄的缺点。</p><p>关于“<strong>抉择</strong>”：我本科学的是通信，但我其实不想做通信方向，更想做信号与信息方向。一级学科信息与通信工程下面有通信与信息系统和信号与信息处理两个二级学科，我选择的是信号与信息处理。对于信号与信息处理，我主要想做的就是图像和语音两个方向，我更偏向于图像方向。我感觉图像是一个被充分研究的领域了，而语音可能还算是一个没有被开发的蓝海。我本科都没有这两个方向的相关课程，这两个方向如何选择呢，我最后还是follow my heart——图像。我没有选声学所，是因为所做方向；我没有选技物所，是因为地理位置。从title方面，我感觉中科院还是没有985的名号更向量，985的title在未来的就业基本不会存在障碍。但西安这个祖国大西北的地理位置我是真的不喜欢呀，我更想去上海啊。西安和上海，我最初其实是偏向于上海的，但这里其实跟家里商量了一下，家里其实是什么都不懂的，只知道上海房价高什么的。但我真的懂吗?我从很小的时候，就梦想着去上海了，但现在大家都疯狂涌入到上海，竞争太激烈了，我真的能在这个环境中生存下来吗？家里没有很好的条件，我真的能在上海立足吗？这其实是一个挺严酷的问题的！所以在生活成本上，我只能妥协一点去西安，未来不求大富大贵，只求能在城市安家落户就可以了。西安作为一个内陆城市，既没有成都那种安逸，也没有成都的那种发展活力，GDP甚至没有青岛高，但西安胜在研究所比较多，就业其实也没有很大的问题的。考虑到这一点，其实我挺想未来留在西安的，压力可能比北上少一点吧。</p><p>我自我感觉还是不错的，基本上算是满意，希望未来我可以在在西工大再接再厉吧，我目前决定的是未来是要去读博的，可能还会在西工，当然也希望能更好的学习了，希望自己能加油，不辜负这十几年来的读书学习。就像我一直所写的那句话“A Future Without Disappointment”，自己给自己创造一个不存在失望的未来。</p><hr><p>瓜大，我来啦~加油！</p><blockquote><p>隐姓埋名，为国铸剑。</p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220929090013183.png" alt="气派~"></p><h1 id="🛰后记"><a href="#🛰后记" class="headerlink" title="🛰后记"></a>🛰后记</h1><blockquote><p>“繁华落尽是平淡，喧嚣之后依旧宁静。”</p></blockquote><p>寒假回家，在春节期间会见到家里的一些亲戚，谈话期间不免会问到一些学习，工作方面的东西。越问越迷茫，我也不知道未来的路该怎么走，未来会走向何处。</p><p>这段时间其实萌生了一个小小的想法，去航天口🤔。               </p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230218111710207.png" alt="高分6号遥感卫星"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>读研</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Networkx分析历年数学家间继承关系与数学学科发展</title>
    <link href="/blog/post/Ideas/InheritanceRelationshipBetweenMathematicians/"/>
    <url>/blog/post/Ideas/InheritanceRelationshipBetweenMathematicians/</url>
    
    <content type="html"><![CDATA[<p>偶然间发现一个非常有意思的项目：<a href="https://blog.csdn.net/jinping_shi/article/details/50532113">利用Networkx分析历年数学家间继承关系与数学学科发展_阿拉丁吃米粉的博客-CSDN博客</a>，找时间读一下源代码，复现一下。</p><p>数据来源：<a href="https://www.mathgenealogy.org/">Welcome! - The Mathematics Genealogy Project (mathgenealogy.org)</a></p><p>环境</p><blockquote><p>Python<br>bs4<br>selenium<br>urllib<br>time<br>collections<br>networkx<br>json</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>奇思妙想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高级语言程序设计</title>
    <link href="/blog/post/Knowledge/HighlevelLanguageProgramming/"/>
    <url>/blog/post/Knowledge/HighlevelLanguageProgramming/</url>
    
    <content type="html"><![CDATA[<p>⭐⭐⭐<strong>课程网站</strong>⭐⭐⭐</p><p><a href="http://ouc.ai/zhenghaiyong/courses/hlp/2022fall/index.html">HLP2022Fall - 2022年秋季学期《高级语言程序设计》 (ouc.ai)</a></p><p>▶ OUC在线课程中心：<a href="https://wlkc.ouc.edu.cn/">中国海洋大学 (ouc.edu.cn)</a><br>▶ OUC在线评测平台：<a href="http://222.195.147.104/">222.195.147.104</a></p><ul><li><p>关于课程：高级语言程序设计是面向大一学生开设的一门关于C语言学习和实践的课程。</p></li><li><p>关于我：我因为转专业，在选课的时候课程冲突了，被迫在大四来补上这门课。</p></li><li><p>关于网站：很多同学上课时遇到了很多问题，在微信群可以直接提问，老师和同学们都会为大家解答，我也会在微信群给大家解答，但很多问题需要<strong>重复答疑</strong>很多次，因此我<strong>汇总每周的问题</strong>，在网站中的该博文进行整理和解答，方便给大家答疑解惑，希望能帮助到大家。</p></li></ul><p>$$<br>  G_{total} &#x3D; G_{OutClass} × 0.2 + G_{InClass} × 0.3 + G_{FinalExam} × 0.5 + G_{award} − G_{penalty} − G_{absence}<br>$$</p><p><em>对网站中我写的内容有疑惑或者建议的话，可以加我微信跟我说一下！</em></p><p>建议使用桌面端设备（宽屏设备）访问该网站，直接在浏览器中输入<code>cosmicdusty.cc</code>即可访问！宽屏设备访问网站时，页面右侧会有<code>导航栏</code>，点击可以直接跳转到对应位置。页面也有<code>明亮</code>和<code>暗黑</code>两种模式，可自行切换。</p><h1 id="第一周-课堂事务"><a href="#第一周-课堂事务" class="headerlink" title="第一周 课堂事务"></a>第一周 课堂事务</h1><table><thead><tr><th>1</th><th>第一周</th><th>2022年09月08日周四</th><th>课堂事务；课程定位和主要内容；计算机的基本原理。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/PreClass.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L1</td><td>第一周</td><td>2022年09月08日周四</td><td>实验课一：熟悉Linux操作系统的基本操作。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/lab/hlp2020ouc/LabIntro.pdf">实验手册</a></td></tr></tbody></table><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>郑老师和乔老师要求用了Linux系统，那我们就先按照老师说的做，在WSL&#x2F;虚拟机&#x2F;双系统&#x2F;云服务器上做！</p><p>能不能在Windows上面用Dev和VS，要具体问一下老师。</p><p>目前用的系统是Linux的发行版<strong>Ubuntu 20.04</strong>，用这个的同学可能多一点，其他版本需要问一下老师。</p><p>环境的安装，下午和晚上讨论了很多了。可以翻翻微信群。遇到问题自己先尝试运用搜索引擎，看看能不能解答！！</p><p>以下都是<strong>针对Windows操作系统</strong>（大多数同学可能用的是Windows10&#x2F;11）的，<strong>MacOS</strong>本身就是基于Unix的，这也是Linux的源头，所以，用MacOS的同学可以直接用终端就行了！</p><blockquote><ul><li>操作系统和编程语言的发展历史：<a href="https://www.levenez.com/">Éric Lévénez’s site (levenez.com)</a></li></ul></blockquote><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305090412282.png" alt="OS" style="zoom:50%;" /><blockquote><ul><li><p>图灵</p><ul><li><a href="https://aturingmachine.com/">A Turing Machine Overview</a></li></ul></li><li><p>超算</p><ul><li><p><a href="https://top500.org/">Home - | TOP500</a></p></li><li><p><a href="https://www.top500.org/lists/green500/">Green500 | TOP500</a></p></li></ul></li><li><p>The Unix-Haters Handbook</p><ul><li><a href="https://en.wikipedia.org/wiki/The_UNIX-HATERS_Handbook">The UNIX-HATERS Handbook - Wikipedia</a></li><li><a href="https://web.mit.edu/~simsong/www/ugh.pdf">ugh.book (mit.edu)</a></li></ul></li><li><p>tiobe index</p><ul><li><a href="https://www.tiobe.com/tiobe-index/">TIOBE Index - TIOBE</a></li></ul></li><li><p>CoolShell</p><ul><li><a href="https://coolshell.cn/">酷壳 – CoolShell.cn</a></li></ul></li></ul></blockquote><h3 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h3><p>老师发了WSL的安装教程，建议先跟着做一遍，试试有没有问题！</p><blockquote><p>请同学们尽量在今晚的实验课前配置好Linux系统环境，推荐安装比较流形的发行版本：Ubuntu。推荐使用windows自带的Microsoft store进行安装，具体可参考博客链接：<a href="https://blog.csdn.net/weixin_44732183/article/details/121701525">Windows Microsoft Store安装Ubuntu_斯维因yin的博客-CSDN博客_微软商店ubuntu</a><br>如果实在安装不上或不习惯使用这种方式，可到本课程的BB平台上下载虚拟机文件和Ubuntu系统安装包，通过创建虚拟机，安装Ubuntu系统。<br>有能力的同学，可尝试安装双系统，但请注意系统引导菜单的修复，以及不要覆盖原系统所在的分区，该安装方式存在风险，请慎重操作。</p></blockquote><blockquote><ul><li><p>windows store里安装Ubuntu以及遇到问题可参考：<br><a href="https://blog.csdn.net/weixin_44732183/article/details/121701525">Windows Microsoft Store安装Ubuntu_斯维因yin的博客-CSDN博客_微软商店安装ubuntu</a></p><p><a href="https://blog.csdn.net/qq_37085158/article/details/125172803">WslRegisterDistribution failed with error_ 0x8007019e、0x800701bc、0x80370102_奋斗的西瓜瓜的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_44623594/article/details/106419008">Windows下安装Ubuntu子系统的目录位置_菜猪兽的博客-CSDN博客_ubuntu子系统文件位置</a></p></li><li><p>store里安装Ubuntu可能由于windows系统本身缺少一些组件或者系统设置未打开，导致安装过程中报错，可以参考：</p><p><a href="https://blog.csdn.net/qq_37085158/article/details/125172803">WslRegisterDistribution failed with error_ 0x8007019e、0x800701bc、0x80370102_奋斗的西瓜瓜的博客-CSDN博客</a></p></li><li><p>Microsoft store下的ubuntu出现参考的对象类型不支持尝试的操作可以参考一下这个：</p><p>（仅临时解决办法）<a href="https://blog.csdn.net/ShunDerhuang/article/details/122286697">关于win10启动ubuntu报错_ShunDerhuang的博客-CSDN博客_win10ubuntu打不开</a></p><p>⭐<a href="https://blog.csdn.net/qq_42361881/article/details/121500438">win10启动ubuntu报错 参考的对象类型不支持尝试的操作_Chivalrous Expert的博客-CSDN博客_参考的对象类型不支持尝试的操作</a></p><p>⭐<a href="https://cloud.tencent.com/developer/article/1986728">WSL2出现“参考的对象类型不支持尝试的操作”的解决方法 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p></li></ul></blockquote><blockquote><p>Linux的安装我之前也粗略的写过（更多的是物理机上面Linux的安装），可参考：<a href="https://cosmicdusty.cc/post/Linux%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95">Linux安装记录|Murphy</a></p></blockquote><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>我平时用虚拟机不多，关于虚拟机的问题我可能解决不了，有问题可以发在群里，大家一起解决。</p><ul><li>虚拟机的安装：</li></ul><p>群里同学发的：<a href="https://www.bilibili.com/video/BV1M94y1U7nc/?spm_id_from=trigger_reload&vd_source=7975e7e2b910e8f170a7aa9c22e8df0d">八分钟完成VMware和ubuntu系统安装_哔哩哔哩_bilibili</a></p><ul><li>虚拟机中如何打开Terminal(终端)：<br><a href="https://blog.csdn.net/lida2003/article/details/36656465">ubuntu桌面版打开终端Terminal的几种方法_lida2003的博客-CSDN博客_terminal ubuntu</a><br><a href="https://blog.csdn.net/kwame211/article/details/105002041">ubuntu怎样打开命令行终端（5种方法 DemonHunter211的博客-CSDN博客_ubuntu怎么调出命令窗口</a></li></ul><h3 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h3><p>想要探索一下的同学可以尝试一下。有学生优惠，买个云服务器其实很便宜！</p><p><a href="https://cn.aliyun.com/">阿里云-为了无法计算的价值 (aliyun.com)</a></p><p><a href="https://cloud.tencent.com/">腾讯云 - 产业智变 云启未来 (tencent.com)</a></p><p><a href="https://www.huaweicloud.com/intl/zh-cn/">共建智能世界云底座-华为云 (huaweicloud.com)</a></p><p><a href="https://cloud.baidu.com/">百度智能云-智能时代基础设施 (baidu.com)</a></p><p><a href="https://www.mtyun.com/">美团云(MOS) - 云主机_云服务器_云计算_美团网云平台,基础设施服务,稳定提升价值 (mtyun.com)</a></p><p><a href="https://aws.amazon.com/cn/">AWS 云服务-专业的大数据和云计算服务以及云解决方案提供商 (amazon.com)</a></p><p><a href="https://azure.microsoft.com/zh-cn/">云计算服务 | Microsoft Azure</a></p><h3 id="双系统"><a href="#双系统" class="headerlink" title="双系统"></a>双系统</h3><p>个人不是很推荐，因为很可能两个系统都用不了了！</p><h3 id="微信群问题汇总"><a href="#微信群问题汇总" class="headerlink" title="微信群问题汇总"></a>微信群问题汇总</h3><table><thead><tr><th align="center">关于安装路径</th><th align="center">WSL的安装通过Microsoft Store，目前是只能安装在C盘。WSL可能必须在C盘，我之前尝试过移动到别的盘，但是会出现很多的问题</th></tr></thead><tbody><tr><td align="center">关于WSL是什么</td><td align="center">我们只安装的Linux发行版Ubuntu的命令行，没有安装桌面，所以这个黑黑的命令行就是所有，一切的操作均在这个命令行中。</td></tr><tr><td align="center">密码输入不了问题</td><td align="center">密码不是输入不了，是输入了但是不显示，输入完成之后直接enter就行。</td></tr><tr><td align="center">设置root密码</td><td align="center">sudo passwd root</td></tr><tr><td align="center">用户与用户组</td><td align="center">root代表的是超级用户，拥有Linux的绝对权限。<br />平时使用最好可以建一个普通用户，如果涉及到权限的话，使用sudo，或者是使用su -切换到root，更好些吧。<br />Linux中有个非常重要的概念用户和用户组<br /><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220916151734859-16633126620477.png"/><br />这个murphy是一个普通用户，这个root是个超级用户，有绝对的权限。</td></tr><tr><td align="center">关于权限</td><td align="center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220909085817694.png" width = 700px/></td></tr><tr><td align="center">用WSL还算虚拟机</td><td align="center">WSL只有命令行，虚拟机下载的是完整的Ubuntu，有桌面，更符合Windows的使用习惯。使用WSL做C的学习和开发完全够用，老师也说了，用哪个都行！<br />老师要求我们在Linux系统上学习C的编程。大部分的人的电脑都是Windows吧。要想实现Windows上的Linux，要么使用WSL，要么使用虚拟机VM创建一个Ubuntu系统，要么云服务器。<br />MacOS的同学直接用系统的终端就行了。</td></tr></tbody></table><h2 id="进入系统"><a href="#进入系统" class="headerlink" title="进入系统"></a>进入系统</h2><h3 id="关于用户"><a href="#关于用户" class="headerlink" title="关于用户"></a>关于用户</h3><p>很多同学是以root用户登陆的，可以用，但从长期来说，我感觉不合适（未来学了多了的话，可以使用<code>adduser</code>创建新用户）</p><blockquote><p>参考链接：<a href="https://www.jianshu.com/p/5bfeb5920fb1">WSL Ubuntu设置普通用户为默认用户 - 简书 (jianshu.com)</a></p></blockquote><p>另外一部分同学是两个用户，一个xxx（你自己注册是用的名字）和一个root。</p><p>以我自己的为例，我的普通用户是<code>ubuntu</code>,管理员用户是<code>root</code>。</p><p>从<code>ubuntu</code>切换到<code>root</code>的命令：先输入<code>su</code>或者<code>su -</code>,然后再按<code>enter</code>；</p><blockquote><p><a href="https://www.cnblogs.com/Nice-Boy/p/6137955.html">su- 与su的区别 - 且如歌 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/nayanminxing/article/details/76424115">su 和su -的区别_水墨胭脂的博客-CSDN博客</a></p><p>总结：有没有切换PATH环境变量</p></blockquote><p>从<code>root</code>切换到<code>ubuntu</code>：<code>Ctrl+D</code>或者<code>su unbuntu</code></p><p>最好的情况是应该这样的（**忽略掉(base)**）</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220916143610936.png"/></div>细说！<div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220916090247684.png"/></div><blockquote><p>pt112:这是一个conda虚拟环境表示，大家应该都没有conda环境，所以没有这个，忽略就行！</p><p>ubuntu：这是我都普通用户的用户名，大家的可能不一样</p><p>@VM-S-15-ubuntu：是我的Linux主机的名称，大家的可能不一样</p><p>~：代表的是&#x2F;home&#x2F;ubuntu路径，每个人的都不同，但都是&#x2F;home&#x2F;“普通用户名”</p><p>$：表示的是普通用户，#表示的root用户</p></blockquote><p>Linux有非常重要的文件结构，未来学的多了，就熟悉了，目前先熟悉两个！</p><p><code>/</code>:根目录</p><p><code>/home</code>:根目录下的home目录(说明：有两个用户的同学，会发现这个目录先有个文件夹的名字和注册的名字一样)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:~$ <span class="hljs-built_in">pwd</span> <br>/home/ubuntu<br><br>ubuntu@VM-8-15-ubuntu:~$ ll<br>total 84<br>drwx------ 11 ubuntu ubuntu 4096 Sep  8 22:33 ./<br>drwxr-xr-x  4 root   root   4096 Sep  8 19:41 ../<br>-rw-r--r--  1 ubuntu ubuntu 3032 Sep  8 22:49 .bash_history<br>……省略很多列出的文件……<br>drwxrwxr-x  3 ubuntu ubuntu 4096 Sep  8 18:48 userDoc/<br><br>ubuntu@VM-8-15-ubuntu:~$ <span class="hljs-built_in">cd</span> .. <br><br>ubuntu@VM-8-15-ubuntu:/home$ ll<br>total 16<br>drwxr-xr-x  4 root       root       4096 Sep  8 19:41 ./<br>drwxr-xr-x 20 root       root       4096 Sep  8 22:49 ../<br>drwxr-xr-x  4 lighthouse lighthouse 4096 Sep  7 12:03 lighthouse/<br>drwx------ 11 ubuntu     ubuntu     4096 Sep  8 22:33 ubuntu/<br><br><span class="hljs-comment"># pwd的意思就是显示当前所在的目录</span><br><span class="hljs-comment"># ll的意思就是列出当前目录下所有文件及其文件的各种信息！</span><br><span class="hljs-comment"># cd ..就是回退到上一个目录</span><br><br><span class="hljs-comment"># 我这里是两个：ubuntu和lighthouse 两个普通用户</span><br></code></pre></td></tr></table></figure><h3 id="关于命令"><a href="#关于命令" class="headerlink" title="关于命令"></a>关于命令</h3><p>Linux的命令实在是太多了，记住是不可能的，用到什么要学会使用搜索引擎，自己尝试解决问题</p><p>老师推荐了一个很好的查询命令的网站：<a href="https://wangchujiang.com/linux-command/">Linux命令搜索引擎 命令，Linux Linux命令搜索引擎 命令详解：最专业的Linux命令大全，内容包含Linux命令手册、详解、学习，值得收藏的Linux命令速查手册。 - Linux 命令搜索引擎 (wangchujiang.com)</a></p><p>另外，菜鸟教程也很不错：<a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全 | 菜鸟教程 (runoob.com)</a></p><p>推荐三本书：</p><p><a href="https://book.douban.com/subject/22226727/">Linux命令行大全 (豆瓣) (douban.com)</a></p><p><a href="https://book.douban.com/subject/26854226/">Linux命令行与shell脚本编程大全（第3版） (豆瓣) (douban.com)</a></p><p><a href="https://book.douban.com/subject/30359954/">鸟哥的Linux私房菜 基础学习篇 第四版 (豆瓣) (douban.com)</a></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220910123636527.png"/></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220910123732807.png"/></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220910123841077.png"/></div></div></div><p>《鸟哥的Linux私房菜》也很不错，但这本书是以Linux的另一个发行版CentOS举例的。CentOS用在企业级的服务器可能多一点</p><h2 id="第一周课堂（上机课）练习"><a href="#第一周课堂（上机课）练习" class="headerlink" title="第一周课堂（上机课）练习"></a>第一周课堂（上机课）练习</h2><h3 id="练习1-文件操作"><a href="#练习1-文件操作" class="headerlink" title="练习1 文件操作"></a>练习1 文件操作</h3><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220908222046840.png"/></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:~$ <span class="hljs-built_in">cd</span> /home<br>ubuntu@VM-8-15-ubuntu:/home$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> abc<br>ubuntu@VM-8-15-ubuntu:/home$ ll<br>total 20<br>drwxr-xr-x  5 root       root       4096 Sep  8 19:39 ./<br>drwxr-xr-x 20 root       root       4096 Sep  8 19:39 ../<br>drwxr-xr-x  2 root       root       4096 Sep  8 19:39 abc/<br>drwxr-xr-x  4 lighthouse lighthouse 4096 Sep  7 12:03 lighthouse/<br>drwx------ 11 ubuntu     ubuntu     4096 Sep  8 14:43 ubuntu/<br><br><br><span class="hljs-comment"># cd /home 进入家目录</span><br><span class="hljs-comment"># 看仔细一点：cd空格/home</span><br><span class="hljs-comment"># sudo mkdir abc 创建 abc</span><br><span class="hljs-comment"># mkdir abc 没有sudo也可以，mkdir命令不需要root模式</span><br><span class="hljs-comment"># ll：这里是两个小写的L（l：小写的L）</span><br><span class="hljs-comment"># ll就是ls -all的缩写</span><br><span class="hljs-comment"># ls 与 ll 是两个非常简单但又非常重要的命令，多用几次！！！</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:/home$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> abc study<br>ubuntu@VM-8-15-ubuntu:/home$ ll<br>total 20<br>drwxr-xr-x  5 root       root       4096 Sep  8 19:39 ./<br>drwxr-xr-x 20 root       root       4096 Sep  8 19:39 ../<br>drwxr-xr-x  4 lighthouse lighthouse 4096 Sep  7 12:03 lighthouse/<br>drwxr-xr-x  2 root       root       4096 Sep  8 19:39 study/<br>drwx------ 11 ubuntu     ubuntu     4096 Sep  8 14:43 ubuntu/<br><br><span class="hljs-comment"># sudo mv abc study 重命名</span><br><span class="hljs-comment"># Linux mv（英文全拼：move file）命令用来为文件或目录改名、或将文件或目录移入其它位置。</span><br><span class="hljs-comment"># mv的其他用法可以去自己查一查</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:/home$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /etc/apt/sources.list study<br>ubuntu@VM-8-15-ubuntu:/home$ <span class="hljs-built_in">cd</span> study<br>ubuntu@VM-8-15-ubuntu:/home/study$ ll<br>total 12<br>drwxr-xr-x 2 root root 4096 Sep  8 19:40 ./<br>drwxr-xr-x 5 root root 4096 Sep  8 19:39 ../<br>-rw-r--r-- 1 root root  936 Sep  8 19:40 sources.list<br><br><span class="hljs-comment"># sudo cp /etc/apt/sources.list study      复制文件：把第一个参数指代的文件复制到第二个参数指代的文件夹下</span><br><span class="hljs-comment"># cd study    进入 study 文件夹</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:/home/study$ less sources.list<br><br><span class="hljs-comment"># 使用less 命令读文件，也可以用cat</span><br><span class="hljs-comment"># 之后按‘q’就能推出阅读模式 </span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:/home/study$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> sources.list<br>ubuntu@VM-8-15-ubuntu:/home/study$ ll<br>total 8<br>drwxr-xr-x 2 root root 4096 Sep  8 19:41 ./<br>drwxr-xr-x 5 root root 4096 Sep  8 19:39 ../<br><br>ubuntu@VM-8-15-ubuntu:/home/study$ <span class="hljs-built_in">cd</span> ..<br>ubuntu@VM-8-15-ubuntu:/home$ <span class="hljs-built_in">ls</span><br>lighthouse  study  ubuntu<br>ubuntu@VM-8-15-ubuntu:/home$ ll<br>total 20<br>drwxr-xr-x  5 root       root       4096 Sep  8 19:39 ./<br>drwxr-xr-x 20 root       root       4096 Sep  8 19:41 ../<br>drwxr-xr-x  4 lighthouse lighthouse 4096 Sep  7 12:03 lighthouse/<br>drwxr-xr-x  2 root       root       4096 Sep  8 19:41 study/<br>drwx------ 11 ubuntu     ubuntu     4096 Sep  8 14:43 ubuntu/<br><br>ubuntu@VM-8-15-ubuntu:/home$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rmdir</span> study<br>ubuntu@VM-8-15-ubuntu:/home$ ll<br>total 16<br>drwxr-xr-x  4 root       root       4096 Sep  8 19:41 ./<br>drwxr-xr-x 20 root       root       4096 Sep  8 19:41 ../<br>drwxr-xr-x  4 lighthouse lighthouse 4096 Sep  7 12:03 lighthouse/<br>drwx------ 11 ubuntu     ubuntu     4096 Sep  8 14:43 ubuntu/<br>ubuntu@VM-8-15-ubuntu:/home$<br><br><span class="hljs-comment"># sudo rm sources.list 删除文件</span><br><span class="hljs-comment"># cd .. 退回到上一个目录</span><br><span class="hljs-comment">#  sudo rmdir study 删除‘空的’文件夹</span><br>    <span class="hljs-comment"># 非空文件夹的删除用 sudo rm -rf study</span><br></code></pre></td></tr></table></figure><h3 id="练习2-程序编写与编译"><a href="#练习2-程序编写与编译" class="headerlink" title="练习2 程序编写与编译"></a>练习2 程序编写与编译</h3><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220908222508248.png"/></div>1. vim<p>Linux中自带了vim，不需要下载！</p><p>Vim基本语法与使用方法：<a href="https://cosmicdusty.cc/post/Vim">Vim|Murphy</a></p><ol start="2"><li>GCC安装</li></ol><p>教程链接：<a href="https://developer.aliyun.com/article/766146">如何在 Ubuntu 20.04 上安装 GCC(build-essential)-阿里云开发者社区 (aliyun.com)</a></p><p>默认的 Ubuntu 软件源包含了一个软件包组，名称为 “build-essential”,它包含了 GNU 编辑器集合，GNU 调试器，和其他编译软件所必需的开发库和工具。<br>想要安装开发工具软件包，以 拥有 sudo 权限用户身份或者 root 身份运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install build-essential<br><br><span class="hljs-comment"># 这个命令将会安装一系列软件包，包括gcc,g++,和make。</span><br></code></pre></td></tr></table></figure><p>通过运行下面的命令，打印 GCC 版本，来验证 GCC 编译器是否被成功地安装。(在 Ubuntu 20.04 软件源中 GCC 的默认可用版本号为<code>9.3.0</code>:)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc --version<br><br><span class="hljs-comment"># 输出这个就是正常的</span><br>ubuntu@VM-8-15-ubuntu:~$ gcc --version<br>gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0<br>Copyright (C) 2019 Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br></code></pre></td></tr></table></figure><ol start="3"><li>文件的编写与运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:~/userDoc/HLP$ vim hello.c<br>ubuntu@VM-8-15-ubuntu:~/userDoc/HLP$ gcc hello.c -o hello<br>ubuntu@VM-8-15-ubuntu:~/userDoc/HLP$ ll<br>total 56<br>drwxrwxr-x 2 ubuntu ubuntu  4096 Sep  8 19:53 ./<br>drwxrwxr-x 3 ubuntu ubuntu  4096 Sep  8 18:48 ../<br>-rwxrwxr-x 1 ubuntu ubuntu 16696 Sep  8 19:53 hello*<br>-rw-rw-r-- 1 ubuntu ubuntu    80 Sep  8 19:52 hello.c<br><br>ubuntu@VM-8-15-ubuntu:~/userDoc/HLP$ ./hello<br>hello world<br>ubuntu@VM-8-15-ubuntu:~/userDoc/HLP$<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 建议大家自己建一个自己的文件夹在文件夹下写自己的程序</span><br><span class="hljs-comment"># 例如：</span><br><span class="hljs-comment"># mkdir HLP</span><br><span class="hljs-comment"># cd HLP</span><br><span class="hljs-comment"># vim xxx.c</span><br><br><br><br><span class="hljs-comment"># vim hello.c 建立文件 名字是hello.c  （关于sudo:如果你所在的文件夹下面所使用的用户没有w权限，那就要用sudo，要不然无法保存）</span><br><span class="hljs-comment"># 在vim中，按i进入插入模式（左下角显示INSERT）,输入代码，按esc退出插入模式（左下角的INSERT消失）; </span><br><span class="hljs-comment"># 输入:wq （:wq的意思就是保存并退出），注意是“:wq”,别落掉“冒号”</span><br><span class="hljs-comment"># 如果无法保存，建议输入:q!(表示强制退出)</span><br><span class="hljs-comment"># :q (表示退出)</span><br><br><span class="hljs-comment"># gcc hello.c -o hello   用gcc编译c文件 生成hello</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:~/userDoc/HLP$ ./hello<br>hello world<br> <br><span class="hljs-comment"># 运行hello文件,就成功了</span><br><span class="hljs-comment"># 执行文件，参考链接:     https://blog.csdn.net/xinfeismile123/article/details/118908363</span><br><span class="hljs-comment"># 执行文件，参考链接:     https://blog.csdn.net/qq_36255988/article/details/100172528</span><br><br><span class="hljs-comment"># Windows中的可执行文件的后缀是.exe，但是，在Linux中，没有.exe代表可执行文件的说法。</span><br><br><span class="hljs-comment"># -rwxrwxr-x 1 ubuntu ubuntu 16696 Sep  8 19:53 hello*</span><br><span class="hljs-comment"># -：表示文件</span><br><span class="hljs-comment"># 三组rwx表示不同权限的用户可进行的操作</span><br><span class="hljs-comment"># r:read 读</span><br><span class="hljs-comment"># w:write 写</span><br><span class="hljs-comment"># x:执行</span><br><span class="hljs-comment"># 关于权限，参考文章：    http://c.biancheng.net/view/757.html  </span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 注意：都是英文的标点符号</span><br></code></pre></td></tr></table></figure><h1 id="第二周-计算机简介"><a href="#第二周-计算机简介" class="headerlink" title="第二周 计算机简介"></a>第二周 计算机简介</h1><table><thead><tr><th>2</th><th>第二周</th><th>2022年09月15日周四</th><th>计算机的历史与未来；程序运行的基本原理；操作系统与编程语言。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage0.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L2</td><td>第二周</td><td>2022年09月15日周四</td><td>实验课二：熟悉Linux操作系统下的编程环境。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/lab/hlp2020ouc/LabLinuxBasic.pdf">实验手册</a></td></tr></tbody></table><h2 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h2><blockquote><p>Linux，全称GNU&#x2F;Linux，是一种免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUNIX/9032872?fromModule=lemma_inlink">类UNIX</a>操作系统，其内核由<a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429?fromModule=lemma_inlink">林纳斯·本纳第克特·托瓦兹</a>于1991年10月5日首次发布，它主要受到<a href="https://baike.baidu.com/item/Minix/7106045?fromModule=lemma_inlink">Minix</a>和Unix思想的启发，是一个基于<a href="https://baike.baidu.com/item/POSIX/3792413?fromModule=lemma_inlink">POSIX</a>的多用户、<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1/1011764?fromModule=lemma_inlink">多任务</a>、支持<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404?fromModule=lemma_inlink">多线程</a>和多<a href="https://baike.baidu.com/item/CPU/120556?fromModule=lemma_inlink">CPU</a>的操作系统。它能运行主要的<a href="https://baike.baidu.com/item/Unix/219943?fromModule=lemma_inlink">Unix</a>工具软件、应用程序和网络协议。它支持<a href="https://baike.baidu.com/item/32%E4%BD%8D/5812218?fromModule=lemma_inlink">32位</a>和<a href="https://baike.baidu.com/item/64%E4%BD%8D/2262282?fromModule=lemma_inlink">64位</a>硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版，如基于社区开发的<a href="https://baike.baidu.com/item/debian/748667?fromModule=lemma_inlink">debian</a>、<a href="https://baike.baidu.com/item/archlinux/10857530?fromModule=lemma_inlink">archlinux</a>，和基于商业开发的Red Hat Enterprise Linux、SUSE等。</p><p><a href="https://baike.baidu.com/item/linux/27050">Linux_百度百科 (baidu.com)</a></p></blockquote><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:~$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br>/bin/bash<br></code></pre></td></tr></table></figure><h3 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h3><p><a href="https://www.runoob.com/linux/linux-system-contents.html">Linux 系统目录结构 | 菜鸟教程 (runoob.com)</a></p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220915190109153.png"/></div><blockquote><ul><li><p><strong>&#x2F;bin</strong>：<br> bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的<strong>命令</strong>。</p></li><li><p><strong>&#x2F;boot：</strong><br>这里存放的是<strong>启动 Linux</strong> 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的<strong>外部设备</strong>，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的<strong>配置文件</strong>和子目录。</p></li><li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，<strong>每个用户都有一个自己的目录</strong>，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着<strong>系统最基本的动态连接共享库</strong>，其作用类似于 Windows 里的 <strong>DLL</strong> 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统<strong>非法关机</strong>后，这里就存放了一些文件。</p></li><li><p><strong>&#x2F;media</strong>：<br> linux 系统会自动识别一些设备，<strong>例如U盘、光驱等等</strong>，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让<strong>用户临时挂载别的文件系统</strong>的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给<strong>主机额外安装软件所摆放的目录</strong>。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all<br></code></pre></td></tr></table></figure></li><li><p><strong>&#x2F;root</strong>：<br>该目录为<strong>系统管理员</strong>，也称作<strong>超级权限者</strong>的用户主目录。</p></li><li><p><strong>&#x2F;sbin</strong>：<br> s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是<strong>系统管理员使用的系统管理程序</strong>。</p></li><li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>&#x2F;tmp</strong>：<br> tmp 是 temporary(临时) 的缩写这个目录是用来存放一些<strong>临时文件</strong>的。</p></li><li><p><strong>&#x2F;usr</strong>：<br> usr 是 <strong>unix shared resources(共享资源)</strong> 的缩写，这是一个非常重要的目录，<strong>用户的很多应用程序和文件</strong>都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的<strong>应用程序</strong>。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br> var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>&#x2F;etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>&#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin</strong>: 这是系统预设的执行文件的放置目录，比如 <strong>ls</strong> 就是在 <strong>&#x2F;bin&#x2F;ls</strong> 目录下的。</p><p>值得提出的是 <strong>&#x2F;bin</strong>、**&#x2F;usr&#x2F;bin** 是给系统用户使用的指令（除 root 外的通用用户），而&#x2F;sbin, &#x2F;usr&#x2F;sbin 则是给 root 使用的指令。 </p><p><strong>&#x2F;var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</p></blockquote><h2 id="helloworld问题再记录"><a href="#helloworld问题再记录" class="headerlink" title="helloworld问题再记录"></a>helloworld问题再记录</h2><p>系统问题：第一周➡开发环境<br>开发环境问题：第一周➡第一周课堂（上机课）练习➡练习2 程序编写与编译➡vim&amp;GCC安装</p><blockquote><p>⭐建议用桌面端浏览器进行观看，页面右侧有导航栏可以直接跳转</p></blockquote><p>再记录的内容重点是<strong>权限问题</strong>，这又涉及到<code>第一周➡进入系统➡关于用户</code>的内容了。</p><blockquote><p>只有一个root登陆WSL的同学，可以采用下面这个链接的方式（我测试过了，可用），但是有点麻烦；第二种方法就是卸载了WSL重装！</p><p>参考链接：<a href="https://www.jianshu.com/p/5bfeb5920fb1">WSL Ubuntu设置普通用户为默认用户 - 简书 (jianshu.com)</a></p></blockquote><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/O%60Q65PPH3905U%5D3O%5DIS3Z5.jpg" style="zoom:50%;" /><p>使用普通用户登陆Linux的同学，建议把课堂下的文件放在<code>~</code>下，在这个文件夹下建立文件是不需要权限的（至于是为什么，读一下上面这张图片，或许可以明白！）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) ubuntu@VM-8-15-ubuntu:~/userDoc/HLP$ <span class="hljs-built_in">cd</span> ~<br>(base) ubuntu@VM-8-15-ubuntu:~$ <span class="hljs-built_in">pwd</span><br>/home/ubuntu<br><br><span class="hljs-comment"># ~:就是你登陆的用户所在的目录</span><br></code></pre></td></tr></table></figure><p>举了例子！</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220916163722394.png"/></div><h2 id="apt-换源"><a href="#apt-换源" class="headerlink" title="apt 换源"></a>apt 换源</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p><a href="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.3e221b11mptltH">ubuntu镜像_ubuntu下载地址_ubuntu安装教程-阿里巴巴开源镜像站 (aliyun.com)</a></p><p><a href="https://blog.csdn.net/WU2629409421perfect/article/details/110881141">Ubuntu 20.04 &amp;&amp; Ubuntu 18.04 修改 apt 源_星汉空兮的博客-CSDN博客</a></p><p>之前安装系统的时候，大部分同学安装的都是Ubuntu 20.04，但也有同学安装了22.04，换apt的源的时候，需要自己注意一下！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">在WSL上，更换源时，一定要搞清楚目前安装的的Ubuntu是什么版本的！<br><br>部分ubuntu系统LTS版本代号<br>Ubuntu 16.04代号为：xenial<br>Ubuntu 17.04代号为：zesty<br>Ubuntu 18.04代号为：bionic<br>Ubuntu 20.04代号为：focal<br>Ubuntu 22.04代号为：jammy<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) ubuntu@VM-8-15-ubuntu:~$ lsb_release -a<br>No LSB modules are available.<br>Distributor ID: Ubuntu<br>Description:    Ubuntu 20.04.5 LTS<br>Release:        20.04<br>Codename:       focal<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.3e221b11mptltH</span><br><span class="hljs-comment">#阿里源 ubuntu 20.04</span><br><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</span><br><span class="hljs-comment"># 清华源 ubuntu20.04</span><br><br><span class="hljs-comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br><span class="hljs-comment"># 预发布软件源，不建议启用</span><br><span class="hljs-comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/peng_258/article/details/90549893">sudo apt-get update 与upgrade的用法_Darren_pty的博客-CSDN博客_apt-get update</a></p><h1 id="第三周-程序简介"><a href="#第三周-程序简介" class="headerlink" title="第三周 程序简介"></a>第三周 程序简介</h1><table><thead><tr><th>3</th><th>第三周</th><th>2022年09月22日周四</th><th>感性认识计算机程序；快步走进C程序。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage1.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L3</td><td>第三周</td><td>2022年09月22日周四</td><td>实验课三：C程序的编译、运行和调试。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/lab/hlp2020ouc/LabOUCOJ.pdf">实验手册</a></td></tr></tbody></table><h2 id="C程序编译过程"><a href="#C程序编译过程" class="headerlink" title="C程序编译过程"></a>C程序编译过程</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221017192912236.png" style="zoom:50%;" /></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221017192931159.png" style="zoom:50%;" /></div></div></div><h2 id="gdb介绍"><a href="#gdb介绍" class="headerlink" title="gdb介绍"></a>gdb介绍</h2><p>gdb下载：<a href="https://www.cnblogs.com/michaelcjl/p/14887123.html">Ubuntu1804下安装gdb与使用 - michaelchengjl - 博客园 (cnblogs.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载</span><br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install gdb<br><br><span class="hljs-comment"># 检查</span><br>gdb --version<br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220915145939326.png"/><p>学习资料：</p><p><a href="https://blog.csdn.net/k346k346/article/details/50283861">GDB 入门教程_恋喵大鲤鱼的博客-CSDN博客_gdb教程</a></p><p><a href="https://blog.csdn.net/weixin_42981623/article/details/106890696">gdb的基本用法_一只向前的程序猿的博客-CSDN博客_gdb用法</a></p><p><a href="https://blog.csdn.net/liigo/article/details/582231">GDB十分钟教程_Liigo的博客-CSDN博客_gdb教程</a>。</p><p><a href="https://ny5odfilnr.feishu.cn/docs/doccn3oRPLnUMmKnfc1qu4WKZIe#241AkJ">Docs (feishu.cn)</a></p><p><a href="https://www.bilibili.com/video/BV1Kq4y1D7n2?spm_id_from=333.337.search-card.all.click&vd_source=6d46640a443a49f050af078d1f65143e">Linux 使用gdb调试入门。_哔哩哔哩_bilibili</a></p><blockquote><p>程序中的错误主要分为 2 类，分别为语法错误和逻辑错误：</p><ul><li>程序中的语法错误几乎都可以由编译器诊断出来，很容易就能发现并解决；</li><li>逻辑错误指的是代码思路或者设计上的缺陷，程序出现逻辑错误的症状是：代码能够编译通过，没有语法错误，但是运行结果不对。对于这类错误，只能靠我们自己去发现和纠正。</li></ul><p>也就是说，程序中出现的语法错误可以借助编译器解决；但逻辑错误则只能靠自己解决。实际场景中解决逻辑错误最高效的方法，就是借助调试工具对程序进行调试。</p></blockquote><table><thead><tr><th>调试器名称</th><th>特 点</th></tr></thead><tbody><tr><td>Remote Debugger</td><td>Remote Debugger 是 VC&#x2F;VS 自带的调试器，与整个IDE无缝衔接，使用非常方便。</td></tr><tr><td>WinDbg</td><td>大名鼎鼎的 Windows 下的调试器，它的功能甚至超越了 Remote Debugger，它还有一个命令行版本（cdb.exe），但是这个命令行版本的调试器指令比较复杂，不建议初学者使用。</td></tr><tr><td>LLDB</td><td>XCode 自带的调试器，Mac OS X 下开发必备调试器。</td></tr><tr><td>GDB</td><td>Linux 下使用最多的一款调试器，也有 Windows 的移植版。</td></tr></tbody></table><p>正如从事 Windows C&#x2F;C++ 开发的一定要熟悉 Visual Studio、从事 Java 开发的要熟悉 Eclipse 或 IntelliJ IDEA、从事 Android 开发的要熟悉 Android Studio、从事 iOS 开发的要熟悉 XCode 一样，从事 Linux C&#x2F;C++ 开发要熟悉 GDB。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">GDB通常和gcc命令一起使用，编译选项加入-g才可使可执行文件处于debug模式。<br><br>- gdb命令格式：<br>gdb [-<span class="hljs-built_in">help</span>] [-nx] [-q] [-batch] [-<span class="hljs-built_in">cd</span>=<span class="hljs-built_in">dir</span>] [-f] [-b bps] [-<span class="hljs-built_in">tty</span>=dev]<br>    [-s symfile] [-e prog] [-se prog] [-c core] [-x cmds] [-d <span class="hljs-built_in">dir</span>]<br>    [prog[core|procID]]<br>    <br>- 常用的操作：<br>gdb [可执行文件]：选中可执行程序,进入gdb的debug模式；<br>    (gdb) b（breakpoint）：b 函数名 ：对此函数进行中断 ；b 文件名：行号；<br>    (gdb) r （run）：启动程序，运行至程序的断点或者结束；<br>    (gdb) l （list）：l funcname，查看函数源码。或 l linenum，显示指定行周围的源码。或 l -，显示当前行前面的源码。或l，显示当前行后面的源码；<br>    (gdb) s（step）：进入函数，逐语句运行；<br>    (gdb) n(next):不进入函数，逐过程运行；<br>    (gdb) c（<span class="hljs-built_in">continue</span>）：继续运行，跳至下一个断点；<br>    (gdb) p（<span class="hljs-built_in">print</span>）：打印显示变量值；<br>    (gdb) <span class="hljs-built_in">set</span> variable=value,为变量赋值；<br>    (gdb) <span class="hljs-built_in">kill</span>：终止调试的程序；<br>    (gdb) h（<span class="hljs-built_in">help</span>）：列出gdb详细命令帮助列表；<br>    (gdb) clear filename.c:30：清除30行处的断点；<br>    (gdb) info <span class="hljs-built_in">break</span>：显示断点信息；<br>    (gdb) delete 断点编号：断点编号是info <span class="hljs-built_in">break</span> 后显示出来的；<br>    (gdb) bt（backtrace）：回溯到段出错的位置；<br>    (gdb) frame 帧号：帧号是bt命令产生的堆栈针；<br>    (gdb) q（quit）：退出；<br></code></pre></td></tr></table></figure><h2 id="GDB基本用法"><a href="#GDB基本用法" class="headerlink" title="GDB基本用法"></a>GDB基本用法</h2><p><a href="https://www.cnblogs.com/euphie/p/9781482.html">GDB基本用法 - Euphie - 博客园 (cnblogs.com)</a></p><ol><li>基本命令</li></ol><blockquote><ul><li><strong>进入GDB</strong>：#gdb test</li></ul><p>　　test是要调试的程序，由gcc test.c -g -o test生成。进入后提示符变为(gdb) 。</p><ul><li><strong>查看源码</strong>：(gdb) l</li></ul><p>　　源码会进行行号提示。</p><p>　　如果需要查看在其他文件中定义的函数，在l后加上函数名即可定位到这个函数的定义及查看附近的其他源码。或者：使用断点或单步运行，到某个函数处使用s进入这个函数。</p><ul><li><strong>设置断点</strong>：(gdb) b 6</li></ul><p>　　这样会在运行到源码第6行时停止，可以查看变量的值、堆栈情况等；这个行号是gdb的行号。</p><ul><li><strong>查看断点处情况</strong>：(gdb) info b</li></ul><p>　　可以键入”info b”来查看断点处情况，可以设置多个断点；</p><ul><li><strong>运行代码</strong>：(gdb) r</li><li><strong>显示变量值</strong>：(gdb) p n</li></ul><p>　　在程序暂停时，键入”p 变量名”(print)即可；</p><p>　　GDB在显示变量值时都会在对应值之前加上 N N”，而无需写冗长的变量名；</p><ul><li><strong>观察变量</strong>：(gdb) watch n</li></ul><p>在某一循环处，往往希望能够观察一个变量的变化情况，这时就可以键入命令”watch”来观察变量的变化情况，GDB在”n”设置了观察点；</p><ul><li><strong>单步运行</strong>：(gdb) n</li><li><strong>程序继续运行</strong>：(gdb) c</li></ul><p>　　使程序继续往下运行，直到再次遇到断点或程序结束；</p><ul><li><strong>退出GDB</strong>：(gdb) q</li></ul></blockquote><ol start="2"><li>断点调试</li></ol><table><thead><tr><th>命令格式</th><th>例子</th><th>作用</th></tr></thead><tbody><tr><td>break + 设置断点的行号</td><td>break n</td><td>在n行处设置断点</td></tr><tr><td>tbreak + 行号或函数名</td><td>tbreak n&#x2F;func</td><td>设置临时断点，到达后被自动删除</td></tr><tr><td>break + filename + 行号</td><td>break main.c:10</td><td>用于在指定文件对应行设置断点</td></tr><tr><td>break + &lt;0x…&gt;</td><td>break 0x3400a</td><td>用于在内存某一位置处暂停</td></tr><tr><td>break + 行号 + if + 条件</td><td>break 10 if i&#x3D;&#x3D;3</td><td>用于设置条件断点，在循环中使用非常方便</td></tr><tr><td>info breakpoints&#x2F;watchpoints [n]</td><td>info break</td><td>n表示断点编号，查看断点&#x2F;观察点的情况</td></tr><tr><td>clear + 要清除的断点行号</td><td>clear 10</td><td>用于清除对应行的断点，要给出断点的行号，清除时GDB会给出提示</td></tr><tr><td>delete + 要清除的断点编号</td><td>delete 3</td><td>用于清除断点和自动显示的表达式的命令，要给出断点的编号，清除时GDB不会给出任何提示</td></tr><tr><td>disable&#x2F;enable + 断点编号</td><td>disable 3</td><td>让所设断点暂时失效&#x2F;使能，如果要让多个编号处的断点失效&#x2F;使能，可将编号之间用空格隔开</td></tr><tr><td>awatch&#x2F;watch + 变量</td><td>awatch&#x2F;watch i</td><td>设置一个观察点，当变量被读出或写入时程序被暂停</td></tr><tr><td>rwatch + 变量</td><td>rwatch i</td><td>设置一个观察点，当变量被读出时，程序被暂停</td></tr><tr><td>catch</td><td></td><td>设置捕捉点来补捉程序运行时的一些事件。如：载入共享库（动态链接库）或是C++的异常</td></tr><tr><td>tcatch</td><td></td><td>只设置一次捕捉点，当程序停住以后，应点被自动删除</td></tr></tbody></table><ol start="3"><li>数据命令</li></ol><table><thead><tr><th>命令格式</th><th>例子</th><th>作用</th></tr></thead><tbody><tr><td>display +表达式</td><td>display a</td><td>用于显示表达式的值，每当程序运行到断点处都会显示表达式的值</td></tr><tr><td>info display</td><td></td><td>用于显示当前所有要显示值的表达式的情况</td></tr><tr><td>delete + display 编号</td><td>delete 3</td><td>用于删除一个要显示值的表达式，被删除的表达式将不被显示</td></tr><tr><td>disable&#x2F;enable + display 编号</td><td>disable&#x2F;enable 3</td><td>使一个要显示值的表达式暂时失效&#x2F;使能</td></tr><tr><td>undisplay + display 编号</td><td>undisplay 3</td><td>用于结束某个表达式值的显示</td></tr><tr><td>whatis + 变量</td><td>whatis i</td><td>显示某个表达式的数据类型</td></tr><tr><td>print(p) + 变量&#x2F;表达式</td><td>p n</td><td>用于打印变量或表达式的值</td></tr><tr><td>set + 变量 &#x3D; 变量值</td><td>set i &#x3D; 3</td><td>改变程序中某个变量的值</td></tr></tbody></table><ul><li>在使用print命令时，可以对变量按指定格式进行输出，其命令格式为print &#x2F;变量名 + 格式，其中常用的变量格式：x：十六进制；d：十进制；u：无符号数；o：八进制；c：字符格式；f：浮点数。</li></ul><ol start="4"><li>调试运行环境相关命令</li></ol><table><thead><tr><th>命令格式</th><th>例子</th><th>作用</th></tr></thead><tbody><tr><td>set args</td><td>set args arg1 arg2</td><td>设置运行参数</td></tr><tr><td>show args</td><td>show args</td><td>参看运行参数</td></tr><tr><td>set width + 数目</td><td>set width 70</td><td>设置GDB的行宽</td></tr><tr><td>cd + 工作目录</td><td>cd ..&#x2F;</td><td>切换工作目录</td></tr><tr><td>run</td><td>r&#x2F;run</td><td>程序开始执行</td></tr><tr><td>step(s)</td><td>s</td><td>进入式（会进入到所调用的子函数中）单步执行，进入函数的前提是，此函数被编译有debug信息</td></tr><tr><td>next(n)</td><td>n</td><td>非进入式（不会进入到所调用的子函数中）单步执行</td></tr><tr><td>finish</td><td>finish</td><td>一直运行到函数返回并打印函数返回时的堆栈地址和返回值及参数值等信息</td></tr><tr><td>until + 行数</td><td>u 3</td><td>运行到函数某一行</td></tr><tr><td>continue(c)</td><td>c</td><td>执行到下一个断点或程序结束</td></tr><tr><td>return &lt;返回值&gt;</td><td>return 5</td><td>改变程序流程，直接结束当前函数，并将指定值返回</td></tr><tr><td>call + 函数</td><td>call func</td><td>在当前位置执行所要运行的函数</td></tr></tbody></table><ol start="5"><li>堆栈相关命令</li></ol><table><thead><tr><th>命令格式</th><th>例子</th><th>作用</th></tr></thead><tbody><tr><td>backtrace&#x2F;bt</td><td>bt</td><td>用来打印栈帧指针</td></tr><tr><td>frame</td><td>frame 1</td><td>用于打印指定栈帧</td></tr><tr><td>info reg</td><td>info reg</td><td>查看寄存器使用情况</td></tr><tr><td>info stack</td><td>info stack</td><td>查看堆栈使用情况</td></tr><tr><td>up&#x2F;down</td><td>up&#x2F;down</td><td>跳到上一层&#x2F;下一层函数</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">backtrace/bt 也可以在该命令后加上要打印的栈帧指针的个数，查看程序执行到此时，是经过哪些函数呼叫的程序，程序“调用堆栈”是当前函数之前的所有已调用函数的列表（包括当前函数）。每个函数及其变量都被分配了一个“帧”，最近调用的函数在 0 号帧中（“底部”帧）<br></code></pre></td></tr></table></figure><ol start="6"><li>跳转执行</li></ol><ul><li><strong>jump</strong>：指定下一条语句的运行点。可以是文件的行号，可以是file:line格式，可以是+num这种偏移量格式。表式着下一条运行语句从哪里开始。相当于改变了PC寄存器内容，堆栈内容并没有改变，跨函数跳转容易发生错误。</li></ul><ol start="7"><li>信号命令</li></ol><ul><li><strong>signal</strong>：signal SIGXXX，产生XXX信号，如SIGINT。一种速查Linux查询信号的方法：# kill -l</li></ul><ol start="8"><li>运行Shell命令</li></ol><ul><li><strong>如(gdb)shell ls来运行ls</strong></li></ul><ol start="9"><li>更多程序运行选项和调试</li></ol><ul><li><strong>程序运行参数</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> args 可指定运行时参数。（如：<span class="hljs-keyword">set</span> args <span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span>） <br><span class="hljs-keyword">show</span> args 命令可以查看设置好的运行参数。 <br></code></pre></td></tr></table></figure><ul><li><strong>运行环境</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">path 可设定程序的运行路径。 <br><span class="hljs-keyword">show</span> paths 查看程序的运行路径。<br><span class="hljs-keyword">set</span> environment varname [<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>] 设置环境变量。如：<span class="hljs-keyword">set</span> env <span class="hljs-keyword">USER</span><span class="hljs-operator">=</span>hchen <br><span class="hljs-keyword">show</span> environment [varname] 查看环境变量。<br></code></pre></td></tr></table></figure><ul><li><strong>工作目录</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 相当于shell的<span class="hljs-built_in">cd</span>命令。 <br><span class="hljs-built_in">pwd</span> 显示当前的所在目录。 <br></code></pre></td></tr></table></figure><ul><li><strong>程序的输入输出</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">info terminal 显示你程序用到的终端的模式。 <br>使用重定向控制程序输出。如：run &gt; outfile <br><span class="hljs-built_in">tty</span>命令可以指写输入输出的终端设备。如：<span class="hljs-built_in">tty</span> /dev/ttyb<br></code></pre></td></tr></table></figure><ul><li><strong>调试已运行的程序</strong></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">两种方法： <br>(<span class="hljs-number">1</span>)在UNIX下用ps查看正在运行的程序的PID（进程ID），然后用gdb PID格式挂接正在运行的程序。 <br>(<span class="hljs-number">2</span>)先用gdb 关联上源代码，并进行gdb，在gdb中用attach命令来挂接进程的PID。并用detach来取消挂接的进程。<br></code></pre></td></tr></table></figure><ul><li><strong>暂停 &#x2F; 恢复程</strong></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">序运行当进程被gdb停住时，你可以使用info program 来查看程序的是否在运行，进程号，被暂停的原因。 在gdb中，我们可以有以下几种暂停方式：断点（BreakPoint）、观察点（WatchPoint）、捕捉点（CatchPoint）、信号（Signals）、线程停止（Thread Stops），如果要恢复程序运行，可以使用c或是<span class="hljs-keyword">continue</span>命令。<br></code></pre></td></tr></table></figure><ul><li><strong>线程（Thread Stops）</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">如果程序是多线程，可以定义断点是否在所有的线程上，或是在某个特定的线程。 <br><span class="hljs-keyword">break</span> thread<br><span class="hljs-keyword">break</span> thread <span class="hljs-keyword">if</span> ... <br>linespec指定了断点设置在的源程序的行号。threadno指定了线程的ID，注意，这个ID是GDB分配的，可以通过“info threads”命令来查看正在运行程序中的线程信息。如果不指定thread 则表示断点设在所有线程上面。还可以为某线程指定断点条件。如： <br>(gdb) <span class="hljs-keyword">break</span> frik.c:<span class="hljs-number">13</span> thread <span class="hljs-number">28</span> <span class="hljs-keyword">if</span> bartab &gt; lim <br>当你的程序被GDB停住时，所有的运行线程都会被停住。这方便查看运行程序的总体情况。而在你恢复程序运行时，所有的线程也会被恢复运行。<br></code></pre></td></tr></table></figure><ol start="10"><li>调试core文件</li></ol><ul><li><strong>Core Dump</strong>：Core的意思是内存，Dump的意思是扔出来，堆出来。开发和使用Unix程序时，有时程序莫名其妙的down了，却没有任何的提示(有时候会提示core dumped)，这时候可以查看一下有没有形如core.进程号的文件生成，这个文件便是操作系统把程序down掉时的内存内容扔出来生成的,  它可以做为调试程序的参考</li><li><strong>生成Core文件</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql">一般默认情况下，core file的大小被设置为了<span class="hljs-number">0</span>，这样系统就不dump出core file了。修改后才能生成core文件。<br>#设置core大小为无限<br>ulimit <span class="hljs-operator">-</span>c unlimited<br>#设置文件大小为无限<br>ulimit unlimited<br><br>这些需要有root权限, 在ubuntu下每次重新打开中断都需要重新输入上面的第一条命令, 来设置core大小为无限<br><br>core文件生成路径:输入可执行文件运行命令的同一路径下。若系统生成的core文件不带其他任何扩展名称，则全部命名为core。新的core文件生成将覆盖原来的core文件。<br><br><span class="hljs-number">1</span>）<span class="hljs-operator">/</span>proc<span class="hljs-operator">/</span>sys<span class="hljs-operator">/</span>kernel<span class="hljs-operator">/</span>core_uses_pid可以控制core文件的文件名中是否添加pid作为扩展。文件内容为<span class="hljs-number">1</span>，表示添加pid作为扩展名，生成的core文件格式为core.xxxx；为<span class="hljs-number">0</span>则表示生成的core文件同一命名为core。<br>可通过以下命令修改此文件：<br>echo &quot;1&quot; <span class="hljs-operator">&gt;</span> <span class="hljs-operator">/</span>proc<span class="hljs-operator">/</span>sys<span class="hljs-operator">/</span>kernel<span class="hljs-operator">/</span>core_uses_pid<br><br><span class="hljs-number">2</span>）proc<span class="hljs-operator">/</span>sys<span class="hljs-operator">/</span>kernel<span class="hljs-operator">/</span>core_pattern可以控制core文件保存位置和文件名格式。<br>可通过以下命令修改此文件：<br>echo &quot;/corefile/core-%e-%p-%t&quot; <span class="hljs-operator">&gt;</span> core_pattern，可以将core文件统一生成到<span class="hljs-operator">/</span>corefile目录下，产生的文件名为core<span class="hljs-operator">-</span>命令名<span class="hljs-operator">-</span>pid<span class="hljs-operator">-</span>时间戳<br>以下是参数列表:<br>    <span class="hljs-operator">%</span>p <span class="hljs-operator">-</span> <span class="hljs-keyword">insert</span> pid <span class="hljs-keyword">into</span> filename 添加pid<br>    <span class="hljs-operator">%</span>u <span class="hljs-operator">-</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">current</span> uid <span class="hljs-keyword">into</span> filename 添加当前uid<br>    <span class="hljs-operator">%</span>g <span class="hljs-operator">-</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">current</span> gid <span class="hljs-keyword">into</span> filename 添加当前gid<br>    <span class="hljs-operator">%</span>s <span class="hljs-operator">-</span> <span class="hljs-keyword">insert</span> signal that caused the coredump <span class="hljs-keyword">into</span> the filename 添加导致产生core的信号<br>    <span class="hljs-operator">%</span>t <span class="hljs-operator">-</span> <span class="hljs-keyword">insert</span> UNIX <span class="hljs-type">time</span> that the coredump occurred <span class="hljs-keyword">into</span> filename 添加core文件生成时的unix时间<br>    <span class="hljs-operator">%</span>h <span class="hljs-operator">-</span> <span class="hljs-keyword">insert</span> hostname <span class="hljs-keyword">where</span> the coredump happened <span class="hljs-keyword">into</span> filename 添加主机名<br>    <span class="hljs-operator">%</span>e <span class="hljs-operator">-</span> <span class="hljs-keyword">insert</span> coredumping executable name <span class="hljs-keyword">into</span> filename 添加命令名<br></code></pre></td></tr></table></figure><ul><li><strong>用gdb查看core文件</strong></li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs delphi">发生core dump之后, 用gdb进行查看core文件的内容, 以定位文件中引发core dump的行.<br>gdb [exec <span class="hljs-keyword">file</span>] [core <span class="hljs-keyword">file</span>]<br>如:<br>gdb ./test core<br><br>或gdb ./a.<span class="hljs-keyword">out</span><br> core-<span class="hljs-keyword">file</span> core.xxxx<br>gdb后, 用bt命令backtrace或where查看程序运行到哪里, 来定位core dump的文件-&gt;行.<br><br>待调试的可执行文件，在编译的时候需要加-g，core文件才能正常显示出错信息<br><br><span class="hljs-number">1</span>）gdb -core=core.xxxx<br><span class="hljs-keyword">file</span> ./a.<span class="hljs-keyword">out</span><br>bt<br><span class="hljs-number">2</span>）gdb -c core.xxxx<br><span class="hljs-keyword">file</span> ./a.<span class="hljs-keyword">out</span><br>bt<br></code></pre></td></tr></table></figure><ul><li><strong>用gdb实时观察某进程crash信息</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">启动进程<br>gdb -<span class="hljs-selector-tag">p</span> PID<br>c<br>运行进程至crash<br>gdb会显示crash信息<br>bt<br></code></pre></td></tr></table></figure><h1 id="第四周-计算机程序"><a href="#第四周-计算机程序" class="headerlink" title="第四周 计算机程序"></a>第四周 计算机程序</h1><table><thead><tr><th>4</th><th>第四周</th><th>2022年09月29日周四</th><th>从现实问题到计算机程序。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage1.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L4</td><td>第四周</td><td>2022年09月29日周四</td><td>实验课四：感性接触C程序。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/lab/hlp2020ouc/LabLinuxC.pdf">实验手册</a></td></tr></tbody></table><h1 id="第五周-C语言简介"><a href="#第五周-C语言简介" class="headerlink" title="第五周 C语言简介"></a>第五周 C语言简介</h1><table><thead><tr><th>5</th><th>第五周</th><th>2022年10月06日周四</th><th>C语言的由来、标准和构成；数据成分。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage2.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L5</td><td>第五周</td><td>2022年10月06日周四</td><td>实验课五：C语言的数据成分。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment1.pdf">实验手册</a></td></tr></tbody></table><p>C语言规范定义的非常宽泛：<br><code>long</code>型数据长度不短于<code>int</code>型；<code>short</code>型不长于<code>int</code>型<br>-&gt; 相同的程序在不同编译器上具有不同解释<br>-&gt; 相同的程序在不同平台上运行结果不同</p><h2 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h2><p><a href="https://www.runoob.com/w3cnote/bubble-sort.html">1.1 冒泡排序 | 菜鸟教程 (runoob.com)</a></p><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif"/><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bubble_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-type">int</span> i, j, temp;<br>    <br>    <span class="hljs-comment">// 注意for循环条件</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>                <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>                        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                                temp = arr[j];<br>                                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                                arr[j + <span class="hljs-number">1</span>] = temp;<br>                        &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">22</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">82</span>, <span class="hljs-number">55</span>, <span class="hljs-number">89</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>, <span class="hljs-number">35</span>, <span class="hljs-number">9</span>, <span class="hljs-number">70</span> &#125;;<br>        <span class="hljs-type">int</span> len = (<span class="hljs-type">int</span>) <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(*arr);<br>        bubble_sort(arr, len);<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 来源:菜鸟教程</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 冒泡排序</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    <span class="hljs-type">int</span> i, j, tmp;<br>    <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; num ; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;<span class="hljs-built_in">array</span>[i]);<br>    &#125;<br>    <br>     <span class="hljs-comment">// 注意for循环条件</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt; num - i; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[j - <span class="hljs-number">1</span>] &gt; <span class="hljs-built_in">array</span>[j])<br>            &#123;<br>                tmp = <span class="hljs-built_in">array</span>[j];<br>                <span class="hljs-built_in">array</span>[j] = <span class="hljs-built_in">array</span>[j - <span class="hljs-number">1</span>];<br>                <span class="hljs-built_in">array</span>[j - <span class="hljs-number">1</span>] = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">array</span>[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">// 来源:MurphyHou</span><br></code></pre></td></tr></table></figure><h1 id="第六周-运算控制传输"><a href="#第六周-运算控制传输" class="headerlink" title="第六周 运算控制传输"></a>第六周 运算控制传输</h1><table><thead><tr><th>6</th><th>第六周</th><th>2021年10月13日周四</th><th>运算成分；控制成分；传输成分。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage2.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L6</td><td>第六周</td><td>2022年10月13日周四</td><td>实验课六：C语言的数据、运算和控制成分。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment2.pdf">实验手册</a></td></tr></tbody></table><p>推荐网课：<a href="https://www.bilibili.com/video/BV19W411B7w1/?spm_id_from=333.337.search-card.all.click&vd_source=6d46640a443a49f050af078d1f65143e">翁恺C语言_哔哩哔哩_bilibili</a></p><h2 id="控制成分"><a href="#控制成分" class="headerlink" title="控制成分"></a>控制成分</h2><p>break：在switch语句、while语句、 do-while语句、for语句中使用； 以跳出switch语句或内层循环，继续执行逻辑上的下一条语句。</p><p>continue：用于循环语句中； 结束本次循环，接着立即测试循环控制表达式，判断是否继续执行下一次循环。</p><h2 id="传输成分"><a href="#传输成分" class="headerlink" title="传输成分"></a>传输成分</h2><blockquote><p>scanf的工作原理</p><blockquote><p>scanf是从标准输入中读取字符，然后进行相关转化；<br>如果是空格或者换行，直接跳过；<br>如果不符合格式化要求，不处理同时也不减少缓冲区中的信息。<br>将数据按照行缓冲送到键盘缓冲区； 按照格式化要求从缓冲区中读取数据到相应内存空间。<br>scanf并不能保证后面的参数都被正确赋值。</p></blockquote><p>scanf是格式化输入，printf是格式化输出。<br>cin是输入流，cout是输出流。<br>格式化输出效率比较高，但是写代码麻烦。<br>流输出操作效率稍低，但书写简便。<br>cout之所以效率低，是先把要输出的东西存入缓冲区再输出。</p></blockquote><p><em>以下参考:”C Primer Plus”</em> </p><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221013104910098.png"/></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221013104935450.png"/></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221013104949482.png"/></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221013105012947.png"/></div></div></div><h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221013105032035.png"/></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221013105044907.png"/></div></div></div><p>其他参考资料：</p><p><a href="https://blog.csdn.net/hhhhhyyyyy8/article/details/80917713">scanf函数%c前为什么加空格_hhhhhyyyyy8的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/cmustard/p/6769950.html">c语言防止缓冲区数据作为有效字符被读入 - cmustard - 博客园 (cnblogs.com)</a></p><h1 id="第七周-数组"><a href="#第七周-数组" class="headerlink" title="第七周 数组"></a>第七周 数组</h1><table><thead><tr><th>7</th><th>第七周</th><th>2022年10月20日周四</th><th>数组。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage2.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L7</td><td>第七周</td><td>2022年10月20日周四</td><td>实验课七：C语言的数组。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment3.pdf">实验手册</a></td></tr></tbody></table><h1 id="第八周-字符串"><a href="#第八周-字符串" class="headerlink" title="第八周 字符串"></a>第八周 字符串</h1><table><thead><tr><th>8</th><th>第八周</th><th>2022年10月27日周四</th><th>字符串。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage2.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L8</td><td>第八周</td><td>2022年10月27日周四</td><td>实验课八：C语言的字符串。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment4.pdf">实验手册</a></td></tr></tbody></table><p>C语言中的字符串是个难点！</p><p>C++中的输入</p><ul><li><p>cin</p><ul><li>string str; cin &gt;&gt; str; 接受一个字符串，遇“空格”、“TAB”、“回车”都结束</li></ul></li><li><p>cin.get()</p><ul><li>cin.get(ch)，可以用来接收一个字符</li><li>cin.get(字符数组名,接收字符数目)用来接收一行字符串,可以接收空格</li><li>cin.get(无参数)没有参数主要是用于舍弃输入流中的不需要的字符,或者舍弃回车,弥补cin.get(字符数组名,接收字符数目)的不足.</li></ul></li><li><p>cin.getline()</p><ul><li>接受一个字符串，可以接收空格并输出</li></ul></li><li><p>getchar()</p></li><li><p>getline（cin, string）&#x2F;&#x2F; 需要string的头文件</p><ul><li>第一个参数是输入流对象、第二个参数是保存字符串的字符串对象。getline从输入流中读取对象保存到string中，但是不包括换行符，这样就可以保存一行中的空格、制表符了。</li></ul></li></ul><p>C中的输入</p><ul><li>scanf(“%d”, &amp;aa);</li><li>scanf(“%f”, &amp;bb);</li><li>scanf(“%c”, &amp;ch);<ul><li>输入一个字符。</li></ul></li><li>scanf(“%s”, str); &#x2F;&#x2F;用scanf把字符串读入字符数组中，不需要&amp;<ul><li>从第一个非空白字符开始，到下一个空白字符之前的所有的字符都是输入。（简单来讲，就是只能输入一个单词）</li></ul></li><li>ch &#x3D; getchar();&#x2F;&#x2F; 输入一个字符<ul><li>putchar(ch); &#x2F;&#x2F; 输出一个字符</li></ul></li><li>gets(str);（C11中不能用了）<ul><li>读取整行输入，直到遇到换行符，然后丢弃换行符，存储其余字符，并在这些字符的末尾添加一个空字符使其成为一个C字符串。</li><li>C11标准中，直接废除了gets()函数！因为可能有缓冲区溢出的安全隐患！</li><li>puts(str); 输出字符串。</li></ul></li><li>fgets(str, STLEN, stdin); <ul><li>STLEN是读入字符的最大数量。</li><li>如果fgets()读到一个换行符，会把他存储到字符串中。这一点与gets()不一样。</li><li>fputs(str, stdout); 输入</li></ul></li><li>gets_s(str, STLEN); （C11 中新增的）</li></ul><h1 id="第九周-函数"><a href="#第九周-函数" class="headerlink" title="第九周 函数"></a>第九周 函数</h1><table><thead><tr><th>9</th><th>第九周</th><th>2022年11月03日周四</th><th>函数。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage3.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L9</td><td>第九周</td><td>2022年11月03日周四</td><td>实验课九：C语言的函数。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment5.pdf">实验手册</a></td></tr></tbody></table><ul><li>函数原型；函数声明</li><li>参数传递：值传递<ul><li>实参与形参具有不同的存储单元，实参与形参变量的数据传递是 “值传递”。</li><li>函数调用时，系统给形参分配存储单元，并将实参对应的值传递给形参。</li><li>实参与形参的类型必须相同或可以兼容。</li></ul></li><li>局部变量&#x2F;全局变量<ul><li>局部变量：在函数内或块内定义，只在这个函数或块内起作用。</li><li>全局变量：在所有函数外定义，作用域从定义变量的位置开始到本程序文件结束。</li><li>当全局变量与局部变量同名时，局部变量将在自己作用域内有效，它将屏蔽同名的全局变量。</li><li>不在非常必要的情况下，不要使用全局变量。</li></ul></li><li>数组与函数<ul><li>数组元素作为函数参数</li><li>数组名<em>（地址）</em>作为函数参数：<strong>数组名就是数字在内存中的地址</strong><ul><li>形式参数是一个未定义大小的数组：void myFunction(int param[])</li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305101756669.png" alt="数组名作为函数参数" style="zoom: 50%;" /></li><li>形式参数是一个已定义大小的数组：void myFunction(int param[10])</li><li>形式参数是一个指针：void myFunction(int *param)</li></ul></li></ul></li></ul><h1 id="第十周-递归"><a href="#第十周-递归" class="headerlink" title="第十周 递归"></a>第十周 递归</h1><table><thead><tr><th>10</th><th>第十周</th><th>2022年11月10日周四</th><th>递归。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage3.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L10</td><td>第十周</td><td>2022年11月10日周四</td><td>实验课十：C语言的递归。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment6.pdf">实验手册</a></td></tr></tbody></table><ul><li>递归简单来说就是函数的嵌套。</li><li>递归：一个函数在其定义中直接或间接调用自身的一种方法。</li><li>递归与递推<ul><li>不同：递推的关注点放在起始点条件；递归的关注点放在求解目标上、</li><li>相同：重在表现第 i 次与第 i + 1次的关系</li><li>斐波那契数列；进制转换；汉诺塔；逆波兰表达式；放苹果（把这几个例子动手实现看看）</li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305102445677.png" alt="斐波那契数列" style="zoom:50%;" /></li></ul></li></ul><h1 id="第十一周-指针"><a href="#第十一周-指针" class="headerlink" title="第十一周 指针"></a>第十一周 指针</h1><table><thead><tr><th>11</th><th>第十一周</th><th>2022年11月17日周四</th><th>指针（一）。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage4.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L11</td><td>第十一周</td><td>2022年11月17日周四</td><td>实验课十一：C语言的指针（一）。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment7.pdf">实验手册</a></td></tr></tbody></table><p>指针！难点！</p><h2 id="指针是什么"><a href="#指针是什么" class="headerlink" title="指针是什么"></a>指针是什么</h2><ul><li><p>变量三要素：变量的地址*(变量在内存重点位置)*，变量的值，变量的名字</p></li><li><p><strong>指针：把某个变量的地址称为“指向该变量的指针”</strong></p></li><li><p>如何知道一个变量的地址：取地址符‘&amp;’</p></li><li><p>指针运算符 ‘*’</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> var = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; &amp;var &lt;&lt; endl;<br>    cout &lt;&lt; *&amp;var &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0x7ffe393d5874</span><br><span class="hljs-comment">0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>指针变量：存放地址（指针）的变量</li><li>定义一个指针变量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> *p;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">int: 指针变量的基类型（基类型：指针变量指向的变量的类型）</span><br><span class="hljs-comment">*: 指针运算符 p的类型</span><br><span class="hljs-comment">p: 指针变量的名字</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 定义指向int型变量var的指针p的两种方式</span><br><br><span class="hljs-comment">// 方式一（推荐）</span><br><span class="hljs-type">int</span> var;<br><span class="hljs-type">int</span> *p;<br>p = &amp;var;<br><span class="hljs-comment">// 方式二（两步并作一步）</span><br><span class="hljs-type">int</span> var;<br><span class="hljs-type">int</span> *p = &amp;var<br></code></pre></td></tr></table></figure><ul><li>指针变量也是变量，是变量就有地址</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> var = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> *p;<br>    p = &amp;var; <span class="hljs-comment">// 定义了一个指向var的指针p</span><br><br>    cout &lt;&lt; var &lt;&lt; endl; <span class="hljs-comment">// 变量var的内容</span><br>    cout &lt;&lt; &amp;var &lt;&lt; endl; <span class="hljs-comment">//内存中变量var的地址</span><br><br>    cout &lt;&lt; p &lt;&lt; endl; <span class="hljs-comment">// 指针变量p的内容</span><br>    cout &lt;&lt; &amp;p &lt;&lt; endl; <span class="hljs-comment">// 内存中指针变量p的地址</span><br><br>    cout &lt;&lt; *p &lt;&lt; endl; <span class="hljs-comment">// 指针变量所指向的变量的内容</span><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">10</span><br><span class="hljs-comment">0x7ffd85a1584c</span><br><span class="hljs-comment">0x7ffd85a1584c</span><br><span class="hljs-comment">0x7ffd85a15850</span><br><span class="hljs-comment">10</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305150307165-1677999793667-4-1677999815296-10.png"/><h1 id="第十二周-指针"><a href="#第十二周-指针" class="headerlink" title="第十二周 指针"></a>第十二周 指针</h1><table><thead><tr><th>12</th><th>第十二周</th><th>2022年11月24日周四</th><th>指针（二）。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage4.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L12</td><td>第十二周</td><td>2022年11月24日周四</td><td>实验课十二：C语言的指针（二）。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment8.pdf">实验手册</a></td></tr></tbody></table><h2 id="数组与指针"><a href="#数组与指针" class="headerlink" title="数组与指针"></a>数组与指针</h2><p>数组名代表数组首元素的地址；数组名是指向数组第一个元素的指针；注意：a是地址常量，不是变量，不能给其赋值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>&#125;;<br><br>    <span class="hljs-type">int</span> *p=<span class="hljs-literal">NULL</span>; <br>    cout&lt;&lt;a&lt;&lt;endl;<br>    p=a;<br>    cout&lt;&lt;p&lt;&lt;endl; <br><br>    cout&lt;&lt;*p&lt;&lt;endl;  <span class="hljs-comment">//输出10，没什么问题</span><br>    cout&lt;&lt;*p++&lt;&lt;endl; <span class="hljs-comment">//输出也是10，后置++的优先级最高为什么还是10是因为p++的属性，</span><br>    <br>    <span class="hljs-comment">// ++i will increment the value of i, and then return the incremented value.</span><br>    <span class="hljs-comment">// i++ will increment the value of i, but return the original value that i held before being incremented.</span><br><br>    cout&lt;&lt;*p++&lt;&lt;endl;<br><br>    cout&lt;&lt;*p&lt;&lt;endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0x7ffc3ce50a80</span><br><span class="hljs-comment">0x7ffc3ce50a80</span><br><span class="hljs-comment">10</span><br><span class="hljs-comment">10</span><br><span class="hljs-comment">11</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>利用指针变量引用数组元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> num;<br>    cin &gt;&gt; num;<br><span class="hljs-type">int</span> array[num];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>&#123;<br>cin &gt;&gt; array[i];<br>&#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;array:&quot;</span> &lt;&lt;endl;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;array elements:&quot;</span> &lt;&lt; array[i] &lt;&lt; endl;<br>&#125;<br><span class="hljs-type">int</span> *p;<br>p = array;<br>    cout &lt;&lt; <span class="hljs-string">&quot;pointer:&quot;</span> &lt;&lt;endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;array elements:&quot;</span> &lt;&lt; *(p + i) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串与指针"><a href="#字符串与指针" class="headerlink" title="字符串与指针"></a>字符串与指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> a[<span class="hljs-number">10</span>];<br><span class="hljs-type">char</span> *p;<br>p = a;<br></code></pre></td></tr></table></figure><h1 id="第十三周-指针"><a href="#第十三周-指针" class="headerlink" title="第十三周 指针"></a>第十三周 指针</h1><table><thead><tr><th>13</th><th>第十三周</th><th>2022年12月01日周四</th><th>指针（三）。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage4.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L13</td><td>第十三周</td><td>2022年12月01日周四</td><td>实验课十三：C语言的指针（三）。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment9.pdf">实验手册</a></td></tr></tbody></table><h2 id="二维数组与指针"><a href="#二维数组与指针" class="headerlink" title="二维数组与指针"></a>二维数组与指针</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305155230146.png"/><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>]=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;,&#123;<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>&#125;&#125;;<br><br>    cout&lt;&lt;<span class="hljs-string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl; <br>    cout&lt;&lt;<span class="hljs-string">&quot;&amp;a[0]=&quot;</span>&lt;&lt;&amp;a[<span class="hljs-number">0</span>]&lt;&lt;endl&lt;&lt;endl; <br><br>    cout&lt;&lt;<span class="hljs-string">&quot;a+1=&quot;</span>&lt;&lt;a<span class="hljs-number">+1</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;&amp;a[0]+1=&quot;</span>&lt;&lt;&amp;a[<span class="hljs-number">0</span>]<span class="hljs-number">+1</span>&lt;&lt;endl&lt;&lt;endl; <br><br>    cout&lt;&lt;<span class="hljs-string">&quot;*a=&quot;</span>&lt;&lt;*a&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;a[0]=&quot;</span>&lt;&lt;a[<span class="hljs-number">0</span>]&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;&amp;a[0][0]=&quot;</span>&lt;&lt;&amp;a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]&lt;&lt;endl&lt;&lt;endl; <br><br>    cout&lt;&lt;<span class="hljs-string">&quot;*a+1=&quot;</span>&lt;&lt;*a<span class="hljs-number">+1</span>&lt;&lt;endl; <br>    cout&lt;&lt;<span class="hljs-string">&quot;a[0]+1=&quot;</span>&lt;&lt;a[<span class="hljs-number">0</span>]<span class="hljs-number">+1</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;&amp;a[0][0]+1=&quot;</span>&lt;&lt;&amp;a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<span class="hljs-number">+1</span>&lt;&lt;endl&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">a=0x7ffc31245390</span><br><span class="hljs-comment">&amp;a[0]=0x7ffc31245390</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">a+1=0x7ffc312453a0</span><br><span class="hljs-comment">&amp;a[0]+1=0x7ffc312453a0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*a=0x7ffc31245390</span><br><span class="hljs-comment">a[0]=0x7ffc31245390</span><br><span class="hljs-comment">&amp;a[0][0]=0x7ffc31245390</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*a+1=0x7ffc31245394</span><br><span class="hljs-comment">a[0]+1=0x7ffc31245394</span><br><span class="hljs-comment">&amp;a[0][0]+1=0x7ffc31245394</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">21</span>,<span class="hljs-number">23</span>&#125;;<br><br>    <span class="hljs-built_in">int</span> (*p)[<span class="hljs-number">4</span>];  <span class="hljs-comment">// 定义一个指向“包含4个int型元素的一维数组”的指针变量</span><br>    <span class="hljs-type">int</span> i,j;<br>    p=a;<br>    <span class="hljs-comment">// cin&gt;&gt;i&gt;&gt;j;</span><br>    i = <span class="hljs-number">1</span>;<br>    j = <span class="hljs-number">2</span>;<br>    cout&lt;&lt;*(*(p+i)+j); <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数与指针"><a href="#函数与指针" class="headerlink" title="函数与指针"></a>函数与指针</h2><ul><li>指针变量做函数参数</li><li>数组名做函数参数</li><li>多维数组名做函数参数<ul><li>一般而言，声明一个指向<strong>N维数组</strong>的指针时，只能省略最左边方括号中值。<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305161846561.png"/></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305161821163.png"/></div></div></div></li></ul></li><li>指向符号常量的指针</li></ul><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305162139730.png"/></div><div class="group-image-wrap"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305162436007.png"/></div></div></div><ul><li>返回指针值的函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> *<span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][<span class="hljs-number">4</span>], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>, <span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>&#125;; <br>    <span class="hljs-type">int</span> *p;<br>    p=<span class="hljs-built_in">get</span>(a,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); cout&lt;&lt;*p&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> *<span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][<span class="hljs-number">4</span>], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> *pt; <br>    pt=*(arr+n<span class="hljs-number">-1</span>)+m<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span>(pt);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">对指向二维数组的指针，取两次*才能得到数值；</span><br><span class="hljs-comment">这个程序，在函数部分取*，所以返回的pt仍然是个指针，在main函数中，再取*，得到的是一个数值。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">关键是：pt=*(arr+1)+2;</span><br><span class="hljs-comment">arr是指向二维数组第一个元素（一维数组）的指针（可以理解成二维数组的第一行），那么+1之后就是指向了第二行。</span><br><span class="hljs-comment">取*后就是指向二维数组第二行第一个元素的指针，再+2后，就是指向二维数组第二行第三个元素，也就是&amp;a[1][2]</span><br><span class="hljs-comment">所以输出的答案就是7</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>静态局部变量<ul><li>函数中的局部变量的值在函数调用结束后不消失而保留原值；</li><li>即其占用的存储单元不释放，在下一次该函数调用时，仍可以继续使用该变量。</li><li>用关键词static进行声明</li></ul></li></ul><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20230305164900383.png"/><h1 id="第十四周-结构体和链表"><a href="#第十四周-结构体和链表" class="headerlink" title="第十四周 结构体和链表"></a>第十四周 结构体和链表</h1><table><thead><tr><th>14</th><th>第十四周</th><th>2022年12月08日周四</th><th>结构体与链表。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage4.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L14</td><td>第十四周</td><td>2022年12月08日周四</td><td>实验课十四：C语言的结构体与链表。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment10.pdf">实验手册</a></td></tr></tbody></table><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li>结构体的定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 先定义结构体，再用已经声明的结构体来定义变量</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Stu</span><br>&#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br>&#125;;  <span class="hljs-comment">// 别忘了分号</span><br><br>Stu sam, tom;<br><br><span class="hljs-comment">// 也可以</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Stu sam = &#123;</span><br><span class="hljs-comment">123,</span><br><span class="hljs-comment">&#123;&#x27;s&#x27;,&#x27;a&#x27;,&#x27;m&#x27;, &#x27;\0&#x27;&#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 定义结构体的同时定义了变量</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Stu</span><br>&#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br>&#125;sam, tom;<br><br><span class="hljs-comment">// 也可以</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct Stud</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    int id;</span><br><span class="hljs-comment">    char name[100];</span><br><span class="hljs-comment">&#125;sam = &#123;</span><br><span class="hljs-comment">    123,</span><br><span class="hljs-comment">    &#123;&#x27;s&#x27;,&#x27;a&#x27;,&#x27;m&#x27;, &#x27;\0&#x27;&#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>应用举例</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    <span class="hljs-type">int</span> id_num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>]; <br>&#125;;  <span class="hljs-comment">// 这里有个分号别忘了</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Student mike1 = &#123;<span class="hljs-number">123</span>,&#123;<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;&#125;;<br>    Student mike2;<br><br>    mike2 = mike1; <span class="hljs-comment">//copy</span><br><br>    mike<span class="hljs-number">2.</span>id_num = <span class="hljs-number">456</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; mike<span class="hljs-number">2.</span>name[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)<br>    &#123;<br>        mike<span class="hljs-number">2.</span>name[i] = <span class="hljs-built_in">toupper</span>(mike<span class="hljs-number">2.</span>name[i]);<br>    &#125;<br><br>    cout&lt;&lt;mike<span class="hljs-number">1.</span>id_num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;mike<span class="hljs-number">1.</span>name&lt;&lt;endl; <br>    cout&lt;&lt;mike<span class="hljs-number">2.</span>id_num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;mike<span class="hljs-number">2.</span>name&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 123 mike</span><br><span class="hljs-comment">// 456 MIKE</span><br></code></pre></td></tr></table></figure><ul><li>结构体做函数参数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    <span class="hljs-type">int</span> id_num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">renew</span><span class="hljs-params">(Student one)</span></span><br><span class="hljs-function"></span>&#123;<br>    one.id_num = <span class="hljs-number">456</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; one.name[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)<br>    &#123;<br>        one.name[i] = <span class="hljs-built_in">toupper</span>(one.name[i]);<br>    &#125;<br>    cout&lt;&lt;one.id_num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;one.name&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Student mike1 = &#123;<br>        <span class="hljs-number">123</span>,<br>        &#123;<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">renew</span>(mike1); <span class="hljs-comment">// 相当于复制了一个新的结构体变量，函数中对这个新结构体变量的改变，不影响原来的结构体变量。</span><br><br>    cout&lt;&lt;mike<span class="hljs-number">1.</span>id_num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;mike<span class="hljs-number">1.</span>name&lt;&lt;endl; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 456 MIKE</span><br><span class="hljs-comment">// 123 mike</span><br></code></pre></td></tr></table></figure><ul><li>结构体做函数返回值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    <span class="hljs-type">int</span> id_num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br>&#125;;<br><br><span class="hljs-function">Student <span class="hljs-title">newone</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Student one = &#123;<br>        <span class="hljs-number">456</span>,<br>        &#123;<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;K&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> one;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Student mike = <span class="hljs-built_in">newone</span>();<br><br>    cout&lt;&lt;mike.id_num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;mike.name&lt;&lt;endl; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 456 MIKE</span><br></code></pre></td></tr></table></figure><ul><li>指向结构体的指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    <span class="hljs-type">int</span> id_num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Student mike = &#123;<span class="hljs-number">123</span>,&#123;<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;&#125;; <br>    Student *one = &amp;mike;<br>    cout &lt;&lt; (*one).id_num &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;(*one).name &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 123 mike</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    <span class="hljs-type">int</span> id_num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Student mike = &#123;<span class="hljs-number">123</span>,&#123;<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;&#125;; <br>    Student *one = &amp;mike;<br>    cout &lt;&lt; one-&gt;id_num &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; one-&gt;name &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 123 mike</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://www.zhihu.com/question/49164544">C 语言中，「.」与「-&gt;」有什么区别？ - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/littesss/article/details/71185916">【转】C语言中 -＞ 是什么意思？_c语言中-&gt;表示什么_littesss的博客-CSDN博客</a></p><p> <code>-&gt;</code>是一个整体，它是用于指向结构体、C++中的class等含有子数据的指针用来取子数据。</p><p>换种说法，如果我们在C语言中定义了一个结构体，然后申明一个指针指向这个结构体，那么我们要用指针取出结构体中的数据，就要用到<code>-&gt;</code>.</p></blockquote><ul><li>结构体数组</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    <span class="hljs-type">int</span> id_num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Student myclass[<span class="hljs-number">3</span>]= &#123;<br>        <span class="hljs-number">123</span>,&#123;<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;, <br>        <span class="hljs-number">133</span>,&#123;<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;,<br>        <span class="hljs-number">143</span>,&#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;<br>    &#125;; <br><br>    Student *one = myclass;<br><br>    cout&lt;&lt;one-&gt;id_num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;one-&gt;name&lt;&lt;endl; <br>    one++;<br>    cout&lt;&lt;one-&gt;id_num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;one-&gt;name&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 123 mike</span><br><span class="hljs-comment">// 133 to</span><br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p><strong>用指针把结构体链起来</strong></p><ul><li><p>链表头：指向第一个链表结点的指针。 </p></li><li><p>链表结点：链表中的每一个元素，包括： </p><ul><li>▶ 当前节点的数据； \</li><li>▶ 下一个结点的地址。</li></ul></li><li><p>链表尾：不再指向其他结点的结点，其地址部分放一个NULL，表示链表到此结束。</p></li></ul><h1 id="第十五周-面向对象"><a href="#第十五周-面向对象" class="headerlink" title="第十五周 面向对象"></a>第十五周 面向对象</h1><table><thead><tr><th>15</th><th>第十五周</th><th>2022年12月15日周四</th><th>面向对象程序设计。</th><th><a href="http://ouc.ai/zhenghaiyong/courses/slides/hlp2020ouc/Stage4.pdf">幻灯片</a></th></tr></thead><tbody><tr><td>L15</td><td>第十五周</td><td>2022年12月15日周四</td><td>实验课十五：C程序设计（综合）。</td><td><a href="http://ouc.ai/zhenghaiyong/courses/assignments/hlp2020ouc/Assignment11.pdf">实验手册</a></td></tr></tbody></table><h1 id="第十六周-总结复习"><a href="#第十六周-总结复习" class="headerlink" title="第十六周 总结复习"></a>第十六周 总结复习</h1><table><thead><tr><th>16</th><th>第十六周</th><th>2022年12月22日周四</th><th>课程总结。</th></tr></thead><tbody><tr><td>L16</td><td>第十六周</td><td>2022年12月22日周四</td><td>实验课十六：程序设计实践。</td></tr></tbody></table><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221222093703326.png"/><h1 id="期末复习"><a href="#期末复习" class="headerlink" title="期末复习"></a>期末复习</h1><h2 id="重点习题"><a href="#重点习题" class="headerlink" title="重点习题"></a>重点习题</h2><h3 id="1-pre9-冒泡排序"><a href="#1-pre9-冒泡排序" class="headerlink" title="1 pre9 冒泡排序"></a>1 pre9 冒泡排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// exp5 assignment1</span><br><span class="hljs-comment">// 冒泡排序</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-type">int</span> array[n];  <span class="hljs-comment">//定义数组之前，一定要先输入n的大小！</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-comment">// 遍历输入数组元素</span><br>    &#123;<br>        cin &gt;&gt; array[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)  <span class="hljs-comment">// 注意i的取值范围</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n - i; j++) <span class="hljs-comment">// 注意j的取值范围</span><br>        &#123;<br>            <span class="hljs-type">int</span> tmp;<br>            <span class="hljs-keyword">if</span> (array[j - <span class="hljs-number">1</span>] &gt; array[j])  <span class="hljs-comment">// 注意是正序还是逆序</span><br>            &#123;<br>                tmp = array[j];<br>                array[j] = array[j - <span class="hljs-number">1</span>];<br>                array[j - <span class="hljs-number">1</span>] = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)  <span class="hljs-comment">// 遍历数组元素进行输出</span><br>    &#123;<br>        cout &lt;&lt; array[i] &lt;&lt; endl;;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-pre12-整数1-5-10的个数"><a href="#2-pre12-整数1-5-10的个数" class="headerlink" title="2 pre12 整数1 5 10的个数"></a>2 pre12 整数1 5 10的个数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// exp5 assignment1</span><br><span class="hljs-comment">// 整数的个数</span><br><span class="hljs-comment">// 给定k（1 &lt; k &lt; 100）个正整数，其中每个数都是大于等于1，小于等于10的数。</span><br><span class="hljs-comment">// 写程序计算给定的k个正整数中，1，5和10出现的次数。</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; k;<br>    <br>    <span class="hljs-type">int</span> num1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> num5 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> num10 = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp;<br>        cin &gt;&gt; tmp; <br>        <span class="hljs-keyword">if</span>(tmp == <span class="hljs-number">1</span>)&#123;num1++;&#125; <span class="hljs-comment">// 在输入的这个循环中，直接进行数字的判断就可以。可以仅用该中间变量，不用保存所有的输入数据。</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp == <span class="hljs-number">5</span>)&#123;num5++;&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp == <span class="hljs-number">10</span>)&#123;num10++;&#125;<br>    &#125;<br>    cout &lt;&lt; num1 &lt;&lt; endl;<br>    cout &lt;&lt; num5 &lt;&lt; endl;<br>    cout &lt;&lt; num10 &lt;&lt; endl;  <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-pre19-细菌实验分组"><a href="#3-pre19-细菌实验分组" class="headerlink" title="3 pre19 细菌实验分组"></a>3 pre19 细菌实验分组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// exp6 assignment2</span><br><span class="hljs-comment">// 细菌实验分组</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">有一种细菌分为A、B两个亚种，它们的外在特征几乎完全相同，仅仅在繁殖能力上有显著差别，A亚种繁殖能力非常强，B亚种的繁殖能力很弱。在一次为时一个 小时的细菌繁殖实验中，实验员由于疏忽把细菌培养皿搞乱了，请你编写一个程序，根据实验结果，把两个亚种的培养皿重新分成两组。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubble</span><span class="hljs-params">(<span class="hljs-type">int</span> *arraybianhao, <span class="hljs-type">float</span> *arrayfanzhilv, <span class="hljs-type">int</span> n)</span></span>; <span class="hljs-comment">// 注意一维数组作为函数参数时，声明时用指针的方式写！</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-type">int</span> bianhao[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> shiyanqian[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> shiyanhou[<span class="hljs-number">100</span>];<br><br>    <span class="hljs-type">float</span> fanzhilv[<span class="hljs-number">100</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; bianhao[i] &gt;&gt; shiyanqian[i] &gt;&gt; shiyanhou[i];  <span class="hljs-comment">// 这里其实不需要保存实验前和实验后的数据，因为该数据仅参与了计算繁殖率。</span><br>        fanzhilv[i] = (<span class="hljs-type">float</span>) shiyanhou[i] / shiyanqian[i];<br>    &#125;<br><br>    <span class="hljs-comment">// 繁殖率强的在前，繁殖率弱的在后</span><br>    <span class="hljs-built_in">bubble</span>(bianhao, fanzhilv, n); <span class="hljs-comment">// 调用自定义的冒泡排序函数，根据繁殖率大小，对编号和繁殖率进行排序。 </span><br><span class="hljs-comment">//这里注意，一维数组作为函数实参时候的写法，只用写数组名字就行，相当于输入的是一个地址。</span><br>    <span class="hljs-type">float</span> fanzhilvmax = fanzhilv[<span class="hljs-number">0</span>];  <span class="hljs-comment">// A强 B弱</span><br>    <span class="hljs-type">float</span> fanzhilvmin = fanzhilv[n - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-type">int</span> Anum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> Bnum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (fanzhilv[i] - fanzhilvmin &lt; fanzhilvmax - fanzhilv[i])  <span class="hljs-comment">// 注意怎么衡量繁殖率的高低</span><br>        &#123;<br>            Bnum++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Anum++;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; Anum &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = Anum - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">-1</span> ; i--)  <span class="hljs-comment">// 这里注意i的取值范围</span><br>    &#123;<br>        cout &lt;&lt; bianhao[i] &lt;&lt; endl;<br>    &#125;<br><br>    cout &lt;&lt; Bnum &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt; Anum <span class="hljs-number">-1</span>; i--) <span class="hljs-comment">// 这里注意i的取值范围</span><br>    &#123;<br>        cout &lt;&lt; bianhao[i] &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubble</span><span class="hljs-params">(<span class="hljs-type">int</span> *arraybianhao, <span class="hljs-type">float</span> *arrayfanzhilv, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> bianhaotmp;<br>    <span class="hljs-type">int</span> fanzhilvtmp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n - i; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (arrayfanzhilv[j] &gt; arrayfanzhilv[j - <span class="hljs-number">1</span>])  <span class="hljs-comment">// 根据繁殖率对编号和繁殖率同时排序。</span><br>            &#123;<br>                bianhaotmp = arraybianhao[j];<br>                arraybianhao[j] = arraybianhao[j - <span class="hljs-number">1</span>];<br>                arraybianhao[j - <span class="hljs-number">1</span>] = bianhaotmp;<br><br>                fanzhilvtmp = arrayfanzhilv[j];<br>                arrayfanzhilv[j] = arrayfanzhilv[j - <span class="hljs-number">1</span>];<br>                arrayfanzhilv[j - <span class="hljs-number">1</span>] = fanzhilvtmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-pre24-分离整数的各位数"><a href="#4-pre24-分离整数的各位数" class="headerlink" title="4 pre24 分离整数的各位数"></a>4 pre24 分离整数的各位数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// exp6 assignment2</span><br><span class="hljs-comment">// 分离整数的各位数</span><br><span class="hljs-comment">// 从键盘输入一个任意的9位以内的整数，要求正确地分离出它的每一位数，并分别在屏幕上输出，输出采用每行输出一个数的方式，不带其它符号。</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    cin &gt;&gt; x;<br><br>    <span class="hljs-type">int</span> array[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> d = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>)  <span class="hljs-comment">// 注意while结束的条件</span><br>    &#123;<br>        array[i] = x % d;<br>        x /= d;<br>        i++;<br>    &#125;<br><br>    <span class="hljs-comment">// x的位数:i</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">-1</span>; j--)<br>    &#123;<br>        cout &lt;&lt; array[j] &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-pre25-成绩判断"><a href="#5-pre25-成绩判断" class="headerlink" title="5 pre25 成绩判断"></a>5 pre25 成绩判断</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment3</span><br><span class="hljs-comment">// 成绩判断</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> score;<br>    cin &gt;&gt; score;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">95</span>&lt;= score &amp;&amp; score &lt;= <span class="hljs-number">100</span>)&#123;cout &lt;&lt; <span class="hljs-string">&#x27;1&#x27;</span>;&#125;  <span class="hljs-comment">// 注意用&amp;&amp;连接前后两个条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">90</span>&lt;= score &amp;&amp; score &lt; <span class="hljs-number">95</span>)&#123;cout &lt;&lt; <span class="hljs-string">&#x27;2&#x27;</span>;&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">85</span>&lt;= score &amp;&amp; score &lt; <span class="hljs-number">90</span>)&#123;cout &lt;&lt; <span class="hljs-string">&#x27;3&#x27;</span>;&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">80</span>&lt;= score &amp;&amp; score &lt; <span class="hljs-number">85</span>)&#123;cout &lt;&lt; <span class="hljs-string">&#x27;4&#x27;</span>;&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">70</span>&lt;= score &amp;&amp; score &lt;<span class="hljs-number">80</span>)&#123;cout &lt;&lt; <span class="hljs-string">&#x27;5&#x27;</span>;&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">60</span>&lt;= score &amp;&amp; score &lt; <span class="hljs-number">70</span>)&#123;cout &lt;&lt; <span class="hljs-string">&#x27;6&#x27;</span>;&#125;<br>    <span class="hljs-keyword">else</span>&#123;cout &lt;&lt;<span class="hljs-string">&#x27;7&#x27;</span>;&#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-pre43-找和为K的两个元素"><a href="#6-pre43-找和为K的两个元素" class="headerlink" title="6 pre43 找和为K的两个元素"></a>6 pre43 找和为K的两个元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment3</span><br><span class="hljs-comment">// 找和为K的两个元素</span><br><span class="hljs-comment">// 在一个长度为n(n &lt; 1000)的整数序列中，判断是否存在某两个元素之和为k。</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; n &gt;&gt; k;<br><br>    <span class="hljs-type">int</span> array[n];<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; array[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)  <span class="hljs-comment">// 注意看两次循环是否遍历了所有的可能</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (array[i] + array[j] == k)<br>            &#123;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)&#123;cout &lt;&lt; <span class="hljs-string">&quot;yes&quot;</span> &lt;&lt; endl;&#125;<br>    <span class="hljs-keyword">else</span> &#123;cout &lt;&lt; <span class="hljs-string">&quot;no&quot;</span> &lt;&lt; endl;&#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-pre49-最长单词"><a href="#7-pre49-最长单词" class="headerlink" title="7 pre49 最长单词"></a>7 pre49 最长单词</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment4</span><br><span class="hljs-comment">// 最长单词</span><br><span class="hljs-comment">// 一个以&#x27;.&#x27;结尾的简单英文句子，单词之间用空格分隔，没有缩写形式和其它特殊形式，求句子中的最长单词。</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> array[<span class="hljs-number">500</span>];<br><br>    <span class="hljs-built_in">fgets</span>(array, <span class="hljs-number">500</span>, stdin);<br><br>    <span class="hljs-type">int</span> location = <span class="hljs-number">0</span>; <span class="hljs-comment">// 最长单词的首字母下标</span><br>    <span class="hljs-type">int</span> place = <span class="hljs-number">0</span>; <span class="hljs-comment">// 出现新单词，则首字母下标就赋给place</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 每个单词字母数的统计</span><br>    <span class="hljs-type">int</span> maxword = <span class="hljs-number">0</span>; <span class="hljs-comment">// 最长单词的有多少个字母</span><br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-comment">// 遍历开始</span><br><br>    <span class="hljs-keyword">while</span> (array[i] != <span class="hljs-string">&#x27;.&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (array[i] == <span class="hljs-string">&#x27; &#x27;</span>)  <span class="hljs-comment">// 单词之间的空格情况</span><br>        &#123;<br>            i++;<br>        &#125;<br><br>        place = i;  <span class="hljs-comment">// 这代表了i是一个新单词的首字母的下标</span><br><br>        <span class="hljs-keyword">for</span> (; array[i] != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; array[i] != <span class="hljs-string">&#x27;.&#x27;</span>; i++) <span class="hljs-comment">// 对i循环，统计这个单词有多少个字母。这里for循环没有起始条件，是正确的。</span><br>        &#123;<br>            count++;<br>        &#125;<br><br>        <span class="hljs-comment">// cout &lt;&lt; &quot;ceshi count:&quot; &lt;&lt; count &lt;&lt; endl;</span><br><br>        <span class="hljs-keyword">if</span> (count &gt; maxword) <span class="hljs-comment">// 和已知的最长单词进行比较</span><br>        &#123;<br>            maxword = count;<br>            location = place;<br>        &#125;<br>        count = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 计数归零，重新寻开始循环，找其他单词。</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i = location; array[i] != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; array[i] != <span class="hljs-string">&#x27;.&#x27;</span>; i++)<br>    &#123;<br>        cout &lt;&lt; array[i];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-pre51-循环移动"><a href="#8-pre51-循环移动" class="headerlink" title="8 pre51 循环移动"></a>8 pre51 循环移动</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment4</span><br><span class="hljs-comment">// 循环移动</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">给定一组整数，要求利用数组把这组数保存起来，再利用指针实现对数组中的数循环移动。假定共有n个整数，则要使前面各数顺序向后移m个位置，并使最后m各数变为最前面的m各数。</span><br><span class="hljs-comment">注意，不要用先输出后m个数，再输出前n-m个数的方法实现，也不要用两个数组的方式实现。</span><br><span class="hljs-comment">要求只用一个数组的方式实现，一定要保证在输出结果时，输出的顺序和数组中数的顺序是一致的。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-type">int</span> array[n];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; array[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)  <span class="hljs-comment">// 这道题理解的方法就是画图，一步一步的慢慢来，就知道指针是怎么变化的了。</span><br>    &#123;<br>        <span class="hljs-type">int</span> *p;<br>        p = array + n - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> tmp = *p;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;n; j++)<br>        &#123;<br>            *p = *(p - <span class="hljs-number">1</span>);<br>            p--;<br>        &#125;<br>        *p = tmp;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; array[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-pre55-简单计算器"><a href="#9-pre55-简单计算器" class="headerlink" title="9 pre55 简单计算器"></a>9 pre55 简单计算器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 5</span><br><span class="hljs-comment">// 简单计算器</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-type">char</span> c;<br><br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br><br>    <span class="hljs-keyword">switch</span> (c)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span> : cout &lt;&lt; a + b; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span> : cout &lt;&lt; a - b; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span> : cout &lt;&lt; a * b; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span> :<br>            <span class="hljs-keyword">if</span> (b != <span class="hljs-number">0</span>)&#123;cout &lt;&lt; a / b; <span class="hljs-keyword">break</span>;&#125;  <span class="hljs-comment">// 除法的情况一定要注意被除数的取值情况</span><br>            <span class="hljs-keyword">else</span> &#123;cout &lt;&lt; <span class="hljs-string">&quot;Divided by zero!&quot;</span>; <span class="hljs-keyword">break</span>;&#125;<br>        <span class="hljs-keyword">default</span>: cout &lt;&lt; <span class="hljs-string">&quot;Invalid operator!&quot;</span>;  <span class="hljs-comment">//switch case语句，在default不需要break。 </span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-pre56-角谷猜想"><a href="#10-pre56-角谷猜想" class="headerlink" title="10 pre56 角谷猜想"></a>10 pre56 角谷猜想</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 7</span><br><span class="hljs-comment">// 角谷猜想</span><br><br><span class="hljs-comment">// 所谓角谷猜想，是指</span><br><span class="hljs-comment">// 对于任意一个正整数，如果是奇数，则乘 3 加 1，</span><br><span class="hljs-comment">// 如果是偶数，则除以2，</span><br><span class="hljs-comment">// 得到的结果再按照上述规则重复处理，最终总能够得到 1。</span><br><br><span class="hljs-comment">// 如，假定初始整数为 5，计算过程分别为 16、8、4、2、1。</span><br><br><span class="hljs-comment">// 程序要求输入一个整数，将经过处理得到 1 的过程输出来。</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">even</span><span class="hljs-params">(<span class="hljs-type">int</span> xx)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">odd</span><span class="hljs-params">(<span class="hljs-type">int</span> xx)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    cin &gt;&gt; x;<br><br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">1</span>)  <span class="hljs-comment">// 对x进行奇数操作和偶数操作，直到xx成为1才结束操作。</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>        &#123;<br>            x = <span class="hljs-built_in">even</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            x = <span class="hljs-built_in">odd</span>(x);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;End&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">even</span><span class="hljs-params">(<span class="hljs-type">int</span> xx)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ret = xx / <span class="hljs-number">2</span>;<br>    cout &lt;&lt; xx &lt;&lt; <span class="hljs-string">&#x27;/&#x27;</span> &lt;&lt; <span class="hljs-string">&#x27;2&#x27;</span> &lt;&lt; <span class="hljs-string">&#x27;=&#x27;</span> &lt;&lt; ret &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">odd</span><span class="hljs-params">(<span class="hljs-type">int</span> xx)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ret = xx * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br>    cout &lt;&lt; xx &lt;&lt; <span class="hljs-string">&#x27;*&#x27;</span> &lt;&lt; <span class="hljs-string">&quot;3+1&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;=&#x27;</span> &lt;&lt; ret &lt;&lt; endl;  <span class="hljs-comment">// 注意字符串和字符所使用的引号</span><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="11-pre58-括号匹配"><a href="#11-pre58-括号匹配" class="headerlink" title="11 pre58 括号匹配"></a>11 pre58 括号匹配</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 7</span><br><span class="hljs-comment">// 在某个字符串（长度不超过 100）中有左括号、右括号和大小写字母；</span><br><span class="hljs-comment">// 规定（与常见的算数式子一样）任何一个左括号都从内到外与在它右边且距离最近的右括号匹配。</span><br><span class="hljs-comment">// 写一个程序，找到无法匹配的左括号和右括号，输出原来字符串，并在下一行标出不能匹配的括号。</span><br><span class="hljs-comment">// 不能匹配的左括号用”$”标注, 不能匹配的右括号用”?” 标注.</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输入：</span><br><span class="hljs-comment">((ABCD(x)</span><br><span class="hljs-comment">)(rttyy())sss)(</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">输出:</span><br><span class="hljs-comment">((ABCD(x)</span><br><span class="hljs-comment">$$       </span><br><span class="hljs-comment">)(rttyy())sss)(</span><br><span class="hljs-comment">?            ?$</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>stack&lt;<span class="hljs-type">int</span>&gt; S; <span class="hljs-comment">// 定义堆栈，不要忘记stack的头文件</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> instr[<span class="hljs-number">1000</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    <span class="hljs-type">char</span> outstr[<span class="hljs-number">1000</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, instr) != EOF)   <span class="hljs-comment">// 这里注意，scanf()读取字符数组的时候，instr本身就是地址了；注意“!= EOF”的使用。</span><br>    &#123;<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; instr[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(instr[i] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>            &#123;<br>                S.<span class="hljs-built_in">push</span>(i); <span class="hljs-comment">// 把左括号的需要压入栈</span><br>                outstr[i] = <span class="hljs-string">&#x27; &#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (instr[i] == <span class="hljs-string">&#x27;)&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">empty</span>() == <span class="hljs-literal">false</span>) <span class="hljs-comment">// 栈非空，也就是有左括号。</span><br>                &#123;<br>                    S.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">// 左括号出栈。</span><br>                    outstr[i] = <span class="hljs-string">&#x27; &#x27;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    outstr[i] = <span class="hljs-string">&#x27;?&#x27;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                outstr[i] = <span class="hljs-string">&#x27; &#x27;</span>;<br>            &#125;<br>        &#125;<br>        outstr[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;  <span class="hljs-comment">// 输出的字符数组的结束标志</span><br><br>        <span class="hljs-type">int</span> k;<br>        <span class="hljs-keyword">while</span>(!S.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            k = S.<span class="hljs-built_in">top</span>();  <span class="hljs-comment">// 取栈顶元素</span><br>            outstr[k] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>            S.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 出栈</span><br>        &#125;<br>        <span class="hljs-built_in">fputs</span>(instr, stdout);<br>        cout &lt;&lt; endl;<br>        <span class="hljs-built_in">fputs</span>(outstr, stdout);<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="12-pre59-判断闰年"><a href="#12-pre59-判断闰年" class="headerlink" title="12 pre59 判断闰年"></a>12 pre59 判断闰年</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 5</span><br><span class="hljs-comment">// 判断闰年</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> year;<br>    cin &gt;&gt; year;<br><br>    <span class="hljs-keyword">if</span> ((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>))   <span class="hljs-comment">// 这个条件要记住</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;Y&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;N&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-pre60-寻找下标"><a href="#13-pre60-寻找下标" class="headerlink" title="13 pre60 寻找下标"></a>13 pre60 寻找下标</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 6</span><br><span class="hljs-comment">// 寻找下标</span><br><span class="hljs-comment">// 已知一个整数数组 x[], 其中的元素彼此都不相同。</span><br><span class="hljs-comment">// 找出给定的数组中是否有一个元素满足x[i] = i 的关系，数组下标从 0 开始。</span><br><span class="hljs-comment">// 举例而言，如果 x[] = −2, −1, 7, 3, 0, 8, 则 x[3] = 3, 因此 3 就是答案。</span><br><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> array[n];<br><br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; array[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == array[i])<br>        &#123;<br>            flag = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1000</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;N&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; flag;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-pre63-四大湖"><a href="#14-pre63-四大湖" class="headerlink" title="14 pre63 四大湖"></a>14 pre63 四大湖</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 6</span><br><span class="hljs-comment">// 四大湖</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">A 说：洞庭湖最大，洪泽湖最小，鄱阳湖第三。</span><br><span class="hljs-comment">B 说：洪泽湖最大，洞庭湖最小，鄱阳湖第二，太湖第三。</span><br><span class="hljs-comment">C 说：洪泽湖最小，洞庭湖第三。</span><br><span class="hljs-comment">D 说：鄱阳湖最大，太湖最小，洪泽湖第二，洞庭湖第三。</span><br><span class="hljs-comment">已知这 4 个湖的大小均不相等，4 个人每人仅答对一个，请编程按照鄱阳湖、洞庭湖、太湖、洪泽湖的顺序给出他们的大小排名。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// a 洞庭湖</span><br><span class="hljs-comment">// b 洪泽湖</span><br><span class="hljs-comment">// c 鄱阳湖</span><br><span class="hljs-comment">// d 太湖</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b, c, d;<br>    a = b = c = d = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(a = <span class="hljs-number">1</span>; a &lt;= <span class="hljs-number">4</span>; a++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(b = <span class="hljs-number">1</span>; b &lt;= <span class="hljs-number">4</span>; b++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(c = <span class="hljs-number">1</span>; c &lt;= <span class="hljs-number">4</span>; c++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (d = <span class="hljs-number">1</span>; d &lt;= <span class="hljs-number">4</span>; d++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (<br>                        (a != b &amp;&amp; a != c &amp;&amp; a != d &amp;&amp; b != c &amp;&amp; b != d &amp;&amp; c != d)<br>                        &amp;&amp;((a == <span class="hljs-number">1</span>) + (b == <span class="hljs-number">4</span>) + (c == <span class="hljs-number">3</span>) == <span class="hljs-number">1</span>)<br>                        &amp;&amp;((b == <span class="hljs-number">1</span>) + (a == <span class="hljs-number">4</span>) + (c == <span class="hljs-number">2</span>) + (d == <span class="hljs-number">3</span>) == <span class="hljs-number">1</span>)<br>                        &amp;&amp;((b == <span class="hljs-number">4</span>) + (a == <span class="hljs-number">3</span>) == <span class="hljs-number">1</span>)<br>                        &amp;&amp;((c == <span class="hljs-number">1</span>) + (d == <span class="hljs-number">4</span>) + (b == <span class="hljs-number">2</span>) + (a == <span class="hljs-number">3</span>) == <span class="hljs-number">1</span>)<br>                    )<br>                    &#123;<br>                        cout &lt;&lt; c &lt;&lt; endl;<br>                        cout &lt;&lt; a &lt;&lt; endl;<br>                        cout &lt;&lt; d &lt;&lt; endl;<br>                        cout &lt;&lt; b &lt;&lt; endl;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="15-pre66-文字排版"><a href="#15-pre66-文字排版" class="headerlink" title="15 pre66 文字排版"></a>15 pre66 文字排版</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 8</span><br><span class="hljs-comment">// 给一段英文短文，单词之间以空格分隔（每个单词包括其前后紧邻的标点符号）。请将短文重新排版，要求如下：</span><br><span class="hljs-comment">// 每行不超过80个字符；每个单词居于同一行上；在同一行的单词之间以一个空格分隔；行首和行尾都没有空格。</span><br><br><span class="hljs-comment">// 这个题目有点难，很绕</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cin &gt;&gt; num;<br>    <span class="hljs-type">char</span> danci[<span class="hljs-number">1000</span>][<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> zifushu[<span class="hljs-number">1000</span>];<br><br>    <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        cin &gt;&gt; danci[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; ;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (danci[i][j] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>            &#123;<br>                zifushu[i]++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> leiji = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> shuchudancishu = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        leiji = leiji + zifushu[i] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (leiji &gt; <span class="hljs-number">81</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(j = shuchudancishu; j &lt; i - <span class="hljs-number">1</span>; j++)<br>            &#123;<br>                cout &lt;&lt; danci[j] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            &#125;<br>            cout &lt;&lt; danci[j] &lt;&lt; endl;<br>            leiji = <span class="hljs-number">0</span>;<br>            shuchudancishu = i;<br>            i--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (j = shuchudancishu; j &lt; i <span class="hljs-number">-1</span>; j++)<br>    &#123;<br>        cout &lt;&lt; danci[j] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    cout &lt;&lt; danci[j] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-pre70-矩阵边缘"><a href="#16-pre70-矩阵边缘" class="headerlink" title="16 pre70 矩阵边缘"></a>16 pre70 矩阵边缘</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 8</span><br><span class="hljs-comment">// 输入一个整数矩阵，计算位于矩阵边缘的元素之和。</span><br><span class="hljs-comment">// 所谓矩阵边缘的元素，就是第一行和最后一行的元素以及第一列和最后一列的元素。</span><br><br><span class="hljs-comment">// 第一行为整数k，表示有k组数据。 </span><br><span class="hljs-comment">// 每组数据有多行组成，表示一个矩阵： 第一行分别为矩阵的行数m和列数n（1 &lt;= m &lt; 100，1 &lt;= n &lt; 100），两者之间以空格分隔。 </span><br><span class="hljs-comment">// 接下来输入的m行数据中，每行包含n个整数，整数之间以空格作为间隔。</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k;<br><br>    <span class="hljs-type">int</span> m, n;<br><br>    cin &gt;&gt; k;<br><br>    <span class="hljs-keyword">while</span> (k != <span class="hljs-number">0</span>) <span class="hljs-comment">// 关键部分</span><br>    &#123;<br>        cin &gt;&gt; m &gt;&gt; n;<br>        <span class="hljs-type">int</span> array[m][n];<br><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            &#123;<br>                cin &gt;&gt; array[i][j];<br>                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span> || i == (m - <span class="hljs-number">1</span>) || j == (n - <span class="hljs-number">1</span>)) <span class="hljs-comment">// 关键部分</span><br>                &#123;<br>                    sum += array[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        cout &lt;&lt; sum &lt;&lt; endl;<br><br>        k--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="17-pre72-配对碱基链"><a href="#17-pre72-配对碱基链" class="headerlink" title="17 pre72 配对碱基链"></a>17 pre72 配对碱基链</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 9</span><br><span class="hljs-comment">// 配对碱基链</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">5</span><br><span class="hljs-comment">A</span><br><span class="hljs-comment">TCG</span><br><span class="hljs-comment">ATCG</span><br><span class="hljs-comment">GCAAA</span><br><span class="hljs-comment">TTTTTT</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; k;<br>    <span class="hljs-built_in">getchar</span>(); <span class="hljs-comment">// 必要</span><br>    <span class="hljs-keyword">while</span> (k != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">char</span> lian[<span class="hljs-number">1000</span>];<br>        <span class="hljs-built_in">fgets</span>(lian, <span class="hljs-number">1000</span>, stdin);<br><br>        <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(lian);<br>        <span class="hljs-comment">// cout &lt;&lt; len &lt;&lt; endl;</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (lian[i] == <span class="hljs-string">&#x27;A&#x27;</span>) &#123; cout &lt;&lt;<span class="hljs-string">&#x27;T&#x27;</span>; &#125;<br>            <span class="hljs-keyword">if</span> (lian[i] == <span class="hljs-string">&#x27;T&#x27;</span>) &#123; cout &lt;&lt;<span class="hljs-string">&#x27;A&#x27;</span>; &#125;<br>            <span class="hljs-keyword">if</span> (lian[i] == <span class="hljs-string">&#x27;G&#x27;</span>) &#123; cout &lt;&lt;<span class="hljs-string">&#x27;C&#x27;</span>; &#125;<br>            <span class="hljs-keyword">if</span> (lian[i] == <span class="hljs-string">&#x27;C&#x27;</span>) &#123; cout &lt;&lt;<span class="hljs-string">&#x27;G&#x27;</span>; &#125;<br>        &#125;<br>        cout &lt;&lt; endl;<br><br>        k--;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="18-pre310-跳跃游戏"><a href="#18-pre310-跳跃游戏" class="headerlink" title="18 pre310 跳跃游戏"></a>18 pre310 跳跃游戏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 10</span><br><span class="hljs-comment">// 跳跃游戏</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> array[n];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; array[i];<br>    &#125;<br><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 计数器</span><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(count &lt;= <span class="hljs-number">20</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &gt; n - <span class="hljs-number">1</span> || k &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;no&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k == n - <span class="hljs-number">1</span>)<br>        &#123;<br>            cout &lt;&lt; k &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; array[k] &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;yes&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; k &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; array[k] &lt;&lt; endl;<br>            k += array[k];<br>            count++;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;no&quot;</span>; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-pre311-合法括号"><a href="#19-pre311-合法括号" class="headerlink" title="19 pre311 合法括号"></a>19 pre311 合法括号</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 10</span><br><span class="hljs-comment">// 合法括号</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> N 50000</span><br>stack&lt;<span class="hljs-type">int</span>&gt; S;  <span class="hljs-comment">// 定义栈</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">char</span> *array)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> array[N];<br>    <span class="hljs-built_in">fgets</span>(array, N, stdin);<br>    <span class="hljs-comment">// fputs(array, stdout);</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(array) == <span class="hljs-number">1</span>)&#123; cout &lt;&lt; <span class="hljs-string">&#x27;1&#x27;</span>;&#125;<br>    <span class="hljs-keyword">else</span>&#123; cout &lt;&lt; <span class="hljs-string">&#x27;0&#x27;</span>;&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">char</span> *array)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> *p;<br>    p = array;<br>    <span class="hljs-keyword">while</span>(*p != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        <span class="hljs-type">char</span> left = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-type">char</span> right = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-type">char</span> ch = *p;<br>        <span class="hljs-comment">// cout &lt;&lt;  &quot;ceshi:&quot; &lt;&lt; ch &lt;&lt; endl;</span><br>        <span class="hljs-keyword">switch</span>(ch)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>: S.<span class="hljs-built_in">push</span>(ch); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>: S.<span class="hljs-built_in">push</span>(ch); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>: S.<span class="hljs-built_in">push</span>(ch); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>: left = <span class="hljs-string">&#x27;(&#x27;</span>; right = ch; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#125;&#x27;</span>: left = <span class="hljs-string">&#x27;&#123;&#x27;</span>; right = ch; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>: left = <span class="hljs-string">&#x27;[&#x27;</span>; right = ch; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt;  &quot;ceshi:&quot; &lt;&lt; S.size() &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span> (right == ch)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">empty</span>())&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">char</span> t = S.<span class="hljs-built_in">top</span>(); <br>                S.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-comment">// 这里是C++ 栈的用法，pop()出栈不返回值，只删除栈顶元素。所以 t = S.pop()不行。</span><br>                <span class="hljs-comment">// 合适的做法就是先用top取栈顶元素，然后使用pop删除栈顶元素。</span><br>                <span class="hljs-keyword">if</span> (t != left)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>            &#125;<br>        &#125;<br>        p++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">empty</span>())&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="20-pre312-含k个3的数"><a href="#20-pre312-含k个3的数" class="headerlink" title="20 pre312 含k个3的数"></a>20 pre312 含k个3的数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 11</span><br><span class="hljs-comment">// 含k个3的数</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coutnum</span><span class="hljs-params">(<span class="hljs-type">int</span> mm)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-type">int</span> count = <span class="hljs-built_in">coutnum</span>(m);<br><br>    <span class="hljs-keyword">if</span> (m % <span class="hljs-number">19</span> == <span class="hljs-number">0</span> &amp;&amp; count == k)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coutnum</span><span class="hljs-params">(<span class="hljs-type">int</span> mm)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> cout = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (mm &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (mm % <span class="hljs-number">10</span> == <span class="hljs-number">3</span>)&#123;cout++;&#125;  <span class="hljs-comment">// 这个统计数字3个数的方法很巧妙</span><br>        mm /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> cout;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-pre314-运算符判定"><a href="#21-pre314-运算符判定" class="headerlink" title="21 pre314 运算符判定"></a>21 pre314 运算符判定</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// assignment 1</span><br><span class="hljs-comment">// 运算符判定</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">两个整数 a 和 b 运算后得到结果 c。表示为：a ? b = c，</span><br><span class="hljs-comment">其中，？可能是加法 +，减法 -，乘法 *，整除 / 或 取余 %。请根据输入的 a,b,c 的值，确定运算符。</span><br><span class="hljs-comment">如果某种运算成立，则输出相应的运算符，如果任何运算都不成立，则输出 error.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d,%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br><br>    <span class="hljs-keyword">if</span> (b != <span class="hljs-number">0</span>)  <span class="hljs-comment">// 被除数b是否为0要进行分类讨论</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (a + b == c)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;+&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a - b == c)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;-&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a * b == c)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;*&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a / b == c)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;/&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a % b == c)<br>        &#123;<br>            <span class="hljs-comment">// printf(&quot;%%&quot;);</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;%&quot;</span>;   <span class="hljs-comment">// 这里需要注意一下</span><br>            <span class="hljs-comment">// cout 直接可以输出‘%’</span><br>            <span class="hljs-comment">// printf 输出‘%%’才是‘%’</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;        <br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (a + b == c)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;+&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a - b == c)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;-&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a * b == c)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;*&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;        <br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="知识点复习"><a href="#知识点复习" class="headerlink" title="知识点复习"></a>知识点复习</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221222093703326.png"/><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><ul><li>什么时候用if、if-if-if-if……、if-else、if-else if-else if-else</li></ul><h3 id="关系运算、逻辑运算"><a href="#关系运算、逻辑运算" class="headerlink" title="关系运算、逻辑运算"></a>关系运算、逻辑运算</h3><ul><li>&amp;&amp;</li><li>||</li><li>!</li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>for</li><li>while</li><li>do while</li></ul><h3 id="整数取余、取赏"><a href="#整数取余、取赏" class="headerlink" title="整数取余、取赏"></a>整数取余、取赏</h3><ul><li>x%10</li><li>x\10（这里是利用是int型变量的特性，利用除法巧妙地去掉最后一位数。）</li></ul><h3 id="特殊类型整数分析判断：素数、偶数、最大公约数、最小公倍数、回文数"><a href="#特殊类型整数分析判断：素数、偶数、最大公约数、最小公倍数、回文数" class="headerlink" title="特殊类型整数分析判断：素数、偶数、最大公约数、最小公倍数、回文数"></a>特殊类型整数分析判断：素数、偶数、最大公约数、最小公倍数、回文数</h3><ul><li>素数（质数）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            flag = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag)&#123;cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; is not a prime&quot;</span> &lt;&lt; endl;&#125;<br>    <span class="hljs-keyword">else</span>&#123;cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; is a prime&quot;</span> &lt;&lt; endl;&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最大公约数(最大公因数)GCD &amp; 最小公倍数LCM</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 穷举法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> a, b;<br>  cin &gt;&gt; a &gt;&gt; b;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a; i&gt;<span class="hljs-number">0</span> ;i--)<br>  &#123;<br>    <span class="hljs-keyword">if</span>(a%i==<span class="hljs-number">0</span> &amp;&amp; b%i==<span class="hljs-number">0</span>)<br>    &#123;<br>        cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;和&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot;的最大公因数是&quot;</span> &lt;&lt; i &lt;&lt; endl;<br>        <span class="hljs-keyword">break</span>; <br>    &#125;<br>  &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 最大公约数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> y? <span class="hljs-built_in">gcd</span>(y,x%y):x;<br>&#125;<br><span class="hljs-comment">// 最小公倍数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a * b / <span class="hljs-built_in">gcd</span>(a, b);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a,b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; <span class="hljs-built_in">gcd</span>(a, b) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-built_in">lcm</span>(a, b) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>回文数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 最大公约数</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">121</span>;<br><br>    <span class="hljs-type">int</span> rnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> tmp = num;<br>    <span class="hljs-keyword">while</span>(tmp)<br>    &#123;<br>        <span class="hljs-type">int</span> r = tmp%<span class="hljs-number">10</span>;<br>        rnum = rnum*<span class="hljs-number">10</span> + r;  <span class="hljs-comment">// 反转。</span><br>        tmp /= <span class="hljs-number">10</span>; <br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (rnum == num)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Huiwen&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Not huiwen&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="十进制与二进制转换（位运算）"><a href="#十进制与二进制转换（位运算）" class="headerlink" title="十进制与二进制转换（位运算）"></a>十进制与二进制转换（位运算）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 输入一个10进制正整数和进制数，输出此10进制数的k进制中包含的1的个数</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">char</span> d[<span class="hljs-number">16</span>]=&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">turn</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span><span class="hljs-comment">//将n转为k进制 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;<br>r = n%k; <br>n = n/k;<br><span class="hljs-keyword">if</span>(n!=<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">turn</span>(n,k);&#125; <br>    cout &lt;&lt; <span class="hljs-string">&quot;ceshi1:&quot;</span> &lt;&lt; d[r] &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (d[r] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;count++;&#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x, m;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;m);<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">turn</span>(x,m);<br>    cout &lt;&lt; ret;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">运算符</th><th align="left">作用</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与</td><td align="left">两个操作数同时为1结果为1，只要有一个为0，结果为0</td></tr><tr><td align="left">|</td><td align="left">按位或</td><td align="left">两个操作数只要有一个为1，结果就为1</td></tr><tr><td align="left">~</td><td align="left">按位非</td><td align="left">操作数为1，结果为0；操作数为0，结果为1</td></tr><tr><td align="left">^</td><td align="left">按位非</td><td align="left">两个操作数相同，结果为0；不相同结果为1</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移</td><td align="left">右侧空位补0，左侧溢出舍弃</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移</td><td align="left">右端溢出舍弃，对于无符号数，高位补0。对于有符号数，某些机器将对左边空出的部分用符号位填补（即“算术移位”）</td></tr></tbody></table><h3 id="数组的定义、使用（元素访问、排序、修改值）"><a href="#数组的定义、使用（元素访问、排序、修改值）" class="headerlink" title="数组的定义、使用（元素访问、排序、修改值）"></a>数组的定义、使用（元素访问、排序、修改值）</h3><h3 id="函数的基本定义和实现"><a href="#函数的基本定义和实现" class="headerlink" title="函数的基本定义和实现"></a>函数的基本定义和实现</h3><h3 id="字符串的基本处理：统计长度、数量"><a href="#字符串的基本处理：统计长度、数量" class="headerlink" title="字符串的基本处理：统计长度、数量"></a>字符串的基本处理：统计长度、数量</h3><h3 id="递归运算"><a href="#递归运算" class="headerlink" title="递归运算"></a>递归运算</h3><ul><li><p>斐波那契数列；进制转换；汉诺塔；逆波兰表达式；放苹果（把这几个例子动手实现看看）</p></li><li><p>斐波那契数列</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// This program demonstrates a recursive function that calculates Fibonacci numbers.</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>; <span class="hljs-comment">// Function prototype</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;The first 10 Fibonacci numbers are: \n&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">10</span>; x++)<br>        cout &lt;&lt; <span class="hljs-built_in">fib</span>(x) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fib</span> <span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>) <span class="hljs-comment">//base case</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-comment">//base case</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">fib</span>(n - <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>进制转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 输入一个10进制正整数和进制数，输出此10进制数的k进制中包含的1的个数</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">char</span> d[<span class="hljs-number">16</span>]=&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">turn</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span><span class="hljs-comment">//将n转为k进制 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;<br>r = n%k; <br>n = n/k;<br><span class="hljs-keyword">if</span>(n!=<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">turn</span>(n,k);&#125; <br>    cout &lt;&lt; d[r];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x, m;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;m);<br><span class="hljs-built_in">turn</span>(x,m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>汉诺塔</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">hanoi</span><span class="hljs-params">(<span class="hljs-type">int</span> N ,<span class="hljs-type">char</span> source , <span class="hljs-type">char</span> relay ,<span class="hljs-type">char</span> destination)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(N == <span class="hljs-number">1</span>)<br>        cout &lt;&lt; source &lt;&lt; <span class="hljs-string">&quot;--&gt;&quot;</span> &lt;&lt; destination &lt;&lt; endl ;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">hanoi</span>(N<span class="hljs-number">-1</span> , source , destination , relay) ;<br>        cout &lt;&lt; source &lt;&lt; <span class="hljs-string">&quot;--&gt;&quot;</span> &lt;&lt; destination &lt;&lt; endl ;<br>        <span class="hljs-built_in">hanoi</span>(N<span class="hljs-number">-1</span> , relay , source , destination) ;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;移动盘子：&quot;</span> &lt;&lt; endl ;<br>    <span class="hljs-built_in">hanoi</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span> , <span class="hljs-string">&#x27;B&#x27;</span> , <span class="hljs-string">&#x27;C&#x27;</span>) ;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>逆波兰表达式</li></ul><blockquote><p>逆波兰表示法在求值时不需要使用括号，也不需要考虑优先级。</p><p>比如：<code>1 + 1 * 2</code> 转换为 <code>1 1 2 * +</code>，<code>(1 + 1) * 2</code> 转换为 <code>1 1 + 2 *</code>。</p></blockquote><p><a href="https://www.jb51.net/article/270518.htm">C++实现逆波兰表达式的例题详解_C 语言_脚本之家 (jb51.net)</a></p><ul><li>放苹果</li></ul><blockquote><p>递推递归算法解决放苹果问题：把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？（用K表示）5，1，1和1，5，1 是同一种分法。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>||n==<span class="hljs-number">1</span>) <br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(n&gt;m)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(m,m);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(m,n<span class="hljs-number">-1</span>)+<span class="hljs-built_in">f</span>(m-n,n);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> m,n,c;<br>cin&gt;&gt;c; <span class="hljs-comment">// 实验次数</span><br><span class="hljs-keyword">while</span>(c--)<br>&#123;<br>cin&gt;&gt;m&gt;&gt;n;<br>cout&lt;&lt;<span class="hljs-built_in">f</span>(m,n);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h1><h2 id="常用编辑器与编译器"><a href="#常用编辑器与编译器" class="headerlink" title="常用编辑器与编译器"></a>常用编辑器与编译器</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol><li>Microsoft Visual Studio  ⭐</li></ol><p><a href="https://visualstudio.microsoft.com/zh-hans/vs/">Visual Studio 2022 IDE - 适用于软件开发人员的编程工具 (microsoft.com)</a></p><p><a href="https://visualstudio.microsoft.com/zh-hans/free-developer-offers/">免费的开发人员软件和服务 - Visual Studio (microsoft.com)</a></p><p>在我心中<strong>Visual Studio 是全宇宙最强大的IDE</strong>（非嵌入式领域），唯唯诺诺(bushi)的Microsoft在VS这里我觉得是真巨硬！</p><blockquote><p><strong>集成开发环境</strong>（Integrated Development Environment，简称<strong>IDE</strong>，也称为Integration Design Environment、Integration Debugging Environment）是一种辅助程序开发人员开发<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94">软件</a>的<a href="https://zh.wikipedia.org/wiki/%E6%87%89%E7%94%A8%E8%BB%9F%E9%AB%94">应用软件</a>，在开发工具内部就可以辅助编写源代码文本、并编译打包成为可用的程序，有些甚至可以设计图形接口。</p><p>IDE通常包括<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8">编程语言编辑器</a>、<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA">自动构建</a>工具、通常还包括<a href="https://zh.wikipedia.org/wiki/%E9%99%A4%E9%8C%AF%E5%99%A8">调试器</a>。有些IDE包含<a href="https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8">编译器</a>／<a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8">解释器</a>，如微软的<a href="https://zh.wikipedia.org/wiki/Microsoft_Visual_Studio">Microsoft Visual Studio</a>，有些则不包含，如<a href="https://zh.wikipedia.org/wiki/Eclipse">Eclipse</a>、<a href="https://zh.wikipedia.org/wiki/SharpDevelop">SharpDevelop</a>等，这些IDE是通过调用第三方编译器来实现代码的编译工作的。有时IDE还会包含<a href="https://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">版本控制</a>系统和一些可以设计<a href="https://zh.wikipedia.org/wiki/%E5%9C%96%E5%BD%A2%E7%94%A8%E6%88%B6%E7%95%8C%E9%9D%A2">图形用户界面</a>的工具。许多支持<a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91">面向对象</a>的现代化IDE还包括了类别浏览器、对象查看器、对象结构图。虽然目前有一些IDE支持多种编程语言（例如<a href="https://zh.wikipedia.org/wiki/Eclipse">Eclipse</a>、<a href="https://zh.wikipedia.org/wiki/NetBeans">NetBeans</a>、<a href="https://zh.wikipedia.org/wiki/Microsoft_Visual_Studio">Microsoft Visual Studio</a>），但是一般而言，IDE主要还是针对特定的编程语言而量身打造（例如<a href="https://zh.wikipedia.org/wiki/Visual_Basic">Visual Basic</a>、<a href="https://zh.wikipedia.org/wiki/Spyder">Spyder</a>）。</p><p><a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">集成开发环境 - 维基百科，自由的百科全书 (wikipedia.org)</a></p></blockquote><p>编辑器：VS的用户界面</p><p>编译器：Visual C++ （简称 MSVC）</p><p>一个现代编译器的主要工作流程：源代码 (source code) →预处理器 (preprocessor) → 编译器 (compiler) → 汇编程序 (assembler) → 目标代码 (object code) → 链接器 (Linker) → 可执行程序 (executables)。</p><p>VS的编译器使用的是<strong>Visual C++ （简称 MSVC）</strong>是由微软开发的，只能用于 Windows 操作系统。</p><ul><li>优点：功能强大，非常非常强大！！！</li><li>缺点：操作较为复杂，更适合用在大型项目的开发中；过高的安全性，Microsoft为了追求安全性对很多函数进行了自定义，使用C&#x2F;C++的标准函数时，VS会直接报错；软件非常大，好像差不多20+GB。</li><li>总结：VS非常强大，但非适合所有的人，我平时用的最多的编程语言并不是C&#x2F;C++，并且写C&#x2F;C++时，也不怎么写很大的程序，所以我平时用VS很少，主要用下面提及的几种工具。但对于初学者来说，使用VS也算是一个不错的选择<em>（有利有弊）</em>，开发环境都配置好了，基本上来说就是无脑操作。</li></ul><hr><ol start="2"><li>Microsoft Visual Studio Code + MinGW-W64 GCC⭐</li></ol><p><a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a></p><p><a href="https://sourceforge.net/projects/mingw-w64/">MinGW-w64 - for 32 and 64 bit Windows download | SourceForge.net</a></p><p>编辑器：VScode</p><p>编译器：MinGW-W64 GCC</p><ul><li>VScode</li></ul><p>Microsoft在开源领域之前是做到非常差的，什么软件都和Windows进行捆绑，但Visual Studio Code的出现，让我对Microsoft有了一个新看法。</p><blockquote><p>VScode全称是Visual Studio Code，是微软推出的一个跨平台的<strong>编辑器</strong>，能够在windows、Linux、IOS等平台上运行，通过安装一些<strong>插件</strong>可以让这个<strong>编辑器变成一个编译器</strong>。 VSCode支持C++、Python、Java、C#、Go等多种语言，功能强大、插件丰富并且启动速度极快，值得每个开发人员尝试一把！</p></blockquote><p>简单来说，VSCode就是一个非常厉害的文本编辑器，但是他支持插件，配置好环境之后就能编写程序，编译，调试，运行。当VScode配置好开发环境之后，就相当于一个精简版的VS了。</p><ul><li>MinGW-W64 GCC</li></ul><p>MinGW 提供了一套简单方便的Windows下的基于GCC 程序开发环境。MinGW 收集了一系列免费的Windows 使用的头文件和库文件；同时整合了GNU ( <a href="http://www.gnu.org/">http://www.gnu.org/</a> )的工具集，特别是GNU 程序开发工具，如经典gcc, g++, make等。MinGW是完全免费的自由软件，它在Windows平台上模拟了Linux下GCC的开发环境，为C++的跨平台开发提供了良好基础支持，为了在Windows下工作的程序员熟悉Linux下的C++工程组织提供了条件。</p><ul><li>优点：简介，自定义程度强</li><li>缺点：配置环境较复杂，学习成本也比较高</li><li>总结：VScode是我目前用的比较多的，基本上所有我会的开发语言，我都会在VScode上进行。对于初学者可能要有一定的学习成本，但如果对VS的过于复杂的功能所困扰的话，可以尝试一下VScode + MinGW-W64 GCC</li></ul><hr><ol start="3"><li>Sublime Text + Microsoft Terminal + MinGW-W64 GCC⭐</li></ol><p><a href="https://www.sublimetext.com/">Sublime Text - Text Editing, Done Right</a></p><p><a href="https://docs.microsoft.com/en-us/windows/terminal/install">Windows Terminal installation | Microsoft Docs</a></p><p><a href="https://sourceforge.net/projects/mingw-w64/">MinGW-w64 - for 32 and 64 bit Windows download | SourceForge.net</a></p><p>这三个工具的组合本质上和 Microsoft Visual Studio Code + MinGW-W64 GCC 的功能一模一样！！但使用起来这三个工具的组合更像Vim + GCC。</p><p>Sublime Text比记事本功能强，比VSCode功能弱。</p><hr><ol start="4"><li>Vim + Microsoft Terminal + MinGW-W64 GCC</li></ol><p><a href="https://www.vim.org/download.php">download : vim online</a></p><p><a href="https://docs.microsoft.com/en-us/windows/terminal/install">Windows Terminal installation | Microsoft Docs</a></p><p><a href="https://sourceforge.net/projects/mingw-w64/">MinGW-w64 - for 32 and 64 bit Windows download | SourceForge.net</a></p><p>没想到吧！Windows下也有Vim。不赘述了</p><hr><ol start="5"><li>Dev-C++</li></ol><p><a href="https://sourceforge.net/projects/orwelldevcpp/">Dev-C++ download | SourceForge.net</a></p><p>对于Dev-C++我用的不是很多，只在我的Surface Go电脑上配置了一下，但也没怎么用过，也许可以说是低配版VS(?)</p><p>编辑器：Dev-C++的用户界面</p><p>编译器：MingW64&#x2F;TDM-GCC</p><p><a href="https://www.yisu.com/zixun/128349.html">dev c++是什么编译器？有什么优缺点？ - 行业资讯 - 亿速云 (yisu.com)</a></p><hr><ol start="6"><li>CLion + MinGW-W64 GCC</li></ol><p><a href="https://www.jetbrains.com/clion/">CLion: A Cross-Platform IDE for C and C++ by JetBrains</a></p><p>CLion是一个编辑器，没有内置编译和调试工具，所有也是要搭配MinGW-W64 GCC才能使用的。</p><p>CLion是商业软件，需要收费，我用的不是很多，不再赘述。</p><p>需要介绍一下的是Jet Brains，CLion就是该公司推出的一个软件，该公司的其他软件也非常有名且好用！</p><p>Jet Brains是一家<a href="https://baike.baidu.com/item/%E6%8D%B7%E5%85%8B/191121?fromModule=lemma_inlink">捷克</a>的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053?fromModule=lemma_inlink">软件</a>开发公司，该公司位于捷克的布拉格！</p><p><strong>IDE</strong></p><ul><li>Fleet - 下一代JetBrains 的 IDE</li><li><a href="https://baike.baidu.com/item/AppCode?fromModule=lemma_inlink">AppCode</a> - 适用于[ iOS](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> iOS&#x2F;45705?fromModule&#x3D;lemma_inlink)&#x2F;<a href="https://baike.baidu.com/item/macOS/8654551?fromModule=lemma_inlink">macOS</a> 开发的智能 <a href="https://baike.baidu.com/item/IDE/8232086?fromModule=lemma_inlink">IDE</a> </li><li>CLion - 支持 C 和 C++ 的<a href="https://baike.baidu.com/item/%E8%B7%A8%E5%B9%B3%E5%8F%B0/8558902?fromModule=lemma_inlink">跨平台</a> IDE </li><li>DataGrip - 多种<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728?fromModule=lemma_inlink">数据库</a>，一个工具 </li><li>GoLand - 专为 <a href="https://baike.baidu.com/item/Go/953521?fromModule=lemma_inlink">Go</a> 开发者设计的跨平台 IDE </li><li>[IntelliJ IDEA](<a href="https://baike.baidu.com/item/IntelliJ">https://baike.baidu.com/item/IntelliJ</a> IDEA?fromModule&#x3D;lemma_inlink) - 功能强大，符合<a href="https://baike.baidu.com/item/%E4%BA%BA%E4%BD%93%E5%B7%A5%E7%A8%8B%E5%AD%A6/3463?fromModule=lemma_inlink">人体工程学</a>的 JVM IDE <strong>（用过⭐）</strong></li><li><a href="https://baike.baidu.com/item/PHPStorm?fromModule=lemma_inlink">PHPStorm</a> - 高效智能的 PHP 集成开发工具 </li><li><a href="https://baike.baidu.com/item/PyCharm?fromModule=lemma_inlink">PyCharm</a> - 智能 <a href="https://baike.baidu.com/item/Python?fromModule=lemma_inlink">Python</a> 集成开发工具<strong>（用过⭐）</strong></li><li>Rider - 快速且强大的跨平台 <a href="https://baike.baidu.com/item/.NET/156737?fromModule=lemma_inlink">.NET</a> IDE </li><li><a href="https://baike.baidu.com/item/RubyMine?fromModule=lemma_inlink">RubyMine</a> - 最智能的 <a href="https://baike.baidu.com/item/Ruby/11419?fromModule=lemma_inlink">Ruby</a> 与 <a href="https://baike.baidu.com/item/Rails/10962333?fromModule=lemma_inlink">Rails</a> IDE </li><li><a href="https://baike.baidu.com/item/WebStorm?fromModule=lemma_inlink">WebStorm</a> - 最智能的 JavaScript IDE</li></ul><p><strong>.NET</strong></p><ul><li><a href="https://baike.baidu.com/item/ReSharper?fromModule=lemma_inlink">ReSharper</a> - 适用于.NET开发者的[Visual Studio](<a href="https://baike.baidu.com/item/Visual">https://baike.baidu.com/item/Visual</a> Studio&#x2F;539453?fromModule&#x3D;lemma_inlink)扩展 </li><li><a href="https://baike.baidu.com/item/dotCover?fromModule=lemma_inlink">dotCover</a> - .NET <a href="https://baike.baidu.com/item/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/1917084?fromModule=lemma_inlink">单元测试</a>运行程序和<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87/2048946?fromModule=lemma_inlink">代码覆盖率</a>工具 </li><li>dotMemory - .NET[ 内存](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> 内存&#x2F;103614?fromModule&#x3D;lemma_inlink)<a href="https://baike.baidu.com/item/%E5%88%86%E6%9E%90%E5%99%A8/6264997?fromModule=lemma_inlink">分析器</a> </li><li>dotPeek - 免费 .NET <a href="https://baike.baidu.com/item/%E5%8F%8D%E7%BC%96%E8%AF%91/8748947?fromModule=lemma_inlink">反编译</a>器和<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E9%9B%86/1700271?fromModule=lemma_inlink">程序集</a><a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911?fromModule=lemma_inlink">浏览器</a> </li><li><a href="https://baike.baidu.com/item/dotTrace?fromModule=lemma_inlink">dotTrace</a> - .NET[ 性能分析](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> 性能分析&#x2F;5621447?fromModule&#x3D;lemma_inlink)器</li></ul><p><em><strong>团队工具</strong></em></p><ul><li><p>Space - 集成的团队环境 </p></li><li><p><a href="https://baike.baidu.com/item/TeamCity?fromModule=lemma_inlink">TeamCity</a> - 安装即用的强大持续集成工具 </p></li><li><p><a href="https://baike.baidu.com/item/Upsource/17760979?fromModule=lemma_inlink">Upsource</a> - <a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/3591047?fromModule=lemma_inlink">代码审查</a>、<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/478999?fromModule=lemma_inlink">项目分析</a> </p></li><li><p><a href="https://baike.baidu.com/item/YouTrack?fromModule=lemma_inlink">YouTrack</a> - 为敏捷团队打造的项目管理工具 </p></li><li><p>Datalore - 提供智能编码辅助的<a href="https://baike.baidu.com/item/%E5%9C%A8%E7%BA%BF/3099560?fromModule=lemma_inlink">在线</a><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/23729296?fromModule=lemma_inlink">数据科学</a>笔记本</p></li><li><p>[Hub ](<a href="https://baike.baidu.com/item/Hub">https://baike.baidu.com/item/Hub</a> &#x2F;703984?fromModule&#x3D;lemma_inlink)- <a href="https://baike.baidu.com/item/YouTrack/7827020?fromModule=lemma_inlink">YouTrack</a>、[TeamCity ](<a href="https://baike.baidu.com/item/TeamCity">https://baike.baidu.com/item/TeamCity</a> &#x2F;3230218?fromModule&#x3D;lemma_inlink)和 Upsource 的<a href="https://baike.baidu.com/item/%E8%BF%9E%E6%8E%A5%E5%99%A8/9855439?fromModule=lemma_inlink">连接器</a></p></li></ul><p><em><strong>编程语言</strong></em></p><ul><li><a href="https://baike.baidu.com/item/Kotlin/1133714?fromModule=lemma_inlink">Kotlin</a> - 一个用于现代多平台应用的静态编程语言 。Kotlin可以编译成<a href="https://baike.baidu.com/item/Java%E5%AD%97%E8%8A%82%E7%A0%81/13025120?fromModule=lemma_inlink">Java字节码</a>，支持在<a href="https://baike.baidu.com/item/JVM/2902369?fromModule=lemma_inlink">JVM</a>上运行；也可以编译成<a href="https://baike.baidu.com/item/JavaScript/321142?fromModule=lemma_inlink">JavaScript</a>，方便在没有JVM的设备上运行。Kotlin已正式成为<a href="https://baike.baidu.com/item/Android/60243?fromModule=lemma_inlink">Android</a>官方支持开发语言。</li></ul><hr><hr><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ol><li>Vim + GCC⭐</li></ol><p>GCC的安装：<a href="https://developer.aliyun.com/article/766146">如何在 Ubuntu 20.04 上安装 GCC(build-essential)-阿里云开发者社区 (aliyun.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu没有提供C/C++的编译环境，因此还需要手动安装。但是如果单独安装gcc以及g++比较麻烦,但Ubuntu提供了一个build-essential软件包。</span><br><br><span class="hljs-comment"># 查看该软件包的依赖关系：</span><br>(base) ubuntu@VM-8-15-ubuntu:~$ apt-cache depends build-essential<br>build-essential<br> |Depends: libc6-dev<br>  Depends: &lt;libc-dev&gt;<br>    libc6-dev<br>  Depends: gcc<br>  Depends: g++<br>  Depends: make<br>    make-guile<br>  Depends: dpkg-dev<br></code></pre></td></tr></table></figure><p>编辑器：Vim：<a href="https://cosmicdusty.cc/post/Vim">Vim|Murphy</a></p><p>编译器：gcc&#x2F;g++：<a href="http://c.biancheng.net/view/475.html">Linux GCC简明教程（使用GCC编写C语言程序） (biancheng.net)</a></p><p>调试器：gdb：<a href="https://www.cnblogs.com/michaelcjl/p/14887123.html">Ubuntu1804下安装gdb与使用 - michaelchengjl - 博客园 (cnblogs.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install gbd<br><br>gbd --version<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) ubuntu@VM-8-15-ubuntu:~$ gdb --version<br>GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2<br>Copyright (C) 2020 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br></code></pre></td></tr></table></figure><p>Linux上简单的C&#x2F;C++程序是编写与运行我还会一点点，但程序复杂了，运行报错我看不懂了，需要调试器gbd的参与了，那这个时候我也凉凉了，因为我也不怎么会。还是那句话，我现在主要用到编程语言并不是C，很多复杂的东西我也不会😥😭。</p><hr><ol start="2"><li>使用VScode SSH 连接云服务器 ⭐</li></ol><p><a href="https://code.visualstudio.com/docs/remote/ssh-tutorial">Connect over SSH with Visual Studio Code</a></p><p>这是我目前使用Linux系统最常用的方法了！</p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://cosmicdusty.cc/post/Windows%E7%AB%AF%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95">Windows端个人常用软件清单|Murphy</a></p><p><a href="https://www.cnblogs.com/just-like-this/p/11893293.html">VS2019提示scanf不安全问题 - Townmacro - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/Jack_joker/article/details/120638114">VScode 看这一篇就够了_Jack_joker的博客-CSDN博客_vscode</a></p><p><a href="https://blog.csdn.net/itas109/article/details/99698227">MinGW-w64简介_itas109的博客-CSDN博客_mingw64是什么</a></p><p><a href="https://blog.csdn.net/jpcfei/article/details/6428613">MinGW 是什么？_大儿童梦里花开的博客-CSDN博客_mingw是什么</a></p><p><a href="https://baike.baidu.com/item/JetBrains/7502758">JetBrains_百度百科 (baidu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/406832557">最适合C&#x2F;C++语言初学者使用的编译软件—–Dev-C++的详细下载安装教程！</a></p><hr><hr><hr><h2 id="查看C-C-编译器所实现的标准"><a href="#查看C-C-编译器所实现的标准" class="headerlink" title="查看C&amp;C++编译器所实现的标准"></a>查看C&amp;C++编译器所实现的标准</h2><h3 id="Language-Standards"><a href="#Language-Standards" class="headerlink" title="Language Standards"></a>Language Standards</h3><p>Language standards requires the existence of pre-defined macros.</p><table><thead><tr><th align="left">Name</th><th align="left">Macro</th><th align="left">Standard</th></tr></thead><tbody><tr><td align="left">C89</td><td align="left"><code>__STDC__</code></td><td align="left">ANSI X3.159-1989</td></tr><tr><td align="left">C90</td><td align="left"><code>__STDC__</code></td><td align="left">ISO&#x2F;IEC 9899:1990</td></tr><tr><td align="left">C94</td><td align="left"><code>__STDC_VERSION__</code> &#x3D; 199409L</td><td align="left">ISO&#x2F;IEC 9899-1:1994</td></tr><tr><td align="left"><a href="http://www.open-std.org/jtc1/sc22/wg14/">C99</a></td><td align="left"><code>__STDC_VERSION__</code> &#x3D; 199901L</td><td align="left">ISO&#x2F;IEC 9899:1999</td></tr><tr><td align="left"><a href="http://en.wikipedia.org/wiki/C11_(C_standard_revision)">C11</a></td><td align="left"><code>__STDC_VERSION__</code> &#x3D; 201112L</td><td align="left">ISO&#x2F;IEC 9899:2011</td></tr><tr><td align="left"><a href="https://en.wikipedia.org/wiki/C18_(C_standard_revision)">C18</a></td><td align="left"><code>__STDC_VERSION__</code> &#x3D; 201710L</td><td align="left">ISO&#x2F;IEC 9899:2018</td></tr><tr><td align="left"><a href="http://www.open-std.org/jtc1/sc22/wg21/">C++98</a></td><td align="left"><code>__cplusplus</code> &#x3D; 199711L</td><td align="left">ISO&#x2F;IEC 14882:1998</td></tr><tr><td align="left"><a href="http://en.wikipedia.org/wiki/C%2B%2B11">C++11</a></td><td align="left"><code>__cplusplus</code> &#x3D; 201103L</td><td align="left">ISO&#x2F;IEC 14882:2011</td></tr><tr><td align="left"><a href="http://en.wikipedia.org/wiki/C%2B%2B14">C++14</a></td><td align="left"><code>__cplusplus</code> &#x3D; 201402L</td><td align="left">ISO&#x2F;IEC 14882:2014</td></tr><tr><td align="left"><a href="http://en.wikipedia.org/wiki/C%2B%2B17">C++17</a></td><td align="left"><code>__cplusplus</code> &#x3D; 201703L</td><td align="left">ISO&#x2F;IEC 14882:2017</td></tr><tr><td align="left"><a href="http://www.ecma-international.org/publications/standards/Ecma-372.htm">C++&#x2F;CLI</a></td><td align="left"><code>__cplusplus_cli</code> &#x3D; 200406L</td><td align="left">ECMA-372</td></tr><tr><td align="left"><a href="http://www.dsp-c.org/">DSP-C</a></td><td align="left"></td><td align="left">ISO&#x2F;IEC JTC1&#x2F;SC22 WG14&#x2F;N854</td></tr><tr><td align="left"><a href="http://www.caravan.net/ec2plus/">EC++</a></td><td align="left"><code>__embedded_cplusplus</code></td><td align="left">Embedded C++</td></tr></tbody></table><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><table><thead><tr><th>年份</th><th>C标准</th><th>通用名</th><th>别名</th><th>标准编译选项</th><th>GNU扩展选项</th></tr></thead><tbody><tr><td>1972</td><td>Birth C</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>1978</td><td>K&amp;R C</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>1989-1990</td><td>X3.159-1989, ISO&#x2F;IEC 9899:1990</td><td>C89</td><td>C90, ANSI C, ISO C</td><td>-ansi, -std&#x3D;c90, -std&#x3D;iso9899:1990</td><td>-std&#x3D;gnu90</td></tr><tr><td>1995</td><td>ISO&#x2F;IEC 9899&#x2F;AMD1:1995</td><td>AMD1</td><td>C94, C95</td><td>-std&#x3D;iso9899:199409</td><td>-</td></tr><tr><td>1999</td><td>ISO&#x2F;IEC 9899:1999</td><td>C99</td><td>-</td><td>-std&#x3D;c99, -std&#x3D;iso9899:1999</td><td>-std&#x3D;gnu99</td></tr><tr><td>2011</td><td>ISO&#x2F;IEC 9899:2011</td><td>C11</td><td>-</td><td>-std&#x3D;c11, -std&#x3D;iso9899:2011</td><td>-std&#x3D;gnu11</td></tr><tr><td>2018</td><td>ISO&#x2F;IEC 9899:2018</td><td>C18</td><td>-</td><td>-std&#x3D;c18, -std&#x3D;iso9899:2018</td><td>-std&#x3D;gnu18</td></tr></tbody></table><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><table><thead><tr><th>年份</th><th>C++标准</th><th>通用名</th><th>别名</th><th>标准编译选项</th><th>GNU扩展选项</th></tr></thead><tbody><tr><td>1978</td><td>C with Classes</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>1998</td><td>ISO&#x2F;IEC 14882:1998</td><td>C++98</td><td>-</td><td>-std&#x3D;c++98</td><td>-std&#x3D;gnu++98</td></tr><tr><td>2003</td><td>ISO&#x2F;IEC 14882:2003</td><td>C++03</td><td>-</td><td>-std&#x3D;c++03</td><td>-std&#x3D;gnu++03</td></tr><tr><td>2011</td><td>ISO&#x2F;IEC 14882:2011</td><td>C++11</td><td>C++0x</td><td>std&#x3D;c++11, std&#x3D;c++0x</td><td>std&#x3D;gnu++11, std&#x3D;gnu++0x</td></tr><tr><td>2014</td><td>ISO&#x2F;IEC 14882:2014</td><td>C++14</td><td>C++1y</td><td>std&#x3D;c++14, std&#x3D;c++1y</td><td>std&#x3D;gnu++14, std&#x3D;gnu++1y</td></tr><tr><td>2017</td><td>ISO&#x2F;IEC 14882:2017</td><td>C++17</td><td>C++1z</td><td>std&#x3D;c++17, std&#x3D;c++1z</td><td>std&#x3D;gnu++17, std&#x3D;gnu++1z</td></tr><tr><td>2020</td><td>to be determined</td><td>C++20</td><td>C++2a</td><td>-std&#x3D;c++2a</td><td>std&#x3D;gnu++2a</td></tr></tbody></table><p>C编译器的标准</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, __STDC__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld\n&quot;</span>,__STDC_VERSION__);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>C++编译器的标准</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld\n&quot;</span>,__cplusplus);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/blog/HighlevelLanguageProgramming.assets/image-20221003120708294.png" alt="image-20221003120708294"></p><h3 id="gcc-g"><a href="#gcc-g" class="headerlink" title="gcc&#x2F;g++"></a>gcc&#x2F;g++</h3><blockquote><p>gcc发展到今天已经不单单可以编译C语言了，还可以编译C++、Java、Object-C等多种其他语言<br>有一种说法是GCC的全名是GNU Compiler Collection(GUN 编译器集合)，而gcc是GCC中用于编译c语言的编译器<br>事实上，gcc看起来并不像是一个编译器，而像一个调度器，针对于不同的文件调用不同编程语言的编译器<br>对于后缀为*.c的文件，gcc把它当作是C语言程序源代码，而g++当作是C++程序源代码<br>对于后缀为*.cpp的文件，gcc和g++都会当作是C++程序源代码<br>使用g++编译文件时，g++会自动链接标准库STL，而gcc不会自动链接STL，所以再使用gcc编译C++程序是有时会报错<br>在用gcc编译C++文件时，为了能够使用STL，需要加参数 –lstdc++ ，但这并不代表 gcc –lstdc++ 和 g++等价<br>据说g++会调用gcc，对于C++代码，因为gcc命令不能自动和C++程序使用的库联接，所以通常用g++来完成链接<br>需要注意的是，虽说g++会调用gcc，对于*.c文件来说，编译出来的可执行文件也不一样，因为gcc会当成C语言程序编译，而g++调用的gcc会把它当做C++语言程序来编译，这或许就能解释为什么用g++就可以编译所有C&#x2F;C++的程序，还要有gcc的存在（就我测试来看，同样的C语言代码，g++编译出来的程序体积要大一些）</p></blockquote><h3 id="C语言的标准变化"><a href="#C语言的标准变化" class="headerlink" title="C语言的标准变化"></a>C语言的标准变化</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/363380373">C语言标准——C89、C99、C11、C17、C2x … - 知乎 (zhihu.com)</a></p></blockquote><blockquote><h2 id="C的标准化过程"><a href="#C的标准化过程" class="headerlink" title="C的标准化过程"></a><strong>C的标准化过程</strong></h2><p>C语言自诞生到现在，期间经历了多次标准化过程，主要分成以下几个阶段：</p><h3 id="Traditional-C"><a href="#Traditional-C" class="headerlink" title="Traditional C"></a><strong>Traditional C</strong></h3><p>此时的 C 语言还没有标准化，来自“C Programming Language, First Edition, by Brian W. Kernighan, Dennis M. Ritchie. Prentice Hall PTR 1978”的 C 描述可算作“正式”的标准，所以此时的 C 也称为“K&amp;R” C。</p><p>期间 C 语言一直不断的发生细微的变化，各编译器厂商也有自己的扩展，这个过程一直持续到20世纪80年代末。</p><h3 id="C89"><a href="#C89" class="headerlink" title="C89"></a><strong>C89</strong></h3><p>考虑到标准化的重要，ANSI（American National Standards Institute）制定了第一个 C 标准，在1989年被正式采用（American National Standard X3.159-1989），故称为 C89，也称为 ANSI C。</p><p>该标准随后被 ISO 采纳，成为国际标准（ISO&#x2F;IEC 9899:1990）。</p><p>C89 的主要改动：</p><ul><li>定义了 C 标准库；</li><li>新的预处理命令和特性；</li><li>函数原型（prototype）；</li><li>新关键字：const、volatile、signed；</li><li>宽字符、宽字符串和多字节字符；</li><li>转化规则、声明（declaration）、类型检查的改变。</li></ul><h3 id="C95"><a href="#C95" class="headerlink" title="C95"></a><strong>C95</strong></h3><p>这是对 C89 的一个修订和扩充，称为“C89 with Amendment 1”或 C95，严格说来并不是一个真正的标准。</p><p>C95 的主要改动：</p><ul><li>3个新标准头文件：iso646.h、wctype.h、wchar.h；</li><li>一些新的标记（token）和宏（macro）；</li><li>一些新的 printf&#x2F;scanf 系列函数的格式符；</li><li>增加了大量的宽字符和多字节字符函数、常数和类型。</li></ul><h3 id="C99"><a href="#C99" class="headerlink" title="C99"></a><strong>C99</strong></h3><p>1999年，在做了一些必要的修正和完善后，ISO 发布了新的 C 语言标准，命名为 ISO&#x2F;IEC 9899:1999，简称“C99”。</p><p>C99 的主要改动：</p><ul><li>复数（complex）；</li><li>整数（integer）类型扩展；</li><li>变长数组；</li><li>Boolean 类型；</li><li>非英语字符集的更好支持；</li><li>浮点类型的更好支持；</li><li>提供全部类型的数学函数；</li><li>C++ 风格注释（<code>//</code>）。</li></ul><h3 id="C11"><a href="#C11" class="headerlink" title="C11"></a><strong>C11</strong></h3><p>2007 年，C语言标准委员会又重新开始修订C语言，到了 2011 年正式发布了 ISO&#x2F;IEC 9899:2011，简称为 C11 标准。</p><p>C11 标准新引入的特征尽管没 C99 相对 C90 引入的那么多，但是这些也都十分有用，比如：字节对齐说明符、泛型机制（generic selection）、对多线程的支持、静态断言、原子操作以及对 Unicode 的支持。</p><h3 id="C17"><a href="#C17" class="headerlink" title="C17"></a><strong>C17</strong></h3><p>C17（也被称为为 C18）是于2018年6月发布的 ISO&#x2F;IEC 9899:2018 的非正式名称，也是目前（截止到2020年6月）为止最新的 C语言编程标准，被用来替代 C11 标准。</p><p>C17 没有引入新的语言特性，只对 C11 进行了补充和修正。</p><h3 id="C2x"><a href="#C2x" class="headerlink" title="C2x"></a><strong>C2x</strong></h3><p>下一个版本的 C 标准，预计将于2022年12月1日完成。</p><p>有许多人提出想为 C 语言添加面向对象的特性，包括增加类、继承、多态等已被 C++ 语言所广泛使用的语法特性，但是最终被委员会驳回了。因为这些复杂的语法特性并不符合 C 语言的设计理念以及设计哲学，况且 C++ 已经有了这些特性，C 语言无需再对它们进行支持。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C/C++</tag>
      
      <tag>电子信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习PyTorch</title>
    <link href="/blog/post/AI/LearnPyTorch/"/>
    <url>/blog/post/AI/LearnPyTorch/</url>
    
    <content type="html"><![CDATA[<ul><li>DataLoader</li></ul><p>torch.utils.data.DataLoader：<br>Data loader. Combines a dataset and a sampler, and provides an iterable over the given dataset.</p><ul><li>Flatten</li></ul><p>torch.nn.Flatten(<em>start_dim&#x3D;1</em>, <em>end_dim&#x3D;-  1</em>)</p><ul><li>model.train() &amp; model.eval()</li></ul><p>在使用<code>Pytorch</code>进行模型的训练和测试时，我们总能在训练部分的最前面看到<code>model.train()</code>，在测试部分最前面看到<code>model.eval()</code>。<br><a href="https://blog.csdn.net/qq_52852138/article/details/123769937">Pytorch model.train()_长命百岁️的博客-CSDN博客_pytorch中model.train</a></p><blockquote><p>主要是对<code>Batch Normalization</code> 和 <code>Dropout</code> 层有影响。因为这两层在训练和测试时进行的操作是不同的。</p></blockquote><p><code>model.train()</code><br>设置模型为训练模式，即<br>•  <code>BatchNorm</code>  层利用每个 batch 来统计<br>•  <code>Dropout</code>  层激活</p><p><code>model.eval()</code><br>设置模型为评估&#x2F;推理模式，即<br>•  <code>BatchNorm</code>  layers use running statistics<br>•<code>Dropout</code>  层取消。<br>等效于  <code>model.train(False)</code>。</p><h1 id="参数量估计"><a href="#参数量估计" class="headerlink" title="参数量估计"></a>参数量估计</h1><p><a href="https://blog.csdn.net/qq_33952811/article/details/124276599">https://blog.csdn.net/qq_33952811/article/details/124276599</a></p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32控制舵机实现自动开关灯</title>
    <link href="/blog/post/Ideas/ESP32ControlsServo/"/>
    <url>/blog/post/Ideas/ESP32ControlsServo/</url>
    
    <content type="html"><![CDATA[<p>这是第四次把电子制作捡起来又放下，捡起来是因为刚刚搬了校区，感觉可以收拾一下宿舍，实现自动化开关电灯；放下是因为只完成了电路部分的制作，机械方面自己没有知识储备，自己做不出来了。😅😥😭</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这次项目其实很简单，B站上也有很多相似的项目。ESP32驱动舵机，舵机固定在电灯开关上，从而实现开灯。将ESP32通过Blinker接入天猫精灵，从而实现了语音唤醒功能。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220907201340790.png" alt="image-20220907201340790"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/demo_bb.png" alt="demo_bb"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/demo_pcb.png" alt="demo_pcb"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/demo_%E5%9B%BE%E7%A4%BA.png" alt="demo_图示"></p><h1 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h1><h2 id="版本1-网页端"><a href="#版本1-网页端" class="headerlink" title="版本1 - 网页端"></a>版本1 - 网页端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP32Servo.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WiFi.h&gt;</span></span><br><br>Servo myservo;  <span class="hljs-comment">// 定义Servo对象来控制</span><br><span class="hljs-type">int</span> pos = <span class="hljs-number">90</span>;    <span class="hljs-comment">// 角度存储变量</span><br><br><br><span class="hljs-comment">// WIFI信息</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssid = <span class="hljs-string">&quot;ssid&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* password = <span class="hljs-string">&quot;passwrod&quot;</span>;<br><br><span class="hljs-comment">// Set web server port number to 80</span><br>WiFiServer <span class="hljs-title function_">server</span><span class="hljs-params">(<span class="hljs-number">80</span>)</span>;<br><br><span class="hljs-comment">// 变量来存储HTTP请求</span><br>String header;<br><br><span class="hljs-comment">// 用于存储当前输出状态的辅助变量</span><br>String output26State = <span class="hljs-string">&quot;off&quot;</span>;<br>String output27State = <span class="hljs-string">&quot;off&quot;</span>;<br><br><span class="hljs-comment">// 配置输出引脚号</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> output26 = <span class="hljs-number">26</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> output27 = <span class="hljs-number">27</span>;<br><br><span class="hljs-comment">// 设置静态IP信息（配置信息前需要对将要接入的wifi网段有了解）</span><br>IPAddress <span class="hljs-title function_">local_IP</span><span class="hljs-params">(<span class="hljs-number">192</span>, <span class="hljs-number">168</span>, <span class="hljs-number">1</span>, <span class="hljs-number">111</span>)</span>;<br><span class="hljs-comment">// 设置静态IP网关</span><br>IPAddress <span class="hljs-title function_">gateway</span><span class="hljs-params">(<span class="hljs-number">192</span>, <span class="hljs-number">168</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span>;<br><br>IPAddress <span class="hljs-title function_">subnet</span><span class="hljs-params">(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span>;<br>IPAddress <span class="hljs-title function_">primaryDNS</span><span class="hljs-params">(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>)</span>;   <span class="hljs-comment">//optional</span><br>IPAddress <span class="hljs-title function_">secondaryDNS</span><span class="hljs-params">(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>)</span>; <span class="hljs-comment">//optional</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">kaideng</span><span class="hljs-params">()</span>&#123;<br>  myservo.write(pos);<br>  delay(<span class="hljs-number">2000</span>);<br>  myservo.write(pos+<span class="hljs-number">45</span>);<br>  delay(<span class="hljs-number">1000</span>);<br>  myservo.write(pos);<br>  delay(<span class="hljs-number">2000</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">guandeng</span><span class="hljs-params">()</span>&#123;<br>  myservo.write(pos);<br>  delay(<span class="hljs-number">2000</span>);<br>  myservo.write(pos<span class="hljs-number">-45</span>);<br>  delay(<span class="hljs-number">1000</span>);<br>  myservo.write(pos);<br>  delay(<span class="hljs-number">2000</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  <br>  myservo.attach(<span class="hljs-number">16</span>);  <span class="hljs-comment">// 控制线 GPIO16</span><br>  <br>  Serial.begin(<span class="hljs-number">115200</span>);<br>  <span class="hljs-comment">// Initialize the output variables as outputs</span><br>  pinMode(output26, OUTPUT);<br>  pinMode(output27, OUTPUT);<br>  <span class="hljs-comment">// Set outputs to LOW</span><br>  digitalWrite(output26, LOW);<br>  digitalWrite(output27, LOW);<br><br>  <span class="hljs-comment">// Configures static IP address</span><br>  <span class="hljs-keyword">if</span> (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) &#123;<br>    Serial.println(<span class="hljs-string">&quot;STA Failed to configure&quot;</span>);<br>  &#125;<br>  <br>  <span class="hljs-comment">// Connect to Wi-Fi network with SSID and password</span><br>  Serial.print(<span class="hljs-string">&quot;Connecting to &quot;</span>);<br>  Serial.println(ssid);<br>  WiFi.begin(ssid, password);<br>  <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    delay(<span class="hljs-number">500</span>);<br>    Serial.print(<span class="hljs-string">&quot;.&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">// Print local IP address and start web server</span><br>  Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>  Serial.println(<span class="hljs-string">&quot;WiFi connected.&quot;</span>);<br>  Serial.println(<span class="hljs-string">&quot;IP address: &quot;</span>);<br>  Serial.println(WiFi.localIP());<br>  server.begin();<br>&#125;<br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span>&#123;<br>  WiFiClient client = server.available();   <span class="hljs-comment">// Listen for incoming clients</span><br><br>  <span class="hljs-keyword">if</span> (client) &#123;                             <span class="hljs-comment">// If a new client connects,</span><br>    Serial.println(<span class="hljs-string">&quot;New Client.&quot;</span>);          <span class="hljs-comment">// print a message out in the serial port</span><br>    String currentLine = <span class="hljs-string">&quot;&quot;</span>;                <span class="hljs-comment">// make a String to hold incoming data from the client</span><br>    <span class="hljs-keyword">while</span> (client.connected()) &#123;            <span class="hljs-comment">// loop while the client&#x27;s connected</span><br>      <span class="hljs-keyword">if</span> (client.available()) &#123;             <span class="hljs-comment">// if there&#x27;s bytes to read from the client,</span><br>        <span class="hljs-type">char</span> c = client.read();             <span class="hljs-comment">// read a byte, then</span><br>        Serial.write(c);                    <span class="hljs-comment">// print it out the serial monitor</span><br>        header += c;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;                    <span class="hljs-comment">// if the byte is a newline character</span><br>          <span class="hljs-comment">// if the current line is blank, you got two newline characters in a row.</span><br>          <span class="hljs-comment">// that&#x27;s the end of the client HTTP request, so send a response:</span><br>          <span class="hljs-keyword">if</span> (currentLine.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)</span><br>            <span class="hljs-comment">// and a content-type so the client knows what&#x27;s coming, then a blank line:</span><br>            client.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            client.println(<span class="hljs-string">&quot;Content-type:text/html&quot;</span>);<br>            client.println(<span class="hljs-string">&quot;Connection: close&quot;</span>);<br>            client.println();<br>            <br>            <span class="hljs-comment">// turns the GPIOs on and off</span><br>            <span class="hljs-keyword">if</span> (header.indexOf(<span class="hljs-string">&quot;GET /26/on&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>              Serial.println(<span class="hljs-string">&quot;GPIO 26 on&quot;</span>);<br>              output26State = <span class="hljs-string">&quot;on&quot;</span>;<br>              digitalWrite(output26, HIGH);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (header.indexOf(<span class="hljs-string">&quot;GET /26/off&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>              Serial.println(<span class="hljs-string">&quot;GPIO 26 off&quot;</span>);<br>              output26State = <span class="hljs-string">&quot;off&quot;</span>;<br>              digitalWrite(output26, LOW);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (header.indexOf(<span class="hljs-string">&quot;GET /27/on&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>              Serial.println(<span class="hljs-string">&quot;GPIO 27 on&quot;</span>);<br>              output27State = <span class="hljs-string">&quot;on&quot;</span>;<br>              digitalWrite(output27, HIGH);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (header.indexOf(<span class="hljs-string">&quot;GET /27/off&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>              Serial.println(<span class="hljs-string">&quot;GPIO 27 off&quot;</span>);<br>              output27State = <span class="hljs-string">&quot;off&quot;</span>;<br>              digitalWrite(output27, LOW);<br>            &#125;<br><br>            <span class="hljs-comment">// 访问显示页面</span><br>            client.println(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&quot;</span>);          <br>            client.println(<span class="hljs-string">&quot;&lt;head&gt;&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1\&quot;&gt;&quot;</span>);<br>            client.println(<span class="hljs-string">&quot;&lt;meta charset=\&quot;UTF-8\&quot;&gt;&quot;</span>);<br>            client.println(<span class="hljs-string">&quot;&lt;link rel=\&quot;icon\&quot; href=\&quot;data:,\&quot;&gt;&quot;</span>);<br>            <span class="hljs-comment">// CSS to style the on/off buttons </span><br>            <span class="hljs-comment">// Feel free to change the background-color and font-size attributes to fit your preferences</span><br>            client.println(<span class="hljs-string">&quot;&lt;style&gt;html &#123; font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;&#125;&quot;</span>);<br>            client.println(<span class="hljs-string">&quot;.button &#123; background-color: #4CAF50; border: none; color: white; padding: 16px 40px;&quot;</span>);<br>            client.println(<span class="hljs-string">&quot;text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;&#125;&quot;</span>);<br>            client.println(<span class="hljs-string">&quot;.button2 &#123;background-color: #555555;&#125;&lt;/style&gt;&lt;/head&gt;&quot;</span>);<br>            <br>            <span class="hljs-comment">// Web Page Heading</span><br>            client.println(<span class="hljs-string">&quot;&lt;body&gt;&lt;h1&gt;ESP32 Web Server&lt;/h1&gt;&quot;</span>);<br>            <br>            <span class="hljs-comment">// Display current state, and ON/OFF buttons for GPIO 26  </span><br>            client.println(<span class="hljs-string">&quot;&lt;p&gt;GPIO 26 - 状态 &quot;</span> + output26State + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>);<br>            <span class="hljs-comment">// If the output26State is off, it displays the ON button       </span><br>            <span class="hljs-keyword">if</span> (output26State==<span class="hljs-string">&quot;off&quot;</span>) &#123;<br>              client.println(<span class="hljs-string">&quot;&lt;p&gt;&lt;a href=\&quot;/26/on\&quot;&gt;&lt;button class=\&quot;button\&quot;&gt;开&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              client.println(<span class="hljs-string">&quot;&lt;p&gt;&lt;a href=\&quot;/26/off\&quot;&gt;&lt;button class=\&quot;button button2\&quot;&gt;关&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&quot;</span>);<br>            &#125; <br>               <br>            <span class="hljs-comment">// Display current state, and ON/OFF buttons for GPIO 27  </span><br>            client.println(<span class="hljs-string">&quot;&lt;p&gt;GPIO 27 - 状态 &quot;</span> + output27State + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>);<br>            <span class="hljs-comment">// If the output27State is off, it displays the ON button       </span><br>            <span class="hljs-keyword">if</span> (output27State==<span class="hljs-string">&quot;off&quot;</span>) &#123;<br>              client.println(<span class="hljs-string">&quot;&lt;p&gt;&lt;a href=\&quot;/27/on\&quot;&gt;&lt;button class=\&quot;button\&quot;&gt;开&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              client.println(<span class="hljs-string">&quot;&lt;p&gt;&lt;a href=\&quot;/27/off\&quot;&gt;&lt;button class=\&quot;button button2\&quot;&gt;关&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&quot;</span>);<br>            &#125;<br>            client.println(<span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>            <br>            <span class="hljs-comment">// The HTTP response ends with another blank line</span><br>            client.println();<br>            <span class="hljs-comment">// Break out of the while loop</span><br>            <span class="hljs-keyword">break</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// if you got a newline, then clear currentLine</span><br>            currentLine = <span class="hljs-string">&quot;&quot;</span>;<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;\r&#x27;</span>) &#123;  <span class="hljs-comment">// if you got anything else but a carriage return character,</span><br>          currentLine += c;      <span class="hljs-comment">// add it to the end of the currentLine</span><br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// Clear the header variable</span><br>    header = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">// Close the connection</span><br>    <br><br>            <br>    client.stop();<br>    Serial.println(<span class="hljs-string">&quot;Client disconnected.&quot;</span>);<br>    Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (digitalRead(output26) == HIGH)&#123;kaideng(); Serial.println(<span class="hljs-string">&quot;已开灯&quot;</span>);&#125;<br>  <span class="hljs-keyword">if</span> (digitalRead(output27) == HIGH)&#123;guandeng();Serial.println(<span class="hljs-string">&quot;已关灯&quot;</span>);&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="版本2-接入天猫精灵"><a href="#版本2-接入天猫精灵" class="headerlink" title="版本2 - 接入天猫精灵"></a>版本2 - 接入天猫精灵</h2><p>使用点灯科技Blinker</p><p>参考资料：</p><p><a href="https://diandeng.tech/home">点灯科技 (diandeng.tech)</a></p><p><a href="https://github.com/blinker-iot">blinker (github.com)</a></p><p><a href="https://github.com/blinker-iot/blinker-library">blinker-iot&#x2F;blinker-library: An IoT Solution,Blinker library for embedded hardware. Works with Arduino, ESP8266, ESP32. (github.com)</a></p><p><a href="https://github.com/blinker-iot/blinker-library/releases/tag/0.3.7">Release upgrade v0.3.7 · blinker-iot&#x2F;blinker-library (github.com)</a></p><p><a href="https://www.bilibili.com/video/BV187411w7yk?p=1">基本功能展示_哔哩哔哩_bilibili</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 天猫精灵控制舵机实现开关灯</span><br><span class="hljs-comment">// 5V-红线</span><br><span class="hljs-comment">// gnd-棕线</span><br><span class="hljs-comment">// GPIO16-橙</span><br><br><span class="hljs-comment">// ssd1306</span><br><span class="hljs-comment">// 3.3v-vcc</span><br><span class="hljs-comment">// gnd-gnd</span><br><span class="hljs-comment">// GPIO21-scl</span><br><span class="hljs-comment">// GPIO22-sda</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BLINKER_WIFI</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BLINKER_ALIGENIE_MULTI_OUTLET</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Blinker.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP32Servo.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;SSD1306.h&quot;</span> </span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SDA 21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCL 22</span><br><span class="hljs-comment">// SSD 引脚设置</span><br>SSD1306 <span class="hljs-title function_">display</span><span class="hljs-params">(<span class="hljs-number">0x3c</span>, SDA, SCL)</span>;<br><br><br>Servo myservo;  <span class="hljs-comment">// 定义Servo对象来控制</span><br><span class="hljs-type">int</span> pos = <span class="hljs-number">90</span>;    <span class="hljs-comment">// 角度存储变量</span><br><br><br><span class="hljs-comment">// 定义开关灯函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">kaideng</span><span class="hljs-params">()</span>&#123;<br>  myservo.write(pos);<br>  delay(<span class="hljs-number">2000</span>);<br>  myservo.write(pos+<span class="hljs-number">45</span>);<br>  delay(<span class="hljs-number">1000</span>);<br>  myservo.write(pos);<br>  delay(<span class="hljs-number">2000</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">guandeng</span><span class="hljs-params">()</span>&#123;<br>  myservo.write(pos);<br>  delay(<span class="hljs-number">2000</span>);<br>  myservo.write(pos<span class="hljs-number">-45</span>);<br>  delay(<span class="hljs-number">1000</span>);<br>  myservo.write(pos);<br>  delay(<span class="hljs-number">2000</span>);<br>&#125;<br><br><br><span class="hljs-type">char</span> auth[] = <span class="hljs-string">&quot;从点灯科技获取&quot;</span>;<br><span class="hljs-type">char</span> ssid[] = <span class="hljs-string">&quot;ssid&quot;</span>;<br><span class="hljs-type">char</span> pswd[] = <span class="hljs-string">&quot;pswd&quot;</span>;<br><br><span class="hljs-type">bool</span> oState[<span class="hljs-number">5</span>] = &#123; <span class="hljs-literal">false</span> &#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">aligeniePowerState</span><span class="hljs-params">(<span class="hljs-type">const</span> String &amp; state, <span class="hljs-type">uint8_t</span> num)</span><br>&#123;<br>    BLINKER_LOG(<span class="hljs-string">&quot;need set outlet: &quot;</span>, num, <span class="hljs-string">&quot;, power state: &quot;</span>, state);<br><br>    <span class="hljs-keyword">if</span> (state == BLINKER_CMD_ON) &#123;<br>        digitalWrite(LED_BUILTIN, HIGH);<br><br>        BlinkerAliGenie.powerState(<span class="hljs-string">&quot;on&quot;</span>, num);<br>        kaideng();<br>        BlinkerAliGenie.print();<br><br>        oState[num] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == BLINKER_CMD_OFF) &#123;<br>        digitalWrite(LED_BUILTIN, LOW);<br><br>        BlinkerAliGenie.powerState(<span class="hljs-string">&quot;off&quot;</span>, num);<br>        guandeng();<br>        BlinkerAliGenie.print();<br><br>        oState[num] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">uint8_t</span> o_num = <span class="hljs-number">0</span>; o_num &lt; <span class="hljs-number">5</span>; o_num++)<br>            &#123;<br>                oState[o_num] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">aligenieQuery</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> queryCode, <span class="hljs-type">uint8_t</span> num)</span><br>&#123;<br>    BLINKER_LOG(<span class="hljs-string">&quot;AliGenie Query outlet: &quot;</span>, num,<span class="hljs-string">&quot;, codes: &quot;</span>, queryCode);<br><br>    <span class="hljs-keyword">switch</span> (queryCode)<br>    &#123;<br>        <span class="hljs-keyword">case</span> BLINKER_CMD_QUERY_ALL_NUMBER :<br>            BLINKER_LOG(<span class="hljs-string">&quot;AliGenie Query All&quot;</span>);<br>            BlinkerAliGenie.powerState(oState[num] ? <span class="hljs-string">&quot;on&quot;</span> : <span class="hljs-string">&quot;off&quot;</span>, num);<br>            BlinkerAliGenie.print();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> BLINKER_CMD_QUERY_POWERSTATE_NUMBER :<br>            BLINKER_LOG(<span class="hljs-string">&quot;AliGenie Query Power State&quot;</span>);<br>            BlinkerAliGenie.powerState(oState[num] ? <span class="hljs-string">&quot;on&quot;</span> : <span class="hljs-string">&quot;off&quot;</span>, num);<br>            BlinkerAliGenie.print();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span> :<br>            BlinkerAliGenie.powerState(oState[num] ? <span class="hljs-string">&quot;on&quot;</span> : <span class="hljs-string">&quot;off&quot;</span>, num);<br>            BlinkerAliGenie.print();<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dataRead</span><span class="hljs-params">(<span class="hljs-type">const</span> String &amp; data)</span><br>&#123;<br>    BLINKER_LOG(<span class="hljs-string">&quot;Blinker readString: &quot;</span>, data);<br><br>    Blinker.vibrate();<br>    <br>    <span class="hljs-type">uint32_t</span> BlinkerTime = millis();<br>    <br>    Blinker.print(<span class="hljs-string">&quot;millis&quot;</span>, BlinkerTime);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span><br>&#123;<br>    Serial.begin(<span class="hljs-number">115200</span>);<br>    BLINKER_DEBUG.stream(Serial);<br><br>    pinMode(LED_BUILTIN, OUTPUT);<br>    digitalWrite(LED_BUILTIN, LOW);<br><br>    Blinker.begin(auth, ssid, pswd);<br>    Blinker.attachData(dataRead);<br>    <br>    BlinkerAliGenie.attachPowerState(aligeniePowerState);<br>    BlinkerAliGenie.attachQuery(aligenieQuery);<br><br>    <span class="hljs-comment">// 设置舵机信号线</span><br>    myservo.attach(<span class="hljs-number">16</span>);  <span class="hljs-comment">// GPIO16</span><br>    ssdinit();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ssdinit</span><span class="hljs-params">()</span>&#123;<br><br>  <span class="hljs-comment">// 设置OLED显示的内容</span><br>  <span class="hljs-comment">// 128*64</span><br>  display.init();<br> <br>  display.setFont(ArialMT_Plain_10);<br>  display.drawString(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Hello World&quot;</span>);<br> <br>  display.setFont(ArialMT_Plain_16);<br>  display.drawString(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;Hello World&quot;</span>);<br> <br>  display.setFont(ArialMT_Plain_24);<br>  display.drawString(<span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;Hello World&quot;</span>);<br> <br>  display.display();<br>&#125;<br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span><br>&#123;<br>    Blinker.run();<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="放弃"><a href="#放弃" class="headerlink" title="放弃"></a>放弃</h1><p>不知道怎么固定到电灯的开关上，考虑使用化学胶水或热熔胶，但均具有不可复用性，方案被否决。于是想学一下3D建模！</p><p>软件：Autodesk Fusion 360</p><p>参考教程：</p><p><a href="https://www.bilibili.com/video/BV1Fb4y1R7wQ">如何正当免费地获取Fusion 360建模软件_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1xf4y127ay?vd_source=6d46640a443a49f050af078d1f65143e">Autodesk Fusion 360 一小时入门 （录播）_哔哩哔哩_bilibili</a></p><p>建模太无聊了，暂时先放弃！脱实向虚，我还是继续写程序去吧！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/li6727975/article/details/42040767">Fritzing添加新的元件库的方法_飘飘花吹雪的博客-CSDN博客_fritzing元件库不见了</a></p><p><a href="https://forum.fritzing.org/t/fritzing-part-of-an-esp32/5355/3">https://forum.fritzing.org/t/fritzing-part-of-an-esp32/5355/3</a></p><p><em>其余参考资料在正文中</em></p>]]></content>
    
    
    <categories>
      
      <category>奇思妙想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>ESP</tag>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程环境</title>
    <link href="/blog/post/Knowledge/PythonDevelopmentEnvironment/"/>
    <url>/blog/post/Knowledge/PythonDevelopmentEnvironment/</url>
    
    <content type="html"><![CDATA[<p>之前在Windows上面进行程序写作和运行的时候，使用的都是原生的Python和pip，但自从开始学习深度学习时，发现很多项目都是在Conda环境下进行的，于是我也在Windows上下载了Conda，我选择的时Miniconda。</p><p>这就出现了一个问题，在命令行中运行python是调用的什么呢？两者会不会出现什么冲突?</p><h1 id="Windows-下同时安装了Python和Conda"><a href="#Windows-下同时安装了Python和Conda" class="headerlink" title="Windows 下同时安装了Python和Conda"></a>Windows 下同时安装了Python和Conda</h1><p><em>首先吐槽一下微软，目前Windows下的CMD还没有被powershell完全替代掉，一部分命令在powershell上面并不能运行。另外，在Windows Terminal上，powershell的代码高亮做的很好但是不能显示当前的python环境；CMD上面没有代码高亮，但是能显示python环境。所以两者都不算完美。</em></p><p>更新：<br>这个问题可以解决，在Terminal中运行<code>conda init powershell</code>,然后重启Terminal之后就可以了！<br>参考：<a href="https://blog.csdn.net/qq_49641239/article/details/110248262">解决Powershell前面没有base，无法激活虚拟环境问题</a></p><h2 id="CMD与Powershell"><a href="#CMD与Powershell" class="headerlink" title="CMD与Powershell"></a>CMD与Powershell</h2><p>​命令提示符是在操作系统中，提示进行命令输入的一种工作提示符。在不同的操作系统环境下，命令提示符各不相同。 在windows环境下，命令行程序为cmd.exe，是一个32位的命令行程序，微软Windows系统基于Windows上的命令解释程序，类似于微软的DOS操作系统。输入一些命令，cmd.exe可以执行，比如输入shutdown -s就会在30秒后关机。总之，它非常有用。打开方法：开始-所有程序-附件 或 开始-寻找-输入：cmd&#x2F;cmd.exe 回车。它也可以执行BAT文件。</p><p>​PowerShell 是一种跨平台的任务自动化和配置管理框架，由命令行管理程序和脚本语言组成。 与大多数接受并返回文本的 shell 不同，PowerShell 构建在 .NET 公共语言运行时 (CLR) 的基础之上，接受并返回 .NET 对象。 这一根本上的改变引入了全新的自动化工具和方法。</p><p>最浅显的区别就是：CMD写的BAT脚本我们看作是面向过程的，直白点说就是你是从计算机执行的流程来编写脚本的。而PowerShell则是面向对象的,是一种站在使用者的角度进行脚本的编写.</p><p>功能上：</p><p>CMD只能执行基本的任务，本身并没有集成太多的功能,大多依赖于第三方的程序,比如PING命令，其实是一个单独的应用程序，而不是CMD本身的一条命令。</p><p>PowerShell因为是基于.NET面向对象的,而且本身就内置了非常多的命令。使得它不管从功能上还是性能上都要比CMD要强大得多。</p><p>可以这么说，CMD能办的事,PowerShell基本都就能办，但PowerShell能办的事,CMD遥不可及。</p><p>目前唯一CMD比PowerShell强的一点就是所有版本的Windows中都自带有CMD，包括XP和2003这些很老的操作系统，而PowerShell要在XP和2003里用起来，就需要使用安装包安装.但这不熟于技术范畴，只是目前的环境造就了这个优势，而且不久的将来，这个微弱的优势也将不复存在，因为新版本的Windows中都已经内置了PowerShell了。</p><p><code>where python</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\DELL&gt;<span class="hljs-built_in">where</span> python<br>D:\Miniconda\python.exe     //自己下载的Miniconda<br>D:\Python\Python3.8.6\python.exe     //自己下载的原生Python<br>C:\Users\DELL\AppData\Local\Microsoft\WindowsApps\python.exe     //在Microsoft Store 下载的Python3.7 即使卸载了也删不掉，并且也用不了，不管了。<br><br>C:\Users\DELL&gt;<span class="hljs-built_in">where</span> python3<br>C:\Users\DELL\AppData\Local\Microsoft\WindowsApps\python3.exe  //在Microsoft Store 下载的Python3.7 即使卸载了也删不掉，并且也用不了，不管了。<br></code></pre></td></tr></table></figure><p>可以看到，我的计算机中有两个Python(不管MS store中下载的那个)。</p><p>在命令行中直接进入Python环境，系统选择的是哪个python呢?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\DELL&gt;python<br>Python 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32<br><br>Warning:<br>This Python interpreter is <span class="hljs-keyword">in</span> a conda environment, but the environment has<br>not been activated.  Libraries may fail to load.  To activate this environment<br>please see https://conda.io/activation<br><br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>可以看到，Terminal调用的是Miniconda的环境。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220731141445938.png" alt="image-20220731141445938"></p><p>在配置环境变量时，可以选择Python和Conda的先后顺序，Terminal默认调用的是位于前面的那个环境。</p><p><strong>只是偶尔使用python写一下小程序的话，我感觉电脑上只需要配置python的环境就可以了。但是如果要进行复杂的程序开发的话，比如深度学习之类的，我感觉使用conda比python要更好。</strong></p><p><strong>未来我可能会只选择使用Conda！！！</strong></p><h1 id="Conda虚拟环境的切换"><a href="#Conda虚拟环境的切换" class="headerlink" title="Conda虚拟环境的切换"></a>Conda虚拟环境的切换</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\DELL&gt;conda <span class="hljs-built_in">env</span> list<br><span class="hljs-comment"># conda environments:</span><br><span class="hljs-comment">#</span><br>base                  *  D:\Miniconda<br>aipy38                   D:\Miniconda\envs\aipy38<br><br><br>C:\Users\DELL&gt;conda info<br><br>     active environment : None<br>            shell level : 0<br>       user config file : C:\Users\DELL\.condarc<br> populated config files :<br>          conda version : 4.9.2<br>    conda-build version : not installed<br>         python version : 3.8.5.final.0<br>       virtual packages : __cuda=11.6=0<br>                          __win=0=0<br>                          __archspec=1=x86_64<br>       base environment : D:\Miniconda  (writable)<br>           channel URLs : https://repo.anaconda.com/pkgs/main/win-64<br>                          https://repo.anaconda.com/pkgs/main/noarch<br>                          https://repo.anaconda.com/pkgs/r/win-64<br>                          https://repo.anaconda.com/pkgs/r/noarch<br>                          https://repo.anaconda.com/pkgs/msys2/win-64<br>                          https://repo.anaconda.com/pkgs/msys2/noarch<br>          package cache : D:\Miniconda\pkgs<br>                          C:\Users\DELL\.conda\pkgs<br>                          C:\Users\DELL\AppData\Local\conda\conda\pkgs<br>       envs directories : D:\Miniconda\envs<br>                          C:\Users\DELL\.conda\envs<br>                          C:\Users\DELL\AppData\Local\conda\conda\envs<br>               platform : win-64<br>             user-agent : conda/4.9.2 requests/2.25.1 CPython/3.8.5 Windows/10 Windows/10.0.19041<br>          administrator : False<br>             netrc file : None<br>           offline mode : False<br></code></pre></td></tr></table></figure><p>Conda比原生python的好处在于，conda可以建立很多虚拟环境，实现库隔离！</p><p><em>Terminal-CMD</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\DELL&gt;conda activate base<br><br>(base) C:\Users\DELL&gt;pip -V<br>pip 20.2.4 from D:\Miniconda\lib\site-packages\pip (python 3.8)<br><br>(base) C:\Users\DELL&gt;conda deactivate<br><br><br><br>C:\Users\DELL&gt;conda activate aipy38<br><br>(aipy38) C:\Users\DELL&gt;pip -V<br>pip 21.2.2 from D:\Miniconda\envs\aipy38\lib\site-packages\pip (python 3.8)<br><br>(aipy38) C:\Users\DELL&gt;pip list<br>Package                      Version<br>---------------------------- -------------------<br>absl-py                      1.0.0<br>argon2-cffi                  21.3.0<br>argon2-cffi-bindings         21.2.0<br>asttokens                    2.0.5<br>astunparse                   1.6.3<br>attrs                        21.4.0<br>backcall                     0.2.0<br>beautifulsoup4               4.10.0<br>bleach                       4.1.0<br>cachetools                   5.0.0<br>certifi                      2021.10.8<br>cffi                         1.15.0<br>chardet                      3.0.4<br>colorama                     0.4.4<br>cycler                       0.11.0<br>d2l                          0.17.4<br>d2lzh                        1.0.0<br>debugpy                      1.5.1<br>decorator                    5.1.1<br>defusedxml                   0.7.1<br>entrypoints                  0.4<br>executing                    0.8.3<br>flatbuffers                  2.0<br>gast                         0.5.3<br>google-auth                  2.6.2<br>google-auth-oauthlib         0.4.6<br>google-pasta                 0.2.0<br>grpcio                       1.45.0<br>h5py                         3.6.0<br>idna                         2.6<br>importlib-metadata           4.11.3<br>importlib-resources          5.4.0<br>ipykernel                    6.9.2<br>ipython                      8.1.1<br>ipython-genutils             0.2.0<br>ipywidgets                   7.7.0<br>jedi                         0.18.1<br>Jinja2                       3.0.3<br>jsonschema                   4.4.0<br>jupyter                      1.0.0<br>jupyter-client               7.1.2<br>jupyter-console              6.4.3<br>jupyter-core                 4.9.2<br>jupyterlab-pygments          0.1.2<br>jupyterlab-widgets           1.1.0<br>keras                        2.8.0<br>Keras-Preprocessing          1.1.2<br>kiwisolver                   1.4.0<br>libclang                     13.0.0<br>Markdown                     3.3.6<br>MarkupSafe                   2.1.1<br>matplotlib                   3.4.0<br>matplotlib-inline            0.1.3<br>mccabe                       0.6.1<br>mistune                      0.8.4<br>nbclient                     0.5.13<br>nbconvert                    6.4.4<br>nbformat                     5.2.0<br>nest-asyncio                 1.5.4<br>notebook                     6.4.10<br>numpy                        1.22.2<br>oauthlib                     3.2.0<br>opt-einsum                   3.3.0<br>packaging                    21.3<br>pandas                       1.2.4<br>pandocfilters                1.5.0<br>parso                        0.8.3<br>pickleshare                  0.7.5<br>Pillow                       9.0.1<br>pip                          21.2.2<br>prometheus-client            0.13.1<br>prompt-toolkit               3.0.28<br>protobuf                     3.20.0<br>psutil                       5.9.0<br>pure-eval                    0.2.2<br>pyasn1                       0.4.8<br>pyasn1-modules               0.2.8<br>pycparser                    2.21<br>Pygments                     2.11.2<br>pyparsing                    3.0.7<br>pyrsistent                   0.18.1<br>python-dateutil              2.8.2<br>pytz                         2022.1<br>pywin32                      303<br>pywinpty                     2.0.5<br>pyzmq                        22.3.0<br>qtconsole                    5.2.2<br>QtPy                         2.0.1<br>requests                     2.25.1<br>requests-oauthlib            1.3.1<br>rsa                          4.8<br>scipy                        1.8.0<br>Send2Trash                   1.8.0<br>setuptools                   58.0.4<br>six                          1.16.0<br>soupsieve                    2.3.1<br>stack-data                   0.2.0<br>tensorboard                  2.8.0<br>tensorboard-data-server      0.6.1<br>tensorboard-plugin-wit       1.8.1<br>tensorflow                   2.8.0<br>tensorflow-io-gcs-filesystem 0.24.0<br>termcolor                    1.1.0<br>terminado                    0.13.3<br>testpath                     0.6.0<br>tf-estimator-nightly         2.8.0.dev2021122109<br>toml                         0.10.2<br>torch                        1.8.1+cu111<br>torchaudio                   0.8.1<br>torchvision                  0.9.1+cu111<br>tornado                      6.1<br>traitlets                    5.1.1<br>typing_extensions            4.1.1<br>urllib3                      1.22<br>wcwidth                      0.2.5<br>webencodings                 0.5.1<br>Werkzeug                     2.1.1<br>wheel                        0.37.1<br>widgetsnbextension           3.6.0<br>wincertstore                 0.2<br>wrapt                        1.12.1<br>zipp                         3.7.0<br><br>(aipy38) C:\Users\DELL&gt;conda deactivate<br><br>C:\Users\DELL&gt;<br></code></pre></td></tr></table></figure><h1 id="PyCharm-中选择Python解释器"><a href="#PyCharm-中选择Python解释器" class="headerlink" title="PyCharm 中选择Python解释器"></a>PyCharm 中选择Python解释器</h1><p>因为我现在写的一些小程序都比较小，一般都只用VSCode和Terminal就能解决，不太常用PyCharm了。</p><p>可以看一下网上别人写的这一部分：<a href="https://blog.csdn.net/JUST__Tw/article/details/107799000">Pycharm创建项目时，解释器如何选择_TaoWei_001的博客-CSDN博客_pycharm怎么选择解释器</a></p><h1 id="conda下的Python"><a href="#conda下的Python" class="headerlink" title="conda下的Python"></a>conda下的Python</h1><p>一直以来都是在使用原生的Python，只有在WSL上面跑深度学习和在远程服务器上面跑深度学习这两次用到过了Anaconda，之前不用Anaconda是因为我觉得这个集和太大了，很多不需要的东西，但在使用过后我才知道，conda还是挺好用的，特别是配置开发环境的时候，使用env可以创建一个环境，做到库隔离，这个真的是太有用了！</p><p>这次跟着李沐老师学习深度学习，在Windows上面配置了conda，使用的是Miniconda，体积比较小，nice！</p><h2 id="Conda"><a href="#Conda" class="headerlink" title="Conda"></a>Conda</h2><p>Conda是一个开源跨平台语言无关的包管理与环境管理系统。由“连续统分析”（Continuum Analytics）基于BSD许可证发布。</p><p>Conda允许用户方便地安装不同版本的二进制软件包与该计算平台需要的所有库。还允许用户在不同版本的包之间切换、从一个软件仓库下载包并安装。 </p><p>Conda是用Python语言开发，但能管理其他编程语言的项目（如R语言），包括多语言项目。Conda可安装Python语言的包，类似于其他基于Python的跨平台包管理器（如wheel（页面存档备份，存于互联网档案馆）或pip）。</p><p>一些基于Conda的工具软件：</p><ul><li>Bioconda，用于计算生物学</li><li><a href="https://zh.wikipedia.org/wiki/Anaconda_(Python%E5%8F%91%E8%A1%8C%E7%89%88)">Anaconda</a></li><li>Miniconda</li><li>Anaconda Repository</li></ul><h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><p>Anaconda则是一个打包的集合，里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，就是把很多常用的不常用的库都给你装好了。</p><p><strong>Anaconda</strong>是<a href="https://zh.wikipedia.org/wiki/Red_Hat_Enterprise_Linux">Red Hat Enterprise Linux</a>、<a href="https://zh.wikipedia.org/wiki/CentOS">CentOS</a>、<a href="https://zh.wikipedia.org/wiki/Fedora_(%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1)">Fedora</a>等操作系统的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%AE%89%E8%A3%9D%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BC%8F&action=edit&redlink=1">安装管理程序</a>。它以<a href="https://zh.wikipedia.org/wiki/Python">Python</a>及<a href="https://zh.wikipedia.org/wiki/C">C</a>语言写成，以图形的<a href="https://zh.wikipedia.org/wiki/PyGTK">PyGTK</a>和文字的<a href="https://zh.wikipedia.org/w/index.php?title=Python-newt&action=edit&redlink=1">python-newt</a>接口写成。它可以用来自动安装配置，使用户能够以最小的监督运行。</p><p>Anaconda<a href="https://zh.wikipedia.org/w/index.php?title=%E5%AE%89%E8%A3%9D%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BC%8F&action=edit&redlink=1">安装管理程序</a>应用在<a href="https://zh.wikipedia.org/wiki/Red_Hat_Enterprise_Linux">RHEL</a>，Fedora和其他一些项目，Anaconda提供纯文字模式和GUI模式，用户可以安装在各种各样的系统。</p><h2 id="Miniconda"><a href="#Miniconda" class="headerlink" title="Miniconda"></a>Miniconda</h2><p>Miniconda，顾名思义，它只包含最基本的内容——python与conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择。就只包含最基本的东西，其他的库得自己装。</p><ul><li>基本操作：</li></ul><blockquote><p>升级全部库：  conda upgrade –all<br>升级一个包  conda update packagename<br>安装包：conda install packagename<br>也可以安装多个包：   conda installl numpy pandas scipy<br>安装固定版本的包：conda install numpy &#x3D;1.10<br>移除一个包：conda remove packagename<br>查看所有包：conda list </p></blockquote><ul><li>管理python环境：</li></ul><blockquote><p>创建虚拟环境：<strong>conda create -n</strong> env_name list of packagenaem<br>eg:  <strong>conda create -n</strong> env_name pandas<br>指定python版本：<strong>conda create -n</strong> env_name python2 &#x3D; 2.7 pandas<br>激活环境： <strong>activate</strong> env_name<br>退出环境 :  <strong>deactivate</strong>  env_name<br>删除虚拟环境：<strong>conda env remove -n</strong> env_name<br>显示所有虚拟环境：<strong>conda env list</strong> </p><p>conda 创建的虚拟环境是在anaconda或miniconda安装目录下的envs下，所以使用pycharm，只要在特定项目配置运行环境就可以了</p></blockquote><h2 id="Miniconda安装"><a href="#Miniconda安装" class="headerlink" title="Miniconda安装"></a>Miniconda安装</h2><p><a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda — Conda documentation</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">Index of &#x2F;anaconda&#x2F;miniconda&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>我安装的版本是：Miniconda3-py38_4.9.2-Windows-x86_64</p><p>安装过程比较简单，基本上是一路Next到底，最后配置一下环境就好！</p><p>参考教程：<a href="https://blog.csdn.net/baidu_41805096/article/details/108501099">windows下安装miniconda详细教程_JessieZeng aaa的博客-CSDN博客_windows安装miniconda</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/qq_18668137/article/details/80807829">conda、miniconda、anaconda的区别以及在pycharm中选择conda的虚拟环境_bboysky45的博客-CSDN博客_miniconda</a></p><p><a href="https://blog.csdn.net/baidu_41805096/article/details/108501099">windows下安装miniconda详细教程_JessieZeng aaa的博客-CSDN博客_windows安装miniconda</a></p><p><a href="https://zh.wikipedia.org/wiki/Conda">Conda - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://zh.wikipedia.org/wiki/Anaconda">Anaconda - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://blog.csdn.net/weixin_48885539/article/details/106924767">cmd和PowerShell的区别_孤独的代码的博客-CSDN博客_powershell和cmd区别</a></p><p><a href="https://zhuanlan.zhihu.com/p/390464588">CMD和Powershell区别 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ngrok内网穿透实现远程监控</title>
    <link href="/blog/post/Electronic/IntranetPenetrationInNgrok/"/>
    <url>/blog/post/Electronic/IntranetPenetrationInNgrok/</url>
    
    <content type="html"><![CDATA[<h1 id="使用ESP32CAM实现视频流功能"><a href="#使用ESP32CAM实现视频流功能" class="headerlink" title="使用ESP32CAM实现视频流功能"></a>使用ESP32CAM实现视频流功能</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_camera.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WiFi.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssid = <span class="hljs-string">&quot;MERCURY&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* password = <span class="hljs-string">&quot;11235813&quot;</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PWDN_GPIO_NUM     32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESET_GPIO_NUM    -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> XCLK_GPIO_NUM      0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIOD_GPIO_NUM     26</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIOC_GPIO_NUM     27</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y9_GPIO_NUM       35</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y8_GPIO_NUM       34</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y7_GPIO_NUM       39</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y6_GPIO_NUM       36</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y5_GPIO_NUM       21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y4_GPIO_NUM       19</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y3_GPIO_NUM       18</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y2_GPIO_NUM        5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VSYNC_GPIO_NUM    25</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HREF_GPIO_NUM     23</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PCLK_GPIO_NUM     22</span><br><br>WiFiServer <span class="hljs-title function_">server</span><span class="hljs-params">(<span class="hljs-number">80</span>)</span>;<br><span class="hljs-type">bool</span> connected = <span class="hljs-literal">false</span>;<br>WiFiClient live_client;<br><br><br>String index_html = <span class="hljs-string">&quot;&lt;meta charset=\&quot;utf-8\&quot;/&gt;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;&lt;style&gt;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;#content &#123;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;display: flex;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;flex-direction: column;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;justify-content: center;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;align-items: center;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;text-align: center;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;min-height: 100vh;&#125;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;&lt;/style&gt;\n&quot;</span> \<br>                    <span class="hljs-string">&quot;&lt;body bgcolor=\&quot;#000000\&quot;&gt;&lt;div id=\&quot;content\&quot;&gt;&lt;h2 style=\&quot;color:#ffffff\&quot;&gt;Murphy LIVE&lt;/h2&gt;&lt;img src=\&quot;video\&quot;&gt;&lt;/div&gt;&lt;/body&gt;&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">configCamera</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">camera_config_t</span> config;<br>  config.ledc_channel = LEDC_CHANNEL_0;<br>  config.ledc_timer = LEDC_TIMER_0;<br>  config.pin_d0 = Y2_GPIO_NUM;<br>  config.pin_d1 = Y3_GPIO_NUM;<br>  config.pin_d2 = Y4_GPIO_NUM;<br>  config.pin_d3 = Y5_GPIO_NUM;<br>  config.pin_d4 = Y6_GPIO_NUM;<br>  config.pin_d5 = Y7_GPIO_NUM;<br>  config.pin_d6 = Y8_GPIO_NUM;<br>  config.pin_d7 = Y9_GPIO_NUM;<br>  config.pin_xclk = XCLK_GPIO_NUM;<br>  config.pin_pclk = PCLK_GPIO_NUM;<br>  config.pin_vsync = VSYNC_GPIO_NUM;<br>  config.pin_href = HREF_GPIO_NUM;<br>  config.pin_sscb_sda = SIOD_GPIO_NUM;<br>  config.pin_sscb_scl = SIOC_GPIO_NUM;<br>  config.pin_pwdn = PWDN_GPIO_NUM;<br>  config.pin_reset = RESET_GPIO_NUM;<br>  config.xclk_freq_hz = <span class="hljs-number">20000000</span>;<br>  config.pixel_format = PIXFORMAT_JPEG;<br><br>  config.frame_size = FRAMESIZE_QVGA;<br>  config.jpeg_quality = <span class="hljs-number">9</span>;<br>  config.fb_count = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-type">esp_err_t</span> err = esp_camera_init(&amp;config);<br>  <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Camera init failed with error 0x%x&quot;</span>, err);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//continue sending camera frame</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">liveCam</span><span class="hljs-params">(WiFiClient &amp;client)</span>&#123;<br>  <span class="hljs-type">camera_fb_t</span> * fb = esp_camera_fb_get();<br>  <span class="hljs-keyword">if</span> (!fb) &#123;<br>      Serial.println(<span class="hljs-string">&quot;Frame buffer could not be acquired&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br>  client.print(<span class="hljs-string">&quot;--frame\n&quot;</span>);<br>  client.print(<span class="hljs-string">&quot;Content-Type: image/jpeg\n\n&quot;</span>);<br>  client.flush();<br>  client.write(fb-&gt;buf, fb-&gt;len);<br>  client.flush();<br>  client.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>  esp_camera_fb_return(fb);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">115200</span>);<br>  WiFi.begin(ssid, password);<br>  Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    delay(<span class="hljs-number">500</span>);<br>    Serial.print(<span class="hljs-string">&quot;.&quot;</span>);<br>  &#125;<br>  Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>  String IP = WiFi.localIP().toString();<br>  Serial.println(<span class="hljs-string">&quot;IP address: &quot;</span> + IP);<br>  index_html.replace(<span class="hljs-string">&quot;server_ip&quot;</span>, IP);<br>  server.begin();<br>  configCamera();<br>&#125;<br>    <br><span class="hljs-type">void</span> <span class="hljs-title function_">http_resp</span><span class="hljs-params">()</span>&#123;<br>  WiFiClient client = server.available();                           <br>  <span class="hljs-keyword">if</span> (client.connected()) &#123;     <br>      String req = <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-keyword">while</span>(client.available())&#123;<br>        req += (<span class="hljs-type">char</span>)client.read();<br>      &#125;<br>      Serial.println(<span class="hljs-string">&quot;request &quot;</span> + req);<br>      <span class="hljs-type">int</span> addr_start = req.indexOf(<span class="hljs-string">&quot;GET&quot;</span>) + <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;GET&quot;</span>);<br>      <span class="hljs-type">int</span> addr_end = req.indexOf(<span class="hljs-string">&quot;HTTP&quot;</span>, addr_start);<br>      <span class="hljs-keyword">if</span> (addr_start == <span class="hljs-number">-1</span> || addr_end == <span class="hljs-number">-1</span>) &#123;<br>          Serial.println(<span class="hljs-string">&quot;Invalid request &quot;</span> + req);<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br>      req = req.substring(addr_start, addr_end);<br>      req.trim();<br>      Serial.println(<span class="hljs-string">&quot;Request: &quot;</span> + req);<br>      client.flush();<br>  <br>      String s;<br>      <span class="hljs-keyword">if</span> (req == <span class="hljs-string">&quot;/&quot;</span>)<br>      &#123;<br>          s = <span class="hljs-string">&quot;HTTP/1.1 200 OK\n&quot;</span>;<br>          s += <span class="hljs-string">&quot;Content-Type: text/html\n\n&quot;</span>;<br>          s += index_html;<br>          s += <span class="hljs-string">&quot;\n&quot;</span>;<br>          client.print(s);<br>          client.stop();<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req == <span class="hljs-string">&quot;/video&quot;</span>)<br>      &#123;<br>          live_client = client;<br>          live_client.print(<span class="hljs-string">&quot;HTTP/1.1 200 OK\n&quot;</span>);<br>          live_client.print(<span class="hljs-string">&quot;Content-Type: multipart/x-mixed-replace; boundary=frame\n\n&quot;</span>);<br>          live_client.flush();<br>          connected = <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>          s = <span class="hljs-string">&quot;HTTP/1.1 404 Not Found\n\n&quot;</span>;<br>          client.print(s);<br>          client.stop();<br>      &#125;<br>    &#125;       <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  http_resp();<br>  <span class="hljs-keyword">if</span>(connected == <span class="hljs-literal">true</span>)&#123;<br>    liveCam(live_client);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用Ngrok服务将私有IP映射到公网"><a href="#使用Ngrok服务将私有IP映射到公网" class="headerlink" title="使用Ngrok服务将私有IP映射到公网"></a>使用Ngrok服务将私有IP映射到公网</h1><ol><li>注册ngrok，得到个人token</li></ol><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220628141555266.png"/><ol><li>下载合适的<a href="https://ngrok.com/download">ngrok - download</a>版本到本地计算机，本地计算机需要和ESP32CAM在同一个局域网内。</li><li>进入命令行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">Microsoft Windows [版本 10.0.19044.1766]<br>(c) Microsoft Corporation。保留所有权利。<br><br>C:\Users\DELL&gt;d:<br>D:\&gt;<span class="hljs-built_in">cd</span> D:\Develop_Arduino\ESP32CAM\ngrok<br>D:\Develop_Arduino\ESP32CAM\ngrok&gt;ngrok.exe<br>NAME:<br>  ngrok - tunnel <span class="hljs-built_in">local</span> ports to public URLs and inspect traffic                                                                                                                                                                                 USAGE:<br>  ngrok [<span class="hljs-built_in">command</span>] [flags]                                                                                                                                                                                                                       DESCRIPTION:<br>  ngrok exposes <span class="hljs-built_in">local</span> networked services behinds NATs and firewalls to the<br>  public internet over a secure tunnel. Share <span class="hljs-built_in">local</span> websites, build/test<br>  webhook consumers and self-host personal services.<br>  Detailed <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> each <span class="hljs-built_in">command</span> is available with <span class="hljs-string">&#x27;ngrok help &lt;command&gt;&#x27;</span>.<br>  Open http://localhost:4040 <span class="hljs-keyword">for</span> ngrok<span class="hljs-string">&#x27;s web interface to inspect traffic.                                                                                                                                                                      Author:</span><br><span class="hljs-string">  ngrok - &lt;support@ngrok.com&gt;                                                                                                                                                                                                                   TERMS OF SERVICE: https://ngrok.com/tos                                                                                                                                                                                                         EXAMPLES:</span><br><span class="hljs-string">  ngrok http 80                    # secure public URL for port 80 web server</span><br><span class="hljs-string">  ngrok http --subdomain=baz 8080  # port 8080 available at baz.ngrok.io</span><br><span class="hljs-string">  ngrok http foo.dev:80            # tunnel to host:port instead of localhost</span><br><span class="hljs-string">  ngrok http https://localhost     # expose a local https server</span><br><span class="hljs-string">  ngrok tcp 22                     # tunnel arbitrary TCP traffic to port 22</span><br><span class="hljs-string">  ngrok tls --hostname=foo.com 443 # TLS traffic for foo.com to port 443</span><br><span class="hljs-string">  ngrok start foo bar baz          # start tunnels from the configuration file                                                                                                                                                                  COMMANDS:</span><br><span class="hljs-string">  api                            use ngrok agent as an api client</span><br><span class="hljs-string">  completion                     generates shell completion code for bash or zsh</span><br><span class="hljs-string">  config                         update or migrate ngrok&#x27;</span>s configuration file<br>  credits                        prints author and licensing information<br>  diagnose                       diagnose connection issues<br>  <span class="hljs-built_in">help</span>                           Help about any <span class="hljs-built_in">command</span><br>  http                           start an HTTP tunnel<br>  service                        run and control an ngrok service on a target operating system<br>  start                          start tunnels by name from the configuration file<br>  tcp                            start a TCP tunnel<br>  tls                            start a TLS tunnel<br>  tunnel                         start a tunnel <span class="hljs-keyword">for</span> use with a tunnel-group backend<br>  update                         update ngrok to the latest version<br>  version                        <span class="hljs-built_in">print</span> the version string<br><br>OPTIONS:<br>  -h, --<span class="hljs-built_in">help</span>      <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> ngrok<br>  -v, --version   version <span class="hljs-keyword">for</span> ngrok<br><br>D:\Develop_Arduino\ESP32CAM\ngrok&gt;ngrok authtoken &lt;your token&gt;<br>Authtoken saved to configuration file: C:\Users\DELL\AppData\Local/ngrok/ngrok.yml<br><br>D:\Develop_Arduino\ESP32CAM\ngrok&gt;ngrok http 192.168.1.103:80<br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220628142256442.png"/><p>浏览器访问该域名，便可实现在外网访问私网的ESP32CAM。</p><p>需要注意的是，当该命令行关闭，则ngrok服务就结束了，所以这并不能长时间地将ESP32CAM推到公网。有长久使用计划地话，我的想法是改造废弃手机，将安卓手机刷成Linux，让Ngrok服务在手机上一直跑着，则这个问题就可以得到解决。</p><p>目前我并没有实现我的这个想法，手头没有合适的手机，有一个安卓5.1的手机，Termux和AidLux在这台老手机上不能正常运行，安卓版本太低了，想买一个二手手机，只跑整个一个服务又觉得不怎么值当的，所以该想法目前是搁置状态，之后有机会的话在尝试着实现一下。</p><p>还有一个安全性问题，映射到公网意味者任何人都可以访问， 因此还需要做一个后台，限制非法访问，这个目前还没想好应该怎么做。</p><p>项目来源自Arduino社区：<a href="https://create.arduino.cc/projecthub/CiferTech/how-to-access-esp32-cam-worldwide-using-ngrok-210aa0">How to Access ESP32-CAM Worldwide using ngrok - Arduino Project Hub</a></p>]]></content>
    
    
    <categories>
      
      <category>电子电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HUAWEI-MatePad-Pro</title>
    <link href="/blog/post/Tools/HUAWEIMatePadPro/"/>
    <url>/blog/post/Tools/HUAWEIMatePadPro/</url>
    
    <content type="html"><![CDATA[<h1 id="购物清单"><a href="#购物清单" class="headerlink" title="购物清单"></a>购物清单</h1><h2 id="华为京东自营旗舰店"><a href="#华为京东自营旗舰店" class="headerlink" title="华为京东自营旗舰店"></a>华为京东自营旗舰店</h2><p>HUAWEI MatePad Pro 12.6 8+128GB WiFi版本：4199 （原价4499，使用了学生优惠和满3000-100的活动。发售价4999，将近一年的时间了，跌了500，这价格还是有点坚挺的，还有存货也是我没想到的！）</p><h2 id="天猫华为旗舰店"><a href="#天猫华为旗舰店" class="headerlink" title="天猫华为旗舰店"></a>天猫华为旗舰店</h2><p>HUAWEI M-Pencil 2 489 （原价599，使用了学生优惠）</p><h2 id="淘宝"><a href="#淘宝" class="headerlink" title="淘宝"></a>淘宝</h2><p>平板支架：25<br>NM存储卡：宇瞻128GB（基本没怎么用到过） </p><p>（看着喜欢的自己随便买，这种小配件不用买很贵的，用一段时间就直接换了）<br>保护壳：40.8<br>钢化膜：18.8<br>内胆包：25.8<br>硅胶笔尖：6.79<br>镜头钢化膜：7.43<br>手写笔保护套：7.6</p><blockquote><p>NM卡是华为设计的一款超微型存储卡，它的英文全称为Nano Memory Card，故而简称为NM卡，它的体积比Micro SD存储卡（TF卡）小得多，这是因为NM卡的设计是以手机里的Nano SIM卡槽为使用依据来进行的，与Nano SIM卡的规格尺寸完全相符。<br>NM存储卡不仅有华为自己在生产，华为也授权给了OV（沃微创新）、雷克沙、惠普、大华、宏芯宇，宇瞻等。<br>宇瞻的稍微便宜一点，就买了宇瞻的。不搞机的可能不知道宇瞻，宇瞻是背靠ACER（宏碁）的一家中国台湾的存储厂商。</p></blockquote><h1 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h1><p>这段时间一直都是在宿舍学习，感觉没什么效率，总是不想学习，但是也不知道干什么，浪费了很多的时间。我想还是到图书馆或者教学区那样有学习氛围的环境中去学习。之前学习都是带着笔记本电脑，但是电脑太重了，非常不方便，并且所有的学习都是围绕着电脑开展的，如果没带电脑的话，就不知道怎么学习了。自己现在用的Surface Go，感觉不是很好用了，Windows生态和手写笔的书写体验很棒，但是其他各个方面几乎没有一点优点。于是我也放弃和它斗争了，直接再买一个，让它退居二线，承担辅助工作，少一点闹心。</p><p>华为的MatePad和苹果的iPad，只有这两个产品线的选择！<br>为什么没选择苹果，一个字：贵！<br>库克刀法精准，直接砍掉了128GB存储的生产线。<br>基础款iPad，存储256GB都要3700了？？<br>iPad Air5，存储256GB，直接5500，直呼“买不起！！”<br>iPad Pro，直接不在考虑范围之内，对于学生来说，预算过高，性能过剩！</p><p>为什么选择华为，相对安卓来说，鸿蒙的生态稍微有那么一点点。<br>备选三个产品：MatePad 11，MatePad Pro 10.8，MatePad Pro 12.6。<br>MatePad 11，性价比超高，网上的人气特别高，骁龙865处理器，我觉得是完全够用的。<br>MatePad Pro 10.8，骁龙870处理器，打孔屏。MatePad 11比MatePad Pro 10.8性价比高很多，很早久推出了备选行列。<br>MatePad Pro 12.6 WiFi版本，麒麟9000E处理器，12.6 Oled超大屏！成也在屏幕，败也在屏幕，屏幕供应商来自上海和辉光电，不如京东方和华星光电，更不如三星和LG，60Hz屏幕刷新率，2022年，遍地都是120Hz的情况下实在是说不过去了！</p><p>因为疫情封校，不太方便出校到线下自己体验一下，几乎都是在哔哩哔哩上面看的别人发的使用测评，这次没有选择大的UP主，基本都是在看一些小UP主的视频，主要看他们都这个平板的评价。考虑到了自己的需求当然还有华为的信仰加成和对苹果封闭生态的厌恶，最终还是决定入了这个12.6寸的吧，这个大屏真的是太有吸引力了！！</p><p>配件方面只考虑了M-Pencil 2 ，键盘就没有考虑了，我的Surface的键盘基本没用过。如果真的有需求的话，后期再配一个蓝牙键盘和鼠标，基本二百块钱就能拿下，原厂的键盘盖还是太贵了，对于学生来说没有必要再提高预算了。</p><p>2021年七月份的时候，考完试出去玩，在华为的店里看到了这个平板，还简单用了一下，这个屏幕是真的大，拿起来特别震撼！<br><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/about_04.jpg"/></p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>京东，天猫，华为商城，三个平台比价，找最便宜的买！<br>拼多多买了一些配件。</p><p>4月15号晚上十点在京东下单，不知道为什么需要等到4月20号之后订单才开处理，预计在4月21号到达。<br>晚上10点在天猫上买下单的手写笔，凌晨十二点顺丰就已经揽件了，从北京发货，但是仍然需要好几天的时间，不知道为什么顺丰这么慢了，估计是疫情影响吧！</p><h1 id="收货"><a href="#收货" class="headerlink" title="收货"></a>收货</h1><blockquote><p>这段时间新冠疫情又来了一波大的，青岛刚刚解除了封禁，上海这段时间被疫情祸害的“不成样子了”，这段时间的快递收货速度特别慢，不好的体验，但这也没办法！</p><p>疫情快点结束吧！！！</p></blockquote><p><strong>配件</strong>基本都是从广东发货，在下单后的四五天左右的时间都到了。钢化膜打开快递就发现钢化膜已经裂了，和商家说了后立即就补发了一张；镜头膜有点瑕疵，商家退款了，重新买了三张膜。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220422164316097.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/protectshell-surface.jpg"/><p><strong>手写笔</strong>从北京发货，顺丰快递，15号下单，16号的凌晨就开始处理订单了，16-20号这好几天都卡在北京，20号之后才经潍坊到达青岛，22号从顺丰和菜鸟的合作网点拿到了。</p><div align = center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mpencil2arrival.jpg" alt = "手写笔"/></div><p><strong>平板</strong>从青岛仓发货，但是这个过程太曲折了。十五号下单，说是21号开始处理订单，22号到。结果经过了两次延期，说是预计要25号才能到，跟客服battle了半天，但因为疫情也没办法啊！但是21号的时候突然发现订单在处理了，按照即定的时间发货了，22号到了京东和菜鸟的合作网点，因为京东的货物和菜鸟不是一个系统，没有在到达菜鸟前就进行最后的消毒，而是需要在菜鸟静置一天才能区间，所以需要等到23号才能去取件。<br>这一次必须给京东物流一个差评，这么贵重的电脑居然拿一个高露洁的装牙刷的大箱子装着，去拿的时候找了半天没找到，连个正经的包装都没有是怎么也说不过去的吧！差评！</p><div algin = center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/huaweimatepadproImage00002.jpg"/>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/huaweimatepadproImage00009.jpg"/>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/huaweimatepadproImage00006.jpg"/></div><h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><ul><li>配件就不说了！</li><li>手写笔的手感还是不错的，但是因为笔尖是硬的，写字的时候会很滑，且声音特别大。写字的手感比Surface Pen还是有很大的区别的。</li><li>平板刚打开的时候感觉好像不是很大，但是越看越觉得大，很奇怪的感受。60Hz的刷新率我什么感受的没有，滑动所谓的卡顿感没觉得有，写字的延时也没感觉出来，网络上的测评视频对比都是放慢了很多倍实际体验我是真没觉得有。但是清晰度确实差了一点，2560*1600的分辨率不算低，但是屏幕尺寸太大了，PPI偏低。桌面小文件夹的圆弧的锯齿感非常明显，变成大文件夹就没有了，小的桌面图标的边缘锯齿没有，所以小文件夹的锯齿应该是鸿蒙优化的问题。只要我不用小文件夹，我就看不到，所以这个也不算什么问题。色温，色准什么的我没有感觉。</li></ul><h1 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h1><div algin = center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Screenshot_20220427_174226_com.huawei.android.launcher.jpg"/>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Screenshot_20220427_174252_com.huawei.android.launcher.jpg"/></div><p>:::tip<br>不得不说的是，安卓&#x2F;鸿蒙的生态还有很大的进步空间，特别是现在华为鸿蒙没有了GMS！<br>:::</p><ol><li>我的需求说简单也简单，但是有点复杂。我所有的设备都依托于坚果云和OneDrive进行文件的同步，OneDrive由于速度的问题，仅仅作为截图文件的备份，日常学习用的文件大多都是通过坚果云进行同步。</li><li>我几乎所有的文件都是PDF,JPG,PNG,MD以及其他文本类型文件，使用这种通用格式的文件的好处是，几乎在任何设备上都能打开，几乎没有兼容性问题。如果使用这种格式的文件的话，这要求系统具有很好的文件管理功能，这一点在Windows平台上体验非常棒！Windows操作系统的Surface和Windows笔电的协同作业无论是在软件生态上还是在文件管理与通过坚果云进行文件同步上的体验都非常好！手机仅仅只用来应急看一下文件，不进行修改操作，还是能应付的。</li><li>现在当我再增加一个鸿蒙系统的平板进入这个系统中之后，这个平衡被打败了。鸿蒙平板的出现必定会接替Windows平板的很大一部分功能，要不然我也没必要再买这个鸿蒙平板。但是，鸿蒙平板的生态还是安卓的，文件管理也和安卓一样烂！这就意味这，必须要找一个新的方法来让鸿蒙平板融入到我自己的学习生活圈子中。</li></ol><h2 id="文件工具"><a href="#文件工具" class="headerlink" title="文件工具"></a>文件工具</h2><ul><li>Solid Explore：支持WebDav</li><li>华为文件管理</li><li>坚果云：买了一年199的专业版本，47GB云存储空间。空间稍小，价格稍贵，但是体验非常好！！！</li><li>OneDrive</li><li>百度网盘</li><li>阿里云盘</li><li>FloderSync：支持WebDab，同步工具，能把本地的文件夹同步到坚果云</li></ul><h2 id="笔记工具"><a href="#笔记工具" class="headerlink" title="笔记工具"></a>笔记工具</h2><ul><li>Xodo：PDF阅读&amp;笔记软件</li><li>享做笔记：笔记软件，支持PDF导入和笔记导出为PDF</li><li>Flexcil：笔记软件，支持PDF导入和笔记导出为PDF</li><li>MS Office</li><li>QuickEdit：文件编辑器，支持WebDav，可以直接对云端文件进行修改</li><li>Xmind思维导图</li><li>备忘录：使用华为云盘进行多端同步，代替了部分QQ传送文本的功能（例如：平板和手机直接的传送一段文字，就可以使用备忘录进行传送。）</li></ul><h2 id="应用商城"><a href="#应用商城" class="headerlink" title="应用商城"></a>应用商城</h2><ul><li>华为应用市场</li><li>APKPure</li><li>F-Droid</li><li>Gspace：GMS模拟器</li></ul><h2 id="创作"><a href="#创作" class="headerlink" title="创作"></a>创作</h2><ul><li>AidLux：Linux</li><li>Sketchbook：绘图</li><li>Snapseed：修图</li><li>FlipaClip：动画</li></ul><h2 id="日程"><a href="#日程" class="headerlink" title="日程"></a>日程</h2><ul><li>邮件</li><li>Todoist：日程管理，多端同步。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>浏览器：支持建立网页快捷方式</li><li>Via浏览器：轻量级浏览器</li><li>欧陆词典</li><li>向日葵远程控制：电脑，手机，平板上都有这个软件，远程控制电脑，应急用。</li></ul><h1 id="浅层体验"><a href="#浅层体验" class="headerlink" title="浅层体验"></a>浅层体验</h1><h2 id="软件生态"><a href="#软件生态" class="headerlink" title="软件生态"></a>软件生态</h2><p>软件生态有，但是选择少，很难找到完全满足自己需求的软件，这方面还是需要很长时间的发展，需要软硬件厂商多进行深层次的合作。</p><blockquote><p>GMS支持设备列表</p><p><a href="http://storage.googleapis.com/play_public/supported_devices.html">Supported devices - Google Play Help - Google Support (storage.googleapis.com)</a></p></blockquote><p>一开始还在担心GMS的问题，其实我下载的这些个软件都没有对GMS做要求，所以少了GMS和谷歌的服务目前对我影响不是很大。</p><ul><li><strong>Xodo</strong>：PDF笔记，目前是全是使用坚果云+Xodo进行读和笔记，因为PDF笔记大多数都是课件，上课的时候，老师讲课写一下画一画做一些简单的笔记，不会写很多的字。Xodo能够自动保存，不用担心写了一节课没保存的尴尬局面，这一点比Drawboard PDF做的要好。华为没有对Xodo做特殊的笔记优化，这种优化是需要两个厂家相互合作的，未来能不能做好优化还是个问题。现在至少有个能满足的使用要求的软件，WPS，福昕，Adobe Reader均不支持直接从坚果云打开云端文件，这些软件均是在本地保存了一个副本，那就意味着没法云同步了，所以Xodo是我唯一的选择，我也没法说它怎么怎么不好用了（丢了好几次笔记了，目前已经基本上都转向了享做笔记，以章节为单位，做完笔记之后再重新导出为PDF，然后使用FolderSync+坚果云进行同步）！</li><li><strong>FolderSync</strong>：支持坚果云的WebDav，能够把本地文件同步的云端，我觉得这个功能坚果云完全有能力做。坚果云仅在桌面端的操作系统上运行新建一个同步文件夹，移动端要实现这个功能只能借助FolderSync。</li><li><strong>享做&amp;Flexcil</strong>：下载了很多，最后只留下了享做和Flexcil。享做笔记与平板的优化适配做的好，Flexcil的UI界面好看。两者中我倾向于享做笔记吧，支持一个国产软件的发展。Flexcil是韩国软件，在iPad上面已经发展了很多年了。两者买断的价格都差不多是50块钱，买平板有90的享做体验期，等过了体验期，估计会直接买断了享做笔记。享做笔记支持坚果云，百度网盘，华为云盘，Dropbox，webdav等，但是体验非常不好，我选择坚果云+FolderSync直接把享做的导出的PDF的那个文件夹进行同步。</li><li><strong>网页&#x2F;文件夹快捷方式</strong>：这个功能我直接吹爆了！超级好用！一些没有做适配的APP我选择直接用Web端！缺点是支持华为自带的浏览器，还有就是返回的时候的动画是从APP图标那里而不是从这个快捷方式这里，希望鸿蒙能优化这个动画。</li><li><strong>QuickEdit</strong>：支持WebDav，写markdown等文本格式的文件直接放到坚果云，非常的棒（有广告）！因为没有配键盘，其实这段时间在自习室的码字用的都是Surface，键盘等需要的时候再配吧！</li></ul><h2 id="硬件素质"><a href="#硬件素质" class="headerlink" title="硬件素质"></a>硬件素质</h2><div align = center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/huaweimatepadproImage00001.jpg"/>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220427224449608.png"/></div><ul><li>用了这几天，我完全没有感觉到60Hz有什么大问题，我觉得动画什么的都非常流畅，也许是我之前没长时间使用过高刷的设备吧！</li><li>9000E的处理器没热过，也许是我只用来记笔记开视频的原因吧。</li><li>M-Pencil 2 的笔尖太硬了，我觉得不算特别好用，Surface Pen的手写体验真的太好了！买了笔尖橡胶套，阻尼感太大了，不好用，现在是缠着一点纸胶带，感觉还行，就是磨损速度有点快，磨损之后字写屏幕商面都是胶，还好是在钢化膜上面，影响不大。</li><li>续航也没什么问题，白天断断续续地用一天，晚上回去充电，第二天满电带走，基本不需要在自习室进行充电。</li></ul>]]></content>
    
    
    <categories>
      
      <category>高效工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子设备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据集整理</title>
    <link href="/blog/post/AI/Dataset/"/>
    <url>/blog/post/AI/Dataset/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h1><h2 id="图像分类"><a href="#图像分类" class="headerlink" title="图像分类"></a>图像分类</h2><h3 id="MNIST"><a href="#MNIST" class="headerlink" title="MNIST"></a>MNIST</h3><p><a href="https://en.wikipedia.org/wiki/MNIST_database">MNIST database - Wikipedia</a><br><a href="http://yann.lecun.com/exdb/mnist/">MNIST handwritten digit database, Yann LeCun, Corinna Cortes and Chris Burges</a><br><a href="https://deepai.org/dataset/mnist">MNIST Dataset | DeepAI</a></p><h3 id="Fashion-MNIST"><a href="#Fashion-MNIST" class="headerlink" title="Fashion-MNIST"></a>Fashion-MNIST</h3><p><a href="https://github.com/zalandoresearch/fashion-mnist">GitHub - zalandoresearch&#x2F;fashion-mnist: A MNIST-like fashion product database. Benchmark</a><br><a href="https://www.tensorflow.org/datasets/catalog/fashion_mnist">fashion_mnist | TensorFlow Datasets</a><br><a href="https://handbook.pytorch.wiki/chapter5/5.3-Fashion-MNIST.html">5.3 Fashion MNIST - Pytorch中文手册</a><br><a href="https://tensorflow.google.cn/datasets/catalog/fashion_mnist">fashion_mnist | TensorFlow Datasets (google.cn)</a><br><a href="https://keras.io/api/datasets/fashion_mnist/">Fashion MNIST dataset, an alternative to MNIST (keras.io)</a></p><h3 id="CIFAR-10"><a href="#CIFAR-10" class="headerlink" title="CIFAR - 10"></a>CIFAR - 10</h3><p>   CIFAR-10是一个更接近普适物体的彩色图像数据集。CIFAR-10 是由Hinton 的学生Alex Krizhevsky 和Ilya Sutskever 整理的一个用于识别普适物体的<strong>小型数据集</strong>。一共包含<strong>10 个类别</strong>的RGB 彩色图片：飞机（ airplane ）、汽车（ automobile ）、鸟类（ bird ）、猫（ cat ）、鹿（ deer ）、狗（ dog ）、蛙类（ frog ）、马（ horse ）、船（ ship ）和卡车（ truck ）。<br>         每个图片的尺寸为32 × 32 ，每个类别有6000个图像，数据集中一共有50000 张训练图片和10000 张测试图片。</p><p><a href="http://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10 and CIFAR-100 datasets (toronto.edu)</a></p><p><a href="https://blog.csdn.net/qq_41185868/article/details/82793025">Dataset之CIFAR-10：CIFAR-10数据集简介、下载、使用方法之详细攻略_一个处女座的程序猿的博客-CSDN博客_cifar-10</a><br><a href="https://www.jianshu.com/p/90ce85b2faeb">CIFAR10数据集手动下载和导入 - 简书 (jianshu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/129081723">CIFAR10数据集的下载及使用 - 知乎 (zhihu.com)</a></p><h3 id="ImageNet"><a href="#ImageNet" class="headerlink" title="ImageNet"></a>ImageNet</h3><p><a href="https://en.wikipedia.org/wiki/ImageNet">ImageNet - Wikipedia</a><br><a href="https://image-net.org/index">ImageNet (image-net.org)</a><br><a href="https://zh.wikipedia.org/wiki/ImageNet">ImageNet - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://zhuanlan.zhihu.com/p/28142670">ImageNet这八年：李飞飞和她改变的AI世界 - 知乎 (zhihu.com)</a></p><p> 在早期的计算机视觉社区，PASCALViSualObjectClasses（VOC）挑战赛（从2005年到2012）是最重要的竞赛之一。在PASCALVOC中是多任务的，包括图像分类，目标检测，语义分割和行为检测。</p><p>​    VOC数据集是目标检测经常用的一个数据集，自2005年起每年举办一次比赛，最开始只有4类，到2007年扩充为20个类，共有两个常用的版本：2007和2012。学术界常用5k的train&#x2F;val 2007和16k的train&#x2F;val 2012作为训练集，test 2007作为测试集，用10k的train&#x2F;val 2007+test 2007和16k的train&#x2F;val 2012作为训练集，test2012作为测试集，分别汇报结果。</p><p>   ImageNetLargeScaleVisualRecognitionChallenge(ILSVRC)已经将一般的目标检测向前推进了一大步。ILSVRC从2010到2017年每年被组织比赛，其中就包含了用ImageNet图像进行检测。ILSVRC中包含了200类视觉目标，图像和目标实例的数量比VOC大两个数量级。例如，ILSVRC-14就包含了517K张图像和534k被标注的目标</p><p>   MS-COCO是目前最具有挑战性的目标检测，从2015年开始，每年都会举办基于MS-COCO数据集的竞赛，其包含的目标种类要少于ILSVRC，但其有更多的目标实例。例如，MS-COCO-17中包含了164k张图像和897K个被标注来自80个类别的目标。相比于VOC和ILSVRC，MS-COCO最大的进步，除了boundingbox的标注，还有单个实例分割的标注，帮助更准确的定位。另外，MS-COCO包含了更多小目标（其面积小于图像的1%）和更加密集的定位目标比VOC和ILSVRC。MS-COCO的这些特征让其目标分布更接近于真实的世界。MS-COCO已经在目标检测社区变为了实际的标杆。</p><p> DOTA是遥感航空图像检测的常用数据集，包含2806张航空图像，尺寸大约为4kx4k，包含15个类别共计188282个实例，其中14个主类，small vehicle 和 large vehicle都是vehicle的子类。其标注方式为四点确定的任意形状和方向的四边形。航空图像区别于传统数据集，有其自己的特点，如：尺度变化性更大；密集的小物体检测；检测目标的不确定性。数据划分为1&#x2F;6验证集，1&#x2F;3测试集，1&#x2F;2训练集。目前发布了训练集和验证集，图像尺寸从800×800到4000×4000不等。</p><h2 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h2><h3 id="COCO"><a href="#COCO" class="headerlink" title="COCO"></a>COCO</h3><p><a href="https://cocodataset.org/">COCO - Common Objects in Context (cocodataset.org)</a></p><h2 id="语义分割"><a href="#语义分割" class="headerlink" title="语义分割"></a>语义分割</h2><h3 id="VOC2012"><a href="#VOC2012" class="headerlink" title="VOC2012"></a>VOC2012</h3><p><a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2012/">The PASCAL Visual Object Classes Challenge 2012 (VOC2012) (ox.ac.uk)</a></p><h3 id="Cityscapes"><a href="#Cityscapes" class="headerlink" title="Cityscapes"></a>Cityscapes</h3><p><a href="https://www.cityscapes-dataset.com/">Cityscapes Dataset – Semantic Understanding of Urban Street Scenes (cityscapes-dataset.com)</a></p><h3 id="Mapillary"><a href="#Mapillary" class="headerlink" title="Mapillary"></a>Mapillary</h3><p><a href="https://www.mapillary.com/dataset/vistas?pKey=829772760972087">Mapillary</a></p><h3 id="KITTI"><a href="#KITTI" class="headerlink" title="KITTI"></a>KITTI</h3><p><a href="https://www.cvlibs.net/datasets/kitti/eval_scene_flow.php">The KITTI Vision Benchmark Suite (cvlibs.net)</a></p><p><a href="https://zhuanlan.zhihu.com/p/50925449">语义分割的数据集 - 知乎 (zhihu.com)</a></p><hr><p>作者：知乎用户<br>链接：<a href="https://www.zhihu.com/question/30626971/answer/1996387512">https://www.zhihu.com/question/30626971/answer/1996387512</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>参考网站<a href="https://link.zhihu.com/?target=https://awesomeopensource.com/project/jsbroks/awesome-dataset-tools">https://awesomeopensource.com/project/jsbroks/awesome-dataset-tools</a></p><p>我觉得写得已经很全面了。</p><h3 id="Awesome-Dataset-Tools"><a href="#Awesome-Dataset-Tools" class="headerlink" title="Awesome Dataset Tools"></a>Awesome Dataset Tools</h3><blockquote><p>A curated list of awesome dataset tools</p></blockquote><ul><li><p><a href="https://link.zhihu.com/?target=https://awesomeopensource.com/project/jsbroks/awesome-dataset-tools%23labeling-tools">Labeling Tools</a></p></li><li><ul><li><a href="https://link.zhihu.com/?target=https://awesomeopensource.com/project/jsbroks/awesome-dataset-tools%23images">Images</a></li><li><a href="https://link.zhihu.com/?target=https://awesomeopensource.com/project/jsbroks/awesome-dataset-tools%23audio">Audio</a></li><li><a href="https://link.zhihu.com/?target=https://awesomeopensource.com/project/jsbroks/awesome-dataset-tools%23time-series">Time Series</a></li><li><a href="https://link.zhihu.com/?target=https://awesomeopensource.com/project/jsbroks/awesome-dataset-tools%23text">Text</a></li></ul></li><li><p><a href="https://link.zhihu.com/?target=https://awesomeopensource.com/project/jsbroks/awesome-dataset-tools%23libraries">Libraries</a></p></li></ul><h2 id="Labeling-Tools"><a href="#Labeling-Tools" class="headerlink" title="Labeling Tools"></a>Labeling Tools</h2><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><ol><li><a href="https://link.zhihu.com/?target=https://github.com/opencv/cvat">CVAT</a> - Online, interactive video and image annotation tool for computer vision</li><li><a href="https://link.zhihu.com/?target=https://github.com/jsbroks/coco-annotator">COCO Annotator</a> - Web-based image segmentation tool for object detection, localization and keypoints</li><li><a href="https://link.zhihu.com/?target=https://github.com/microsoft/VoTT">VoTT</a> - Visual Object Tagging Tool: An electron app for building end to end object detection models from images and videos.</li><li><a href="https://link.zhihu.com/?target=https://github.com/scalabel/scalabel">Scalabel</a> - Versatile and scalable tool that supports various kinds of annotations</li><li><a href="https://link.zhihu.com/?target=https://github.com/Ericsson/eva">EVA</a> - EVA is a web-based tool for efficient annotation of videos and image sequences and has an additional tracking capabilities</li><li><a href="https://link.zhihu.com/?target=https://github.com/l3p-cv/lost">LOST</a> - Design your own smart Image Annotation process in a web-based environment</li><li><a href="https://link.zhihu.com/?target=https://github.com/drainingsun/boobs">Boobs</a> - Fast and efficient BBox annotation for your images in YOLO, VOC&#x2F;COCO formats</li><li><a href="https://link.zhihu.com/?target=https://github.com/ale152/muvilab">MuViLab</a> - Tool to help you labelling videos for computer vision</li><li><a href="https://link.zhihu.com/?target=https://github.com/yanfengliu/turkey">Turkey</a> - Web UI on Amazon Mechanical Turk to crowd-source image <a href="https://www.zhihu.com/search?q=segmentation&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1996387512%7D">segmentation</a></li><li><a href="https://link.zhihu.com/?target=https://github.com/Secretmapper/react-image-annotation">React Image Annotation</a> - An infinitely customizable image tool built on React</li><li><a href="https://link.zhihu.com/?target=https://github.com/springzfx/point-cloud-annotation-tool">Point Cloud Annotation Tool</a> - Annotate 3D boxes in point cloud</li><li><a href="https://link.zhihu.com/?target=https://github.com/bit-bots/imagetagger">ImageTagger</a> - Open source online platform for collaborative image labeling</li><li><a href="https://link.zhihu.com/?target=https://github.com/jveitchmichaelis/deeplabel">DeepLabel</a> - A cross-platform image annotation tool for machine learning</li><li><a href="https://link.zhihu.com/?target=https://github.com/microsoft/VoTT">Visual Object Tagging Tool</a> - An electron app for building end to end Object Detection Models</li><li><a href="https://link.zhihu.com/?target=https://gitlab.com/vgg/via">VGG Image Annotator</a> - Standalone image annotator application packaged as a single HTML file</li><li><a href="https://link.zhihu.com/?target=https://github.com/RTIInternational/SMART">SMART</a> - Efficiently build labeled training <a href="https://www.zhihu.com/search?q=datasets&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1996387512%7D">datasets</a> for supervised machine learning tasks</li><li><a href="https://link.zhihu.com/?target=https://github.com/abreheret/PixelAnnotationTool">Pixel Annotation Tool</a> - Uses the algorithm watershed marked of OpenCV to annotate images in directories</li><li><a href="https://link.zhihu.com/?target=https://github.com/buni-rock/Pixie">Pixie</a> - GUI annotation tool which provides the bounding box, polygon, and semantic segmentation</li><li><a href="https://link.zhihu.com/?target=https://github.com/jaxony/turktool">Turktool</a> - Modern React app for scalable bounding box annotation of images</li><li><a href="https://link.zhihu.com/?target=https://github.com/sweppner/labeld">LabelD</a> - Simple image annotation tool to streamlining the overall process</li><li><a href="https://link.zhihu.com/?target=https://github.com/commaai/commacoloring">Comma Coloring</a> - Adult coloring book for image segmentation</li><li><a href="https://link.zhihu.com/?target=https://github.com/tzutalin/labelImg">LabelImg</a> - Graphical image annotation tool and label object bounding boxes in images</li><li><a href="https://link.zhihu.com/?target=https://github.com/lc-soft/LC-Finder">LCs Finder</a> - Image annotation and object detection tool written in C</li><li><a href="https://link.zhihu.com/?target=https://github.com/kyamagu/js-segment-annotator">js-segment-annotator</a> - Javascript image annotation tool based on image segmentation</li><li><a href="https://link.zhihu.com/?target=https://github.com/cytomine">Cytomine</a> - Analysis of multi-gigapixel images</li><li><a href="https://link.zhihu.com/?target=https://github.com/wkentaro/labelme">labelme</a> - Image Polygonal Annotation with Python (polygon, rectangle, circle, line, point and image-level flag annotation)</li><li><a href="https://link.zhihu.com/?target=https://github.com/joelb92/SimpleAnnotate">SimpleAnnotate</a> - Open source video and image annotation software for, currently only for OSX</li><li><a href="https://link.zhihu.com/?target=https://github.com/cvhciKIT/sloth">Sloth</a> - Labeling image and video data for computer vision research</li><li><a href="https://link.zhihu.com/?target=https://github.com/christopher5106/FastAnnotationTool">Fast Annotation Tool</a> - Online platform for collaborative image annotation</li><li><a href="https://link.zhihu.com/?target=https://github.com/virajmavani/semi-auto-image-annotation-tool">Anno-Mage</a> - Helps you in annotating images by suggesting you annotations for 80 object classes</li><li><a href="https://link.zhihu.com/?target=https://github.com/medtagger/MedTagger">MedTagger</a> - Collaborative framework for annotating medical datasets using crowdsourcing</li><li><a href="https://link.zhihu.com/?target=https://github.com/Cartucho/OpenLabeling">OpenLabeling</a> - Labeling in multiple annotation formats</li><li><a href="https://link.zhihu.com/?target=https://github.com/AlturosDestinations/Alturos.ImageAnnotation">Alturos.ImageAnnotation</a> - Collaborative tool for labeling image data for <a href="https://www.zhihu.com/search?q=yolo&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1996387512%7D">yolo</a></li><li><a href="https://link.zhihu.com/?target=https://github.com/AlexeyAB/Yolo_mark">Yolo_mark</a> - GUI for marking bounded boxes of objects in images</li><li><a href="https://link.zhihu.com/?target=https://github.com/NaturalIntelligence/imglab">imglab</a> - peedup and simplify image labeling&#x2F; annotation process with multiple supported formats</li><li><a href="https://link.zhihu.com/?target=https://github.com/kinhong/OpenLabeler">OpenLabeler</a> - Open source desktop application for annotating objects</li><li><a href="https://link.zhihu.com/?target=https://github.com/alexandre01/UltimateLabeling">UltimateLabeling</a> - A <a href="https://www.zhihu.com/search?q=multi-purpose&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1996387512%7D">multi-purpose</a> Video Labeling GUI with integrated SOTA detector and tracker</li></ol><h3 id="Closed-Source"><a href="#Closed-Source" class="headerlink" title="Closed Source"></a>Closed Source</h3><ol><li><a href="https://link.zhihu.com/?target=https://datatorch.io/">DataTorch</a> - Platform for creating and shareing datasets.</li><li><a href="https://link.zhihu.com/?target=https://labelbox.com/">Labelbox</a> - Platform for data labeling, data management, and data science. Its features include image annotation, bounding boxes, text classification, and more</li><li><a href="https://link.zhihu.com/?target=https://supervise.ly/">Supervise.ly</a> - Image annotation and data management tool that you can use create image and video datasets</li><li><a href="https://link.zhihu.com/?target=https://prodi.gy/">Prodigy</a> - Various machine learning models such as image classification, entity recognition and intent detection</li><li><a href="https://link.zhihu.com/?target=https://github.com/ryouchinsa/Rectlabel-support">RectLabel</a> - Label images for bounding box object detection and segmentation</li><li><a href="https://link.zhihu.com/?target=https://lionbridge.ai/services/image-annotation/">Lionbridge AI</a> - Quickly annotate thousands of images and videos with relevant tags</li><li><a href="https://link.zhihu.com/?target=https://www.trainingdata.io/">TrainingData.io</a> - Medical image annotation tool for data labeling. Spports DICOM image format for radiology AI</li><li><a href="https://link.zhihu.com/?target=https://app.spare5.com/fives">Spare5</a> - Crowdsourcing service for tasks such as data and image annotation, language assessment, and more</li><li><a href="https://link.zhihu.com/?target=https://thehive.ai/">Hive</a> - Text and image annotation service that helps you create training datasets</li><li><a href="https://link.zhihu.com/?target=https://www.figure-eight.com/">Figure Eight</a> - Supports audio , [computer vision](<a href="https://www.zhihu.com/search?q=computer">https://www.zhihu.com/search?q=computer</a> vision&amp;search_source&#x3D;Entity&amp;hybrid_search_source&#x3D;Entity&amp;hybrid_search_extra&#x3D;{“sourceType”%3A”answer”%2C”sourceId”%3A1996387512}), natural language processing, and other data tasks</li><li><a href="https://link.zhihu.com/?target=https://dataturks.com/">Dataturks</a> - Image segmentation, named [entity recognition](<a href="https://www.zhihu.com/search?q=entity">https://www.zhihu.com/search?q=entity</a> recognition&amp;search_source&#x3D;Entity&amp;hybrid_search_source&#x3D;Entity&amp;hybrid_search_extra&#x3D;{“sourceType”%3A”answer”%2C”sourceId”%3A1996387512}) (NER) tagging in documents, and POS tagging</li><li><a href="https://link.zhihu.com/?target=https://playment.io/">Playment</a> - Services offered include bounding <a href="https://www.zhihu.com/search?q=boxes&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1996387512%7D">boxes</a>, points and lines, polygons, semantic segmentation, and more</li><li><a href="https://link.zhihu.com/?target=https://www.cogitotech.com/">Cogito Tech</a> - Image annotation, content moderation, sentiment <a href="https://www.zhihu.com/search?q=analysis&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1996387512%7D">analysis</a>, chatbot training</li><li><a href="https://link.zhihu.com/?target=https://oclavi.com/">OCLAVI</a> - Annotate Bounding Box, Polygon, Circle, Point and Cuboidal annotations with precision</li><li><a href="https://link.zhihu.com/?target=https://humansintheloop.org/">Humans in the Loop</a> - Use cases include face recognition, autonomous vehicles, and figure detection</li><li><a href="https://link.zhihu.com/?target=https://workaround.online/">WorkAround</a> - Host and annotate data, manage projects, and build datasets alongside top companies</li><li><a href="https://link.zhihu.com/?target=https://taqadam.io/">TaQadam</a> - On-demand annotation with agents-in-the-loop</li><li><a href="https://link.zhihu.com/?target=https://zillin.io/">Zillin</a> - Image annotation service for classification, object detection and segmentation with API access and georeferenced images support.</li><li><a href="https://link.zhihu.com/?target=https://cloud.annotations.ai/">IBM Cloud Annotations</a> - Simple and collaborative image annotation tool for teams and individuals inside ibm cloud environment.</li><li><a href="https://link.zhihu.com/?target=https://medseg.ai/">MedSeg</a> - Free online medical annotation (segmentation) with AI models.</li><li><a href="https://link.zhihu.com/?target=https://www.mvtec.com/products/deep-learning-tool/">MVTec Deep Learning Tool</a> - Provides labeling functionalities for <a href="https://link.zhihu.com/?target=https://www.mvtec.com/products/halcon/">HALCON</a>‘s deep-learning-based object detection and classification.</li></ol><h3 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h3><ol><li><a href="https://link.zhihu.com/?target=https://github.com/CrowdCurio/audio-annotator">Audio Annotator</a> - JavaScript interface for annotating and labeling audio files</li><li><a href="https://link.zhihu.com/?target=https://github.com/dynilib/dynitag">Dynitag</a> - Web-based collaborative audio annotator tool</li><li><a href="https://link.zhihu.com/?target=https://github.com/ritazh/EchoML">EchoML</a> - play, visualize, and annotate your audio files for machine learning</li></ol><h3 id="Closed-Source-1"><a href="#Closed-Source-1" class="headerlink" title="Closed Source"></a>Closed Source</h3><ul><li><a href="https://link.zhihu.com/?target=https://www.figure-eight.com/">Figure Eight</a> - Supports audio , computer vision, natural language processing, and other data tasks</li></ul><h3 id="Time-Series"><a href="#Time-Series" class="headerlink" title="Time Series"></a>Time Series</h3><ol><li><a href="https://link.zhihu.com/?target=https://github.com/baidu/Curve">Curve</a> - An integrated experimental platform for time series data anomaly detection</li><li><a href="https://link.zhihu.com/?target=https://github.com/Microsoft/TagAnomaly">TagAnomaly</a> - Anomaly detection analysis and labeling tool, specifically for multiple time series</li><li><a href="https://link.zhihu.com/?target=https://github.com/CrowdCurio/time-series-annotator">time-series-annotator</a> - Implements classification tasks for time series.</li><li><a href="https://link.zhihu.com/?target=https://github.com/avenix/WDK">WDK</a> - Tools to facilitate the development of activity recognition applications with wearable devices</li></ol><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><ol><li><a href="https://link.zhihu.com/?target=https://github.com/nlplab/brat">brat</a> - For all your textual annotation needs</li><li><a href="https://link.zhihu.com/?target=https://github.com/chakki-works/doccano">doccano</a> - Open source text annotation tool for machine learning practitioner.</li><li><a href="https://link.zhihu.com/?target=https://github.com/inception-project/inception">Inception</a> - A semantic annotation platform offering intelligent annotation assistance</li><li><a href="https://link.zhihu.com/?target=https://github.com/Franck-Dernoncourt/NeuroNER">NeuroNER</a> - Named-entity recognition using [neural networks](<a href="https://www.zhihu.com/search?q=neural">https://www.zhihu.com/search?q=neural</a> networks&amp;search_source&#x3D;Entity&amp;hybrid_search_source&#x3D;Entity&amp;hybrid_search_extra&#x3D;{“sourceType”%3A”answer”%2C”sourceId”%3A1996387512})</li><li><a href="https://link.zhihu.com/?target=https://github.com/jiesutd/YEDDA">YEDDA</a> - For annotating chunk&#x2F;entity&#x2F;event on text, symbol and even emoji</li><li><a href="https://link.zhihu.com/?target=https://github.com/CogComp/talen">TALEN</a> - Web-based tool for annotating word sequences</li><li><a href="https://link.zhihu.com/?target=https://github.com/webanno/webanno">WebAnno</a> - Web-based annotation tool for a wide range of linguistic annotations</li><li><a href="https://link.zhihu.com/?target=https://github.com/keighrim/mae-annotation">MAE</a> - Lightweight, general-purpose natural language annotation tool</li><li><a href="https://link.zhihu.com/?target=https://github.com/weitechen/anafora">Anafora</a> - Web-based raw text annotation tool</li><li><a href="https://link.zhihu.com/?target=https://github.com/d5555/TagEditor">TagEditor</a> - Label dependencies, parts of speech, Named entities, and text categories</li><li><a href="https://link.zhihu.com/?target=https://github.com/planbrothers/ml-annotate">ML-Annotate</a> - Supports binary, multi-label and multi-class labeling of text</li></ol><h3 id="Closed-Source-2"><a href="#Closed-Source-2" class="headerlink" title="Closed Source"></a>Closed Source</h3><ol><li><a href="https://link.zhihu.com/?target=https://thehive.ai/">Hive</a> - Text and image annotation service that helps you create training datasets</li><li><a href="https://link.zhihu.com/?target=https://www.figure-eight.com/">Figure Eight</a> - Supports audio , computer vision, natural language processing, and other data tasks</li><li><a href="https://link.zhihu.com/?target=https://lighttag.io/">LightTag</a> Text Annotation Tool for Teams.</li></ol><h2 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h2><h3 id="Audio-1"><a href="#Audio-1" class="headerlink" title="Audio"></a>Audio</h3><ul><li><a href="https://link.zhihu.com/?target=https://github.com/bmcfee/muda">Muda</a> - Python library for augmenting annotated audio data</li></ul><h1 id="HSI"><a href="#HSI" class="headerlink" title="HSI"></a>HSI</h1><p><a href="https://archive.ics.uci.edu/ml/datasets.php">https://archive.ics.uci.edu/ml/datasets.php</a></p><p><a href="https://tanxy.club/HSI">https://tanxy.club/HSI</a></p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim使用指南</title>
    <link href="/blog/post/Knowledge/Vim/"/>
    <url>/blog/post/Knowledge/Vim/</url>
    
    <content type="html"><![CDATA[<p>Linux vi 命令也就是指 vi 编辑器，它们是一个意思。vi 编辑器是 Linux&#x2F;UNIX 环境下经典的编辑器。Linux vi 命令非常强大，熟练地使用它可以高效的编辑代码，配置系统文件等，是程序员和运维人员必须掌握的技能。现在的 UNIX&#x2F;Linux 大都使用 vim 代替了 vi。vim 是 vi 的增强版（vi Improved），与 vi 编辑器完全兼容，而且实现了很多增强功能。</p><p>Linux 开源操作系统内核，我作为一个开源极致推崇者，怎么能不学习使用 Linux 呢? 在下面的三篇博客中，我都在使用 Linux。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/vi-vim-cheat-sheet-sch.gif"></p><h1 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi&#x2F;vim 的使用"></a>vi&#x2F;vim 的使用</h1><p>基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h2 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h2><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h2 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h2><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><h1 id="vi-vim-按键说明"><a href="#vi-vim-按键说明" class="headerlink" title="vi&#x2F;vim 按键说明"></a>vi&#x2F;vim 按键说明</h1><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h2 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h2><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n<space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td align="left">n<Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><table><thead><tr><th align="left">搜索替换</th><th></th></tr></thead><tbody><tr><td align="left">&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td align="left">使用 &#x2F;word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td align="left">:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr></tbody></table><table><thead><tr><th align="left">删除、复制与贴上</th><th></th></tr></thead><tbody><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">ndd</td><td>n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td align="left">.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h2 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h2><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h2 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h2><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td>不保存，强制退出。效果等同于 **:q!**。</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr></tbody></table><table><thead><tr><th align="left">vim 环境的变更</th><th></th></tr></thead><tbody><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a></p><p><a href="http://c.biancheng.net/vi/">Linux vi命令（vi编辑器）30分钟入门教程 (biancheng.net)</a></p><p><a href="https://www.zhihu.com/question/437735833"> VIM这么难用，为啥这么多人热衷？ - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>工具</tag>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云服务</title>
    <link href="/blog/post/Knowledge/CloudService/"/>
    <url>/blog/post/Knowledge/CloudService/</url>
    
    <content type="html"><![CDATA[<p>前情提要：之前一直白嫖[码云](<a href="https://gitee.com/murphyhou">MurphyHou (murphyhou) - Gitee.com</a>)的仓库作为图床，然后一看，自己所有的图片都被换成了Gitee的logo，上网上查了一下，原来是码云屏蔽了仓库的外链。没办法，转战一个新的图床，Github和Gitee是一个性质的，免费，但也有可能被屏蔽外链，另外还有就是速度太慢了。那就直接消费一把，买云存储吧。</p><p>这应该是第二次用阿里云了，第一次用的时候是使用了阿里云的容器镜像空间配置深度学习。</p><p>白嫖阿里云之我是个学生。</p><p>阿里云开发者成长计划面向全年龄段开发者提供免费体验、免费学习、免费实践支持，帮助开发者轻松掌握云上技能。飞天加速，赋能数字经济时代的云计算技术人才。</p><h1 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h1><table><thead><tr><th align="center">中文</th><th align="center">英文</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">存储空间</td><td align="center">Bucket</td><td align="center">存储空间是您用于存储对象（Object）的容器，所有的对象都必须隶属于某个存储空间。</td></tr><tr><td align="center">对象&#x2F;文件</td><td align="center">Object</td><td align="center">对象是 OSS 存储数据的基本单元，也被称为OSS的文件。对象由元信息（Object Meta）、用户数据（Data）和文件名（Key）组成。对象由存储空间内部唯一的Key来标识。</td></tr><tr><td align="center">地域</td><td align="center">Region</td><td align="center">地域表示 OSS 的数据中心所在物理位置。您可以根据费用、请求来源等综合选择数据存储的地域。详情请查看<a href="https://help.aliyun.com/document_detail/31837.htm#concept-zt4-cvy-5db">OSS已经开通的Region</a>。</td></tr><tr><td align="center">访问域名</td><td align="center">Endpoint</td><td align="center">Endpoint 表示OSS对外服务的访问域名。OSS以HTTP RESTful API的形式对外提供服务，当访问不同地域的时候，需要不同的域名。通过内网和外网访问同一个地域所需要的域名也是不同的。具体的内容请参见<a href="https://help.aliyun.com/document_detail/31837.htm#concept-zt4-cvy-5db">各个Region对应的Endpoint</a>。</td></tr><tr><td align="center">访问密钥</td><td align="center">AccessKey</td><td align="center">AccessKey，简称 AK，指的是访问身份验证中用到的AccessKeyId 和AccessKeySecret。OSS通过使用AccessKeyId 和AccessKeySecret对称加密的方法来验证某个请求的发送者身份。AccessKeyId用于标识用户，AccessKeySecret是用户用于加密签名字符串和OSS用来验证签名字符串的密钥，其中AccessKeySecret 必须保密。</td></tr></tbody></table><h2 id="购买配置"><a href="#购买配置" class="headerlink" title="购买配置"></a>购买配置</h2><p>购买和配置过程比较简单，也我当时也没记录，网上的教程很多，放几个参考教程的链接吧。</p><p><a href="https://developer.aliyun.com/article/787128">使用阿里云对象存储OSS+PicGo搭建图床-阿里云开发者社区 (aliyun.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/104152479">阿里云OSS PicGo 配置图床教程 超详细 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/fengxiandada/article/details/123747655">gitee图床用不了，阿里云OSS搭建图床(非常详细)_每天都要加油呀！的博客-CSDN博客</a></p><h2 id="OSS防盗链"><a href="#OSS防盗链" class="headerlink" title="OSS防盗链"></a>OSS防盗链</h2><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220327092239189.png"/></div><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><p>从网站最开始的时候只有一个index界面，到套用网页模板，再到现在的时候hexo部署网站，网站已经经历了三次大的变化了。域名也改过两次了，现在的域名太长了，我就想买个域名玩一下。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">2020.12：https://murphyhou0928.github.io/  GitHub改名了，这个访问不了了<br>2022.01：https://murphyhoucn.github.io/   其实现在还在用这个，只不过是会自己链接到cosmicdusty.cc<br>2022.03：https://cosmicdusty.cc/<br></code></pre></td></tr></table></figure><p>参考教程：<a href="https://www.jianshu.com/p/e258a46df9b7">GitHub搭建博客自定义域名 - 简书 (jianshu.com)</a></p><p>几个踩坑的地方。</p><p>大部分教程都是设置的记录类型为“A”，记录值为ping<code>https://username.github.io/</code>博客网站时显示的IPV4地址，我一开始也是这样设置的，但是Github会给一个警告，要求我设置成CNAME类型的域名解析。如下：</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220327093537272.png"/></div><p>使用Hexo部署网站的时候会出现部署后域名就不能访问了，这时候要在本地建CNAME文件,然后再hexo d。注意目录结构！</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220327094142180.png"/></div><h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>云服务近几年发展的越来越好了，厂商提供的功能也越来越多，体验也不错，另外价格不算贵。未来肯定会接触到越来越多的云体验，所以学会使用云服务还是很重要的。这次只是使用了云存储，希望下一次能用一下云服务器。</p><p>云服务的设置太多了，需要不断学习，不断使用。</p><p><strong>挖坑</strong>：博客迁移到云服务器上，放弃使用Github Pages，Github方便简单，但是网络环境太差了。</p><h1 id="（白嫖）阿里云ECS初体验"><a href="#（白嫖）阿里云ECS初体验" class="headerlink" title="（白嫖）阿里云ECS初体验"></a>（白嫖）阿里云ECS初体验</h1><p>  之前使用Linux主要通过向日葵远程控制家里的CentOS物理机&#x2F;使用学校实验室的服务器&#x2F;使用WSL，其实还没有真正去尝试买一台云服务器玩一玩。趁着自己还是个学生，能白嫖就白嫖，在<a href="https://developer.aliyun.com/plan/grow-up">开发者成长计划 (aliyun.com)</a>看到了学生专享，跟着教程做了一遍，做一个测试，领取了两周的ECS服务器。对于初学者来说，没有什么大问题，唯一的限制就是服务器的地域，北方的可以选择乌兰察布，南方的可以选择河源。</p><p>  进入阿里云控制台之后，可以查看实例的信息和状态，选择重置实例密码（记住），就可以开始使用云服务了。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220817085945382.png"/><p>使用XShell或Terminal连接服务器<code>ssh name@ip</code>，我感觉Terminal更轻便，更无感，就像真的在对自己的电脑进行操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">PS C:\Users\DELL&gt; ssh root@xx.xx.xx.xx<br>root@xx.xxx.xx.xx<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">Last login: Wed Aug 17 08:35:46 2022 from 211.64.159.164</span><br><span class="hljs-string"></span><br><span class="hljs-string">Welcome to Alibaba Cloud Elastic Compute Service !</span><br></code></pre></td></tr></table></figure><h2 id="Conda-环境"><a href="#Conda-环境" class="headerlink" title="Conda 环境"></a>Conda 环境</h2><p><a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda — conda documentation</a></p><p>下载，安装，配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZ0jlftcfs16k3ahu5mu80Z ~]# <span class="hljs-built_in">cat</span> /root/.bashrc<br><span class="hljs-comment"># .bashrc</span><br><br><span class="hljs-comment"># User specific aliases and functions</span><br><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">rm</span>=<span class="hljs-string">&#x27;rm -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cp</span>=<span class="hljs-string">&#x27;cp -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">mv</span>=<span class="hljs-string">&#x27;mv -i&#x27;</span><br><br><span class="hljs-comment"># Source global definitions</span><br><span class="hljs-keyword">if</span> [ -f /etc/bashrc ]; <span class="hljs-keyword">then</span><br>        . /etc/bashrc<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 使用Vim配置环境变量，就能在命令行中调用conda</span><br><span class="hljs-built_in">export</span> PATH=/root/miniconda3/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span><br><span class="hljs-comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span><br>__conda_setup=<span class="hljs-string">&quot;<span class="hljs-subst">$(&#x27;/root/miniconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)</span>&quot;</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$__conda_setup</span>&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;/root/miniconda3/etc/profile.d/conda.sh&quot;</span> ]; <span class="hljs-keyword">then</span><br>        . <span class="hljs-string">&quot;/root/miniconda3/etc/profile.d/conda.sh&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/root/miniconda3/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">unset</span> __conda_setup<br><span class="hljs-comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><br><br></code></pre></td></tr></table></figure><h2 id="阿里云ECS使用体验"><a href="#阿里云ECS使用体验" class="headerlink" title="阿里云ECS使用体验"></a>阿里云ECS使用体验</h2><p>首先请容许我先自我介绍一下，我是一名通信工程专业的本科生，计算机和云技术令我着迷，云服务也是未来科技和国家发展的一个非常重要的一环，我选择主动拥抱这项技术，学习使用云服务使其成为自己趁手的工具。第一次接触到阿里云的飞天加速计划·高校学生在家实践</p><p>大部分人初次使用ECS可能都是在建立自己的博客网站，我很久之前就使用了GitHub Page+阿里云OSS搭建了自己的博客网站，并且也在阿里云购买了域名，未来为了个人网站的发展，我可能再使用阿里云ECS重新构建自己的博客网站。本次我领取的两周的ECS服务主要是为了熟悉Linux操作，实现在Linux运行自己的开发和服务。我未来的学习和工作方向要求我要能够熟练使用Linux，我自学过一些Linux的基本操作，但平时接触更多的还是Windows，我在家里部署了一个CentOS的主机，但是由于家里并没有公网的IP，每次调用远程Linux的时候还需要借助第三方软件，这就给一些操作带来了很多不便。阿里云ECS的连接可以通过XShell，大家公认这是最好的软件，但是我是追求极致简洁的人，我更喜欢直接用Windows的Terminal中的Powershell直接进行ssh连接，仅通过一个窗口便可实现所有的操作。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>体验期限只有两周，这两周的课还特别多，也没有体验很多，要写一篇使用报告才能再领取一个月，但是由于在忙一些事，也没来得及写。</p><p>之后打算续费一下，但是一年280+太贵了，遂放弃。</p><p>趁一个活动，花了9毛钱买了一个月的1核1G的ECS云服务器。（这一个月的服务器不知道用来干什么了）</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220907123005561.png"/><p>问了同学用的什么云服务器，答：腾讯云。不能在阿里云这一棵树上吊着，于是我去看了腾讯云的活动，首单只要60+，算是非常便宜了！直接买一年，以后的Linux学习和开发就用这个了！</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220907122818536.png"/><p>华为云页面有点乱，不知道怎么购买，下次再逮着华为云薅羊毛&#x2F;doge。</p><p>三大云服务厂商，性能应该都是不差的，但是在网页端或APP端的体验不太一样，总的来说是阿里云的最好，功能最全面。腾讯云居然没有APP，只有微信小程序，体验差一点。华为云因为还没有用过，什么体验还不好说。</p><p>还有一点！Linux的发行版本我也从CentOS转到了Ubuntu！第一次接触到Linux是Ubuntu，但是之后看鸟哥的书，就开始主学CentOS，家里的Linux物理机也是CentOS，在WSL上面用的也是Ubuntu，从GitHub上面的开源项目来说，遇到的更多的是Ubuntu，所以未来学习和应用可能一直在Ubuntu上吧。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/mimosa2008/article/details/102838028">CentOS怎样查看系统信息_apple@随风的博客-CSDN博客_centos查看系统信息</a></p><p><a href="https://www.runoob.com/linux/linux-system-contents.html">Linux 系统目录结构 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://www.runoob.com/linux/linux-comm-tree.html">Linux tree命令 | 菜鸟教程 (runoob.com)</a></p><h1 id="腾讯云轻量应用服务器"><a href="#腾讯云轻量应用服务器" class="headerlink" title="腾讯云轻量应用服务器"></a>腾讯云轻量应用服务器</h1><p>之前白嫖了阿里云的云服务器，用着上瘾了，于是想买一个长期的，一直用着。</p><p>前情提要：<a href="https://cosmicdusty.cc/post/%EF%BC%88%E7%99%BD%E5%AB%96%EF%BC%89%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%88%9D%E4%BD%93%E9%AA%8C">（白嫖）阿里云ECS初体验|Murphy</a></p><p>这个服务器是用来干什么呢?之前有相关把GitHub Pages用国内的云服务替代掉，但是又感觉没什么很大的必要，只是访问速度快一些罢了。所以，这个需求先放一下，这次的服务器先用来熟悉Linux的操作吧，这段时间是打算在Linux环境下学习一下PyTorch的使用，找了一个很不错的教程。</p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) PS C:\Users\DELL&gt; ssh ubuntu@43.143.179.75<br>ubuntu@43.143.179.75<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-121-generic x86_64)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> * Documentation:  https://help.ubuntu.com</span><br><span class="hljs-string"> * Management:     https://landscape.canonical.com</span><br><span class="hljs-string"> * Support:        https://ubuntu.com/advantage</span><br><span class="hljs-string"></span><br><span class="hljs-string">  System information as of Thu 08 Sep 2022 09:07:31 AM CST</span><br><span class="hljs-string"></span><br><span class="hljs-string">  System load:  0.08               Processes:             126</span><br><span class="hljs-string">  Usage of /:   10.0% of 39.31GB   Users logged in:       0</span><br><span class="hljs-string">  Memory usage: 13%                IPv4 address for eth0: 10.0.8.15</span><br><span class="hljs-string">  Swap usage:   0%</span><br><span class="hljs-string"></span><br><span class="hljs-string">  =&gt; There is 1 zombie process.</span><br><span class="hljs-string"></span><br><span class="hljs-string"> * Super-optimized for small spaces - read how we shrank the memory</span><br><span class="hljs-string">   footprint of MicroK8s to make it the smallest full K8s around.</span><br><span class="hljs-string"></span><br><span class="hljs-string">   https://ubuntu.com/blog/microk8s-memory-optimisation</span><br><span class="hljs-string">New release &#x27;</span>22.04.1 LTS<span class="hljs-string">&#x27; available.</span><br><span class="hljs-string">Run &#x27;</span>do-release-upgrade<span class="hljs-string">&#x27; to upgrade to it.</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">Last login: Wed Sep  7 12:06:31 2022 from 211.64.159.160</span><br><span class="hljs-string">To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.</span><br><span class="hljs-string">See &quot;man sudo_root&quot; for details.</span><br></code></pre></td></tr></table></figure><h2 id="自动断开"><a href="#自动断开" class="headerlink" title="自动断开"></a>自动断开</h2><p><a href="https://blog.csdn.net/lxyoucan/article/details/114274326">腾讯云主机ssh自动断开解决办法_ITKEY_的博客-CSDN博客_clientaliveinterval</a></p><h1 id="阿里云SLA赔偿"><a href="#阿里云SLA赔偿" class="headerlink" title="阿里云SLA赔偿"></a>阿里云SLA赔偿</h1><p>2023.11.12阿里云发生故障，阿里巴巴业务几乎都受到了影响，常用业务几乎全线崩塌！</p><blockquote><p><a href="https://www.zhihu.com/question/629942630">(11 封私信) 如何看待阿里云 2023 年 11 月 12 日发生的故障？ - 知乎 (zhihu.com)</a></p></blockquote><p>我那天也没上博客网站，所以对我并没有造成什么影响。因为阿里云这次故障OSS服务受到了很大的影响，所以阿里云也给我进行了补偿，这一点阿里巴巴作为一个大企业做的太有魄力了。阿里云通过短信和邮件的方式把赔付情况基于了说明，但是短信我没怎么在意直接忽略掉了，邮件因为在笔记本电脑上，而笔记本那段时间一直没有开，所以也没看到。后来查看邮件的时候，才发现了阿里云的邮件！阿里云赔付的代金券有效期是半年，挺不错的。我直接续费了一年的域名，75-50，爽了。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20231203112042458.png" alt="image-20231203112042458"></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>域名</tag>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整理Windows桌面右键菜单</title>
    <link href="/blog/post/Tools/OrganizeTheWindowsDesktopRightclickMenu/"/>
    <url>/blog/post/Tools/OrganizeTheWindowsDesktopRightclickMenu/</url>
    
    <content type="html"><![CDATA[<div align = "center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323200043532.png" alt = "上图看效果"/></div><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><p>直接用火绒安全（<a href="https://murphyhoucn.github.io/2022/01/24/Windows%E7%AB%AF%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/">Windows端个人常用软件清单</a>中推荐过）设置一些功能的开或者不开！</p><p>火绒官网：<a href="https://www.huorong.cn/">火绒安全 (huorong.cn)</a></p><p>比如，我把Git Bash和Git GUI都关了，所有的命令行操作都使用Windows Terminal</p><div align = "center">  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323200249135.png"></div><h1 id="删除和添加新建选项"><a href="#删除和添加新建选项" class="headerlink" title="删除和添加新建选项"></a>删除和添加新建选项</h1><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>使用regedit管理注册表可以实现，但是我觉得还是有些麻烦，涉及到权限问题，这里推荐一个小工具——ShellMenuNew</p><p>下载地址：<a href="https://www.nirsoft.net/utils/shell_menu_new.html">ShellMenuNew - Disable&#x2F;enable ‘New’ menu items in Windows Explorer (nirsoft.net)</a></p><p>下载得到的压缩包解压后直接可以使用，汉化的话可以在该网页直接下载汉化包，结压之后直接放在文件目录下，重启软件即可获得汉化后的应用。</p><div align = "center">  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323202227547.png"/></div><div align = "center">  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323202328611.png"/></div><h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><p>参考资料:<a href="https://blog.csdn.net/viptung/article/details/79188540">windows右键菜单添加新建Python文件选项（可设置模板）_Ryan.D的博客-CSDN博客_右键新建py</a></p><ol><li>找个文件夹建立一个模板文件（可以写一个README记录一下这些文件是干什么用的，防止以后误删除！）</li></ol><div align = "center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323202900284.png"></div>2. Win+r，输入regedit，进入编辑注册表<p>进入如下地址，<code>计算机\HKEY_CLASSES_ROOT\.py</code>，修改什么后缀文件就进入那个后缀的编辑页面。</p><p>新建一个<code>项</code>,命名为<code>ShellNew</code></p><div align = "center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323203146020.png"/></div>3. 新建一个`字符串值`命名为`FileName`<div align = "center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323203500964.png"/></div>4. 对`FileName`右键修改<div align = "center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323203622053.png"/></div>将数值修改为**模板文件**的**绝对路径**<div align = "center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323203744509.png"/></div>5. 重复上述操作可以讲其他类型的文件一并加入我新建列表中！<h1 id="新建项排序"><a href="#新建项排序" class="headerlink" title="新建项排序"></a>新建项排序</h1><p>参考资料：<a href="https://www.jianshu.com/p/0648378a2bdd">01 调整Win10桌面右键新建顺序 - 简书 (jianshu.com)</a></p><p><code>计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Discardable\PostSetup\ShellNew</code></p><ol><li>修改自己的文件排序<div align = "center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323204351881.png"/></div></li><li>设置权限<div align = "center">  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323204451581.png"/></div></li></ol><div align = "center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323204552500.png"/></div><div align = "center"><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220323204707017.png"/></div><p>完成！</p>]]></content>
    
    
    <categories>
      
      <category>高效工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动手学深度学习v2</title>
    <link href="/blog/post/AI/D2L/"/>
    <url>/blog/post/AI/D2L/</url>
    
    <content type="html"><![CDATA[<h1 id="李沐简介"><a href="#李沐简介" class="headerlink" title="李沐简介"></a>李沐简介</h1><p>李沐于2004年进入<a href="https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E5%B7%A5%E7%A8%8B%E7%B3%BB/10562519">上海交通大学计算机科学与工程系</a>进行本科学习；2009年至2010年担任<a href="https://baike.baidu.com/item/%E9%A6%99%E6%B8%AF%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6/1670844">香港科技大学</a>研究助理；2011年至2012年担任百度高级研究员；2012年至2017年在美国<a href="https://baike.baidu.com/item/%E5%8D%A1%E5%86%85%E5%9F%BA%E6%A2%85%E9%9A%86%E5%A4%A7%E5%AD%A6/567733">卡内基梅隆大学</a>攻读博士学位。2019年编著的《<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/23503380">动手学深度学习</a>》出版。</p><p>李沐是深度学习框架<a href="https://baike.baidu.com/item/MXNet/22228269">MXNet</a>的作者之一。他先后担任过机器学习创业公司Marianas Labs的CTO和百度深度学习研究院的主任研发架构师。他在理论、机器学习、应用和操作系统等多个领域的顶级学术会议（包括FOCS、ICML、NeurIPS、AISTATS、CVPR、KDD 、WSDM、OSDI）上发表过论文。</p><p><a href="https://www.linkedin.com/in/mulicmu?trk=people-guest_people_search-card">https://www.linkedin.com/in/mulicmu?trk=people-guest_people_search-card</a></p><h1 id="深度学习环境配置本地"><a href="#深度学习环境配置本地" class="headerlink" title="深度学习环境配置本地"></a>深度学习环境配置本地</h1><p>有了第一次配置深度学习痛苦的经历，第二次完全是轻车熟路！</p><ol><li>CUDA 112 + cuDNN 8.1</li><li>Miniconda3-py38-4.9.2</li><li>PyTorch </li><li>TensorFlow</li></ol><p><em>2022年3月，尝试跟着李沐老师一起学习，但课程任务比较重，最后还是放弃了！</em></p><hr><hr><h1 id="云服务器D2L运行"><a href="#云服务器D2L运行" class="headerlink" title="云服务器D2L运行"></a>云服务器D2L运行</h1><p><em>2022年9月，保研前后的这段时间，我再一次准备跟上李沐老师的步伐！</em></p><p>在云服务器上将D2L跑起来了，跟着李沐老师一步步学习了！<br>有一点遗憾是云服务器上没有GPU，且CPU性能也很一般，前期其实也用不到GPU，先跟着做吧！能不在本地做，就不在本地做了，上云是最好的了！但是GPU服务器太贵了，以后看看白嫖Google Colab吧！</p><p><a href="https://courses.d2l.ai/zh-v2/">课程安排 - 动手学深度学习课程 (d2l.ai)</a></p><p><a href="http://zh.d2l.ai/chapter_preliminaries/index.html">动手学深度学习 2.0.0-beta1 documentation (d2l.ai)</a></p><blockquote><p>应用深度学习需要同时理解：</p><ul><li>问题的动机和特点；</li><li>将大量不同类型神经网络层通过特定方式组合在一起的模型背后的数学原理；</li><li>在原始数据上拟合极复杂是深层次模型的优化算法；</li><li>有效训练模型、避免数值计算陷阱以及充分利用计算机硬件性能所需的工程技能；</li><li>为解决方案挑选合适的变量（超参数）组合的经验。</li></ul></blockquote><p>这次学到了Softmax这里，但是由于没有机器学习的基础，我已经听不懂了，就转向了吴恩达的机器学习！</p><hr><hr><h1 id="D2L，这次我要坚持到底"><a href="#D2L，这次我要坚持到底" class="headerlink" title="D2L，这次我要坚持到底"></a>D2L，这次我要坚持到底</h1><p><em>2022年11月，学习完吴恩达老师的机器学习之后，我意见学习了很多机器学习的基础知识了，我再次回到了这里，这次，我要坚持到底！！！</em></p><hr><p>参考资料：</p><ul><li>视频课程：<a href="https://space.bilibili.com/1567748478">跟李沐学AI的个人空间_哔哩哔哩_bilibili</a><ul><li><a href="https://www.bilibili.com/video/BV1if4y147hS/?spm_id_from=333.999.0.0&vd_source=6d46640a443a49f050af078d1f65143e">00 预告【动手学深度学习v2】_哔哩哔哩_bilibili</a></li><li><a href="https://courses.d2l.ai/zh-v2/">课程安排 - 动手学深度学习课程 (d2l.ai)</a></li></ul></li><li>电子书（第二版）：MXNet、PyTorch、TensorFlow<ul><li><a href="http://zh.d2l.ai/chapter_preface/index.html">序言 — 动手学深度学习 2.0.0-beta1 documentation (d2l.ai)</a></li><li><a href="http://d2l.ai/chapter_preface/index.html">Preface — Dive into Deep Learning 1.0.0-alpha1.post0 documentation (d2l.ai)</a></li></ul></li><li>纸质书（第一版）：MXNet<ul><li>《动手学深度学习》<a href="https://book.douban.com/subject/33450010/">动手学深度学习 (豆瓣) (douban.com)</a></li></ul></li></ul><p>因为感觉听课其实学的很迷糊，还是以<strong>纸质书和电子书为主</strong>，<strong>以视频为辅</strong>吧！</p><hr><h2 id="环境配置问题"><a href="#环境配置问题" class="headerlink" title="环境配置问题"></a>环境配置问题</h2><ul><li><strong>jupyter notebook切换虚拟环境</strong></li></ul><p><a href="https://blog.csdn.net/gaoyi135/article/details/102701423">jupyter notebook怎么切换到特定的anaconda虚拟环境_Yee_Ko的博客-CSDN博客</a><br><a href="https://blog.csdn.net/weixin_36407399/article/details/87892078">在anaconda中新建环境，并在jupyter notebook添加kernel_小xiao露的博客-CSDN博客_anaconda 新建的虚拟环境中在jupyter notebook 只有一个kernel</a></p><blockquote><p>第一步：创建一个新的虚拟环境，这里我电脑已经有了一个装有torch的环境AAA，为了不污染这个环境，我直接复制AAA环境中的包到环境BBB中：<code>conda create -n BBB --clone AAA</code><br>第二步：在虚拟环境下创建kernel：<code>conda install -n BBB ipykernel</code><br>第三步：激活虚拟环境：<code>source activate BBB</code><br>第四步：将该虚拟环境写进notebook的kernel中：<code>python -m ipykernel install --user --name BBB --display-name &quot;python deep_pytorch&quot;</code><br>这时你在base环境中输入jupyter notebook打开notebook，点击右上角的”new”，这时“notebook:”列表下便会显示两个kerbel名称了。（这里要注意只能在base环境中打开jupyter notebook，因为只有base环境中装了它，虚拟环境中并没有装，而只是装了它的kernel）<br>还有一个tip是如果在代码编辑界面想要更改kernel，直接点击菜单栏的“Kernel”，接着点击”change kernel”，选择你想要的kernel即可。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">(d2l-zh) ubuntu@VM-8-15-ubuntu:~/userDoc/limu-d2l$ pip install ipykernel<br><br>(d2l-zh) ubuntu@VM-8-15-ubuntu:~/userDoc/limu-d2l$ python -m ipykernel install --user --name d2l-zh --display-name <span class="hljs-string">&quot;D2L-ZH&quot;</span><br>Installed kernelspec d2l-zh <span class="hljs-keyword">in</span> /home/ubuntu/.local/share/jupyter/kernels/d2l-zh<br></code></pre></td></tr></table></figure><img src = "https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-16_10-09-36.png"><hr><p><em>以下章节划分均按照《动手学深度学习》电子书</em></p><h2 id="附录A-数学基础"><a href="#附录A-数学基础" class="headerlink" title="附录A 数学基础"></a>附录A 数学基础</h2><p><em>先把需要用到的数学知识学一下吧</em></p><ul><li>线性代数：向量，矩阵，运算方式，范数，特征值与特征向量</li><li>微分：导数和微分，泰勒展开，偏导数，梯度，海森矩阵</li><li>概率：条件概率，期望，均匀分布</li></ul><p>–</p><h2 id="附录B-Jupyter-Notebook使用方法"><a href="#附录B-Jupyter-Notebook使用方法" class="headerlink" title="附录B Jupyter Notebook使用方法"></a>附录B Jupyter Notebook使用方法</h2><p><a href="https://cosmicdusty.cc/post/Tools%2FJupyterNotebook">JupyterNotebook | Murphy’s Blog (cosmicdusty.cc)</a></p><p>–</p><p><font  size=6 color=red>第一部分 深度学习基础</font></p><h2 id="第一章-前言"><a href="#第一章-前言" class="headerlink" title="第一章 前言"></a>第一章 前言</h2><ul><li><p>赫布理论</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E8%B5%AB%E5%B8%83%E7%90%86%E8%AE%BA">赫布理论 - 维基百科，自由的百科全书 (wikipedia.org)</a><br>赫布理论（英语：Hebbian theory）是一个神经科学理论，解释了在学习的过程中脑中的神经元所发生的变化。赫布理论描述了突触可塑性的基本原理，即突触前神经元向突触后神经元的持续重复的刺激，可以导致突触传递效能的增加。</p></blockquote></li><li><p>强化合意的行为、惩罚不合意的行为，最终获得优良的神经网络参数。</p></li><li><p>神经网络包含的核心原则：</p><ul><li>　交替使用线性处理单元和非线性处理单元，它们通常被称为“层”；</li><li>　使用链式法则（即反向传播）来更新网络的参数。</li></ul></li><li><p>Iris</p><ul><li><a href="https://archive.ics.uci.edu/ml/datasets/iris">UCI Machine Learning Repository: Iris Data Set</a></li></ul></li><li><p>MNIST</p><ul><li><a href="http://yann.lecun.com/exdb/mnist/">MNIST handwritten digit database, Yann LeCun, Corinna Cortes and Chris Burges</a></li><li><a href="https://www.tensorflow.org/datasets/catalog/mnist">mnist | TensorFlow Datasets</a></li><li><a href="https://paperswithcode.com/dataset/mnist">MNIST Dataset | Papers With Code</a></li><li><a href="https://www.kaggle.com/competitions/digit-recognizer">Digit Recognizer | Kaggle</a></li></ul></li><li><p>机器学习与深度学习的关系</p><ul><li>_机器学习_（machine learning，ML）是一类强大的可以从经验中学习的技术。 通常采用观测数据或与环境交互的形式，机器学习算法会积累更多的经验，其性能也会逐步提高。</li><li><strong>机器学习</strong>研究如何使计算机系统利用经验改善性能。它是<strong>人工智能</strong>领域的分支，也是实现人工智能的一种手段。</li><li>在机器学习的众多研究方向中，<strong>表征学习</strong>关注如何自动找出表示数据的合适方式，以便更好地将输入变换为正确的输出。</li><li><strong>深度学习</strong>是具有多级表示的表征学习方法。在每一级（从原始数据开始），深度学习通过简单的函数将该级的表示变换成更高级的表示。</li><li>因此深度学习模型也可以看作是由许多简单函数复合而成的函数。当这些复合的函数足够多时，深度学习模型就可以表达非常复杂的变换。</li><li>深度学习可以逐级表示越来越抽象的概念或模式。深度学习将自动找出每一级表示数据的合适方式。</li><li>端到端的训练：将整个系统组建好之后一起训练，而不是单端调试每一部分最后再拼起来。</li><li>从含参数统计模型转向完全无参数的模型。</li></ul></li></ul><blockquote><ul><li>你可以把参数看作是旋钮，我们可以转动旋钮来调整程序的行为。 任一调整参数后的程序，我们称为模型（model）。 通过操作参数而生成的所有不同程序（输入-输出映射）的集合称为“模型族”。 使用数据集来选择参数的元程序被称为学习算法（learning algorithm）。</li><li>在机器学习中，学习（learning）是一个训练模型的过程。 通过这个过程，我们可以发现正确的参数集，从而使模型强制执行所需的行为。 换句话说，我们用数据训练（train）我们的模型。<br>训练过程通常包含如下步骤：</li></ul><ol><li>从一个随机初始化参数的模型开始，这个模型基本毫不“智能”。 </li><li>获取一些数据样本（例如，音频片段以及对应的是否{是,否}标签）。</li><li>调整参数，使模型在这些样本中表现得更好。</li><li>重复第2步和第3步，直到模型在任务中的表现令你满意。</li></ol></blockquote><ul><li><p>机器学习问题中的关键组件：</p><ol><li>我们可以学习的数据（data）。</li><li>如何转换数据的模型（model）。</li><li>一个目标函数（objective function），用来量化模型的有效性。在机器学习中，我们需要定义模型的优劣程度的度量，这个度量在大多数情况是“可优化”的，我们称之为目标函数（objective function）。 我们通常定义一个目标函数，并希望优化它到最低点。 因为越低越好，所以这些函数有时被称为损失函数（loss function，或cost function）。</li><li>调整模型参数以优化目标函数的算法（algorithm）。<ul><li>一旦我们获得了一些数据源及其表示、一个模型和一个合适的损失函数，我们接下来就需要一种算法，它能够搜索出最佳参数，以最小化损失函数。 深度学习中，大多流行的优化算法通常基于一种基本方法–梯度下降（gradient descent）。</li></ul></li></ol></li><li><p><em>监督学习</em>（supervised learning）</p><ul><li>回归（regression）</li><li>分类（classification）</li><li>多标签分类（multi-label classification）</li><li>搜索</li><li>推荐系统（recommender system）</li><li>序列学习：标记和解析，自动语音识别，文本到语音，机器翻译</li></ul></li><li><p><em>无监督学习</em>（unsupervised learning）</p><ul><li>聚类（clustering）问题</li><li>主成分分析（principal component analysis）问题</li><li>因果关系（causality）和_概率图模型_（probabilistic graphical models）问题</li><li><em>生成对抗性网络</em>（generative adversarial networks）</li></ul></li><li><p>与环境互动</p><ul><li><em>离线学习</em>（offline learning）：监督学习和无监督学习，预先获取大量的数据，启动模型，与环境不再交互。</li></ul></li><li><p>强化学习（reinforcement learning）</p><ul><li><em>深度强化学习</em>（deep reinforcement learning）将深度学习应用于强化学习的问题，是非常热门的研究领域。</li><li>突破性的深度<em>Q网络</em>（Q-network）在雅达利游戏中仅使用视觉输入就击败了人类， 以及 AlphaGo 程序在棋盘游戏围棋中击败了世界冠军，是两个突出强化学习的例子。</li><li>强化学习的目标是产生一个好的<em>策略</em>（policy）。</li><li>我们可以将任何监督学习问题转化为强化学习问题。</li><li>强化学习者必须处理学分<em>分配</em>（credit assignment）问题：决定哪些行为是值得奖励的，哪些行为是需要惩罚的。</li><li>当<strong>环境可被完全观察到</strong>时，我们将强化学习问题称为<em>马尔可夫决策过程</em>（markov decision process）。 当<strong>状态不依赖于之前的操作</strong>时，我们称该问题为上下文赌博机（contextual bandit problem）。 当<strong>没有状态</strong>，只有一组最初未知回报的可用动作时，这个问题就是经典的<em>多臂赌博机</em>（multi-armed bandit problem）。</li></ul></li></ul><hr><h2 id="第二章-预备知识"><a href="#第二章-预备知识" class="headerlink" title="第二章 预备知识"></a>第二章 预备知识</h2><p><font  size=4 color=yellow>2.1 数据操作</font><br>n维数组，也称为<em>张量</em>（tensor），无论使用哪个深度学习框架，它的_张量类_（在MXNet中为<code>ndarray</code>， 在PyTorch和TensorFlow中为<code>Tensor</code>）都与Numpy的<code>ndarray</code>类似。但深度学习框架又比NumPy的<code>ndarray</code>多一些重要功能：GPU很好地支持加速计算，而NumPy仅支持CPU计算； 其次，张量类支持自动微分。 这些功能使得张量类更适合深度学习。</p><ul><li>张量<em>连结</em>（concatenate）<ul><li>张量与张量端对端地叠起来形成一个更大的张量</li><li>dim&#x3D;0：在行上</li><li>dim&#x3D;1：在列上  <img src =  'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-15_18-54-09.png'></li></ul></li><li>广播机制<ul><li>对于不同形状的两个张量如何运算？</li><li>首先，通过适当复制元素来扩展一个或两个数组， 以便在转换之后，两个张量具有相同的形状。 其次，对生成的数组执行按元素操作。</li><li><a href="https://blog.csdn.net/luoganttcc/article/details/117925855">张量的广播机制_luoganttcc的博客-CSDN博客_张量广播</a><ul><li>如果两个数组的<strong>后缘维度(从末尾开始算起的维度)<strong>的</strong>轴长度相符</strong>或<strong>其中一方的长度为1</strong>，则认为它们是广播兼容的。广播会在<strong>缺失维度</strong>和(或)<strong>轴长度为1的维度</strong>上进行。</li><li><a href="https://gsy00517.github.io/pytorch20200228111430/">pytorch笔记：张量的广播机制 | 高深远的博客 (gsy00517.github.io)</a></li><li><a href="https://pytorch.org/docs/stable/notes/broadcasting.html">Broadcasting semantics — PyTorch 1.13 documentation</a><ul><li>Two tensors are “broadcastable” if the following rules hold:<ul><li>Each tensor has at least one dimension.   </li><li>When iterating over the dimension sizes, starting at <strong>the trailing dimension</strong>, the dimension sizes must either be equal, one of them is 1, or one of them does not exist.</li></ul></li><li>当一对张量满足下面的条件时，它们才是可以被“广播”的。<ul><li>1.每个张量至少有一个维度。</li><li>2.迭代维度尺寸时，从<strong>尾部</strong>（也就是从后往前）开始，<strong>依次每个维度</strong>的尺寸必须<strong>满足以下之一</strong>：<ul><li><strong>相等</strong>。</li><li>其中一个张量的维度<strong>尺寸为1</strong>。</li><li>其中一个张量<strong>不存在</strong>这个维度。</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>节省内存<ul><li>我们希望原地执行这些更新。</li><li><code>Z[:] = X + Y</code></li><li><code>X += Y</code></li></ul></li></ul><p><font  size=4 color=yellow>2.2 数据预处理</font></p><ul><li>pandas</li><li><a href="http://c.biancheng.net/pandas/loc-iloc.html">Pandas loc&#x2F;iloc用法详解 (biancheng.net)</a></li></ul><p><font  size=4 color=yellow>2.3 线性代数</font></p><ul><li><em>向量</em>或<em>轴</em>的维度被用来表示<em>向量</em>或<em>轴</em>的长度，即向量或轴的元素数量。 然而，张量的维度用来表示张量具有的轴数。</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU4NTY4Mzg1Mw==&mid=2247486772&idx=2&sn=64f81cbd1f9fc4a6539413b3353b6f57&chksm=fd878bd6caf002c0777729064ad359f339e2825f432887d356732eb7de2a029ea8adee07e6c2&scene=21#wechat_redirect">张量解释——深度学习的数据结构 (qq.com)</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU4NTY4Mzg1Mw==&mid=2247486778&idx=2&sn=717d0ce0041b4686c5ba41d26dd38d5a&chksm=fd878bd8caf002ce0174e7e104f6fc1b5d3d1c27a0c87035af0e88debdd7b19b97c3c9528af8&cur_album_id=1348307731685474306&scene=190#rd">深度学习中关于张量的阶、轴和形状的解释 | Pytorch系列（二） (qq.com)</a></li><li><a href="https://tensorflow.google.cn/guide/tensor?hl=zh-cn">张量简介 | TensorFlow Core (google.cn)</a></li><li>降维<ul><li>默认情况下，调用求和函数会沿所有的轴降低张量的维度，使它变为一个标量。</li><li>我们还可以[<strong>指定张量沿哪一个轴来通过求和降低维度</strong>]。 以矩阵为例，为了通过求和所有行的元素来降维（轴0），我们可以在调用函数时指定<code>axis=0</code>。 由于输入矩阵沿0轴降维以生成输出向量，因此输入轴0的维数在输出形状中消失。</li></ul></li><li>计算<ul><li>torch.dot(vector_a, vector_b)</li><li>torch.mv(matrix_a, vertor_b)</li><li>torch.mm(matrix_A, matrix_B)</li></ul></li><li><em>范数</em>（norm）<ul><li>非正式地说，一个向量的 <em>范数</em> 告诉我们一个向量有多大。 这里考虑的 <em>大小</em> （size）概念不涉及维度，而是分量的大小。</li><li>在线性代数中，向量范数是将向量映射到标量的函数$f$。</li><li>欧几里得距离是一个$L_2$范数</li><li>$L_2$范数:torch.norm(x)</li><li>$L_1$范数:torch.abs(x).sum()</li></ul></li><li>标量、向量、矩阵和张量分别具有零、一、二和任意数量的轴。</li><li><a href="https://pytorch.org/docs/stable/generated/torch.linalg.norm.html">torch.linalg.norm — PyTorch 1.13 documentation</a></li></ul><p><font  size = 4 color = yellow>2.4 微积分 </font></p><ul><li>我们可以将拟合模型的任务分解为两个关键问题：<ul><li><em>优化</em>（optimization）：用模型拟合观测数据的过程；</li><li><em>泛化</em>（generalization）：数学原理和实践者的智慧，能够指导我们生成出有效性超出用于训练的数据集本身的模型。</li></ul></li></ul><p><font  size = 4 color = yellow>2.5 自动微分 </font></p><p>深度学习框架通过自动计算导数，即 <em>自动微分</em> （automatic differentiation）来加快求导。 实际中，根据我们设计的模型，系统会构建一个 <em>计算图</em> （computational graph）， 来跟踪计算是哪些数据通过哪些操作组合起来产生输出。 自动微分使系统能够随后<strong>反向传播梯度</strong>。 这里，<em>反向传播</em>（backpropagate）意味着跟踪整个计算图，填充关于每个参数的偏导数。</p><ul><li><p>自动求导是计算一个函数在指定值上的导数，这与符号求导和数值求导有区别</p><ul><li>自动求导：计算函数在指定值上的导数；（PyTorch✔）</li><li>符号求导：根据函数表达式，计算出导数表达式（数学计算中）；</li><li>数值求导：给定一个不知道表达式的函数，通过数值拟合出导数。</li></ul></li><li><p>计算图</p><ul><li>将代码分解成操作子</li><li>将计算表示成一个无环图</li><li>显示构造：TensorFlow&#x2F;Theano&#x2F;MXNet</li><li>隐示构造：PyTorch&#x2F;MXNet</li></ul></li><li><p>自动求导有两种模式</p><ul><li>正向累计</li><li>反向累计（反向传递）（backpropagate）(✔)</li></ul></li><li><p>存储梯度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x.requires_grad_(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 等价于x=torch.arange(4.0,requires_grad=True)</span><br></code></pre></td></tr></table></figure></li><li><p>清除梯度，防止梯度累加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在默认情况下，PyTorch会累积梯度，我们需要清除之前的值</span><br>x.grad.zero_()<br></code></pre></td></tr></table></figure></li><li><p>非标量变量的反向传播 <em>（没听懂）</em></p><ul><li>深度学习中，不是为了计算微分矩阵，而是批量中每个样本单独计算的偏导数之和。</li><li>大多数情况下都是对标量进行求导✔<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对非标量调用backward需要传入一个gradient参数，该参数指定微分函数关于self的梯度。</span><br><span class="hljs-comment"># 在我们的例子中，我们只想求偏导数的和，所以传递一个1的梯度是合适的</span><br>x.grad.zero_()<br>y = x * x<br><span class="hljs-comment"># 等价于y.backward(torch.ones(len(x)))</span><br>y.<span class="hljs-built_in">sum</span>().backward()<br>x.grad<br><br>---<br>tensor([<span class="hljs-number">0.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">6.</span>])<br></code></pre></td></tr></table></figure></li></ul></li><li><p>深度学习框架可以自动计算导数：我们首先将梯度附加到想要对其计算偏导数的变量上。然后我们记录目标值的计算，执行它的反向传播函数，并访问得到的梯度。</p></li></ul><p><font  size = 4 color = yellow>2.6 概率 </font></p><p><font  size = 4 color = yellow>2.7 查阅文档 </font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span>(torch.ones)<br></code></pre></td></tr></table></figure><p>通常，我们可以忽略以“<code>__</code>”（双下划线）开始和结束的函数（它们是Python中的特殊对象）， 或以单个“<code>_</code>”（单下划线）开始的函数（它们通常是内部函数）。</p><hr><h2 id="第三章-线性神经网络"><a href="#第三章-线性神经网络" class="headerlink" title="第三章 线性神经网络"></a>第三章 线性神经网络</h2><p><font size = 4 color = yellow> 3.1 线性回归 </font></p><ul><li>training set; sample; label; feature;</li><li>线性模型<ul><li>_模型参数_（model parameters）𝐰和𝑏</li><li>需要两个辅助模型的东西：（1）一种模型质量的度量方式； （2）一种能够更新模型以提高模型预测质量的方法。</li></ul></li><li>损失函数<ul><li>_损失函数_（loss function）能够量化目标的_实际_值与_预测_值之间的差距。</li><li>回归问题中最常用的损失函数是平方误差函数。</li></ul></li><li>解析解<ul><li>与我们将在本书中所讲到的其他大部分模型不同，线性回归的解可以用一个公式简单地表达出来， 这类解叫作解析解（analytical solution）。</li></ul></li><li>随机梯度下降<ul><li>_梯度下降_（gradient descent）</li><li>梯度下降最简单的用法是计算损失函数（数据集中所有样本的损失均值） 关于模型参数的导数（在这里也可以称为梯度）。 但实际中的执行可能会 <strong>非常慢</strong>：因为在每一次更新参数之前，我们必须遍历整个数据集。 因此，我们通常会在每次需要计算更新的时候<strong>随机抽取一小批样本</strong>， 这种变体叫做_小批量随机梯度下降_（minibatch stochastic gradient descent）。</li><li>步骤：（1）初始化模型参数的值，如随机初始化； （2）从数据集中随机抽取小批量样本且在负梯度的方向上更新参数，并不断迭代这一步骤。</li></ul></li><li>超参数<ul><li>|B|表示每个小批量中的样本数，这也称为_批量大小_（batch size）。 𝜂表示_学习率_（learning rate）。 批量大小和学习率的值通常是手动预先指定，而不是通过模型训练得到的。 这些可以调整但不在训练过程中更新的参数称为_超参数_（hyperparameter）。 </li><li>_调参_（hyperparameter tuning）是选择超参数的过程。 超参数通常是我们根据训练迭代结果来调整的， 而训练迭代结果是在独立的_验证数据集_（validation dataset）上评估得到的。</li><li><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E5%8F%82%E6%95%B0_(%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0)">超参数 (机器学习) - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://en.wikipedia.org/wiki/Hyperparameter_(machine_learning)">Hyperparameter (machine learning) - Wikipedia</a></li><li>在机器学习中，超参数(英语：Hyperparameter)是事先给定的，用来控制学习过程的参数。而其他参数（例如节点权重）的值是通过训练得出的。</li><li>事实上，更难做到的是找到一组参数，这组参数能够在我们从未见过的数据上实现较低的损失， 这一挑战被称为_泛化_（generalization）。</li></ul></li><li>给定特征估计目标的过程通常称为_预测_（prediction）或_推断_（inference）。</li><li>从线性回归到深度网络<ul><li>线性回归是一个单层神经网络。</li></ul></li></ul><p><font size=4 color=yellow>3.2 线性回归的从零开始实现</font></p><ul><li>生成器 Generator<ul><li><a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python">generator - What does the “yield” keyword do in Python? - Stack Overflow</a></li><li><a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856">python中yield的用法详解——最简单，最清晰的解释_冯爽朗的博客-CSDN博客_python yield</a></li></ul></li><li>定义模型：线性回归模型</li><li>定义损失函数：MSE（均值平方误差函数）</li><li>定义优化算法：SGD（小批量随机梯度下降）<ul><li><code>with torch.no_grad():</code><a href="https://blog.csdn.net/sazass/article/details/116668755">【pytorch系列】 with torch.no_grad():用法详解_大黑山修道的博客-CSDN博客_with torch.no_grad()作用</a></li><li>在该模块下，所有计算得出的tensor的requires_grad都自动设置为False。</li><li>当requires_grad设置为False时,反向传播时就不会自动求导了。</li></ul></li><li>训练<ul><li>初始化模型参数</li><li>重复<ul><li>计算梯度</li><li>更新参数w和b</li></ul></li></ul></li></ul><p><font size=4 color=yellow>3.3 线性回归的简洁实现</font></p><ul><li><p>定义模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># nn是神经网络的缩写</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br>net = nn.Sequential(nn.Linear(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure></li><li><p>初始化模型参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">net[<span class="hljs-number">0</span>].weight.data.normal_(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>)<br>net[<span class="hljs-number">0</span>].bias.data.fill_(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></li><li><p>定义损失函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.MSELoss()<br></code></pre></td></tr></table></figure></li><li><p>定义优化算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">trainer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.03</span>)<br><span class="hljs-comment"># lr : learning rate</span><br></code></pre></td></tr></table></figure></li><li><p>训练</p><ul><li>通过调用<code>net(X)</code>生成预测并计算损失<code>l</code>（前向传播）。</li><li>通过进行反向传播来计算梯度。</li><li>通过调用优化器来更新模型参数。</li></ul></li><li><p>凹函数和凸函数</p><ul><li><a href="https://zhuanlan.zhihu.com/p/41951590">凸函数与凹函数 - 知乎 (zhihu.com)</a></li><li><a href="https://zhaokaifeng.com/?p=10343">什么是凹函数和凸函数？（图文举例详细说明） - 荒原之梦 (zhaokaifeng.com)</a></li></ul></li><li><p>requires_grad&#x3D;True</p><ul><li><a href="https://pytorch-cn.readthedocs.io/zh/latest/notes/autograd/">自动求导机制 - PyTorch中文文档 (pytorch-cn.readthedocs.io)</a></li></ul></li><li><p>Sequential</p><ul><li><a href="https://zhuanlan.zhihu.com/p/64990232">PyTorch 中的 ModuleList 和 Sequential: 区别和使用场景 - 知乎 (zhihu.com)</a></li></ul></li><li><p>机器学习中大部分都是NP Complete 问题</p><ul><li><a href="https://zh.wikipedia.org/wiki/NP%E5%AE%8C%E5%85%A8">NP完全 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://www.mathsisfun.com/sets/np-complete.html">NP-Complete - A Rough Guide (mathsisfun.com)</a></li></ul></li></ul><p><font size = 4 color = yellow>3.4 softmax 回归</font></p><ul><li><p>softmax回归是分类问题</p></li><li><p>回归于分类问题的区别</p><ul><li>回归：单连续数值输出；分类：通常是多输出</li><li>回归：跟真实值的区别作为损失；分类：输出i是预测为第i类的置信度。</li></ul></li><li><p>类别编码</p><ul><li>_独热编码_（one-hot encoding）。 独热编码是一个向量，它的分量和类别一样多。 类别对应的分量设置为1，其他所有分量设置为0。</li></ul></li><li><p>似然函数</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E4%BC%BC%E7%84%B6%E5%87%BD%E6%95%B0">似然函数 - 维基百科，自由的百科全书 (wikipedia.org)</a></li></ul></li><li><p>argmax</p><ul><li>最大值自变量点集</li><li><a href="https://zhuanlan.zhihu.com/p/79383099">argmax - 知乎 (zhihu.com)</a></li><li><a href="https://en.wikipedia.org/wiki/Arg_max">Arg max - Wikipedia</a></li><li><a href="https://machinelearningmastery.com/argmax-in-machine-learning/">What Is Argmax in Machine Learning? (machinelearningmastery.com)</a></li></ul></li><li><p>softmax回归模型</p><ul><li>softmax回归的输出值个数等于标签里的类别数。</li><li>softmax函数能够将未规范化的预测变换为非负数并且总和为1，同时让模型保持 可导的性质。</li><li>softmax回归的矢量计算表达式为：<br>  $$ \begin{aligned} \mathbf{O} &amp;&#x3D; \mathbf{X} \mathbf{W} + \mathbf{b}, \ \hat{\mathbf{Y}} &amp; &#x3D; \mathrm{softmax}(\mathbf{O}). \end{aligned} $$</li></ul></li><li><p>损失函数</p><ul><li>交叉熵 cross entropy</li><li>交叉熵损失函数</li></ul></li><li><p>信息论</p><ul><li>信息量</li><li>熵</li><li>我们可以从两方面来考虑交叉熵分类目标： （i）最大化观测数据的似然；（ii）最小化传达标签所需的惊异。</li></ul></li></ul><p><font size = 4 color = yellow>3.5 图像分类数据集</font></p><ul><li>数据集<ul><li>MNIST<ul><li><a href="https://en.wikipedia.org/wiki/MNIST_database">MNIST database - Wikipedia</a></li><li><a href="https://deepai.org/dataset/mnist">deepai.org</a></li></ul></li><li>ImageNet<ul><li>   <a href="https://www.image-net.org/">ImageNet (image-net.org)</a></li></ul></li><li>Fashion MNIST<ul><li><a href="https://www.kaggle.com/datasets/zalando-research/fashionmnist">Fashion MNIST | Kaggle</a></li><li><a href="https://zhuanlan.zhihu.com/p/28847070">Fashion-MNIST：替代MNIST手写数字集的图像数据集 - 知乎 (zhihu.com)</a></li></ul></li></ul></li></ul><p><font size = 4 color = yellow>3.6 softmax回归的从零开始实现</font></p><ul><li>初始化模型参数<ul><li>输入是图像（28*28 &#x3D; 784）</li><li>输出是类别：共10个类别</li><li>权重W是784*10的矩阵</li><li>偏差b是维度为10的行向量</li></ul></li><li>定义softmax操作<ul><li>步骤<ul><li><ol><li>对每个项求幂（使用<code>exp</code>）；</li></ol></li><li><ol start="2"><li>对每一行求和（小批量中每个样本是一行），得到每个样本的规范化常数；</li></ol></li><li><ol start="3"><li>将每一行除以其规范化常数，确保结果的和为1。</li></ol></li></ul></li><li>$$<br>  \mathrm{softmax}(\mathbf{X})<em>{ij} &#x3D; \frac{\exp(\mathbf{X}</em>{ij})}{\sum_k \exp(\mathbf{X}_{ik})}.<br>  $$</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">softmax</span>(<span class="hljs-params">X</span>):<br>   X_exp = torch.exp(X)<br>   partition = X_exp.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>   <span class="hljs-keyword">return</span> X_exp / partition  <span class="hljs-comment"># 这里应用了广播机制</span><br></code></pre></td></tr></table></figure><ul><li><p>定义模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">net</span>(<span class="hljs-params">X</span>):<br>    <span class="hljs-keyword">return</span> softmax(torch.matmul(X.reshape((-<span class="hljs-number">1</span>, W.shape[<span class="hljs-number">0</span>])), W) + b)<br></code></pre></td></tr></table></figure></li><li><p>定义损失函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross_entropy</span>(<span class="hljs-params">y_hat, y</span>):<br>    <span class="hljs-keyword">return</span> - torch.log(y_hat[<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(y_hat)), y])<br></code></pre></td></tr></table></figure></li><li><p>训练</p></li><li><p>预测</p></li></ul><p><font size = 4 color = yellow>3.7 softmax回归的简洁实现</font></p><ul><li><p>初始化模型参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># PyTorch不会隐式地调整输入的形状。因此，</span><br><span class="hljs-comment"># 我们在线性层前定义了展平层（flatten），来调整网络输入的形状</span><br>net = nn.Sequential(nn.Flatten(), nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">10</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>        nn.init.normal_(m.weight, std=<span class="hljs-number">0.01</span>)<br><br>net.apply(init_weights);<br></code></pre></td></tr></table></figure></li><li><p>定义损失函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>定义优化算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">trainer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure></li><li><p>训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs = <span class="hljs-number">10</span><br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)<br></code></pre></td></tr></table></figure></li></ul><hr><hr><h2 id="第四章-多层感知机"><a href="#第四章-多层感知机" class="headerlink" title="第四章 多层感知机"></a>第四章 多层感知机</h2><p>最简单的深度网络称为_多层感知机_。多层感知机由多层神经元组成， 每一层与它的上一层相连，从中接收输入； 同时每一层也与它的下一层相连，影响当前层的神经元。</p><ul><li><strong>过拟合</strong>、<strong>欠拟合</strong>和模型选择。</li><li><em>权重衰减</em>和<em>暂退法</em>等正则化技术。</li><li>数值稳定性和参数初始化相关的问题，</li></ul><p><font size = 4 color = yellow>感知机 Proceptron</font></p><ul><li>二分类模型，最早的AI模型之一</li><li>收敛定理</li><li>求解算法等价于使用批量大小为1的梯度下降。</li><li>XOR问题<ul><li>感知机不能拟合XOR函数，它只能产生线性分割面。导致了AI的第一次寒冬。</li><li><a href="https://cloud.tencent.com/developer/article/2103800">感知机(Perceptron)为什么不能表示异或(XOR) - 腾讯云开发者社区-腾讯云 (tencent.com)</a></li><li><a href="https://www.zhihu.com/question/263676843">多层感知机是如何解决异或问题的？ - 知乎 (zhihu.com)</a></li></ul></li></ul><p><font size = 4 color = yellow>4.1 多层感知机</font></p><ul><li>视频内容小结：<ul><li>多层感知机使用隐藏层和激活函数来得到非线性模型</li><li>常用激活函数是Sigmoid，Tanh，ReLU</li><li>使用softmax来处理多类分类</li><li>超参数：隐藏层数，各个隐藏层大小</li></ul></li><li>隐藏层<ul><li>线性模型可能会出错</li><li>我们可以通过在网络中加入一个或多个隐藏层来克服线性模型的限制， 使其能处理更普遍的函数关系类型。</li><li>要做到这一点，最简单的方法是将许多全连接层堆叠在一起。 每一层都输出到上面的层，直到生成最后的输出。 我们可以把前𝐿−1L−1层看作表示，把最后一层看作线性预测器。 这种架构通常称为 _多层感知机_（multilayer perceptron），通常缩写为 _MLP_。</li><li>输入层不涉及任何计算，因此使用此网络产生输出只需要实现隐藏层和输出层的计算。</li></ul></li><li>非线性<ul><li>为了发挥多层架构的潜力， 我们还需要一个额外的关键要素： 在仿射变换之后对每个隐藏单元应用非线性的 _激活函数_（activation function）𝜎。 激活函数的输出（例如，𝜎(⋅)）被称为 _活性值_（activations）。 一般来说，有了激活函数，就不可能再将我们的多层感知机退化成线性模型</li></ul></li><li>激活函数<ul><li>_激活函数_（activation function）通过计算加权和并加上偏置来确定神经元是否应该被激活， 它们将输入信号转换为输出的可微运算。 </li><li>大多数激活函数都是非线性的。</li><li>_修正线性单元_（Rectified linear unit，_ReLU_）<ul><li>当输入为负时，ReLU函数的导数为0，而当输入为正时，ReLU函数的导数为1。 </li><li>注意，当输入值精确等于0时，ReLU函数不可导。 </li><li>在此时，我们默认使用左侧的导数，即当输入为0时导数为0。</li></ul></li><li>_参数化ReLU_（Parameterized ReLU，_pReLU_）</li><li>sigmoid函数<ul><li>sigmoid通常称为_挤压函数_（squashing function）</li></ul></li><li>tanh函数</li></ul></li></ul><p><font size = 4 color = yellow >4.2 多层感知机的从零开始实现</font></p><p>单隐含层，256个隐藏单元</p><ul><li>初始化模型参数</li><li>设置激活函数<ul><li>ReLU</li></ul></li><li>定义模型</li><li>定义损失函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>训练</li></ul><p><font size = 4 color = yellow >4.3 多层感知机的简洁实现</font></p><ul><li>定义模型<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">net</span> = nn.Sequential(nn.Flatten(),<br>                    <span class="hljs-attribute">nn</span>.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">256</span>),<br>                    <span class="hljs-attribute">nn</span>.ReLU(),<br>                    <span class="hljs-attribute">nn</span>.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">10</span>))<br><br><span class="hljs-attribute">def</span> init_weights(m):<br>    <span class="hljs-attribute">if</span> type(m) == nn.Linear:<br>        <span class="hljs-attribute">nn</span>.init.normal_(m.weight, std=<span class="hljs-number">0</span>.<span class="hljs-number">01</span>)<br><span class="hljs-attribute">net</span>.apply(init_weights);<br></code></pre></td></tr></table></figure></li></ul><p><font size = 4 color = yellow>4.4 模型选择、欠拟合和过拟合</font></p><ul><li>视频内容小结<ul><li>模型选择<ul><li>训练误差与泛化误差</li><li>训练数据集，验证数据集，测试数据集<ul><li>训练数据集：训练模型参数</li><li>验证数据集：一个用来评估模型好坏的数据集，选择模型超参数<ul><li>验证数据集不要和训练数据混在一起</li></ul></li><li>测试数据集：只用一次的数据集。</li></ul></li><li>k折交叉验证</li></ul></li><li>过拟合overfitting、欠拟合underfitting<ul><li>模型容量<ul><li>拟合各种函数的能力</li><li>低容量的模型难以拟合训练数据</li><li>高容量的模型可以记住所有的训练数据</li></ul></li><li>估计模型容量<ul><li>难以在不同种类的算法之间比较</li><li>给定一个模型种类，将有两个主要因素<ul><li><strong>参数的个数</strong></li><li><strong>参数值的选择范围</strong></li></ul></li></ul></li><li>VC维（VC dimension）<ul><li>统计学习理论的一个核心思想</li><li>对于一个分类模型，VC等于一个最大的数据集的大小，不管如何给定标号，都存在一个模型来对它进行完美分类。</li><li>计算深度学习模型的VC维很困难</li></ul></li><li>数据复杂度<ul><li>样本个数</li><li>每个样本的元素个数</li><li>时间、空间结构</li><li>多样性</li></ul></li></ul></li></ul></li></ul><p>几个倾向于影响模型泛化的因素：</p><ol><li>可调整参数的数量。当可调整参数的数量（有时称为_自由度_）很大时，模型往往更容易过拟合。</li><li>参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合。</li><li>训练样本的数量。即使你的模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型。</li></ol><p>解决此问题的常见做法是将我们的数据分成三份， 除了训练和测试数据集之外，还增加一个 _验证数据集_（validation dataset）， 也叫 _验证集_（validation set）。 但现实是验证数据和测试数据之间的边界模糊得令人担忧。 除非另有明确说明，否则在这本书的实验中， 我们实际上是在使用应该被正确地称为训练数据和验证数据的数据集， 并没有真正的测试数据集。 因此，书中每次实验报告的准确度都是验证集准确度，而不是测试集准确度。</p><p><font size = 4 color = yellow >4.5 权重衰退（正则化模型的技术）</font><br>weight decay</p><ul><li>权重衰退等价于L2范数正则化（柔性限制）。</li><li>_权重衰减_（weight decay）是最广泛使用的正则化的技术之一， 它通常也被称为L2 _正则化_。</li><li>将原来的训练目标 _最小化训练标签上的预测损失_， 调整为 _最小化预测损失和惩罚项之和_。</li><li><em>正则化常数</em> λ</li><li>小结<ul><li>正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度。</li><li>保持模型简单的一个特别的选择是使用𝐿2L2惩罚的权重衰减。这会导致学习算法更新步骤中的权重衰减。</li><li>权重衰减功能在深度学习框架的优化器中提供。</li><li>在同一训练代码实现中，不同的参数集可以有不同的更新行为。</li></ul></li></ul><p><font size = 4 color = yellow >4.6 暂退法(丢弃法)（Dropout）</font></p><ul><li>动机：一个好的模型需要对输入数据的扰动鲁棒<ul><li>使用有噪音的数据等价于Tikhonov正则</li><li>丢弃法：在层直接加入噪音（通常将丢弃法作用在隐藏全连接层的输出上）</li><li>在数据中加入噪音（随机噪音），等价于一个正则</li></ul></li><li>小结<ul><li>丢弃法将一些输出项随机置0来控制模型复杂度；</li><li>常作用在<strong>多层感知机</strong>的<strong>隐藏层输出</strong>上；</li><li>丢弃概率是控制模型复杂度的超参数。</li></ul></li></ul><p><font size = 4 color= yellow>4.7 前向传播、反向传播、计算图</font></p><ul><li><em>前向传播</em> （forward propagation或forward pass） 指的是：按顺序（从输入层到输出层）计算和存储神经网络中每层的结果。</li><li><em>反向传播</em> （backward propagation或backpropagation）指的是计算神经网络参数梯度的方法。 简言之，该方法根据微积分中的 <em>链式规则</em> ，按相反的顺序从输出层到输入层遍历网络。 该算法存储了计算某些参数梯度时所需的任何中间变量（偏导数）。（信号前向传播，误差反向传播）</li><li>在训练神经网络时，前向传播和反向传播相互依赖。 对于前向传播，我们沿着依赖的方向遍历计算图并计算其路径上的所有变量。 然后将这些用于反向传播，其中计算顺序与计算图的相反。</li><li>因此，在训练神经网络时，在初始化模型参数后， 我们交替使用前向传播和反向传播，<strong>利用反向传播给出的梯度来更新模型参数</strong> 。 注意，反向传播重复利用前向传播中存储的中间值，以避免重复计算。 带来的影响之一是我们需要保留中间值，直到反向传播完成。 这也是训练比单纯的预测需要更多的内存（显存）的原因之一。 此外，这些中间值的大小与网络层的数量和批量的大小大致成正比。 因此，使用更大的批量来训练更深层次的网络更容易导致 _内存不足_（out of memory）错误。</li><li>小结<ul><li>前向传播在神经网络定义的计算图中按顺序计算和存储中间变量，它的顺序是从输入层到输出层。</li><li>反向传播按相反的顺序（从输出层到输入层）计算和存储神经网络的中间变量和参数的梯度。</li><li>在训练深度学习模型时，前向传播和反向传播是相互依赖的。</li><li>训练比预测需要更多的内存。</li></ul></li></ul><p><font size = 4 color = yellow>4.8 数值稳定性和模型初始化</font></p><blockquote><p><strong>初始化方案的选择在神经网络学习中起着举足轻重的作用， 它对保持数值稳定性至关重要。</strong><br>我们选择哪个函数以及如何初始化参数可以决定优化算法收敛的速度有多快。<br>糟糕选择可能会导致我们在训练时遇到梯度爆炸或梯度消失。</p></blockquote><p>不稳定梯度带来的风险不止在于数值表示； 不稳定梯度也威胁到我们优化算法的稳定性。 我们可能面临一些问题。 </p><ul><li><p>要么是 <em>梯度爆炸</em> （gradient exploding）问题： 参数更新过大，破坏了模型的稳定收敛； </p></li><li><p>要么是 <em>梯度消失</em> （gradient vanishing）问题： 参数更新过小，在每次更新时几乎不会移动，导致模型无法学习。<br>相比于ReLU,sigmoid更容易出现梯度消失。</p></li><li><p>梯度消失和梯度爆炸是深度网络中常见的问题。在参数初始化时需要非常小心，以确保梯度和参数可以得到很好的控制。</p></li><li><p>需要用启发式的初始化方法来确保初始梯度既不太大也不太小。</p></li><li><p>ReLU激活函数缓解了梯度消失问题，这样可以加速收敛。</p></li><li><p>随机初始化是保证在进行优化前打破对称性的关键。</p></li><li><p>Xavier初始化表明，对于每一层，输出的方差不受输入数量的影响，任何梯度的方差不受输出数量的影响。</p></li><li><p>让训练更稳定</p><ul><li>目标：让梯度值再合理的范围内<ul><li>将乘法变成加法：ResNet，LSTM</li><li>归一化：梯度归一化，梯度剪裁</li><li>合理的权重初始化和激活函数</li></ul></li></ul></li></ul><p><font size = 4 color = yellow>4.9 环境和分布偏移</font></p><p>通过将基于模型的决策引入环境，我们可能会破坏模型。<br>分布偏移的类型</p><ul><li>协变量偏移</li><li>标签偏移</li><li>概念偏移</li></ul><p><font  size=6 color=red>第二部分 卷积神经网络</font></p><h2 id="第五章-深度学习计算"><a href="#第五章-深度学习计算" class="headerlink" title="第五章 深度学习计算"></a>第五章 深度学习计算</h2><p><font size = 4 color = yellow>5.1 层和块</font></p><ul><li>一个块可以由许多层组成；一个块可以由许多块组成。</li><li>块可以包含代码。</li><li>块负责大量的内部处理，包括参数初始化和反向传播。</li><li>层和块的顺序连接由<code>Sequential</code>块处理。</li></ul><p><font size = 4 color = yellow>5.2 参数管理</font></p><ul><li>我们有几种方法可以访问、初始化和绑定模型参数。</li><li>我们可以使用自定义初始化方法。</li></ul><p><font size = 4 color = yellow>5.3 延后初始化</font></p><ul><li>延后初始化使框架能够自动推断参数形状，使修改模型架构变得容易，避免了一些常见的错误。</li><li>我们可以通过模型传递数据，使框架最终初始化参数。</li></ul><p><font size = 4 color = yellow>5.4 自定义层</font></p><p><font size = 4 color = yellow>5.5 读写文件</font></p><p><font size = 4 color = yellow>5.4 GPU</font></p><hr><h2 id="第六章-卷积神经网络"><a href="#第六章-卷积神经网络" class="headerlink" title="第六章 卷积神经网络"></a>第六章 卷积神经网络</h2><p>_卷积神经网络_（convolutional neural network，CNN）</p><ul><li><p>对于图像数据来说，我们之前在MLP中的操作是，将二维数据变成一个一维向量，但这样的操作忽略了每个图像的空间结构信息。</p></li><li><p>因为这些网络特征元素的顺序是不变的，因此最优的结果是利用先验知识，即利用相近像素之间的相互关联性，从图像数据中学习得到有效的模型。</p></li><li><p>本章介绍的_卷积神经网络_（convolutional neural network，CNN）是一类强大的、为处理图像数据而设计的神经网络。</p></li><li><p>基于卷积神经网络架构的模型在<strong>计算机视觉</strong>领域中已经占主导地位，当今几乎所有的<strong>图像识别</strong>、<strong>目标检测</strong>或<strong>语义分割</strong>相关的学术竞赛和商业应用都以这种方法为基础。</p></li></ul><p>卷积网络主干的基本元素</p><ul><li>卷积层本身、填充（padding）和步幅（stride）的基本细节、用于在相邻区域汇聚信息的汇聚层（pooling）、在每一层中多通道（channel）的使用，以及有关现代卷积网络架构的仔细讨论。</li><li>LeNet模型：这是第一个成功应用的卷积神经网络，比现代深度学习兴起时间还要早。</li></ul><p><font size =4 color = yellow>6.1 从全连接层到卷积层</font><br> <em>卷积神经网络</em> （convolutional neural networks，CNN）是机器学习利用自然图像中一些已知结构的创造性方法。</p><ul><li>不变性<ul><li>无论哪种方法找到这个物体，都应该和物体的位置无关。</li><li>卷积神经网络正是将  <em>空间不变性</em> （spatial invariance）的这一概念系统化，从而基于这个模型使用较少的参数来学习有用的表示。</li><li>适合于计算机视觉的神经网络架构：<ul><li>1.<strong>平移不变性（translation invariance）</strong>：不管检测对象出现在图像中的哪个位置，神经网络的前面几层应该对相同的图像区域具有相似的反应，即为“平移不变性”。</li><li>2.<strong>局部性（locality）</strong>：神经网络的<em>前面几层</em>应该只探索输入图像中的<em>局部区域</em>，而不过度在意图像中相隔较远区域的关系，这就是“局部性”原则。最终，可以聚合这些局部特征，以在整个图像级别进行预测。</li></ul></li></ul></li><li>小结<ul><li>图像的平移不变性使我们以相同的方式处理<strong>局部图像</strong>，而不在乎它的位置。</li><li>局部性意味着计算相应的隐藏表示只需一小部分局部图像像素。</li><li>在图像处理中，卷积层通常比全连接层需要更少的参数，但依旧获得高效用的模型。</li><li>卷积神经网络（CNN）是一类特殊的神经网络，它可以包含多个卷积层。</li><li>多个输入和输出通道使模型在每个空间位置可以获取图像的多方面<strong>特征</strong>。</li></ul></li></ul><p><font size = 4 color = yellow>6.2 图像卷积 </font></p><ul><li>互相关运算<blockquote><p>严格来说，卷积层是个错误的叫法，因为它所表达的运算其实是 _互相关运算_（cross-correlation），而不是卷积运算。 根据 <a href="http://zh.d2l.ai/chapter_convolutional-neural-networks/why-conv.html#sec-why-conv">6.1节</a>中的描述，<strong>在卷积层中，输入张量和核张量通过互相关运算产生输出张量。</strong></p></blockquote></li><li>卷积层<ul><li>卷积层对输入和卷积核权重进行互相关运算，并在添加标量偏置之后产生输出。</li><li>所以，卷积层中的两个被训练的参数是<strong>卷积核权重</strong>和<strong>标量偏置</strong>。</li></ul></li><li>图像中目标的边缘检测<ul><li>简单案例：通过找到像素变化的位置，来检测图像中不同颜色的边缘。</li></ul></li><li>学习卷积核</li><li>互相关和卷积<ul><li>为了得到正式的_卷积_运算输出，我们需要执行 <a href="http://zh.d2l.ai/chapter_convolutional-neural-networks/why-conv.html#equation-eq-2d-conv-discrete">(6.1.6)</a>中定义的严格卷积运算，而不是互相关运算。 幸运的是，它们差别不大，我们只需<strong>水平和垂直翻转二维卷积核张量</strong>，然后对输入张量执行 _互相关_运算。</li><li>为了与深度学习文献中的标准术语保持一致，<strong>我们将继续把“互相关运算”称为卷积运算</strong>，尽管严格地说，它们略有不同。 此外，对于<strong>卷积核张量上的权重</strong>，我们称其为  <em>元素</em> 。</li></ul></li><li>特征映射和感受野<ul><li>输出的卷积层有时被称为 <em>特征映射</em> （feature map），因为它可以被视为一个输入映射到下一层的<em>空间维度的转换器</em>。</li><li>在卷积神经网络中，对于某一层的任意元素x，其 <em>感受野</em> （receptive field）是指在前向传播期间可能影响x计算的所有元素（来自所有先前层）。</li><li>因此，当一个特征图中的任意元素需要检测更广区域的输入特征时，我们可以构建一个更深的网络。</li></ul></li><li>小结<ul><li><strong>二维卷积层</strong>的核心计算是<strong>二维互相关运算</strong>。最简单的形式是，对二维输入数据和卷积核执行互相关操作，然后添加一个偏置。</li><li>我们可以设计一个卷积核来检测图像的边缘。</li><li>我们可以从数据中学习卷积核的参数。</li><li>学习卷积核时，无论用严格卷积运算或互相关运算，卷积层的输出不会受太大影响。</li><li>当需要检测输入特征中更广区域时，我们可以构建一个更深的卷积网络。</li></ul></li></ul><p><font size = 4 color = yellow> 6.3 填充和步幅 </font><br>  <em>填充</em> （padding）和 <em>步幅</em> （stride）</p><p>在应用了连续的卷积之后，我们最终得到的输出远小于输入大小。这是由于卷积核的宽度和高度通常大于1所导致的。这样会导致原始图像的边界丢失了许多有用信息。而 <em>填充</em> 是解决此问题最有效的方法。<br>有时，我们可能希望大幅降低图像的宽度和高度。例如，如果我们发现原始的输入分辨率十分冗余。 <em>步幅</em> 则可以在这类情况下提供帮助。</p><ul><li>填充<ul><li>卷积神经网络中卷积核的高度和宽度通常为奇数，例如1、3、5或7。 选择奇数的好处是，保持空间维度的同时，我们可以在顶部和底部填充相同数量的行，在左侧和右侧填充相同数量的列。</li><li>此外，使用奇数的核大小和填充大小也提供了书写上的便利。对于任何二维张量<code>X</code>，当满足： <ul><li>1.卷积核的大小是奇数； </li><li>2.所有边的填充行数和列数相同； </li><li>3.输出与输入具有相同高度和宽度</li></ul></li><li>则可以得出：输出<code>Y[i,  j]</code>是通过以输入<code>X[i,  j]</code>为中心，与卷积核进行互相关计算得到的。</li></ul></li><li>步幅<ul><li>在计算互相关时，卷积窗口从输入张量的左上角开始，向下、向右滑动。 在前面的例子中，我们默认每次滑动一个元素。 但是，有时候为了高效计算或是缩减采样次数，卷积窗口可以跳过中间位置，每次滑动多个元素。将每次滑动元素的数量称为 <em>步幅</em> （stride）</li></ul></li><li>小结<ul><li>填充可以增加输出的高度和宽度。这常用来使输出与输入具有相同的高和宽。 </li><li>步幅可以减小输出的高和宽，例如输出的高和宽仅为输入的高和宽的1&#x2F;n（n是一个大于1的整数）。</li><li>填充和步幅可用于有效地调整数据的维度。</li></ul></li></ul><p><font size = 4 color = yellow>6.4 多输入多输出通道</font><br>三维张量，对于RGB图像（3  ×  h × w），把大小为3的这个轴称为 <em>通道</em> （channel）维度</p><ul><li>多输入通道<ul><li>当输入包含多个通道时，需要构造一个<strong>与输入数据具有相同输入通道数的卷积核</strong>，以便与输入数据进行互相关运算。</li><li>多通道输入和多输入通道卷积核之间进行二维互相关运算<ul><li>于输入和卷积核都有$$c_i$$个通道，我们可以对每个通道输入的二维张量和卷积核的二维张量进行互相关运算，再对通道求和（将$$c_i$$的结果相加）得到二维张量。</li></ul></li></ul></li><li>多输出通道<ul><li>为了获得多个通道的输出，我们可以为每个输出通道创建一个形状为$$c_i × k_h × k_w$$的卷积核张量，这样卷积核的形状是$$c_o × c_i × k_h × k_w$$。在互相关运算中，每个输出通道先获取所有输入通道，再以对应该输出通道的卷积核计算出结 果。</li></ul></li><li>1 × 1 卷积层<ul><li>因为使用了最小窗口，1×1卷积失去了卷积层的特有能力——在高度和宽度维度上，识别相邻元素间相互作用的能力。 其实1×1卷积的唯一计算发生在通道上。</li></ul></li><li>小结<ul><li>多输入多输出通道可以用来扩展卷积层的模型。</li><li>当以每像素为基础应用时，1×1卷积层相当于全连接层。</li><li>1×1卷积层通常用于调整网络层的通道数量和控制模型复杂性。</li></ul></li></ul><p><font size = 4 color = yellow> 6.5 汇聚层 </font><br><em>汇聚</em> （pooling）层<br>它具有双重目的：<strong>降低卷积层对位置的敏感性</strong>，同时<strong>降低对空间降采样表示的敏感性</strong>。</p><ul><li>最大汇聚层和平均汇聚层<blockquote><p>与卷积层类似，汇聚层运算符由一个<strong>固定形状的窗口</strong>组成，该窗口根据其步幅大小在输入的所有区域上滑动，为固定形状窗口（有时称为 <em>汇聚窗口</em> ）遍历的每个位置计算一个输出。 然而，不同于卷积层中的输入与卷积核之间的互相关计算，<strong>汇聚层不包含参数</strong>。 相反，池运算是确定性的，我们通常计算汇聚窗口中所有元素的<strong>最大值</strong>或<strong>平均值</strong>。这些操作分别称为 <em>最大汇聚层</em> （maximum pooling）和 <em>平均汇聚层</em> （average pooling）。</p></blockquote></li><li>填充和步幅</li><li>多个通道<ul><li>在处理多通道输入数据时，<strong>汇聚层在每个输入通道上单独运算</strong>，而不是像卷积层一样在通道上对输入进行汇总。 这意味着<strong>汇聚层的输出通道数与输入通道数相同</strong>。</li></ul></li><li>小结<ul><li>对于给定输入元素，最大汇聚层会输出该窗口内的最大值，平均汇聚层会输出该窗口内的平均值。</li><li>汇聚层的主要优点之一是减轻卷积层对位置的过度敏感。</li><li>我们可以指定汇聚层的填充和步幅。</li><li>使用最大汇聚层以及大于1的步幅，可减少空间维度（如高度和宽度）。</li><li>汇聚层的输出通道数与输入通道数相同。</li></ul></li></ul><p><font size = 4 color = yellow > 6.6 卷积神经网络（LeNet）</font></p><p>AT&amp;T贝尔实验室的研究员Yann LeCun在1989年提出的（并以其命名）， 目的是识别图像 [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id90" title="LeCun, Y., Bottou, L., Bengio, Y., Haffner, P., &amp; others. (1998). Gradient-based learning applied to document recognition. Proceedings of the IEEE, 86(11), 2278–2324.">LeCun et al., 1998</a>]中的手写数字。</p><p>总体来看，LeNet（LeNet-5）由两个部分组成：<br>    -   卷积编码器：由两个卷积层组成;<br>    -   全连接层密集块：由三个全连接层组成。<br>    <img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/lenet.svg'><br>    <a href="http://zh.d2l.ai/_images/lenet.svg">zh.d2l.ai&#x2F;_images&#x2F;lenet.svg</a><br>    LeNet中的数据流。输入是手写数字，输出为10种可能结果的概率。</p><ul><li>小结<ul><li>卷积神经网络（CNN）是一类使用卷积层的网络。</li><li>在卷积神经网络中，我们组合使用卷积层、非线性激活函数和汇聚层。</li><li>为了构造高性能的卷积神经网络，我们通常对卷积层进行排列，逐渐降低其表示的空间分辨率，同时增加通道数。</li><li>在传统的卷积神经网络中，卷积块编码得到的表征在输出之前需由一个或多个全连接层进行处理。</li><li>LeNet是最早发布的卷积神经网络之一。</li></ul></li></ul><h2 id="第七章-现代卷积神经网络"><a href="#第七章-现代卷积神经网络" class="headerlink" title="第七章 现代卷积神经网络"></a>第七章 现代卷积神经网络</h2><p>虽然深度神经网络的概念非常简单——将神经网络堆叠在一起。但由于不同的网络架构和超参数选择，这些神经网络的性能会发生很大变化。</p><ul><li>AlexNet。它是第一个在大规模视觉竞赛中击败传统计算机视觉模型的大型神经网络；</li><li>使用重复块的网络（VGG）。它利用许多重复的神经网络块；</li><li>网络中的网络（NiN）。它重复使用由卷积层和1×1卷积层（用来代替全连接层）来构建深层网络;</li><li>含并行连结的网络（GoogLeNet）。它使用并行连结的网络，通过不同窗口大小的卷积层和最大汇聚层来并行抽取信息；</li><li>残差网络（ResNet）。它通过残差块构建跨层的数据通道，是计算机视觉中最流行的体系架构；</li><li>稠密连接网络（DenseNet）。它的计算成本很高，但给我们带来了更好的效果。</li></ul><p><font size = 4 color = yellow>7.1 深度卷积神经网络（AlexNet）</font></p><p>在上世纪90年代初到2012年之间的大部分时间里，神经网络往往被其他机器学习方法超越，如支持向量机（support vector machines）。</p><p>因此，与训练_端到端_（从像素到分类结果）系统不同，<strong>经典机器学习</strong>的流水线看起来更像下面这样：<br>    1.  获取一个有趣的数据集。在早期，收集这些数据集需要昂贵的传感器（在当时最先进的图像也就100万像素）。<br>    2.  根据光学、几何学、其他知识以及偶然的发现，手工对特征数据集进行预处理。<br>    3.  通过标准的特征提取算法，如SIFT（尺度不变特征变换）  [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id102" title="Lowe, D. G. (2004). Distinctive image features from scale-invariant keypoints. International journal of computer vision, 60(2), 91–110.">Lowe, 2004</a>]和SURF（加速鲁棒特征）  [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id7" title="Bay, H., Tuytelaars, T., &amp; Van Gool, L. (2006). Surf: speeded up robust features. European conference on computer vision (pp. 404–417).">Bay et al., 2006</a>]或其他手动调整的流水线来输入数据。<br>    4.  将<strong>提取的特征</strong>送入最喜欢的<strong>分类器</strong>中（例如线性模型或其它核方法），以训练分类器。</p><p>如果你和<strong>机器学习研究人员</strong>交谈，你会发现他们相信机器学习既重要又美丽：优雅的理论去证明各种模型的性质。机器学习是一个正在蓬勃发展、严谨且非常有用的领域。</p><p>如果你和<strong>计算机视觉研究人员</strong>交谈，你会听到一个完全不同的故事。他们会告诉你图像识别的诡异事实————推动领域进步的是<strong>数据特征</strong>，而不是学习算法。计算机视觉研究人员相信，从对最终模型精度的影响来说，更大或更干净的数据集、或是稍微改进的特征提取，比任何学习算法带来的进步要大得多。</p><ul><li>学习表征<ul><li>另一组研究人员，包括Yann LeCun、Geoff Hinton、Yoshua Bengio、Andrew Ng、Shun ichi Amari和Juergen Schmidhuber，想法则与众不同：他们认为特征本身应该被学习。</li><li>此外，他们还认为，在合理地复杂性前提下，特征应该由多个共同学习的神经网络层组成，每个层都有可学习的参数。</li><li>在机器视觉中，最底层可能检测边缘、颜色和纹理。</li><li>事实上，Alex Krizhevsky、Ilya Sutskever和Geoff Hinton提出了一种新的卷积神经网络变体 _AlexNet_。</li><li>在网络的最底层，模型学习到了一些类似于传统滤波器的特征抽取器。</li><li>AlexNet的更高层建立在这些<strong>底层表示</strong>的基础上，以表示更大的特征，如眼睛、鼻子、草叶等等。而更高的层可以检测<strong>整个物体</strong>，如人、飞机、狗或飞盘。最终的隐藏神经元可以学习图像的<strong>综合表示</strong>，从而使属于不同类别的数据易于区分。</li><li>数据<ul><li>ImageNet数据集由斯坦福教授李飞飞小组的研究人员开发，利用谷歌图像搜索（Google Image Search）对每一类图像进行预筛选，并利用亚马逊众包（Amazon Mechanical Turk）来标注每张图片的相关类别。</li></ul></li><li>硬件<ul><li>图形处理器（Graphics Processing Unit，GPU）</li><li>当Alex Krizhevsky和Ilya Sutskever实现了可以在GPU硬件上运行的深度卷积神经网络时，一个重大突破出现了。他们意识到卷积神经网络中的计算瓶颈：卷积和矩阵乘法，都是可以在硬件上并行化的操作。 于是，他们使用两个显存为3GB的<strong>NVIDIA GTX580 GPU</strong>实现了快速卷积运算。</li></ul></li></ul></li><li>AlexNet<ul><li>AlexNet使用了8层卷积神经网络  <img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/alexnet.svg'>  [zh.d2l.ai/_images/alexnet.svg](http://zh.d2l.ai/_images/alexnet.svg)</li><li>AlexNet由八层组成：五个卷积层、两个全连接隐藏层和一个全连接输出层。 </li><li>其次，AlexNet使用ReLU而不是sigmoid作为其激活函数。</li><li>AlexNet通过暂退法（ <a href="http://zh.d2l.ai/chapter_multilayer-perceptrons/dropout.html#sec-dropout">4.6节</a>）控制全连接层的模型复杂度，而LeNet只使用了权重衰减。</li><li>AlexNet在训练时增加了大量的图像增强数据，如翻转、裁切和变色。 这使得模型更健壮，更大的样本量有效地减少了过拟合。</li></ul></li><li>AlexNet的架构与LeNet相似，但使用了更多的卷积层和更多的参数来拟合大规模的ImageNet数据集。</li><li>今天，AlexNet已经被更有效的架构所超越，但它是从浅层网络到深层网络的关键一步。</li><li>尽管AlexNet的代码只比LeNet多出几行，但学术界花了很多年才接受深度学习这一概念，并应用其出色的实验结果。这也是由于缺乏有效的计算工具。</li><li>Dropout、ReLU和预处理是提升计算机视觉任务性能的其他关键步骤。</li></ul><p><font size=4 color=yellow> 7.2 使用块的网络（VGG） </font><br>虽然AlexNet证明深层神经网络卓有成效，但它没有提供一个通用的模板来指导后续的研究人员设计新的网络。<br>使用块的想法首先出现在牛津大学的<a href="http://www.robots.ox.ac.uk/~vgg/">视觉几何组（visualgeometry group）</a>的_VGG网络_中。通过使用循环和子程序，可以很容易地在任何现代深度学习框架的代码中实现这些重复的架构。</p><ul><li>VGG块<blockquote><p>经典卷积神经网络的基本组成部分是下面的这个序列：</p><ol><li>带填充以保持分辨率的卷积层；</li><li>非线性激活函数，如ReLU；</li><li>汇聚层，如最大汇聚层。</li></ol><p>而一个VGG块与之类似，由一系列卷积层组成，后面再加上用于空间下采样的最大汇聚层。</p></blockquote></li><li>VGG网络<img src='https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/vgg.svg'>[zh.d2l.ai/_images/vgg.svg](http://zh.d2l.ai/_images/vgg.svg)</li></ul><p><font size =4 color = yellow> 7.3 网络中的网络（NiN）</font><br>LeNet、AlexNet和VGG都有一个共同的设计模式：通过一系列的卷积层与汇聚层来提取空间结构特征；然后通过全连接层对特征的表征进行处理。 AlexNet和VGG对LeNet的改进主要在于如何扩大和加深这两个模块。 或者，可以想象在这个过程的早期使用全连接层。然而，如果使用了全连接层，可能会<strong>完全放弃表征的空间结构</strong>。<br>_网络中的网络_（_NiN_）提供了一个非常简单的解决方案：<strong>在每个像素的通道上分别使用多层感知机</strong></p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/nin.svg'><p>NiN的想法是<strong>在每个像素位置（针对每个高度和宽度）应用一个全连接层</strong>。 如果我们将权重连接到每个空间位置，我们可以将其视为1×1卷积层（如 <a href="http://zh.d2l.ai/chapter_convolutional-neural-networks/channels.html#sec-channels">6.4节</a>中所述），或作为在每个像素位置上独立作用的全连接层。 从另一个角度看，即将空间维度中的每个像素视为单个样本，将通道维度视为不同特征（feature）。</p><p>NiN块以一个普通卷积层开始，后面是两个1×1的卷积层。这两个1×1卷积层充当带有ReLU激活函数的逐像素全连接层。 第一层的卷积窗口形状通常由用户设置。 随后的卷积窗口形状固定为1×1。</p><ul><li>NiN使用由一个卷积层和多个1×1卷积层组成的块。该块可以在卷积神经网络中使用，以允许更多的每像素非线性。</li><li>NiN去除了容易造成过拟合的全连接层，将它们替换为全局平均汇聚层（即在所有位置上进行求和）。该汇聚层通道数量为所需的输出数量（例如，Fashion-MNIST的输出为10）。</li><li>移除全连接层可减少过拟合，同时显著减少NiN的参数。</li><li>NiN的设计影响了许多后续卷积神经网络的设计。</li></ul><p><font size =4 color=yellow>7. 4 含有并行连结的网络（GoogLeNet）</font></p><p>GoogLeNet吸收了NiN中串联网络的思想，并在此基础上做了改进。 这篇论文的一个重点是解决了什么样大小的卷积核最合适的问题。</p><p>毕竟，以前流行的网络使用小到1×1，大到11×11的卷积核。 本文的一个观点是，有时使用不同大小的卷积核组合是有利的。</p><ul><li>Inception块<br>在GoogLeNet中，基本的卷积块被称为 _Inception块_（Inception block）。这很可能得名于电影《盗梦空间》（Inception），因为电影中的一句话“我们需要走得更深”（“We need to go deeper”）。</li></ul><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/inception.svg'><p>Inception块由四条并行路径组成。 前三条路径使用窗口大小为<strong>1×1、3×3和5×5的卷积层</strong>，从不同空间大小中提取信息。 中间的两条路径在输入上执行1×1卷积，以减少通道数，从而降低模型的复杂性。 第四条路径使用<strong>3×3最大汇聚层</strong>，然后使用1×1卷积层来改变通道数。<br>这四条路径都使用合适的填充来使输入与输出的高和宽一致，最后我们将每条线路的输出在通道维度上连结，并构成Inception块的输出。在Inception块中，通常调整的超参数是<strong>每层输出通道数</strong>。</p><ul><li>GoogLeNet模型<img src ='https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/inception-full.svg'></li></ul><p><font size = 4 color =yellow> 7.5 批量规范化</font></p><p>训练深层神经网络是十分困难的，特别是在较短的时间内使他们收敛更加棘手。 在本节中，我们将介绍 _批量规范化_（batch normalization），这是一种流行且有效的技术，可持续加速深层网络的收敛速度。</p><p>为什么需要批量规范化层呢？</p><ul><li>首先，数据预处理的方式通常会对最终结果产生巨大影响。</li><li>第二，对于典型的多层感知机或卷积神经网络。当我们训练时，中间层中的变量（例如，多层感知机中的仿射变换输出）可能具有更广的变化范围：不论是沿着从输入到输出的层，跨同一层中的单元，或是随着时间的推移，模型参数的随着训练更新变幻莫测。</li><li>第三，更深层的网络很复杂，容易过拟合。 这意味着正则化变得更加重要。</li></ul><p>批量规范化应用于单个可选层（也可以应用到所有层），其原理如下：在每次训练迭代中，我们首先规范化输入，即通过减去其均值并除以其标准差，其中两者均基于当前小批量处理。 接下来，我们应用比例系数和比例偏移。 正是由于这个基于 <em>批量</em> 统计的 <em>标准化</em> ，才有了 <em>批量规范化</em> 的名称。</p><p>请注意，如果我们尝试使用<strong>大小为1的小批量应用批量规范化</strong>，我们将<strong>无法学到任何东西</strong>。 这是因为在减去均值之后，每个隐藏单元将为0。 所以，<em>只有使用足够大的小批量，批量规范化这种方法才是有效且稳定的</em>。 请注意，在应用批量规范化时，批量大小的选择可能比没有批量规范化时更重要。</p><p>由于尚未在理论上明确的原因，优化中的各种噪声源通常会导致更快的训练和较少的过拟合：这种变化似乎是正则化的一种形式。</p><p>批量规范化层在”训练模式“（通过小批量统计数据规范化）和“预测模式”（通过数据集统计规范化）中的功能不同。 在训练过程中，我们无法得知使用整个数据集来估计平均值和方差，所以只能根据每个小批次的平均值和方差不断训练模型。 而在预测模式下，可以根据整个数据集精确计算批量规范化所需的平均值和方差。</p><ul><li>批量 规范化层<ul><li>全连接层</li><li>卷积层</li><li>预测过程中的批量规范化</li></ul></li></ul><p><font size = 4 color = yellow> 7.6 残差网络（ResNet）</font><br>何恺明等人提出了 _残差网络_（ResNet）</p><p>残差网络的核心思想是：<strong>每个附加层都应该更容易地包含原始函数作为其元素之一</strong>。 于是，_残差块_（residual blocks）便诞生了，这个设计对如何建立深层神经网络产生了深远的影响。</p><img src='https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/residual-block.svg'><ul><li>一个正常块（左图）和一个残差块（右图）<ul><li>ResNet沿用了VGG完整的3×3卷积层设计。 </li><li>残差块里首先有2个有相同输出通道数的3×3卷积层。 </li><li>每个卷积层后接一个批量规范化层和ReLU激活函数。 </li><li>然后我们通过跨层数据通路，跳过这2个卷积运算，将输入直接加在最后的ReLU激活函数前。 这样的设计要求2个卷积层的输出与输入形状一样，从而使它们可以相加。 </li><li>如果想改变通道数，就需要引入一个额外的1×1卷积层来将输入变换成需要的形状后再做相加运算。</li></ul></li></ul><img src='https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/resnet-block.svg'><p>包含以及不包含 1×1 卷积层的残差块。</p><ul><li>ResNet模型</li></ul><img src='https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/resnet18.svg'><ul><li>小结<ul><li>学习嵌套函数（nested function）是训练神经网络的理想情况。在深层神经网络中，学习另一层作为恒等映射（identity function）较容易（尽管这是一个极端情况）。</li><li>残差映射可以更容易地学习同一函数，例如将权重层中的参数近似为零。</li><li>利用残差块（residual blocks）可以训练出一个有效的深层神经网络：输入可以通过层间的残余连接更快地向前传播。</li><li>残差网络（ResNet）对随后的深层神经网络设计产生了深远影响。</li></ul></li></ul><p><font size = 4 color=yellow>7.7 稠密神经网络（DenseNet）</font></p><p>_稠密连接网络_（DenseNet）在某种程度上是ResNet的逻辑扩展。</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/densenet-block.svg'><p>ResNet（左）与 DenseNet（右）在跨层连接上的主要区别：使用相加和使用连结。</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/densenet.svg'><p>稠密网络主要由2部分构成：_稠密块_（dense block）和 <em>过渡层</em> （transition layer）。 前者定义如何连接输入和输出，而后者则控制通道数量，使其不会太复杂。</p><ul><li>小结<ul><li>在跨层连接上，不同于ResNet中将输入与输出相加，稠密连接网络（DenseNet）在通道维上连结输入与输出。</li><li>DenseNet的主要构建模块是稠密块和过渡层。</li><li>在构建DenseNet时，我们需要通过添加过渡层来控制网络的维数，从而再次减少通道的数量。</li></ul></li></ul><p><font  size=6 color=red>第三部分 计算机视觉</font></p><h2 id="第十二章-计算性能"><a href="#第十二章-计算性能" class="headerlink" title="第十二章 计算性能"></a>第十二章 计算性能</h2><p><font size = 4 color=yellow>12.1 编译器和解释器</font><br>没看</p><p><font size = 4 color=yellow>12.2 异步计算</font><br>没看</p><p><font size = 4 color=yellow>12.3 自动并行</font><br>没看</p><p><font size = 4 color=yellow>12.4 硬件</font></p><ul><li>CPU</li><li>GPU</li><li>ASIC</li></ul><p><font size = 4 color=yellow>12.5 多GPU训练</font></p><p>在训练和预测时，将一个小批量计算分到多个GPU上来达到加速的目的。<br>切分方案</p><ul><li>数据并行</li><li>模型并行</li><li>通道并行（数据并行+模型并行）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">allreduce</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(data)):<br>        data[<span class="hljs-number">0</span>][:] += data[i].to(data[<span class="hljs-number">0</span>].device)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(data)):<br>        data[i][:] = data[<span class="hljs-number">0</span>].to(data[i].device)<br></code></pre></td></tr></table></figure><p><font size = 4 color=yellow>12.6 多GPU的简洁实现</font><br>没看</p><p><font size = 4 color=yellow>12.7 参数服务器</font><br>没看</p><h2 id="第十三章-计算机视觉"><a href="#第十三章-计算机视觉" class="headerlink" title="第十三章 计算机视觉"></a>第十三章 计算机视觉</h2><p><font size=4 color=yellow>13.1 数据增广</font></p><p>图像增广在对训练图像进行一系列的随机变化之后，生成相似但不同的训练样本，从而扩大了训练集的规模。 此外，应用图像增广的原因是，随机改变训练样本可以减少模型对某些属性的依赖，从而提高模型的泛化能力。</p><p>在线生成图像。</p><p>大多数图像增广方法都具有一定的<strong>随机性</strong>。</p><ul><li>翻转和裁剪</li><li>改变颜色</li><li>多种方法结合</li></ul><p><a href="https://imgaug.readthedocs.io/en/latest/">imgaug — imgaug 0.4.0 documentation</a><br><a href="https://zhuanlan.zhihu.com/p/407089225">一种巧妙且简单的数据增强方法 - MixUp 小综述 - 知乎 (zhihu.com)</a></p><p><a href="https://www.zhihu.com/question/308572298">目标检测中图像增强，mixup 如何操作？ - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/qq_37555071/article/details/107532319">PyTorch之torchvision.transforms详解[原理+代码实现]_雷恩Layne的博客-CSDN博客_torchvision.transforms</a></p><p><font size=4 color=yellow>13.2 微调</font></p><p><strong>微调是计算机视觉中，非常重要的技术！！！</strong></p><p>应用 <em>迁移学习</em> （transfer learning）将从_源数据集_学到的知识迁移到_目标数据集_。<br>尽管ImageNet数据集中的大多数图像与椅子无关，但在此数据集上训练的模型可能会提取更通用的图像特征，这有助于识别边缘、纹理、形状和对象组合。 这些类似的特征也可能有效地识别椅子。</p><p>迁移学习中的常见技巧: <em>微调</em> （fine-tuning）。</p><ol><li>在源数据集（例如ImageNet数据集）上预训练神经网络模型，即 <em>源模型</em> 。</li><li>创建一个新的神经网络模型，即 <em>目标模型</em> 。这将复制源模型上的所有模型设计及其参数（输出层除外）。我们假定这些模型参数包含从源数据集中学到的知识，这些知识也将适用于目标数据集。我们还假设源模型的输出层与源数据集的标签密切相关；因此不在目标模型中使用该层。</li><li>向目标模型添加输出层，其输出数是目标数据集中的类别数。然后随机初始化该层的模型参数。</li><li>在目标数据集（如椅子数据集）上训练目标模型。输出层将从头开始进行训练，而所有其他层的参数将根据源模型的参数进行微调。<img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/finetune.svg'></li></ol><p><strong>神经网络的网络架构</strong><br>（一般来说，一个神经网络可以分为两块）</p><ul><li>特征抽取讲原始像素变为容易线性分割的特征</li><li>线性分类器来做分类</li></ul><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-25_21-00-56.png'><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-25_21-01-53.png'><p><strong>训练</strong></p><ul><li>是一个目标数据集上的正常训练任务，但使用更强的正则化。<ul><li>使用更小的学习率</li><li>使用更少的书籍迭代</li></ul></li><li>源数据集远复杂于目标数据，通常微调效果更好</li></ul><p><strong>重用分类器</strong></p><ul><li>源数据集可能也有目标数据中的部分标号；</li><li>可以使用预训练好的模型分类器中对应标号的向量来做初始化。</li></ul><p><strong>固定一些层</strong></p><ul><li>神经网络通常学习有层次地特征表示<ul><li>低层的特则更加通用</li><li>高层次的特则更跟数据集相关</li></ul></li><li>可以固定底部的一些层的参数， 不参与更新<ul><li>更强的正则</li></ul></li></ul><p><font size=4 color=yellow>13.13 实战Kaggle比赛：图像分类（CIFAR-10）</font></p><p><font size=4 color=yellow>13.14 实战Kagge比赛：狗的品种分类（ImageNet Dogs）</font></p><p><font size=4 color=yellow>13.3 <strong>目标检测</strong>和边界框</font></p><p>很多时候图像里有多个我们感兴趣的目标，我们不仅想知道它们的类别，还想得到它们在图像中的具体位置。 在计算机视觉里，我们将这类任务称为 <em>目标检测</em> （object detection）或 <em>目标识别</em> （object recognition）。</p><p>在目标检测中，我们通常使用 <strong>边界框（bounding box）</strong>来描述对象的空间位置。 边界框是矩形的。</p><ul><li>两角表示法：由矩形左上角的以及右下角的x和y坐标决定。 </li><li>中心宽度表示法：边界框中心的(x, y)轴坐标以及框的宽度和高度。</li></ul><p><a href="https://cocodataset.org/">COCO - Common Objects in Context (cocodataset.org)</a></p><p><font size=4 color=yellow>13.4 锚框</font><br>目标检测算法通常会在输入图像中采样大量的区域，然后判断这些区域中是否包含我们感兴趣的目标，并调整区域边界从而更准确地预测目标的 <em>真实边界框</em> （ground-truth bounding box）。</p><p>以每个像素为中心，生成多个缩放比和宽高比（aspect ratio）不同的边界框。 这些边界框被称为 <em>锚框</em> （anchor box）</p><p>如何衡量锚框和真实边界框之间的相似性？  <em>杰卡德系数</em> （Jaccard）可以衡量两组之间的相似性。<br>通过其像素集的杰卡德系数来测量两个边界框的相似性。<br>对于两个边界框，我们通常将它们的杰卡德系数称为  <em>交并比</em>  （intersection over union，IoU），即两个边界框相交面积与相并面积之比。交并比的取值范围在0和1之间：0表示两个边界框无重合像素，1表示两个边界框完全重合。</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/iou.svg'><p>为了训练目标检测模型，我们需要每个锚框的_类别_（class）和_偏移量_（offset）标签，其中前者是与锚框相关的对象的类别，后者是真实边界框相对于锚框的偏移量。</p><ul><li>小结<ul><li>我们以图像的每个像素为中心生成不同形状的锚框。</li><li>交并比（IoU）也被称为杰卡德系数，用于衡量两个边界框的相似性。它是相交面积与相并面积的比率。</li><li>在训练集中，我们需要给每个锚框两种类型的标签。<ul><li>一个是与锚框中目标检测的类别，</li><li>另一个是锚框真实相对于边界框的偏移量（offset）。</li></ul></li><li>在预测期间，我们可以使用非极大值抑制（NMS）来移除类似的预测边界框，从而<strong>简化输出</strong>。</li></ul></li></ul><p><font size=4 color=yellow>13.6 目标检测数据集</font></p><p><a href="https://cocodataset.org/">COCO - Common Objects in Context (cocodataset.org)</a></p><p><font size=4 color=yellow>13. 8 区域卷积神经网络（R-CNN）系列 </font><br>区域卷积神经网络（region-based CNN或regions with CNN features，R-CNN）]<br><img src='https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/r-cnn.svg'></p><ul><li>R-CNN<ul><li>使用启发式搜索算法（Selective search）来选择锚框</li><li>使用预训练模型来对每个锚框抽取特则</li><li>训练一个SVM来对类别分类</li><li>训练一个线性回归模型来预测边缘框偏移</li></ul></li></ul><p><strong>改进方法</strong><br><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-27_14-56-57.png'></p><ul><li><p>快速的R-CNN（Fast R-CNN）</p>  <img src='https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/fast-rcnn.svg'>  - 使用CNN对图片抽取特征  - 使用RoI池化层对每个锚框生成固定长度的特征</li><li><p>更快的R-CNN（Faster R-CNN）</p><img src='https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/faster-rcnn.svg'></li><li><p>掩码R-CNN（Mask R-CNN）</p><img src='https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/mask-rcnn.svg'></li><li><p>小结<br>  R-CNN是最早、也是最有名的一类基于锚框和CNN的目标检测算法。Fast&#x2F;Faster R-CNN持续提升性能。Faster R-CNN和Mask R-CNN是再要求高精度场景下的常用算法。</p><ul><li><strong>R-CNN对图像选取若干提议区域，使用卷积神经网络对每个提议区域执行前向传播以抽取其特征，然后再用这些特征来预测提议区域的类别和边界框。</strong></li><li><strong>Fast R-CNN对R-CNN的一个主要改进：只对整个图像做卷积神经网络的前向传播。它还引入了兴趣区域汇聚层，从而为具有不同形状的兴趣区域抽取相同形状的特征。</strong></li><li><strong>Faster R-CNN将Fast R-CNN中使用的选择性搜索替换为参与训练的区域提议网络，这样后者可以在减少提议区域数量的情况下仍保证目标检测的精度。</strong></li><li><strong>Mask R-CNN在Faster R-CNN的基础上引入了一个全卷积网络，从而借助目标的像素级位置进一步提升目标检测的精度。</strong></li></ul></li></ul><p><font size=4 color=yellow>13.7 单发多框检测（SSD：Single Shot Detection）</font></p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/ssd.svg'>此模型主要由基础网络组成，其后是几个多尺度特征块。<p>基本网络用于从输入图像中提取特征，因此它可以使用深度卷积神经网络。</p><ul><li>VGG</li><li>ResNet</li></ul><p>通过多尺度特征块，单发多框检测生成不同大小的锚框，并通过预测边界框的类别和偏移量来检测大小不同的目标，因此这是一个多尺度目标检测模型。</p><ul><li><p>SSD通过单神经网络来检测模型</p></li><li><p>以每个像素为中心的产生多个锚框</p></li><li><p>在多个段的输出上进行多尺度的检测</p></li><li><p>单发多框检测是一种多尺度目标检测模型。基于基础网络块和各个多尺度特征块，单发多框检测生成不同数量和不同大小的锚框，并通过预测这些锚框的类别和偏移量检测不同大小的目标。</p></li><li><p>在训练单发多框检测模型时，损失函数是根据锚框的类别和偏移量的预测及标注值计算得出的。</p></li></ul><p><font size=4 color=yellow>13.补充 YOLO（You Only Look Once）</font></p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-27_15-31-57.png'><p><a href="https://zhuanlan.zhihu.com/p/94986199">写给小白的YOLO介绍 - 知乎 (zhihu.com)</a></p><p><a href="https://www.zhihu.com/question/411048283">如何学习yolo？ - 知乎 (zhihu.com)</a></p><p><font size=4 color=yellow>13. 补充 Center Net</font></p><p>Center Net不是基于锚框的目标检测算法。</p><ul><li>基于像素</li></ul><p><font size=4 color=yellow>13.5 多尺度目标检测</font></p><p>因此，当使用较小的锚框检测较小的物体时，我们可以采样更多的区域，而对于较大的物体，我们可以采样较少的区域。</p><ul><li>小结<ul><li>在多个尺度下，我们可以生成不同尺寸的锚框来检测不同尺寸的目标。</li><li>通过定义特征图的形状，我们可以决定任何图像上均匀采样的锚框的中心。</li><li>我们使用输入图像在某个感受野区域内的信息，来预测输入图像上与该区域位置相近的锚框类别和偏移量。</li><li>我们可以通过深入学习，在多个层次上的图像分层表示进行多尺度目标检测。</li></ul></li></ul><p><font size=4 color=yellow>13.9 语义分割和数据集</font></p><p>_语义分割_（semantic segmentation）问题，它重点关注于如何将图像分割成属于不同语义类别的区域。 与目标检测不同，语义分割可以识别并理解图像中每一个像素的内容：其语义区域的标注和预测是像素级的。</p><p>与目标检测相比，语义分割标注的像素级的边框显然更加精细。</p><p>区分：语义分割、图像分割、示例分割</p><p><strong>计算机视觉领域还有2个与语义分割相似的重要问题</strong>，即 <em>图像分割</em> （image segmentation）和 <em>实例分割</em> （instance segmentation）。 </p><ul><li><em>图像分割</em> 将图像划分为若干组成区域，这类问题的方法通常利用图像中像素之间的相关性。它在训练时不需要有关图像像素的标签信息，在预测时也无法保证分割出的区域具有我们希望得到的语义。以  <a href="http://zh.d2l.ai/chapter_computer-vision/semantic-segmentation-and-dataset.html#fig-segmentation">图13.9.1</a>中的图像作为输入，图像分割可能会将狗分为两个区域：一个覆盖以黑色为主的嘴和眼睛，另一个覆盖以黄色为主的其余部分身体。</li><li><em>实例分割</em> 也叫 <em>同时检测并分割</em> （simultaneous detection and segmentation），它研究如何识别图像中各个目标实例的像素级区域。与语义分割不同，实例分割不仅需要区分语义，还要区分不同的目标实例。例如，如果图像中有两条狗，则实例分割需要区分像素属于的两条狗中的哪一条。0</li></ul><p>数据集：<a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2012/">The PASCAL Visual Object Classes Challenge 2012 (VOC2012) (ox.ac.uk)</a></p><p><font size=4 color=yellow>13.10 转置卷积</font></p><p>_转置卷积_（transposed convolution）用于逆转下采样导致的空间尺寸减小。</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-27_21-25-32.png'><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-27_21-28-01.png'><p>转置卷积的填充、步幅和多通道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.rand(size=(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>))<br><br><span class="hljs-comment"># 卷积</span><br>conv = nn.Conv2d(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, kernel_size=<span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>, stride=<span class="hljs-number">3</span>)<br><span class="hljs-comment"># 转置卷积</span><br>tconv = nn.ConvTranspose2d(<span class="hljs-number">20</span>, <span class="hljs-number">10</span>, kernel_size=<span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>, stride=<span class="hljs-number">3</span>)<br><br>tconv(conv(X)).shape == X.shape<br><br>---<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ul><li>小结<ul><li>与通过卷积核减少输入元素的常规卷积相反，转置卷积通过卷积核广播输入元素，从而产生形状大于输入的输出。</li><li>如果我们将X输入卷积层f来获得输出Y&#x3D;f(X)并创造一个与f有相同的超参数、但输出通道数是X中通道数的转置卷积层g，那么g(Y)的形状将与X相同。</li><li>我们可以<strong>使用矩阵乘法来实现卷积</strong>。<strong>转置卷积层能够交换卷积层的正向传播函数和反向传播函数。</strong></li></ul></li></ul><p><font size=4 color=yellow>13.11 全卷积网络</font></p><ul><li><p>FCN是用深度神经网络来做语义分割的奠基性工作。</p></li><li><p>使用转置卷积层来替换CNN最后的全连接层，从而实现每个像素的预测。</p></li></ul><p>_全卷积网络_（fully convolutional network，FCN）采用卷积神经网络实现了<strong>从图像像素到像素类别的变换</strong> [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id100" title="Long, J., Shelhamer, E., &amp; Darrell, T. (2015). Fully convolutional networks for semantic segmentation. Proceedings of the IEEE conference on computer vision and pattern recognition (pp. 3431–3440).">Long et al., 2015</a>]。 与我们之前在图像分类或目标检测部分介绍的卷积神经网络不同，全卷积网络将中间层特征图的高和宽变换回输入图像的尺寸：这是通过在 <a href="http://zh.d2l.ai/chapter_computer-vision/transposed-conv.html#sec-transposed-conv">13.10节</a>中引入的 <em>转置卷积</em> （transposed convolution）实现的。 因此，输出的类别预测与输入图像在像素级别上具有一一对应关系：通道维的输出即该位置对应像素的类别预测。</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/fcn.svg'><p><font size=4 color=yellow>13.12 风格迁移</font></p><p>如何使用卷积神经网络，自动将一个图像中的风格应用在另一图像之上，即 <em>风格迁移</em> （style transfer）</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/neural-style.svg'>基于卷积神经网络的风格迁移。实线箭头和虚线箭头分别表示前向传播和反向传播<p><font  size=6 color=red>第四部分 循环神经网络</font></p><h2 id="第八章-循环神经网络"><a href="#第八章-循环神经网络" class="headerlink" title="第八章 循环神经网络"></a>第八章 循环神经网络</h2><p>大多数样本并不是独立同分布的 （independently and identically distributed，i.i.d.）</p><p>简言之，如果说<em>卷积神经网络</em>可以有效地处理<strong>空间信息</strong>， 那么本章的<em>循环神经网络</em>（recurrent neural network，RNN）则可以更好地处理<strong>序列信息</strong>。 <strong>循环神经网络通过引入状态变量存储过去的信息和当前的输入，从而可以确定当前的输出。</strong></p><p><font size=4 color=yellow> 8.1 序列模型 </font></p><ul><li>时序模型中，当前数据跟之前观察到的数据相关</li><li><strong>自回归模型</strong>中使用自身过去数据来预测未来</li><li><strong>马尔可夫模型</strong>假设当前只跟最近少数数据相关，从而简化模型</li><li><strong>潜变量模型</strong>使用潜变量来概括历史信息</li></ul><p>RNN是潜变量模型</p><p><font size=4 color=yellow> 8.2 文本预处理 </font></p><p>直接看代码！</p><p><a href="http://zh.d2l.ai/chapter_recurrent-neural-networks/text-preprocessing.html">8.2. 文本预处理 — 动手学深度学习 2.0.0-beta1 documentation (d2l.ai)</a></p><p><font size=4 color=yellow> 8.3 语言模型和数据集 </font></p><p><font size=4 color=yellow> 8.4 循环神经网络 </font></p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/rnn.svg'><ul><li>对隐状态使用循环计算的神经网络称为循环神经网络（RNN）。</li><li>循环神经网络的隐状态可以捕获直到当前时间步序列的历史信息。</li><li>循环神经网络模型的参数数量不会随着时间步的增加而增加。</li><li>我们可以使用循环神经网络创建字符级语言模型。</li><li>我们可以使用<strong>困惑度</strong>来评价语言模型的质量。</li></ul><img src= 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221129141753161.png'><ul><li>循环神经网络的输出取决于当下输入和前一时间的因变量。</li><li>应用到语言模型中时，循环神经网络根据当前词预测下一次时刻词。</li><li>使用梯度剪裁解决梯度爆炸的问题</li></ul><p><font size=4 color=yellow> 8.5 循环神经网络的从零开始实现 </font></p><p><a href="http://zh.d2l.ai/chapter_recurrent-neural-networks/rnn-scratch.html">8.5. 循环神经网络的从零开始实现 — 动手学深度学习 2.0.0-beta1 documentation (d2l.ai)</a></p><p><font size=4 color=yellow> 8.6 循环神经网络的简洁实现 </font></p><p><a href="http://zh.d2l.ai/chapter_recurrent-neural-networks/rnn-concise.html">8.6. 循环神经网络的简洁实现 — 动手学深度学习 2.0.0-beta1 documentation (d2l.ai)</a></p><p><font size=4 color=yellow> 8.7 通过时间反向传播 </font></p><ul><li>“通过时间反向传播”仅仅适用于反向传播在具有隐状态的序列模型。</li><li>截断是计算方便性和数值稳定性的需要。截断包括：规则截断和随机截断。</li><li>矩阵的高次幂可能导致神经网络特征值的发散或消失，将以梯度爆炸或梯度消失的形式表现。</li><li>为了计算的效率，“通过时间反向传播”在计算期间会缓存中间值。</li></ul><h2 id="第九章-现代循环神经网络"><a href="#第九章-现代循环神经网络" class="headerlink" title="第九章 现代循环神经网络"></a>第九章 现代循环神经网络</h2><p><em>门控循环单元</em>（gated recurrent units，GRU）和 <em>长短期记忆网络</em>（long short-term memory，LSTM）。 </p><p><font size=4 color=yellow> 9.1 门控循环单元（GRU） </font></p><p>在学术界已经提出了许多方法来解决这类问题。 其中最早的方法是”长短期记忆”（long-short-term memory，LSTM） [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id68">Hochreiter &amp; Schmidhuber, 1997</a>]， 我们将在 <a href="http://zh.d2l.ai/chapter_recurrent-modern/lstm.html#sec-lstm">9.2节</a>中讨论。 门控循环单元（gated recurrent unit，GRU） [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id23">Cho et al., 2014a</a>] 是一个稍微简化的变体，通常能够提供同等的效果， 并且计算 [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id26">Chung et al., 2014</a>]的速度明显更快。 由于<strong>门控循环单元更简单</strong>，我们从它开始解读。</p><p><strong>不是每个观察值都是同等重要！</strong></p><ul><li>门控隐状态</li></ul><p>门控循环单元与普通的循环神经网络之间的关键区别在于： 前者支持隐状态的门控。 这意味着模型有专门的机制来确定应该何时更新隐状态， 以及应该何时重置隐状态。 </p><ul><li><em>重置门</em>（reset gate）和<em>更新门</em>（update gate）</li></ul><p>重置门允许我们控制“可能还想记住”的过去状态的数量； （能遗忘的机制）<br>更新门将允许我们控制新状态中有多少个是旧状态的副本。（能关注的机制）</p><div align = center><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/gru-1.svg'><p>在门控循环单元模型中计算重置门和更新门</div><ul><li><em>候选隐状态</em>（candidate hidden state）</li></ul><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/gru-2.svg'><p>在门控循环单元模型中计算候选隐状态</p><ul><li>隐状态</li></ul><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/gru-3.svg'><p>计算门控循环单元模型中的隐状态</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221129171814621.png'><ul><li>门控循环神经网络可以更好地捕获时间步距离很长的序列上的依赖关系。</li><li><strong>重置门</strong>有助于捕获序列中的<strong>短期依赖关系。</strong>（遗忘）</li><li><strong>更新门</strong>有助于捕获序列中的<strong>长期依赖关系。</strong>（关注）</li><li>重置门打开时，门控循环单元包含基本循环神经网络；更新门打开时，门控循环单元可以跳过子序列。</li></ul><p><font size=4 color=yellow> 9.2 长短期记忆网络（LSTM） </font></p><p>（long short-term memory，LSTM）</p><p>有趣的是，长短期记忆网络的设计比门控循环单元稍微复杂一些， 却比门控循环单元早诞生了近20年。</p><ul><li>门控记忆元</li></ul><p>长短期记忆网络引入了<strong><em>记忆元</em>（memory cell）</strong>，或简称为<em>单元</em>（cell）。 有些文献认为记忆元是隐状态的一种特殊类型， 它们与隐状态具有相同的形状，其设计目的是用于记录附加的信息。 为了控制记忆元，我们需要许多门。<br>其中一个门用来从单元中输出条目，我们将其称为<strong><em>输出门</em>（output gate）</strong>。<br>另外一个门用来决定何时将数据读入单元，我们将其称为<strong><em>输入门</em>（input gate）</strong>。<br>我们还需要一种机制来重置单元的内容，由<strong><em>遗忘门</em>（forget gate）</strong>来管理， 这种设计的动机与门控循环单元相同， 能够通过专用机制决定什么时候记忆或忽略隐状态中的输入。 </p><ul><li>忘记门：将值超0减少</li><li>输入门：决定是不是忽略掉输入数据</li><li>输出门：决定是不是使用隐状态</li></ul><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221129200027344.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/lstm-0.svg"/><ul><li>候选记忆元</li></ul><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/lstm-1.svg"/><ul><li>记忆元</li></ul><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/lstm-2.svg"/><ul><li>隐状态</li></ul><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/lstm-3.svg"/><p><font size=4 color=yellow> 9.3 深度循环神经网络 </font></p><p>事实上，我们可以将<strong>多层循环神经网络堆叠</strong>在一起， 通过对几个简单层的组合，产生了一个灵活的机制。 </p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/deep-rnn.svg"/><p>与多层感知机一样，隐藏层数目L和隐藏单元数目h都是超参数。 也就是说，它们可以由我们调整的。 另外，用门控循环单元或长短期记忆网络的隐状态 来代替 <a href="http://zh.d2l.ai/chapter_recurrent-modern/deep-rnn.html#equation-eq-deep-rnn-h">(9.3.1)</a>中的隐状态进行计算， 可以很容易地得到深度门控循环神经网络或深度长短期记忆神经网络。</p><p><font size=4 color=yellow> 9.4 双向循环神经网络 </font></p><p> <em>双向循环神经网络</em>（bidirectional RNNs） 添加了反向传递信息的隐藏层</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/birnn.svg"/><p>双向循环神经网络的一个关键特性是：使用来自序列两端的信息来估计输出。 也就是说，我们使用来自过去和未来的观测信息来预测当前的观测。 但是在对下一个词元进行预测的情况中，这样的模型并不是我们所需的。 <strong>因为在预测下一个词元时，我们终究无法知道下一个词元的下文是什么， 所以将不会得到很好的精度。</strong>具体地说，在训练期间，我们能够利用过去和未来的数据来估计现在空缺的词； 而在测试期间，我们只有过去的数据，因此精度将会很差。 下面的实验将说明这一点。</p><p>另一个严重问题是，双向循环神经网络的计算速度非常慢。 其主要原因是网络的前向传播需要在双向层中进行前向和后向递归， 并且网络的反向传播还依赖于前向传播的结果。 因此，梯度求解将有一个非常长的链。</p><ul><li>在双向循环神经网络中，每个时间步的隐状态由当前时间步的前后数据同时决定。</li><li>双向循环神经网络与概率图模型中的“前向-后向”算法具有相似性。</li><li>双向循环神经网络主要用于序列编码和给定双向上下文的观测估计。</li><li>由于梯度链更长，因此双向循环神经网络的训练代价非常高。</li><li>通常应用在对序列的特征提取、填空，不会用在预测未来。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">lstm_layer = nn.LSTM(num_inputs, num_hiddens, num_layers, bidirectional=<span class="hljs-literal">True</span>)<br>model = d2l.RNNModel(lstm_layer, <span class="hljs-built_in">len</span>(vocab))<br><br><span class="hljs-comment"># bidirectional=True</span><br></code></pre></td></tr></table></figure><p><font size=4 color=yellow> 9.5 机器翻译与数据集 </font></p><p>语言模型是自然语言处理的关键， 而<em>机器翻译</em>是语言模型最成功的基准测试。 因为机器翻译正是将输入序列转换成输出序列的 <em>序列转换模型</em>（sequence transduction）的核心问题。 </p><p><em>机器翻译</em>（machine translation）指的是 将序列从一种语言自动翻译成另一种语言。 </p><p>因为<strong><em>统计机器翻译</em>（statisticalmachine translation）</strong>涉及了 翻译模型和语言模型等组成部分的统计分析， 因此基于神经网络的方法通常被称为 <strong><em>神经机器翻译</em>（neuralmachine translation）</strong>， 用于将两种翻译模型区分开来。</p><p><font size=4 color=yellow> 9.6 编码器-解码器架构 </font></p><p>编码器（Encoder）：讲文本表示成向量<br>解码器（Decoder）：将向量表示成输出</p><p>一个模型被分为两块</p><ul><li>编码器处理输出</li><li>解码器生成输出</li></ul><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221129221927817.png"/><p><font size=4 color=yellow> 9.7 序列到序列学习（seq2seq） </font></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221129222414621.png"/><ul><li>seq2seq从一个句子生成另一个句子</li><li>编码器和解码器都是RNN</li><li>将编码器最后时间隐状态来初始化解码器隐状态来完成信息传递</li><li>常用BLEU来衡量生成序列的好坏</li></ul><p><font size=4 color=yellow> 9.8 束搜索 </font></p><ul><li><em>贪心搜索</em>（greedy search）策略</li></ul><p>效率最高，但不一定是最好的。</p><ul><li><em>穷举搜索</em>（exhaustive search）</li></ul><p>保证是最好的，但是计算复杂度太高了。</p><ul><li><em>束搜索</em>（beam search）</li></ul><p><em>束搜索</em>（beam search）是贪心搜索的一个改进版本。 它有一个超参数，名为<em>束宽</em>（beam size）k。 在时间步1，我们选择具有最高条件概率的k个词元。 这k个词元将分别是k个候选输出序列的第一个词元。 在随后的每个时间步，基于上一时间步的k个候选输出序列， 我们将继续从k|Y|个可能的选择中 挑出具有最高条件概率的k个候选输出序列。</p><p> 实际上，贪心搜索可以看作是一种束宽为1的特殊类型的束搜索。 通过灵活地选择束宽，束搜索可以在正确率和计算代价之间进行权衡。</p><p><font  size=6 color=red>第五部分 注意力机制</font></p><h2 id="第十章-注意力机制"><a href="#第十章-注意力机制" class="headerlink" title="第十章 注意力机制"></a>第十章 注意力机制</h2><p><font size=4 color=yellow> 10.1 注意力提示 </font></p><p><em>双组件</em>（two-component）: 在这个框架中，受试者基于<em>非自主性提示</em>和<em>自主性提示</em> 有选择地引导注意力的焦点。</p><ul><li><p>由于突出性的非自主性提示（红杯子），注意力<strong>不自主</strong>地指向了咖啡杯</p></li><li><p>依赖于任务的意志提示（想读一本书），注意力被<strong>自主</strong>引导到书上</p></li></ul><blockquote><p>因此，<em>“是否包含<strong>自主性</strong>提示”</em>将<strong>注意力机制</strong>与<strong>全连接层或汇聚层</strong>区别开来。 </p><p>在注意力机制的背景下，我们将<strong>自主性提示称为<em>查询</em>（query）</strong>。 </p><p>给定任何查询，注意力机制通过<em>注意力汇聚</em>（<strong>attention pooling</strong>） 将选择引导至<em>感官输入</em>（<strong>sensory inputs</strong>，例如中间特征表示）。 </p><p>在注意力机制中，这些感官输入被称为<em>值</em>（<strong>value</strong>）。 更通俗的解释，每个值都与一个<em>键</em>（<strong>key</strong>）配对， 这可以想象为感官输入的<strong>非自主提示</strong>。 </p></blockquote><ul><li>query(Volitional cue 自主性提示)</li><li>key（Non-volitional cue 非自主性提示） </li><li>value（sensory inputs）</li><li>attention pooling</li></ul><p> 如 <a href="http://zh.d2l.ai/chapter_attention-mechanisms/attention-cues.html#fig-qkv">图10.1.3</a>所示，我们可以设计注意力汇聚， 以便给定的查询（自主性提示）可以与键（非自主性提示）进行匹配， 这将引导得出最匹配的值（感官输入）。</p><div align = center><img src = 'https://zh.d2l.ai/_images/qkv.svg'><p>注意力机制通过注意力汇聚将*查询*（自主性提示）和*键*（非自主性提示）结合在一起，实现对*值*（感官输入）的选择倾向</div><p><font size=4 color=yellow> 10.2 注意力汇聚：Nadaraya-Watson核回归</font></p><p>Query查询（自主提示）和Key键（非自主提示）之间的交互形成了注意力汇聚（Attention pooling）， 注意力汇聚有选择地聚合了Value值（感官输入）以生成最终的输出。</p><p><font size=4 color=yellow> 10.3 注意力评分函数</font></p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/attention-output.svg'><ul><li>注意力分数是query和key的相似度，注意力权重是分数的softmax结果</li><li>常见的分数计算<ul><li>将query和key合并起来进入一个单输出单隐藏层的MLP:<em>加性注意力</em>（additive attention）</li><li>直接将query和key做内积:<em>缩放点积注意力</em>（scaled dot-product attention）</li></ul></li></ul><p><font size=4 color=yellow> 10.4 Bahdanau 注意力</font></p><p>使用注意力机制的seq2seq</p><p><font size=4 color=yellow> 10.5 多头注意力</font></p><p>在实践中，当给定相同的查询、键和值的集合时， 我们希望模型可以基于相同的注意力机制学习到不同的行为， 然后将不同的行为作为知识组合起来， 捕获序列内各种范围的依赖关系 （例如，短距离依赖和长距离依赖关系）。 因此，允许注意力机制组合使用查询、键和值的不同 <em>子空间表示</em>（representation subspaces）可能是有益的。</p><p>与其只使用单独一个注意力汇聚， 我们可以用独立学习得到的组不同的 <em>线性投影</em>（linear projections）来变换查询、键和值。 然后，这组变换后的查询、键和值将并行地送到注意力汇聚中。 最后，将这个注意力汇聚的输出拼接在一起， 并且通过另一个可以学习的线性投影进行变换， 以产生最终输出。 这种设计被称为<em>多头注意力</em>（multihead attention） [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id174">Vaswani et al., 2017</a>]。 对于个注意力汇聚输出，每一个注意力汇聚都被称作一个<em>头</em>（head）。</p><p>多头注意力：多个头连结然后线性变换</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/multi-head-attention.svg'><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201103856692.png" alt="image-20221201103856692"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201104936189.png" alt="image-20221201104936189"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201105128392.png" alt="image-20221201105128392"></p><p><font size=4 color=yellow> 10.6 自注意力和位置编码</font></p><p>有了注意力机制之后，我们将词元序列输入注意力汇聚（attention pooling）中， 以便同一组词元同时充当查询、键和值。 具体来说，<strong>每个查询都会关注所有的键－值对并生成一个注意力输出</strong>。 *<em>由于查询、键和值来自同一组输入，因此被称为 <em>自注意力</em>（self-attention）</em>* [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id94">Lin et al., 2017b</a>, <a href="http://zh.d2l.ai/chapter_references/zreferences.html#id174">Vaswani et al., 2017</a>]， 也被称为<em>内部注意力</em>（intra-attention） [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id22">Cheng et al., 2016</a>, <a href="http://zh.d2l.ai/chapter_references/zreferences.html#id119">Parikh et al., 2016</a>, <a href="http://zh.d2l.ai/chapter_references/zreferences.html#id121">Paulus et al., 2017</a>]。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201090943120.png"/><p>自注意力同时具有并行计算和最短的最大路径长度这两个优势。</p><p>在处理词元序列时，循环神经网络是逐个的重复地处理词元的， 而<strong>自注意力则因为并行计算而放弃了顺序操作</strong>。 为了使用序列的顺序信息，我们通过在输入表示中添加 <em>位置编码</em>（positional encoding）来注入绝对的或相对的位置信息。 位置编码可以通过学习得到也可以直接固定得到。   </p><p><font size=4 color=yellow> 10.7 Transformer </font></p><p>对比之前仍然依赖循环神经网络实现输入表示的自注意力模型 [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id22">Cheng et al., 2016</a>, <a href="http://zh.d2l.ai/chapter_references/zreferences.html#id94">Lin et al., 2017b</a>, <a href="http://zh.d2l.ai/chapter_references/zreferences.html#id121">Paulus et al., 2017</a>]，<strong>transformer模型完全基于注意力机制，没有任何卷积层或循环神经网络层</strong> [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id174">Vaswani et al., 2017</a>]。</p><p>transformer是由编码器和解码器组成的。</p><p>transformer的编码器和解码器是基于<strong>自注意力</strong>的模块叠加而成的，源（输入）序列和目标（输出）序列的<em>嵌入</em>（embedding）表示将加上<em>位置编码</em>（positional encoding），再分别输入到编码器和解码器中。</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/transformer.svg'><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201102708737.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201105447341.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201105808505.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201110049609.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201110314747.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201110728812.png"/><p>编码器部分：</p><p>从宏观角度来看，transformer的<strong>编码器</strong>是由多个相同的层叠加而成的，每个层都有两个子层（子层表示为）。</p><ul><li>第一个子层是<em>多头自注意力</em>（multi-head self-attention）汇聚；</li><li>第二个子层是<em>基于位置的前馈网络</em>（positionwise feed-forward network）。</li></ul><p>在计算编码器的自注意力时，查询、键和值都来自前一个编码器层的输出。</p><p>每个子层都采用了<em>残差连接</em>（residual connection）。</p><p><em>层规范化</em>（layer normalization）</p><p>解码器部分：</p><p>Transformer解码器也是由多个相同的层叠加而成的，并且层中使用了<strong>残差连接</strong>和<strong>层规范化</strong>。</p><p>除了编码器中描述的两个子层之外，解码器还在这两个子层之间插入了第三个子层，称为<strong><em>编码器－解码器注意力</em>（encoder-decoder attention）层。</strong></p><p><strong>在编码器－解码器注意力中，查询来自前一个解码器层的输出，而键和值来自整个编码器的输出。</strong></p><p>在解码器自注意力中，查询、键和值都来自上一个解码器层的输出。但是，解码器中的每个位置只能考虑该位置之前的所有位置。这种<em>掩蔽</em>（masked）注意力保留了<em>自回归</em>（auto-regressive）属性，确保预测仅依赖于已生成的输出词元。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201110955835.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201111102232.png"/><h2 id="第十四章-自然语言处理：预训练"><a href="#第十四章-自然语言处理：预训练" class="headerlink" title="第十四章 自然语言处理：预训练"></a>第十四章 自然语言处理：预训练</h2><p><font size=3 color = yellow> 14.1. 词嵌入（Word2vec）</font></p><p><font size=3 color = yellow> 14.2. 近似训练 </font></p><p><font size=3 color = yellow> 14.3. 用于预训练词嵌入的数据集 </font></p><p><font size=3 color = yellow> 14.4. 预训练word2vec </font></p><p><font size=3 color = yellow> 14.5. 全局向量的词嵌入（GloVe） </font></p><p><font size=3 color = yellow> 14.6. 子词嵌入 </font></p><p><font size=3 color = yellow> 14.7. 词的相似性和类比任务 </font></p><p><font size=3 color = yellow> 14.8. 来自Transformers的双向编码器表示（BERT） </font></p><ul><li>掩蔽语言模型（Masked Language Modeling）</li></ul><p>如 <a href="http://zh.d2l.ai/chapter_recurrent-neural-networks/language-models-and-dataset.html#sec-language-model">8.3节</a>所示，语言模型使用左侧的上下文预测词元。为了双向编码上下文以表示每个词元，BERT随机掩蔽词元并使用来自双向上下文的词元以自监督的方式预测掩蔽词元。此任务称为<em>掩蔽语言模型</em>。</p><p>在这个预训练任务中，将随机选择15%的词元作为预测的掩蔽词元。要预测一个掩蔽词元而不使用标签作弊，一个简单的方法是总是用一个特殊的“<mask>”替换输入序列中的词元。然而，人造特殊词元“<mask>”不会出现在微调中。为了避免预训练和微调之间的这种不匹配，如果为预测而屏蔽词元（例如，在“this movie is great”中选择掩蔽和预测“great”），则在输入中将其替换为：</p><ul><li>80%时间为特殊的“<mask>“词元（例如，“this movie is great”变为“this movie is<mask>”；</li><li>10%时间为随机词元（例如，“this movie is great”变为“this movie is drink”）；</li><li>10%时间内为不变的标签词元（例如，“this movie is great”变为“this movie is great”）。</li></ul><p>请注意，在15%的时间中，有10%的时间插入了随机词元。这种偶然的噪声鼓励BERT在其双向上下文编码中不那么偏向于掩蔽词元（尤其是当标签词元保持不变时）。</p><ul><li>下一句预测（Next Sentence Prediction）</li></ul><p>尽管掩蔽语言建模能够编码双向上下文来表示单词，但它不能显式地建模文本对之间的逻辑关系。为了帮助理解两个文本序列之间的关系，BERT在预训练中考虑了一个二元分类任务——<em>下一句预测</em>。在为预训练生成句子对时，有一半的时间它们确实是标签为“真”的连续句子；在另一半的时间里，第二个句子是从语料库中随机抽取的，标记为“假”。</p><p><font size=3 color = yellow> 14.9. 用于预训练BERT的数据集 </font></p><p><font size=3 color = yellow> 14.10. 预训练BERT </font></p><p>原始BERT [<a href="http://zh.d2l.ai/chapter_references/zreferences.html#id32">Devlin et al., 2018</a>]有两个不同模型尺寸的版本。基本模型（）使用12层（Transformer编码器块），768个隐藏单元（隐藏大小）和12个自注意头。大模型（）使用24层，1024个隐藏单元和16个自注意头。值得注意的是，前者有1.1亿个参数，后者有3.4亿个参数。为了便于演示，我们定义了一个小的BERT，使用了2层、128个隐藏单元和2个自注意头。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201151049015.png"/><h2 id="第十五章-自然语言处理：应用"><a href="#第十五章-自然语言处理：应用" class="headerlink" title="第十五章 自然语言处理：应用"></a>第十五章 自然语言处理：应用</h2><p><font size=3 color = yellow> 15.1. 情感分析及数据集（Word2vec）</font></p><p><font size=3 color = yellow> 15.2. 情感分析：使用循环神经网络 </font></p><p><font size=3 color = yellow> 15.3. 情感分析：使用卷积神经网络 </font></p><p><font size=3 color = yellow> 15.4. 自然语言推断与数据集 </font></p><p><font size=3 color = yellow> 15.5. 自然语言推断：使用注意力 </font></p><p><font size=3 color = yellow> 15.6. 针对序列级和词元级应用程序微调BERT </font></p><p><font size=3 color = yellow> 15.7. 自然语言推断：微调BERT </font></p><h2 id="第十一章-优化算法"><a href="#第十一章-优化算法" class="headerlink" title="第十一章 优化算法"></a>第十一章 优化算法</h2><ul><li><p>优化</p><ul><li>全局最优，局部最优</li></ul></li><li><p>凸优化</p><ul><li><p>凸：线性回归，Softmax回归</p></li><li><p>非凸：其他（MLP, CNN, RNN, Attention……）</p></li></ul></li><li><p>优化算法</p><ul><li><p>梯度下降（gradient descent）</p></li><li><p>随机梯度下降（stochastic gradient descent，SGD）</p></li><li><p>小批量随机梯度下降（Mini-Batch Gradient Descent）</p></li><li><p>Adam算法：对学习率不敏感</p></li><li></li></ul></li></ul><p><a href="https://zhuanlan.zhihu.com/p/72929546">批量梯度下降(BGD)、随机梯度下降(SGD)、小批量梯度下降(MBGD) - 知乎 (zhihu.com)</a></p><ul><li>冲量法（动量法）<ul><li><em>动量</em>（momentum）</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201160745655.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201160805185.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201161212850.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201161513860.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20221201161852049.png"/><hr><hr><hr><h1 id="学习过程中保存的链接"><a href="#学习过程中保存的链接" class="headerlink" title="学习过程中保存的链接"></a>学习过程中保存的链接</h1><ul><li>关于李沐</li></ul><p><a href="https://zhuanlan.zhihu.com/p/25099638">博士这五年 - 知乎 (zhihu.com)</a></p><p><a href="https://www.thepaper.cn/newsDetail_forward_15136813">AI大神李沐B站走红：连博导们都在追更，还亲自带你逐段读懂论文_湃客_澎湃新闻-The Paper</a></p><p><a href="https://zhuanlan.zhihu.com/p/78228461">从ACM班、百度到亚马逊，深度学习大牛李沐的开挂人生 - 知乎 (zhihu.com)</a></p><ul><li>关于D2L</li></ul><p><a href="http://zh.d2l.ai/">《动手学深度学习》 — 动手学深度学习 2.0.0-beta0 documentation (d2l.ai)</a></p><p><a href="https://courses.d2l.ai/zh-v2/">课程安排 - 动手学深度学习课程 (d2l.ai)</a></p><p><a href="https://space.bilibili.com/1567748478/channel/seriesdetail?sid=358497">跟李沐学AI的个人空间_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV18K411w7Vs?share_source=copy_web">Windows 下安装 CUDA 和 Pytorch 跑深度学习 - 动手学深度学习v2_哔哩哔哩_bilibili</a></p><ul><li>关于大佬的分享</li></ul><p><a href="http://tangshusen.me/Dive-into-DL-PyTorch/#/">简介 - Dive-into-DL-PyTorch (tangshusen.me)</a></p><p><a href="http://tangshusen.me/Dive-into-DL-PyTorch/#/chapter02_prerequisite/2.1_install">2.1 环境配置 - Dive-into-DL-PyTorch (tangshusen.me)</a></p><p><a href="https://github.com/Miraclelucy/dive_into_deep_learning">Miraclelucy&#x2F;dive_into_deep_learning: ✔️李沐 【动手学深度学习】课程学习笔记：使用pycharm编程，基于pytorch框架实现。 (github.com)</a></p><p><a href="https://blog.csdn.net/qq_38311396/article/details/120768038">动手深度学习–windows环境安装_诸葛三石的博客-CSDN博客</a></p><p><a href="https://www.zhihu.com/column/c_1383091814182756352">动手学深度学习v2 课后练习代码及讲解 - 知乎 (zhihu.com)</a></p><ul><li>关于数学</li></ul><p><a href="https://zhuanlan.zhihu.com/p/73953567">P问题、NP问题、NP完全问题和NP难问题 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/141884913">千禧问题：P &#x3D; NP ？ - 知乎 (zhihu.com)</a></p><p><a href="https://zhaokaifeng.com/">荒原之梦 - 提供数学、物理学和计算机科学领域的原创精品内容 (zhaokaifeng.com)</a></p><p><a href="https://zh.wikipedia.org/wiki/NP%E5%AE%8C%E5%85%A8">NP完全 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://www.mathsisfun.com/sets/np-complete.html">NP-Complete - A Rough Guide (mathsisfun.com)</a></p><ul><li>关于编程<ul><li><a href="https://docs.python.org/zh-cn/3/tutorial/index.html">Python 教程 — Python 3.11.0 文档</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QQ聊天框消息加密</title>
    <link href="/blog/post/Ideas/ChatEncryption/"/>
    <url>/blog/post/Ideas/ChatEncryption/</url>
    
    <content type="html"><![CDATA[<p>之前做过简单的英文文本加密，用过凯撒密码这样很简单的加密方式，我想有没有简单易学，但是加密程度更高的加密方式；<br>另外通过这个程序还想学习一下python的GUI开发，做出真正的界面；<br>如果可以与QQ等聊天界面结合起来，将内容直接输入到QQ的消息窗口中去，省去了复制粘贴的麻烦。</p><p>2021年8月我写好了第一版的程序，但是这个效果嘛，Emmmmm……一言难尽。<br>2022年3月的一天下午，厌学了！也是因为好久都没有写过程序了，就看了一些自己的博客，看一下还有什么坑没有填！然后就发现了我之前做的这个半成品，然后花了几个小时的时间，重写了一下，也把UI(简陋)界面简单做了一下！</p><p><a href="https://github.com/murphyhoucn/EncryptedChat">murphyhoucn&#x2F;EncryptedChat</a></p><p><a href="https://cosmicdusty.cc/post/QQ%E8%81%8A%E5%A4%A9%E6%A1%86%E6%B6%88%E6%81%AF%E5%8A%A0%E5%AF%86">博客地址：QQ聊天框消息加密</a></p><p><a href="https://www.bilibili.com/video/BV1KT4y1S7kF?spm_id_from=333.999.0.0">视频演示：”加密对话”EncryptedChat</a></p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><ol><li>写一个聊天外挂框，实现在框内输入内容，自动加密然后通过QQ聊天框发送出去。</li><li>做一个简单的UI，其实我之前并没有学过也没用做过GUI的开发，了解一点点QT，这次做这个程序也是现学现卖了。</li><li>消息加密算法，大概率是使用对称加密了，如果是非对称加密的话估计仅靠本地是不太好实现的，得上云了！</li><li>写着玩，能用就行！</li></ol><h1 id="理论依据"><a href="#理论依据" class="headerlink" title="理论依据"></a>理论依据</h1><h2 id="PyQt5"><a href="#PyQt5" class="headerlink" title="PyQt5"></a>PyQt5</h2><p><a href="https://pypi.org/project/PyQt5/">PyQt5 · PyPI</a></p><p>Qt is set of cross-platform C++ libraries that implement high-level APIs for accessing many aspects of modern desktop and mobile systems. These include location and positioning services, multimedia, NFC and Bluetooth connectivity, a Chromium based web browser, as well as traditional UI development.</p><p>PyQt5 is a comprehensive set of Python bindings for Qt v5. It is implemented as more than 35 extension modules and enables Python to be used as an alternative application development language to C++ on all supported platforms including iOS and Android.</p><p>PyQt5 may also be embedded in C++ based applications to allow users of those applications to configure or enhance the functionality of those applications.</p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p><a href="https://zh.wikipedia.org/wiki/Base64">Base64 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><strong>Base64</strong>（基底64）是一种基于64个可打印字符来表示<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制数据</a>的表示方法。由于一2为64的对数的值是6，所以每6个<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83">比特</a>为一个单元，对应某个可打印字符。3个<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82">字节</a>相当于24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。在Base64中的可打印字符包括<a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E4%B8%81%E5%AD%97%E6%AF%8D">字母</a><code>A-Z</code>、<code>a-z</code>、数字<code>0-9</code>，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如<a href="https://zh.wikipedia.org/wiki/Uuencode">uuencode</a>的其他编码方法，和之后<a href="https://zh.wikipedia.org/w/index.php?title=BinHex&action=edit&redlink=1">BinHex</a>的版本使用不同的64字符集来代表6个二进制数字，但是不被称为Base64。</p><p>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括<a href="https://zh.wikipedia.org/wiki/MIME">MIME</a>的<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">电子邮件</a>及<a href="https://zh.wikipedia.org/wiki/XML">XML</a>的一些复杂数据。</p><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86">高级加密标准 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><strong>高级加密标准</strong>（英语：<strong>A</strong>dvanced <strong>E</strong>ncryption <strong>S</strong>tandard，<a href="https://zh.wikipedia.org/wiki/%E7%BC%A9%E5%86%99">缩写</a>：AES），又称<strong>Rijndael加密法</strong>（荷兰语发音： [<a href="https://zh.wikipedia.org/wiki/Help:%E8%8D%B7%E8%98%AD%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99">ˈrɛindaːl]</a>，音似英文的“Rhine doll”），是<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E8%81%94%E9%82%A6%E6%94%BF%E5%BA%9C">美国联邦政府</a>采用的一种<a href="https://zh.wikipedia.org/wiki/%E5%8D%80%E5%A1%8A%E5%8A%A0%E5%AF%86">区块加密</a>标准。这个标准用来替代原先的<a href="https://zh.wikipedia.org/wiki/DES">DES</a>，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E6%A0%87%E5%87%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E9%99%A2">美国国家标准与技术研究院</a>（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。现在，高级加密标准已然成为<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86">对称密钥加密</a>中最流行的<a href="https://zh.wikipedia.org/wiki/%E6%BC%94%E7%AE%97%E6%B3%95">算法</a>之一。</p><p>该算法为<a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E5%88%A9%E6%97%B6">比利时</a>密码学家Joan Daemen和Vincent Rijmen所设计，结合两位作者的名字，以Rijndael为名投稿高级加密标准的甄选流程。</p><p>严格地说，AES和<a href="https://zh.wikipedia.org/wiki/Rijndael">Rijndael</a>加密法并不完全一样（虽然在实际应用中两者可以互换），因为Rijndael加密法可以支持更大范围的<a href="https://zh.wikipedia.org/wiki/%E5%9D%97%E5%A4%A7%E5%B0%8F">区块</a>和<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5%E9%95%BF%E5%BA%A6">密钥长度</a>：AES的区块长度固定为128<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83">比特</a>，密钥长度则可以是128，192或256比特；而Rijndael使用的密钥和区块长度均可以是128，192或256比特。加密过程中使用的密钥是由<a href="https://zh.wikipedia.org/wiki/Rijndael%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E6%96%B9%E6%A1%88">Rijndael密钥生成方案</a>产生。</p><p>大多数AES计算是在一个特别的<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E5%9F%9F">有限域</a>完成的。</p><p>AES加密过程是在一个4×4的<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%BB%84">字节</a>矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个Byte）。（Rijndael加密法因支持更大的区块，其矩阵的“列数（Row number）”可视情况增加）加密时，各轮AES加密循环（除最后一轮外）均包含4个步骤：</p><ol><li><code>AddRoundKey</code>—矩阵中的每一个字节都与该次<a href="https://zh.wikipedia.org/w/index.php?title=%E5%AF%86%E9%91%B0%E6%AC%A1%E5%BA%8F%E8%A1%A8&action=edit&redlink=1">回合密钥</a>（round key）做<a href="https://zh.wikipedia.org/wiki/XOR">XOR运算</a>；每个子密钥由密钥生成方案产生。</li><li><code>SubBytes</code>—透过一个非线性的替换函数，用<a href="https://zh.wikipedia.org/wiki/%E6%9F%A5%E6%89%BE%E8%A1%A8">查找表</a>的方式把每个字节替换成对应的字节。</li><li><code>ShiftRows</code>—将矩阵中的每个横列进行循环式移位。</li><li><code>MixColumns</code>—为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略<code>MixColumns</code>步骤，而以另一个<code>AddRoundKey</code>取代。</li></ol><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><ul><li>Encrpt.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtWidgets<br><span class="hljs-keyword">from</span> GUI <span class="hljs-keyword">import</span> Ui_Form<br><br><span class="hljs-keyword">import</span> win32gui<br><span class="hljs-keyword">import</span> win32con<br><span class="hljs-keyword">import</span> win32clipboard <span class="hljs-keyword">as</span> w<br><span class="hljs-keyword">import</span>  time<br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">采用AES对称加密算法</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPyQT_Form</span>(QtWidgets.QWidget,Ui_Form):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyPyQT_Form, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.setupUi(<span class="hljs-variable language_">self</span>)<br><br>    <span class="hljs-comment"># 获取窗口所输入的信息的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pushButton1_click</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-comment"># 获取Windows界面输入的消息</span><br>        name=<span class="hljs-variable language_">self</span>.lineEdit_1.text()<br>        key=<span class="hljs-variable language_">self</span>.lineEdit_2.text()<br>        msg=<span class="hljs-variable language_">self</span>.lineEdit_3.text()<br><br>        <span class="hljs-comment"># 对消息进行加密</span><br>        msg_encrypt=encrypt_oracle(key,msg)<br><br>        <span class="hljs-variable language_">self</span>.textEditi.setPlainText(<span class="hljs-string">&quot;加密信息如下：\n&quot;</span>+\<br>            <span class="hljs-string">&quot;昵称:&quot;</span> + name +<span class="hljs-string">&#x27;\n&#x27;</span>+\<br>            <span class="hljs-string">&quot;密钥:&quot;</span> + key +<span class="hljs-string">&#x27;\n&#x27;</span>+\<br>            <span class="hljs-string">&quot;明文:&quot;</span> + msg +<span class="hljs-string">&#x27;\n&#x27;</span>+\<br>            <span class="hljs-string">&quot;暗文:&quot;</span> + msg_encrypt +<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        start(name,msg_encrypt)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pushButton2_click</span>(<span class="hljs-params">self</span>):<br><br>        key=<span class="hljs-variable language_">self</span>.lineEdit_2.text()<br><br>        get_msg_encrypt=getText()<br>        <span class="hljs-comment"># print(get_msg_encrypt)</span><br>        msg_decrypt=decrypt_oralce(key,get_msg_encrypt)<br><br>        <span class="hljs-variable language_">self</span>.textEdito.setPlainText(<span class="hljs-string">&quot;解密信息如下：\n&quot;</span>+\<br>            <span class="hljs-string">&quot;暗文:&quot;</span> + get_msg_encrypt +<span class="hljs-string">&#x27;\n&#x27;</span>+\<br>            <span class="hljs-string">&quot;明文:&quot;</span> + msg_decrypt +<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><br><span class="hljs-comment"># 输出相关函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">name,msg_encrypt</span>):<br><br><br>    <span class="hljs-comment"># =====将消息复制到剪切板中=====</span><br><br>    w.OpenClipboard() <span class="hljs-comment">#打开剪切板</span><br>    w.EmptyClipboard() <span class="hljs-comment">#清空剪切板</span><br>    w.SetClipboardData(win32con.CF_UNICODETEXT, msg_encrypt)  <span class="hljs-comment">#将msg_encrypt设置给剪切板</span><br>    w.CloseClipboard() <span class="hljs-comment">#关闭剪切板</span><br><br>    handle = win32gui.FindWindow(<span class="hljs-literal">None</span>, name) <span class="hljs-comment"># 根据对方昵称获取窗口句柄</span><br>    win32gui.SendMessage(handle, <span class="hljs-number">770</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-comment"># 将剪切板内容填充消息</span><br>    win32gui.SendMessage(handle, win32con.WM_KEYDOWN, win32con.VK_RETURN, <span class="hljs-number">0</span>) <span class="hljs-comment"># 按下回车发送消息</span><br><br><br><span class="hljs-comment"># 加密相关函数</span><br><span class="hljs-comment"># str不是16的倍数那就补足为16的倍数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_to_16</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(value) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:<br>        value += <span class="hljs-string">&#x27;\0&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.encode(value)  <span class="hljs-comment"># 返回bytes</span><br><br><span class="hljs-comment"># 加密相关函数</span><br><span class="hljs-comment"># 加密方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_oracle</span>(<span class="hljs-params">key0,msg</span>):<br>    <span class="hljs-comment"># 秘钥</span><br>    key = key0<br><br>    mystr=msg<br>    text = base64.b64encode(mystr.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>    <span class="hljs-comment"># 初始化加密器</span><br>    aes = AES.new(add_to_16(key), AES.MODE_ECB)<br>    <span class="hljs-comment"># 先进行aes加密</span><br>    encrypt_aes = aes.encrypt(add_to_16(text))<br>    <span class="hljs-comment"># 用base64转成字符串形式</span><br>    encrypted_text = <span class="hljs-built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 执行加密并转码返回bytes</span><br>    <span class="hljs-comment"># print(encrypted_text) 测试打印加密数据</span><br>    <span class="hljs-keyword">return</span> encrypted_text<br><br><br><br><span class="hljs-comment"># 解密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_oralce</span>(<span class="hljs-params">key0,msg</span>):<br>    <span class="hljs-comment"># 秘钥</span><br>    key = key0<br>    <span class="hljs-comment"># 密文</span><br>    text=msg<br>    <span class="hljs-comment"># 初始化加密器</span><br>    aes = AES.new(add_to_16(key), AES.MODE_ECB)<br>    <span class="hljs-comment"># 优先逆向解密base64成bytes</span><br>    base64_decrypted = base64.decodebytes(text.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>    <span class="hljs-comment"># bytes解密</span><br>    decrypted_text = <span class="hljs-built_in">str</span>(aes.decrypt(base64_decrypted),encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-comment"># 执行解密密并转码返回str</span><br>    decrypted_text = base64.b64decode(decrypted_text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment"># print(decrypted_text)</span><br><br>    <span class="hljs-keyword">return</span> decrypted_text<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getText</span>():  <span class="hljs-comment"># 读取剪切板  </span><br>    w.OpenClipboard()<br>    d = w.GetClipboardData(win32con.CF_TEXT)<br>    w.CloseClipboard()<br>    <span class="hljs-keyword">return</span> d.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QtWidgets.QApplication(sys.argv)<br>    my_pyqt_form = MyPyQT_Form()<br>    <br>    <span class="hljs-comment"># 窗口的打开和关闭</span><br>    my_pyqt_form.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><ul><li>GUI.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore,QtWidgets<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QIcon<br><span class="hljs-keyword">import</span> ctypes<br>ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(<span class="hljs-string">&quot;myappid&quot;</span>)<br><br><span class="hljs-comment"># from PyQt5.QtWidgets import QDesktopWidget,QMainWindow,QApplication</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ui_Form</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setupUi</span>(<span class="hljs-params">self, Form</span>):<br>        <span class="hljs-comment"># 建立Windows窗口，并设置合适的大小</span><br><br>        Form.setObjectName(<span class="hljs-string">&quot;Form&quot;</span>)<br>        Form.resize(<span class="hljs-number">1300</span>, <span class="hljs-number">600</span>)<br><br>        Form.setWindowIcon(QIcon(<span class="hljs-string">&quot;ICON.ico&quot;</span>))<br><br>        <span class="hljs-comment"># QRect ( int x, int y, int width, int height )</span><br>        <span class="hljs-comment"># 构造一个以（x，y）为左上角、宽度和高度为width，height的矩形。</span><br>        <span class="hljs-variable language_">self</span>.widget = QtWidgets.QWidget(Form)<br>        <span class="hljs-variable language_">self</span>.widget.setGeometry(QtCore.QRect(<span class="hljs-number">130</span>, <span class="hljs-number">70</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">400</span>))<br>        <span class="hljs-variable language_">self</span>.widget.setObjectName(<span class="hljs-string">&quot;widget&quot;</span>)<br><br><br>        <span class="hljs-variable language_">self</span>.verticalLayout = QtWidgets.QVBoxLayout(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.setObjectName(<span class="hljs-string">&quot;verticalLayout&quot;</span>)<br><br>        <span class="hljs-comment"># 界面标题</span><br>        <span class="hljs-variable language_">self</span>.formtitle = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.formtitle.setObjectName(<span class="hljs-string">&quot;formtitle&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.addWidget(<span class="hljs-variable language_">self</span>.formtitle)<br><br>        <span class="hljs-comment"># 界面脚注</span><br>        <span class="hljs-variable language_">self</span>.footer = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.footer.setObjectName(<span class="hljs-string">&quot;footer&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.addWidget(<span class="hljs-variable language_">self</span>.footer)<br><br>        <span class="hljs-variable language_">self</span>.gridLayout = QtWidgets.QGridLayout()<br>        <span class="hljs-variable language_">self</span>.gridLayout.setObjectName(<span class="hljs-string">&quot;gridLayout&quot;</span>)<br><br><br>        <span class="hljs-comment"># int fromRow     // 横坐标</span><br>        <span class="hljs-comment"># int fromColumn  // 纵坐标</span><br>        <span class="hljs-comment"># int rowSpan     // 横向跨越几个单元格</span><br>        <span class="hljs-comment"># int columnSpan  // 纵向跨越几个单元格</span><br><br>        <span class="hljs-comment"># 建立三个单行文本输入框QLineEdit</span><br>        <span class="hljs-variable language_">self</span>.lineEdit_1 = QtWidgets.QLineEdit(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.lineEdit_1.setObjectName(<span class="hljs-string">&quot;lineEdit_1&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.lineEdit_1, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>        <span class="hljs-variable language_">self</span>.lineEdit_2 = QtWidgets.QLineEdit(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.lineEdit_2.setObjectName(<span class="hljs-string">&quot;lineEdit_2&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.lineEdit_2, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>        <span class="hljs-variable language_">self</span>.lineEdit_3 = QtWidgets.QLineEdit(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.lineEdit_3.setObjectName(<span class="hljs-string">&quot;lineEdit_3&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.lineEdit_3, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br><br>        <span class="hljs-comment"># 建立三个文本标签框QLabel</span><br>        <span class="hljs-variable language_">self</span>.name = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.name.setObjectName(<span class="hljs-string">&quot;name&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.name, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>        <span class="hljs-variable language_">self</span>.key = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.key.setObjectName(<span class="hljs-string">&quot;key&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.key, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>  <br>        <span class="hljs-variable language_">self</span>.message = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.message.setObjectName(<span class="hljs-string">&quot;message&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.message, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br><br>        <span class="hljs-variable language_">self</span>.verticalLayout.addLayout(<span class="hljs-variable language_">self</span>.gridLayout)<br>        <br>        <span class="hljs-comment"># 建立一个用户交互按键QPushButton</span><br>        <span class="hljs-variable language_">self</span>.pushButton1 = QtWidgets.QPushButton(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.pushButton1.setObjectName(<span class="hljs-string">&quot;pushButton1&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.addWidget(<span class="hljs-variable language_">self</span>.pushButton1)<br><br>        <span class="hljs-comment"># 建立一个用户交互按键QPushButton</span><br>        <span class="hljs-variable language_">self</span>.pushButton2 = QtWidgets.QPushButton(<span class="hljs-variable language_">self</span>.widget)<br>        <span class="hljs-variable language_">self</span>.pushButton2.setObjectName(<span class="hljs-string">&quot;pushButton2&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.verticalLayout.addWidget(<span class="hljs-variable language_">self</span>.pushButton2)<br><br><br><br>        <span class="hljs-variable language_">self</span>.retranslateUi(Form)<br>        <span class="hljs-variable language_">self</span>.pushButton1.clicked.connect(Form.pushButton1_click)<br>        <span class="hljs-variable language_">self</span>.pushButton2.clicked.connect(Form.pushButton2_click)<br>        QtCore.QMetaObject.connectSlotsByName(Form)<br><br>        <span class="hljs-comment"># 尚未解决的功能：把pushButton的快捷键设置为Enter</span><br>        <br>        <span class="hljs-comment"># self.center()</span><br><br>        <span class="hljs-comment"># 设置两个显示文本框</span><br>        <span class="hljs-variable language_">self</span>.textEditi = QtWidgets.QTextEdit()<br>        <span class="hljs-variable language_">self</span>.textEditi.setObjectName(<span class="hljs-string">&quot;lineEditi&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.textEditi, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>        <span class="hljs-variable language_">self</span>.textEdito = QtWidgets.QTextEdit()<br>        <span class="hljs-variable language_">self</span>.textEditi.setObjectName(<span class="hljs-string">&quot;textEdito&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.gridLayout.addWidget(<span class="hljs-variable language_">self</span>.textEdito, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">retranslateUi</span>(<span class="hljs-params">self, Form</span>):<br>        _translate = QtCore.QCoreApplication.translate<br>        Form.setWindowTitle(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;聊天加密客户端&quot;</span>))  <span class="hljs-comment">#设置窗口标题</span><br><br>        <span class="hljs-comment"># 设置界面标题</span><br>        <span class="hljs-variable language_">self</span>.formtitle.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, \<br>            <span class="hljs-string">&quot;&lt;html&gt;\</span><br><span class="hljs-string">                &lt;head/&gt;\</span><br><span class="hljs-string">                    &lt;body&gt;\</span><br><span class="hljs-string">                        &lt;p align=\&quot;center\&quot;&gt;\</span><br><span class="hljs-string">                            &lt;span style=\&quot; font-size:30pt; font-weight:600; font-family: Times New Roman;\&quot;&gt;\</span><br><span class="hljs-string">                                Encrypted Chat\</span><br><span class="hljs-string">                            &lt;/span&gt;\</span><br><span class="hljs-string">                        &lt;/p&gt;\</span><br><span class="hljs-string">                    &lt;/body&gt;\</span><br><span class="hljs-string">            &lt;/html&gt;&quot;</span>))<br><br><br>        <span class="hljs-variable language_">self</span>.footer.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, \<br>            <span class="hljs-string">&quot;&lt;html&gt;\</span><br><span class="hljs-string">                &lt;head/&gt;\</span><br><span class="hljs-string">                    &lt;body&gt;\</span><br><span class="hljs-string">                        &lt;p align=\&quot;center\&quot;&gt;\</span><br><span class="hljs-string">                            &lt;span style=\&quot; font-size:15pt; font-weight:300; font-family: Times New Roman;\&quot;&gt;\</span><br><span class="hljs-string">                                Designed by Murphy\</span><br><span class="hljs-string">                            &lt;/span&gt;\</span><br><span class="hljs-string">                        &lt;/p&gt;\</span><br><span class="hljs-string">                    &lt;/body&gt;\</span><br><span class="hljs-string">            &lt;/html&gt;&quot;</span>))<br>        <br>        <span class="hljs-variable language_">self</span>.name.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;输入对方昵称&quot;</span>))<br><br>        <span class="hljs-variable language_">self</span>.key.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;输入加密密钥&quot;</span>))<br><br>        <span class="hljs-variable language_">self</span>.message.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;输入消息内容&quot;</span>))<br><br>        <span class="hljs-variable language_">self</span>.pushButton1.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;加密&quot;</span>))<br>        <span class="hljs-variable language_">self</span>.pushButton2.setText(_translate(<span class="hljs-string">&quot;Form&quot;</span>, <span class="hljs-string">&quot;解密&quot;</span>))<br><br><br>    <span class="hljs-comment"># def center(self):  # 定义一个函数使得窗口居中显示</span><br>    <span class="hljs-comment">#     # 获取屏幕坐标系</span><br>    <span class="hljs-comment">#     screen = QDesktopWidget().screenGeometry()</span><br>    <span class="hljs-comment">#     # 获取窗口坐标系</span><br>    <span class="hljs-comment">#     size = self.geometry()</span><br>    <span class="hljs-comment">#     newLeft = (screen.width() - size.width()) / 2</span><br>    <span class="hljs-comment">#     newTop = (screen.height() - size.height()) / 2</span><br>    <span class="hljs-comment">#     self.move(int(newLeft),int(newTop))</span><br>        <br></code></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>打包成为exe文件</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220320200259164.png"/><p>稍显简陋，但是能用就行！</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220320200339455.png"/><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>UI窗口界面问题（简陋不是问题（&#x2F;doge）），因为这给UI元素都是固定在一个确定的位置的，因此，在把界面放大或者缩小的时候，界面中的元素不能自适应位置，还是保持了原来的位置。</li></ul><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220320200745156.png"/><ul><li>加密密钥问题，我测试的数量不算特别多，英文和数字均支持，中文不支持；且要求密钥的位数不能过长，不要超过35位，否则会闪退；</li><li>还是不能做到完全自动化，对方发过来的消息还是需要自己去复制一下，再点击“解密”按键才可以解密的。如果说要解决这个问题的话，我想到的只能是多线程方法，但是这个我并没有学过，一时半会不好试验我的这个想法能不能解决这个问题。</li></ul>]]></content>
    
    
    <categories>
      
      <category>奇思妙想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>Python</tag>
      
      <tag>GUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开源协议</title>
    <link href="/blog/post/Knowledge/OpenSourceProtocol/"/>
    <url>/blog/post/Knowledge/OpenSourceProtocol/</url>
    
    <content type="html"><![CDATA[<p>本文转载于：<a href="https://www.runoob.com/w3cnote/open-source-license.html">各种开源协议介绍 | 菜鸟教程 (runoob.com)</a></p><div align = center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/da68b98e404578126b87c5afd9ba9bc3.png"/></div><h1 id="Apache-License"><a href="#Apache-License" class="headerlink" title="Apache License"></a>Apache License</h1><p>Apache License（Apache许可证），是Apache软件基金会发布的一个自由软件许可证。</p><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和最终原作者的著作权，同样允许源代码修改和再发布。但是也需要遵循以下条件：</p><ul><li>需要给代码的用户一份Apache Licence。</li><li>如果修改了代码，需要再被修改的文件中说明。</li><li>在衍生的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以再Notice中增加自己的许可，但是不可以表现为对Apache Licence构成更改。</li><li>Apache Licence也是对商业应用友好的许可。使用者也可以再需要的时候修改代码来满足并作为开源或商业产品发布&#x2F;销售。</li></ul><p>使用这个协议的好处是:</p><ul><li>永久权利 一旦被授权，永久拥有。</li><li>全球范围的权利 在一个国家获得授权，适用于所有国家。假如你在美国，许可是从印度授权的，也没有问题。</li><li>授权免费 无版税， 前期、后期均无任何费用。</li><li>授权无排他性 任何人都可以获得授权</li><li>授权不可撤消 一旦获得授权，没有任何人可以取消。比如，你基于该产品代码开发了衍生产品，你不用担心会在某一天被禁止使用该代码</li></ul><h1 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h1><p>BSD是”Berkeley Software Distribution”的缩写，意思是”伯克利软件发行版”。</p><p>BSD开源协议：是一个给于使用者很大自由的协议。可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。 当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><ul><li>1． 如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li><li>2． 如果再发布的只是二进制类库&#x2F;软件，则需要在类库&#x2F;软件的文档和版权声明中包含原来代码中的BSD协议。</li><li>3． 不可以用开源代码的作者&#x2F;机构名字和原来产品的名字做市场推广。</li></ul><p>BSD代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p><h1 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h1><p>GPL （GNU General Public License） ：GNU通用公共许可协议。</p><p><strong>Linux 采用了 GPL</strong>。</p><p>GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源&#x2F;免费使用和引用&#x2F;修改&#x2F;衍生代码的开源&#x2F;免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。</p><h1 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h1><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用&#x2F;修改&#x2F;衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL&#x2F;LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p><h1 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h1><p>MIT是和BSD一样宽范的许可协议,源自麻省理工学院（Massachusetts Institute of Technology, MIT），又称X11协议。作者只想保留版权,而无任何其他了限制。MIT与BSD类似，但是比BSD协议更加宽松，是目前最少限制的协议。这个协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。适用商业软件。使用MIT的软件项目有：jquery、Node.js。</p><p>MIT与BSD类似，但是比BSD协议更加宽松，是目前最少限制的协议。这个协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。适用商业软件。使用MIT的软件项目有：jquery、Node.js。</p><h1 id="MPL-Mozilla-Public-License-1-1"><a href="#MPL-Mozilla-Public-License-1-1" class="headerlink" title="MPL (Mozilla Public License 1.1)"></a>MPL (Mozilla Public License 1.1)</h1><p>MPL协议允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者 。这种授权维护了商业软件的利益，它要求基于这种软件的修改无偿贡献版权给该软件。这样，围绕该软件的所有代码的版权都集中在发起开发人的手中。但MPL是允许修改，无偿使用得。MPL软件对链接没有要求。</p><h1 id="EPL-Eclipse-Public-License-1-0"><a href="#EPL-Eclipse-Public-License-1-0" class="headerlink" title="EPL (Eclipse Public License 1.0)"></a>EPL (Eclipse Public License 1.0)</h1><p>EPL允许Recipients任意使用、复制、分发、传播、展示、修改以及改后闭源的二次商业发布。</p><p>使用EPL协议，需要遵守以下规则：</p><ul><li>当一个Contributors将源码的整体或部分再次开源发布的时候,必须继续遵循EPL开源协议来发布,而不能改用其他协议发布.除非你得到了原”源码”Owner 的授权；</li><li>EPL协议下,你可以将源码不做任何修改来商业发布.但如果你要发布修改后的源码,或者当你再发布的是Object Code的时候,你必须声明它的Source Code是可以获取的,而且要告知获取方法；</li><li>当你需要将EPL下的源码作为一部分跟其他私有的源码混和着成为一个Project发布的时候,你可以将整个Project&#x2F;Product以私人的协议发布,但要声明哪一部分代码是EPL下的,而且声明那部分代码继续遵循EPL；</li><li>4.独立的模块(Separate Module),不需要开源。</li></ul><h1 id="Creative-Commons-知识共享协议"><a href="#Creative-Commons-知识共享协议" class="headerlink" title="Creative Commons 知识共享协议"></a>Creative Commons 知识共享协议</h1><p>Creative Commons (CC) 许可协议并不能说是真正的开源协议，它们大多是被使用于设计类的工程上。 CC 协议种类繁多，每一种都授权特定的权利。 一个 CC 许可协议具有四个基本部分，这几个部分可以单独起作用，也可以组合起来。下面是这几部分的简介：</p><ul><li>1、署名 作品上必须附有作品的归属。如此之后，作品可以被修改，分发，复制和其它用途。</li><li>2、相同方式共享 作品可以被修改、分发或其它操作，但所有的衍生品都要置于CC许可协议下。</li><li>3、非商业用途 作品可以被修改、分发等等，但不能用于商业目的。但语言上对什么是”商业”的说明十分含糊不清 (没有提供精确的定义)，所以你可以在你的工程里对其进行说明。例如，有些人简单的解释”非商业”为不能出售这个作品。而另外一些人认为你甚至不能在有广告的网站上使用它们。 还有些人认为”商业”仅仅指你用它获取利益。</li><li>4、禁止衍生作品</li></ul><p>CC 许可协议的这些条款可以自由组合使用。大多数的比较严格的CC协议会声明 “署名权，非商业用途，禁止衍生”条款，这意味着你可以自由的分享这个作品，但你不能改变它和对其收费，而且必须声明作品的归属。这个许可协议非常的有用，它可以让你的作品传播出去，但又可以对作品的使用保留部分或完全的控制。最少限制的CC协议类型当属 “署名”协议，这意味着只要人们能维护你的名誉，他们对你的作品怎么使用都行。</p><p>CC 许可协议更多的是在设计类工程中使用，而不是开发类，但没有人或妨碍你将之使用与后者。只是你必须要清楚各部分条款能覆盖到的和不能覆盖到的权利。</p><div align = center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/bg2011050101.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/61590003177751b9d5bd.jpg"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/f1989e42b25bb73fead5cb1d09036e6f.png"/></div>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SurfaceGo</title>
    <link href="/blog/post/Tools/SurfaceGo/"/>
    <url>/blog/post/Tools/SurfaceGo/</url>
    
    <content type="html"><![CDATA[<p>​二合一形态的产品系列最出名的就是Surface Pro系列，由于售价偏高，之后推出了入门系列的Surface Go。本文将记录我为什么入手了Surface Go（第一代），以及我目前在怎么使用。之前也没有写过产品测评之类的文章，其实也不应该说是产品测评，更应该说是使用体验，以后再入手新的有意思的产品之后，也许会继续再写这样的文章！Surface Go已经是很久的产品了，应该也没有多少人会买这款产品了，我写这篇文章就当是给自己的一次反思，消费不能冲动，理性消费！</p><p>​最近朋友想买一款平板做笔记，我给他的推荐是HUAWEI Matepad 11 8+128GB版本，在给他推荐的时候，看了很多测评，我在心里也默默地跟我自己地Surface比较，这也是为什么我会突然写这篇文章。</p><h1 id="为什么要买Surface-Go"><a href="#为什么要买Surface-Go" class="headerlink" title="为什么要买Surface Go"></a>为什么要买Surface Go</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​2019年之前，也就是我高中毕业之前，对消费电子产品没什么感觉，买电子产品的时候基本上都是在实体店，当时发售了什么，价格合适就买，参数什么几乎不懂，只知道RAM与ROM。最早的时候用过联想的一个智能手机，是家里不用了给我的，拿来玩玩小游戏之类的。之后还用过LG的一款智能机，也是好几手的了，再之后还用过OPPO的手机，依然是好几手的。初中毕业，我在外面上辅导班，因为一直用的好几手的OPPO手机太渣渣了，家里就打算给换手机，我当时打算买的是三星的Galaxy A7，觉得很好看，在商场里看了一下我感觉还不错，就是出的时间比较早一点了，再加上当时OPPO R9刚出，广告到处都是，家里人也用过好几部OPPO的手机，且OPPO R9比我看上的三星的A7贵了几百块钱，家里人觉得贵一点能用的时间更长一点，就买了OPPO R9，4+64GB，用的还不错。之后还换了当时属于华为的荣耀畅玩7X，第一次接触到华为的产品。</p><p>​高考之后，我买了笔记笔电脑：DELL G3 Intel i5-9400H，8GB，256GB SSD+1TB HDD；手机：HUAWEI P30 Pro，8GB+128GB，极光色。买电脑完全是因为和朋友一起买的，朋友因为玩游戏多一点，买的是i7版本的，我因为不玩游戏，就买的i5版本的，不懂，完全是不懂。买手机也是因为华为收到了美国的制裁，支持国产！</p><p>​总结之前对消费电子产品的购买经历，基本上是完全不懂！</p><h2 id="对数码产品的兴趣萌芽"><a href="#对数码产品的兴趣萌芽" class="headerlink" title="对数码产品的兴趣萌芽"></a>对数码产品的兴趣萌芽</h2><p>​高考之后，我开始学习编程，当时使用的是VC++ 6.0，写的程序是HTML，照着别人的代码抄了一下，完全不懂，运行了一下，当时还出现了一个BUG；之后我也开始学习剪辑视频，一开始使用的Windows自带的一个视频编辑软件，之后又开始学习Adobe PR。从这时开始，高中毕业的我已经受到了很大的震撼——电脑太有意思了！</p><p>​这个暑假，我开始了对电脑的摸索，特别是通过公众号下载了很多的破解版的付费软件，了解了很多的同类软件之间有好有坏，比如Office与WPS，使用着破解版的Office而唾弃WPS，这种思想也受到了网上特别是知乎上一些“懂行人”的影响。</p><p>​对Office盲目地敬仰，这样让我对Windows操作系统产生同样的态度，进而演变成对Microsoft，认为它是全球无敌的，他就是那个“巨硬”！</p><h2 id="系统及生态"><a href="#系统及生态" class="headerlink" title="系统及生态"></a>系统及生态</h2><p>​这个时候的我认为微软是“巨硬”，觉得Windows操作系统特别牛！已经开始了操作系统以来了，从这个时候开始，我使用电脑的时间就比使用手机的时间长了，只要是能用电脑解决的问题，绝对不会使用手机！</p><p>​大学开学后，看到同学们很多在用Ipad平板的，觉得用这个看视频，特别是记笔记很酷，因为自己当时写的笔记很乱，特别是数学课，老师上课讲知识，我在本子上面记笔记，跟不上老师的节奏（还是用高中的思维对待大学的课程），写的很乱，课下自己看课本再补充的时候，更是没地方增加笔记，因此整个笔记系统就很低效，不好用。这就让我萌生了买平板记电子笔记的想法。</p><p>​2019年国庆假期回来之后，偶然一次看微软官网的时候，看到了Surface Go，我当时就被吸引了，被这种二合一的电脑吸引了，特别是整个背后的铰链支架，太酷了！我这个人有个很大的毛病，觉得一个东西好之后，在与别的东西做比较的时候，即使对比的东西要更好，但是我还是认定了我感兴趣这个产品，这个是一个很不好的习惯！！！</p><p>​之后我开始了在网上查询相关的信息，网上对于Surface Go的信息不算多，主要集中在知乎和哔哩哔哩，知乎上很多都在说Surface Go完全够用，哔哩哔哩上的科技美学频道也对这款产品做了评测，给出的评价并不算差，特别是我内心也笃定了这款产品，也就自动忽略了他的缺点，比如微软的品控差，售后外包，系统不好用，续航不行等，对于这些缺点，我都以自己的理由说服了自己（这非常不好！！！）。（现在我觉得，这些说Surface Go好的所谓的测评，大多数不是主观 的，应该是广告！！！）</p><h2 id="求异心理"><a href="#求异心理" class="headerlink" title="求异心理"></a>求异心理</h2><p>​同价位的产品中，还有Ipad 2019，Ipad比Surface的评价好多了，但是我还是以自己没有苹果设备为理由，觉得我更应该买Ipad（我当时非常不冷静，Surface Go已经完全占据了我的内心，无论怎么比较，我都觉得Surface Go要好，太shabi了！）</p><p>​我觉得Surface Go的形态是真的与众不同，非常的酷炫，认定了Surface Go！</p><h2 id="信仰"><a href="#信仰" class="headerlink" title="信仰"></a>信仰</h2><p>​对Microsoft的信仰，对Windows生态的依赖，我最后决定就买Surface Go了！买高配版本！买键盘，没有键盘不叫Windows！买笔，有笔才能做笔记！</p><h1 id="购买过程"><a href="#购买过程" class="headerlink" title="购买过程"></a>购买过程</h1><h2 id="实体店"><a href="#实体店" class="headerlink" title="实体店"></a>实体店</h2><p>​刚开始是打算在实体店买的，在逛了很多地方，居然都买找到一家店，最后在一个老城区的商城里找到了一个很小的Microsoft的店铺，我当时体验了一下，就觉得不是很好用，特别是触控体验，非常差！但是店员告诉我说是因为展示样品的问题，我也说服自己信了。他居然忽悠我让我买那个展示了很久的Surface Pro 6，这是一个非常黑的店员，Surface Pro 6也非常贵，展示机也非常旧了，我肯定不会买的！</p><p>​我当时打电话给家里说了一下，因为卡里的钱正要急着用，让我等下一周在买，然后我就回去了，没买！</p><h2 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h2><p>​之后因为实在是不想出去了，也因为那个店员很差的态度，我就决定直接在京东买了！</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/jingdongsurface (2).jpg"/>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/jingdongsurface (1).jpg"/></div>​2019年11月2日，早上九点四十左右下单，傍晚时刻到达！笔因为调货，等了几天之后到的！京东给用了一个非常大的箱子装的，没有缓冲泡沫，到来时箱子都非常烂了，都开了几个口，幸亏电脑的包装盒和键盘的包装盒比较大，没有调出来，赠的TF卡包装小，完全能掉出来，没掉出去属于是万幸了！但是电脑包装的一个角明显也被磕到了！第一次对京东物流这么失望，这还是从本地仓直接打过来的，在一个城市里，这么近的距离搞得这个样子，差评！<div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/surfacego%20(4).jpg" alt="电脑包装盒的右上角被磕到了"></div>​打开包装，开机，感觉好小啊！这个黑边，真的太宽了，丑！内心其实有直接退掉的打算，但是想了想，买都买了，还是用着吧！<div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/surfacego%20(3).jpg" alt="开机画面，好宽的黑边啊！"></div>因为之前在学Office的使用，Office2019比2016版本多了很多功能，我就担心发到2016版本的。<div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/surfacego%20(2).jpg" alt="当时是Office2016和2019混发，我这个是2019版本！"></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/surfacego%20(5).jpg" alt="屏幕太小了，好大的黑边啊！！"></div>之后几天收到了笔！<div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/surfacego%20(6).jpg" alt="笔很有分量，质感不错，就是换电池的方式感觉很怪，不知道使用很长时间之后会不会松动了！"></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/surfacego%20(1).jpg" alt="我觉得背面颜值还是很能打的！"></div><h1 id="到手后的评价"><a href="#到手后的评价" class="headerlink" title="到手后的评价"></a>到手后的评价</h1><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>​因为Surface Go本身是Windows 10S系统，只能使用Microsoft Store中的软件，不能安装网络中下载的软件。一开始我就先使用了这个系统，下载了UWP的QQ和微信，其他的什么也没有下载，都是用的自带的。我使用Surface Go主要就是用来做笔记，使用的软件是OneNote for Windows 10，使用OneDrive作为同步盘，使用教育邮箱注册之后给了1TB的空间还是很香的！</p><p>​然后问题就来了，OneDrive同步速度真的太慢了！使用OneNote做笔记一开始还是不错的，但是笔记写的一多了之后，明显感觉到了不是那么流畅，上下滑动的时候需要一定的时间来刷新。但是总体来说，还是差强人意，满足的我需求的！</p><h2 id="硬件品控"><a href="#硬件品控" class="headerlink" title="硬件品控"></a>硬件品控</h2><p>硬件品控不是很好！</p><p>第一个问题是，铰链支架一边长，一边短，不过很小，安慰自己是公差，但是还是让人很不舒服！和京东客服沟通之后，以不影响使用为由，不予处理！</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220305091444431.png"/></div><p>第二个问题是，屏幕上方摄像头位置有按动有异响，明显是下方除了摄像头之外，没有其他元件支撑，内部很空，在网上也有同样的问题，我当时也没怎么管这个问题。</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220305092101890.png"/></div><h2 id="系统体验"><a href="#系统体验" class="headerlink" title="系统体验"></a>系统体验</h2><p>触控体验很差，要么用笔，要么用键盘，典型的Windows操作系统。<br>UWP的QQ和微信太难用的，特别是微信，根本就是半成品！其他的UWP软件怎么样，我不知道，因为其他的软件我都没用。<br>我就重度使用OneNote这一个软件！<br>网页看视频基本上离不开键盘，用笔都不行，特别是全屏之后，进度条不能拖动，没有手势操作，完全是针对PC的系统，对移动触控设备完全没有优化，当时我就开始对这个Windows操作系统失望了！</p><h2 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h2><p>性能没有那么强，系统对于触屏的优化不好，硬件品控差，用着没有我之前所想象的那么好！</p><p>铰链的开和体验很好，为数不多的优点。</p><p>没有科技美学所说的那样，打开铰链到最大，记笔记非常舒适，我感觉太软了，感觉写字一用力就能压坏了铰链，我记笔记的时候完全是关闭铰链，以平板状态写笔记，不带键盘，把键盘翻过去会对键盘造成磨损，笔记当时还是非常爱惜的。</p><p>买了保护壳，买了键盘保护贴纸，买了笔的保护套，买了钢化膜，防护等级是开到了最大！</p><p>但是保护壳体验非常差，用了保护壳，就意味着打不开铰链了！之后又买了背部贴膜，直接放在桌子上使用，不磨损背部。</p><p>买了一个小的电脑包，装着能放在书包里！</p><p>总的来说，还是能用的，用着还行，满足绝大部分需求！</p><h1 id="使用后的评价"><a href="#使用后的评价" class="headerlink" title="使用后的评价"></a>使用后的评价</h1><h2 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h2><p>性能有点弱！我还以为是Windows 10S的问题，然后我就升级到了 Windows 10（20年2月份），结果，性能弱那就是弱！</p><h2 id="硬件品控-1"><a href="#硬件品控-1" class="headerlink" title="硬件品控"></a>硬件品控</h2><p>屏幕垃圾，用了也就三四个月，就出现了一些彩色的小点，只有在屏幕显示黑色的时候能看出来！特别是平时用笔写字比较多的区域，出现了大片的彩点！</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/surface (1).jpg"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/surface (3).jpg"/></div>这个问题我一直没有管，其实不怎么影响使用。19年11月份买的电脑，20年2月份就出现了大面积的彩点（可能之前也有，我没注意到），上面第一张图片就是就是20年2月份拍的图片。但是直到21年的三月份，我发现彩点越来越多了，屏幕的左上部分和左边长长的一块，右边也有，反正大片的彩点，我知道微软的售后不好，之前一直没有管这个，但是这个时候我已经忍不了了，我打了微软的售后，微软的客服还是不错的，给我登记好了，联邦快递来收了件，送回到了微软苏州。<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/MD_2022-03-04_16-53-52.png"/></div>发回来之后并没有解决问题，有张维修单上面写着我登记的问题是触控不灵敏？？？？？TMD，我明明反映的是屏幕显示问题，cao！问题都给我等级错了，我还把问题的图片通过邮箱发过去了，我是非常的无语，到头来瞎忙活了一顿，给我重装了系统，还浪费了我一张屏幕钢化膜！！<p>从此之后，我对Surface不存在任何好感了！</p><p>我也妥协了，我就是权当我买了个教训吧，我也不想浪费时间再去折腾了，也折腾不出花来！</p><h2 id="系统体验-1"><a href="#系统体验-1" class="headerlink" title="系统体验"></a>系统体验</h2><p>Windows的软件生态我没什么意见，Windows的触控体验就是一坨shit！</p><h2 id="使用感受-1"><a href="#使用感受-1" class="headerlink" title="使用感受"></a>使用感受</h2><p>使用期间出现过好多问题，触控不灵敏；使用OneNote记笔记特别卡顿，断触；充电使用时候有静电，不能触屏；有时候电脑休眠唤醒不了，得长按电源很长时候重启；Windows Hello垃圾的要死，反应特别慢，有时候识别不到……只能说体验不好，唯一的优势就是Windows的软件生态，高自由度！</p><p>还忘记了一点，发热非常严重，有时候烫的不敢碰；续航及其拉跨，有时候记笔记只有两个小时的续航，上课必带充电宝！</p><p>充电宝和充电线必须要支持PD协议，要不然充不上电！！</p><h1 id="与之斗争的心路历程"><a href="#与之斗争的心路历程" class="headerlink" title="与之斗争的心路历程"></a>与之斗争的心路历程</h1><h2 id="备用电脑"><a href="#备用电脑" class="headerlink" title="备用电脑"></a>备用电脑</h2><p>因为真的非常不好用，我之后用的最多的还是自己的笔记本电脑。平时使用就是把老师的PPT传到OneNote，然后记笔记。然后就是平时带着电脑，偶尔需要用的时候拿来应急，因为是Windows系统的电脑，有些事情手机还是做不了的。</p><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/surface (6).jpg"/></div>用Surface下载过Visual Studio 2019，这个性能，能编程，但是用VS不合适，因为打开加载工程文件非常的慢！<p>下载过PyCharm，能用，同样也是加载工程文件非常的慢！</p><p>因此，使用集成开发环境编程是不要想了！</p><h2 id="记笔记都做不好"><a href="#记笔记都做不好" class="headerlink" title="记笔记都做不好"></a>记笔记都做不好</h2><p>一直在使用OneNote在记笔记，Windows端软件生态丰富，但是笔记软件还是很匮乏的，除了OneNote之外没用能打的！OneNote记笔记体验一言难尽，如果笔记不是那么多的但是笔记种类比较多，那么用OneNote还是不错的，问题就是使用OneNote记录大量的笔记之后，会非常卡，还出现触屏不能使用的情况！</p><p>还有一个很大的问题是OneDrive这个同步速度我真的是无语了，基本上是不可用的状态！如果OneDrive能高速同步的话，OneNote笔记能在我的设备之间快速同步的话，那将是无敌般的存在，这种实时同步的网络存储+增量笔记正是我的需求点！</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/surface (7).jpg"/></div><h1 id="目前的日常使用情况"><a href="#目前的日常使用情况" class="headerlink" title="目前的日常使用情况"></a>目前的日常使用情况</h1><h2 id="记笔记"><a href="#记笔记" class="headerlink" title="记笔记"></a>记笔记</h2><p>因为不佳的OneNote使用体验和OneDrive龟速一般的同步速度，我直接放弃使用OneDrive！彻底让我觉得我不能再用OneDrive的导火线是，手机上的OneDrive登陆都成了问题？？？？我TMD！！！手机端登陆不上，意味者我都看不了我的笔记了！！！</p><p>放弃OneNote，采用通用格式笔记方式，借助第三方网盘工具坚果云实现多设备文件同步！</p><p>目前，我采用树状结构文件整理笔记，所有笔记使用通用格式文件，PDF和Markdown。</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220317151302255.png"/></div><p>PDF编辑器用的最多的就是Drawboard PDF这个软件，体验还算不错，就是不能自动保存，是个遗憾！另外，我还觉得软件的本土化做的不是很好，没有很高的自定义性，一些常用的功能都在二级甚至三级操作目录之下！除了这个两个，几乎都是优点了！目前，只能在Windows操作系统上使用，不知道未来开发者能做移动客户端和其他系统的应用程序。</p><p>Mardown的编辑器比较多，用什么都可以，我用的最多的就是Sublime Text，Typora，VSCode，另外最近安装使用的MarkText感觉也还行。</p><p>同步网盘使用的是坚果云，啥也不说，之间吹爆！目前买了年费会员，42GB的存储空间还算可以！</p><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>一些博客的文章目前偶尔会用Surface写一下，但是屏幕太小了，键盘也很小，更多的其实还是再用笔记笔电脑！</p><h2 id="应急"><a href="#应急" class="headerlink" title="应急"></a>应急</h2><p>偶尔需要登陆学校官网之类的，身边又没有笔记笔电脑，会使用来应急一下。</p><h2 id="编程-1"><a href="#编程-1" class="headerlink" title="编程"></a>编程</h2><p>配置了python和C&#x2F;C++的编译环境，但是几乎没用过。</p><p>配置了Arduino的开发环境，也几乎没用过。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/%E8%BF%91%E5%86%B5%20(2).jpg" alt="近况"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/%E8%BF%91%E5%86%B5%20(1).jpg" alt="近况"></p><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><h2 id="信仰崩塌"><a href="#信仰崩塌" class="headerlink" title="信仰崩塌"></a>信仰崩塌</h2><p>我对微软没有任何信心了，我觉得微软做不好硬件设备了！</p><h2 id="理性消费"><a href="#理性消费" class="headerlink" title="理性消费"></a>理性消费</h2><p>买很贵的东西之前一定要理性！</p><p>先体验后购买，多问一下现实生活中使用的人，不要只看网络上的言论！</p><h2 id="下一款产品"><a href="#下一款产品" class="headerlink" title="下一款产品"></a>下一款产品</h2><p>触控手写硬件我觉得对我来说重要性还是有的，我感觉我未来还可能会买一部设备。</p><p>就现在来说，Windows操作系统的平板，我不会再买了！苹果的产品，我觉得是做的最好的，但是苹果的封闭生态我无法接受，并且我也没有其他的苹果设备。鸿蒙和安卓的平板，我觉得生态做的还不好，软件的适配做的还一般！</p><p>未来我真的要买的话，我只能希望这几年华为能够鸿蒙系统做好，把华为的生态做好！那么华为将是我的不二之选！</p><p>未来会怎么样，我也不清楚，我短时间内，在没有很明确的需求之前，不会再买了！</p><p>就这样吧！</p>]]></content>
    
    
    <categories>
      
      <category>高效工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子设备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>芯片全产业链</title>
    <link href="/blog/post/Knowledge/ChipIndustryChain/"/>
    <url>/blog/post/Knowledge/ChipIndustryChain/</url>
    
    <content type="html"><![CDATA[<p>​注：本文大部分内容都是基于互联网上搜集的公开资料，资料链接在文章最后！</p><p>​倪光南院士曾说：目前，中国网信领域总体技术和产业水平位居世界第二位，尤其在互联网应用（电商、移动支付、社交、搜索等）和新一代信息技术方面（5G、人工智能、大数据、物联网、云计算）领先，但是发展依然严重受制于美国，主要短板是在芯片（数字处理芯片、模拟处理芯片、光电芯片等）和基础软件(包括操作系统OS和工业软件等)方面。</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/v2-912b1b67b3a302e947c56d5d81d6c7ad_720w.jpg"/></div>---<div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/v2-4a775190fa7c8e74daef72d8e477c580_b.jpg"/></div><p>总的来说，半导体产业链主要包括设计、制造、封测三大环节。在全球化分工的体系下，分别形成了三大类产业。</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>​集成电路设计产业，即IC设计行业，产品设计厂商分为2大类：IDM和Fabless。</p><ul><li>IDM（Integrated Device Manufacture）是集芯片设计、芯片制造、芯片封装和测试等多个产业链环节于一身的企业。有些企业甚至有自己的下游整机环节，如Intel、三星、IBM就是典型的IDM企业。</li><li>Fabless是没有芯片加工厂的芯片供应商，Fabless自己设计开发和推广销售芯片，与生产相关的业务外包给专业生产制造厂商(Foundry)，高通、博通、联发科是典型的Fabless企业。</li></ul><p>​目前，中国国内大部分半导体相关企业基本都是Fabless模式。芯片的开发设计是一个需要大量人力进行创新的领域，相对于生产设计投入成本相对较小，但是收益周期会更快。行业的精细化可以让整个行业越来越专业，协作的可能性越来越高，对应的生产效率也会大大提升。</p><h2 id="指令集授权"><a href="#指令集授权" class="headerlink" title="指令集授权"></a>指令集授权</h2><p>​指令集架构指的是计算机中央处理器机器码所使用的指令的集合以及其背后的寄存器体系、总线设计等逻辑框架。常见的指令集架构大体上可以分为两大类：复杂指令集体系（CISC）和精简指令集体系（RISC）。最有代表性的一个是英特尔的x86架构，另一个就是ARM架构，x86架构基于复杂指令集，ARM架构基于精简指令集。</p><p>​X86架构是Intel的知识产权，国产芯片厂商要做X86架构芯片，首先需要解决的就是X86技术授权的问题。目前，除了Intel之外，AMD和台湾威盛都有着X86技术。2013年4月，由上海市国资委下属上海联和投资有限公司和台湾威盛集团所属公司合资成立了上海兆芯集成电路有限公司，中方国资占据控股地位（持股约80%）。上海兆芯因此也从威盛那里获得了X86架构的授权。2016年，AMD与中国天津海光先进技术投资有限公司（THATIC）成立合资公司——中科海光，可以利用AMD的X86技术用于芯片开发。</p><p>​英国ARM公司是全球领先的半导体知识产权（IP）提供商。全世界超过95%的智能手机和平板电脑都采用ARM架构。目前主流的移动智能设备的SoC均采用了ARM架构，如苹果的A系列和M系列，高通的骁龙系列，华为海思的麒麟系列等。</p><h2 id="工业软件"><a href="#工业软件" class="headerlink" title="工业软件"></a>工业软件</h2><p>​设计软件，芯片设计软件是芯片公司设计芯片结构的关键工具，目前芯片的结构设计主要依靠 EDA（电子设计自动化）软件来完成。EDA软件是芯片产业链最上游的产业，芯片设计、芯片制造和芯片封测等环节都需要EDA软件的支持。而在国内芯片产业屡屡被“卡脖子”时，EDA软件也是其中重要一环。目前，全球EDA软件绝大部分市场份额由Cadence、Synopsys和Mentor这三大巨头占据。</p><p>​Synopsys(新思科技)成立于 1986 年，由 Aart de Geus 带领通用电气公司微电子研究中心的工程师团队创立，在 2008 年成为全球排名第一的 EDA 软件工具领导厂商，为全球电子市场提供技术先进的集成 电路设计与验证平台。Synopsys 在 EDA 行业的市场占有率约 30%，它的逻辑综合工具 DC 和时序分析工具 PT 在全球 EDA 市场几乎一统江山。<br>​Cadence(楷登电子)是 EDA 行业销售排名第二的公司，在 1988 年由 SDA 与 ECAD 两家公司兼并而成，Cadence 产品涵盖了电子设计的整个流程，包括系统级设计、功能验证、集成电路综合及布局布线、IC 物理验证、模拟混合信号及射频集成电路设计、全定制集成电路设计、PCCE 设计和硬件仿真建模等致力于为客户提供电子设计自动化、软件、硬件以及解决方案等服务，旨在帮助其缩短将电子设备打入市场的时间和成本。<br>​Mentor Graphics(明导国际，2016 年被德国西门子收购)1981 年成立，Mentor Graphics 是一家 EDA 软件和硬件公司，也是电路板解决方案的市场领导者，主要提供电子设计自动化先进系统电脑软件与模拟硬件系统。Mento 的工具虽没有前两家全面，没有涵盖整个芯片设计和生产环节，但在有些领域，如 PCB(印刷电路板)设计工具等方面有相对独到之处。</p><h1 id="制造"><a href="#制造" class="headerlink" title="制造"></a>制造</h1><h2 id="原材料"><a href="#原材料" class="headerlink" title="原材料"></a>原材料</h2><p>​在半导体材料领域，由于高端产品技术壁垒高，国内企业长期研发投入和积累不足，我国半导体材料在国际分工中多处于中低端领域，高端产品市场主要被欧美日韩台等少数国际大公司垄断。</p><ol><li><p>硅片<br>​硅单晶圆片是最常用的半导体材料，是芯片生产过程中必不可少的、成本占比最高的材料。制造一个芯片，需要先将普通的硅原料制造成硅单晶圆片，然后 再通过一系列工艺步骤将硅单晶圆片制造成芯片。无论是全球还是国内市场，硅片都是半导体制造上游材料中占比最大的一块。<br>​半导体硅片具有极高的技术壁垒，全球市场呈现出寡头垄断的格局，日本信越和SUMCO（由三菱硅材料和住友材料 Sitix 分部合并而来）一直占据主要市场份额，双方约各占 30%左右，其他主要公司有德国 Siltronic（德国化工企业 Wacker 的子公司）、韩国LG Siltron、美国 MEMC 和台湾环球晶圆四家公司。上述 6 家供应商合计占据全球 90%以上的市场份额。目前，国内 8 寸的硅片生产厂商仅有浙江金瑞泓、北京有研总院、河北普兴、南京国盛、上海新傲等少数厂商，远没有满足国内市场，12 寸硅片目前全部采用进口，可以说是国内半导体产业链上缺失的一环。</p></li><li><p>电子特种气体<br>​电子气体在电子产品制程工艺中广泛应用于薄膜、蚀刻、掺杂等工艺，被称为半导体、平面显示等材料的“粮食”和“源”。电子特种气体又可划分为掺杂气、外延气、离子注入用气、LED 用气、蚀刻用气、化学汽相沉淀用气、载运和稀释气体等几大类，种类繁多，在半导体工业中应用的有 110 余种电子气体，常用的有 20-30 种。<br>​电子特种气体行业集中度高，主要企业有美国空气化工、美国普莱克斯、德国林德集团、法国液化空气和日本大阳日酸株式会社，五大气体公司占有全球 90%以上的市场份额，上述企业也占据了我国电子特种气体的主要市场份额。国产电子气体已开始占据一定的市场份额，经过多年发展，国内已有部分企业在部分产品方面攻克技术难关。四川科美特生产的四氟化碳进入台积电 12 寸台南 28nm 晶圆加工生产线，目前公司已经被上市公司雅克科技收购； 金宏气体自主研发 7N 电子级超纯氨打破国外垄断，主要上市公司有雅克科技、南大光电、巨化股份。</p></li><li><p>光掩模板<br>​掩膜版是在IC制作过程中，利用光刻蚀技术把设计好的电路图形复制于晶圆上。我们把电脑上设计出来的电路图用光照到金属&#x2F;玻璃薄膜上，制造出掩膜。我们再把刚制作好的掩膜盖在硅片上，当光通过掩膜照射，电路图就”印制”在硅晶片上。如果我们按照电路图使应该导电的地方连通，应该绝缘的地方断开，这样我们就在硅片上形成了所需要的电路。<br>​目前全球专业的掩膜版厂商包括美国的Photronics，台湾的台湾光罩，日本的Toppan，Hoya，SK-Electronics等。国内的掩膜版厂商主要分为3类：第一类是科研院所，主要有中科院微电子中心，中国电子科技集团第13所、24所、47所、55所等；第二类是专业的掩膜版制造厂商，主要有无锡华润微电子有限公司掩膜工厂、上海凸版光掩膜有限公司、Photronics（上海）。第三类是晶圆代工厂，例如中芯国际，中芯国际的制版能力也处于国际较先进的水平。</p></li><li><p>光刻胶<br>​指通过紫外光、准分子激光、电子束、离子束、X 射线等光源的照射或辐射,其溶解度发生变化的耐蚀刻薄膜材料。其溶解度发生变化的耐蚀刻薄膜材料。根据在显影过程中曝光区域的去除或保留，分为正像光刻胶和负像光刻胶。<br>​我国光刻胶生产基本上被外资把控，并且集中在低端市场。据中国产业信息数据，2015 年我国光刻胶产量为 9.75 万吨，其中中低端产品 PCB 光刻胶产值占比为 94.4%，而 LCD 和半导体用光刻胶产值占比分别仅为 2.7%和 1.6%，半导体光刻胶严重依赖进口。<br>另外，2015 年我国光刻胶前五大公司分别台湾长兴化学、日立化成、日本旭化成、美国杜邦及台湾长春化工，均是外资或合资企业，上述五大企业市场份额达到 89.7%，内资企业市场份额不足 10%。光刻胶主要上市公司有晶瑞股份、飞凯材料，强力新材，上海新阳。</p></li><li><p>光刻胶配套试剂<br>​又称为湿功能电子化学品，是指通过复配手段达到特殊功能、满足制造中特殊工艺需求的配方类或复配类化学品。一般配合光刻胶使用，包括显影液、漂洗液、剥离液等。配套试剂和光刻胶配合使用，生产光刻胶的企业一般具备生产配套试剂的能力，国内的厂商包括江化微、江阴润玛、晶瑞股份等，国内企业快速突破技术壁垒，凭借成本及本土化优势得以迅速发展。中国企业不断加强湿电子化学品基础研究，目前包括江化微在内的一批本土企业突破了跨国企业的技术垄断，部分领域产品已经达到国际标准。</p></li><li><p>抛光液和抛光垫<br>​目前全球抛光的主流技术是CMP技术，是指在晶圆制造过程中，使用化学及机械力对晶圆进行平坦化处理的过程。CMP 技术所应用的抛光液、抛光垫、抛光浆料是硅晶圆及芯片进行工业处理的的三大消耗品，其中抛光工艺的技术核心和价值核心均在抛光垫。抛光垫价值量占抛光材料的六成，其力学性能和表面组织特征对于平坦化的效果非常关键，是CMP工艺的技术核心和价值核心。<br>​当前全球抛光垫市场呈现寡头垄断格局，陶氏化学占据抛光垫市场近八成份额，国内缺乏独立自主知识产权和品牌，庞大的国内市场完全被外资产品所垄断，进口替代空间广阔。国产材料具有明显的价格和服务等优势，大陆建厂热潮有望驱动国内 CMP 抛光垫厂商加速发展。国内抛光垫核心上市公司有鼎龙股份。</p></li><li><p>光阻材料<br>​光阻材料是印刷电路板线路影像转移与制作的重要材料。在电子产品日益轻、薄、短、小之趋势下，干膜光阻正扮演决定性的角色；其制作技术是直接影响信息及通讯等产品质量的关键。<br>​光阻材料暂无上市公司，北京化工大学、江苏博砚科技有限公司联合召开的国家重点研发与产业化项目推进会上获悉，我国微电子加工用高端超纯化学品关键技术已取得重大突破，并已在江苏宜兴建成国内首条年产1000吨黑色光阻示范生产线。这意味着长期受国外垄断的微电子材料开始走向国产化，并为我国微电子及相关产业摆脱进口依赖起到了重要的引领作用。</p></li><li><p>超净高纯试剂<br>​又称湿化学品，亦可称为通用湿电子化学品，是指主体成分纯度大于 99.99%，杂质离子和微粒数符合严格要求的化学试剂。主要以上游硫酸、盐酸、氢氟酸、氨水、氢氧化钠、氢氧化钾、丙酮、乙醇、异丙醇等为原料，经过预处理、过滤、提纯等工艺生产的得到纯度高产品。在半导体领域主要用于芯片的清洗和腐蚀，同时在硅晶圆的清洗中也起到重要作用。其纯度和洁净度对集成电路成品率、电性能及可靠性有十分重要的影响。应用于半导体的超净高纯试剂，全球主要企业有德国巴斯夫，美国亚什兰化学、Arch化学，日本关东化学、三菱化学、京都化工、住友化学、和光纯药工业，台湾鑫林科技，韩国东友精细化工等，上述公司占全球市场份额的 85%以上。<br>​目前，国内生产超净高纯试剂的企业中产品达到国际标准且具有一定生产量的企业有 30多家，国内超净高纯试剂产品技术等级主要集中在 G2 级以下，国内江化微、晶瑞股份等企业部分产品已达到 G3、G4 级别，晶瑞股份超纯双氧水已达 G5 级别，部分产品已经实现进口替代。我国内资企业产超净高纯试剂在 6 英寸及 6 英寸以下晶圆市场上的国产化率已提高到 80%，而 8 英寸及 8 英寸以上晶圆加工的市场上，其国产化率由2012 年约 8%左右缓慢增长到 2014 年的 10%左右。超净高纯试剂产能方面，晶瑞股份产能 3.87 万吨，江化微产能 3.24 万吨。</p></li><li><p>靶材<br>​半导体行业生产领域，靶材是溅射工艺中必不可少的重要原材料。溅射工艺是制备电子薄膜材料的主要技术之一，它利用离子源产生的离子轰击固体表面，使固体表面的原子离开固体并沉积在基底表面，被轰击的固体称为溅射靶材。靶极按照成分不同可分为金属靶极（纯金属铝、钛、铜、钽等）、合金靶极（镍铬合金、镍钴合金等）和陶瓷化合物靶极（氧化物、硅化物、碳化物、硫化物等）。半导体晶圆制造中 200nm（8 寸）及以下晶圆制造通常以铝制程为主，使用的靶材以铝、钛元素为主。300nm（12 寸）晶圆制造，多使用先进的铜互连技术，主要使用铜、钽靶材。<br>​半导体芯片对溅射靶材的金属材料纯度、内部微观结构等方面都设定了极其苛刻的标准，长期以来一直被美、日的跨国公司所垄断，我国的超高纯金属材料及溅射靶材严重依赖进口。目前上市的靶材公司有江丰电子、有研新材、阿石创。</p></li></ol><h2 id="工业设备"><a href="#工业设备" class="headerlink" title="工业设备"></a>工业设备</h2><ol><li><p>光刻机<br>​半导体芯片在制作过程中需要经历材料制备、掩膜、光刻、刻蚀、清洗、掺杂、机械研磨等多个工序，其中以光刻流程最为关键，光刻机是半导体芯片制造中最精密复杂、难度最高、价格最昂贵的设备，是整个制造流程工艺先进程度的重要指标。目前市场最为广泛应用的是浸入式光刻机和 EUV光刻机。</p></li><li><p>刻蚀机<br>​刻蚀也是集成电路制造工艺中的重要流程，是与光刻相联系的图形化处理的一种主要工艺。刻蚀利用显影后的光刻胶图形作为掩模，在衬底上腐蚀掉一定深度的薄膜物质，随后得到与光刻胶图形相同的集成电路图形。</p></li><li><p>薄膜沉积设备<br>​薄膜沉积工艺，是一连串涉及原子的吸附、吸附原子在表面的扩散及在适当的位置下聚结，在晶圆上沉积一层待处理的薄膜的过程。薄膜制备包括沉积法与生长法，其中以沉积法最为常见，涵盖物理沉积（PVD）与化学沉积（CVD）。</p></li></ol><p>​多数半导体设备厂商会在某个细分领域表现较为突出，比如阿斯麦（ASML），在光刻机领域占全球75%的市场份额，EUV光刻机更是占了100%，应用材料（AMAT）在薄膜沉积设备方面，处于领先地位，泛林半导体（LAM RESEARCH）是全球刻蚀机设备龙头等等。<br>​目前，全球半导体设备市场主要还是由国外厂商主导，根据VLSI Research 统计，2018年排名前十的半导体设备供应商，主要集中在北美、日本和欧洲，除了上述提到的3家，还有东电电子（Tokyo Electron）、科磊（KLA）、爱得万测试（Advantest）、迪恩士（SCREEN）、泰瑞达（Teradyne）、日立国际电气（Kokusai Electric）、日立高新（Hitachi HighTechnologies）。<br>​虽然与国际巨头存在差距，国内还是有不少半导体设备厂商值得关注，比如，在光刻机领域，有上海微电装备、中电科 48 所、中电科 45 研究所等，在刻蚀机领域，有北方华创、中微半导体、金盛微纳科技等，另外还有沈阳拓荆、晶盛机电、长川科技等等。</p><h2 id="代工厂"><a href="#代工厂" class="headerlink" title="代工厂"></a>代工厂</h2><p>​台积电就是最为典型的 Foundry，他们专注芯片制造，发展相关的工艺和制程，所以 Foundry 厂商其实就是 Fabless 厂商的代工方。台积电目前代工了机会全球大多数的芯片制造，包括华为海思，苹果，高通，英伟达等等。他们专注于制程的发展，摩尔定律的实现就是Foundry努力推进的结果，也得益于下游制造业的发展，我们才能有如此高性能的科技产品。<br>​晶圆代工的市场由这几家巨头所瓜分，台积电、三星、格芯(GLOBALFOUNDRIES)、联电(UMC)、中芯(SMIC)、力晶(Powerchip)等。其都在为先进制程牟足了劲，为着重先进制程技术竞争，其中台积电持续扩大领先距离。</p><h1 id="封测"><a href="#封测" class="headerlink" title="封测"></a>封测</h1><p>​OSAT （Outsourced Semiconductor Assembly and Testing）封测企业 ： 只负责产品的封装和测试 。<br>​根据总部所在地划分，前十大封测公司中，中国台湾有五家(日月光ASE、力成科技PTI、京元电子KYEC、南茂科技ChipMOS、颀邦Chipbond)，市占率为46.26%；中国大陆有三家(长电科技JCET、通富微电TFMC、华天科技HUATIAN)，市占率为20.94%；美国一家(安靠Amkor)，市占率为14.62%；新加坡一家(联合科技UTAC)，市占率为2.15%。</p><ol><li><p>日月光ASE 　　<br>​中国日月光是全球最大的外包半导体组装和测试制造服务供应商，占有30%的市场份额，其总部设在中国台湾高雄。日月光为全球90%以上的电子公司提供半导体组装和测试服务。封装服务包括扇出晶圆级封装(FO-WLP)，晶圆级芯片级封装(WL-CSP)，倒装芯片，2.5D和3D封装，系统级封装(SiP)和铜引线键合等。</p></li><li><p>安靠Amkor<br>​安靠(Amkor)，全球第二大的封测厂商，市占14.6%，总部在美国宾夕法尼亚州的西彻斯特。安靠提供了一整套封测服务，包括封装设计和开发，晶圆探针和封装测试，晶圆隆起和重新分配服务，组装以及最终测试。值得一提的是，安靠在通过热压缩进行芯片组装以及晶圆级封装方面相当具有竞争力。</p></li><li><p>长电科技JCET<br>​江苏长电科技，是中国大陆最大的封测厂商，全球排名第三，市占11.9%。长电科技提供全方位的芯片集成一站式服务，包括集成电路的系统集成封装设计、技术开发、产品认证、晶圆中测、Wafer Bumping、芯片成品测试并向世界各地的半导体供应商发货。</p></li></ol><h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>​总的来说,中国半导体产业链处目前处于一种非常不健康的态势,在设计领域强,在制造领域弱：<strong>集成电路设计</strong>为知识密集型产业，中国大陆目前已经诞生了包括海思在内的1300多家芯片设计公司，在数量、覆盖领域、质量上都不算落后。中国大陆IC设计产业已经占据了全球产业链相应环节的22%。但在<strong>集成电路制造</strong>产业，其作为整个产业链中科技要素最富集、门槛最高、市场集中程度也最高的环节，中国大陆的占比很小。相比于设计和制造，<strong>封装测试</strong>是半导体产业链中技术门槛最低的环节，这方面，中国大陆的相应占比为17%。全球排名前三的企业分别是中国台湾的日月光、美国的安靠以及中国大陆的长电科技，他们在全球市场的份额都在10%以上，彼此之间的差距也并不大。</p><p>​中国半导体产业链“卡脖子”卡在了哪里?可以说是，卡在了方方面面！<br>​中国半导体产业起步并不算特别晚，但是现在却与世界最先进的水平有了非常大的差距。中国半导体的现状从外部原因来说，很大程度是是因为以美国为首的一些国家所签订的《瓦森纳协定》，其对中国等非成员国进行限制。《瓦森纳协定》对中国的发展具有深层次的影响，即大大阻碍了中国加入全球生产体系。从内部原因来说就是投资不够！一直到2014年，中国才开始注意到要加强半导体领域投资，可就算是2017-2020年，大陆的半导体产业投资合计大约为447亿美元，仅仅是同时期的韩国三星的一半。</p><p>​在半导体设计领域，虽然中国大陆目前有非常多的企业，但在芯片IP领域，X86与ARM占据了全球主要的市场份额，在工业软件EAD领域，也可以说是几乎没有。虽然有《瓦森纳协定》的壁垒，我们仍然靠着国家自己的努力做成了一些事情，但是每当我们做出一定成就的时候，美国那边就开始对我们进行技术解锁与出口，与国产软件恶意竞争。1986年，国家动员一百多个单位，两百多名专家，聚集到北京集成电路设计中心，拿出“两弹一星”的精神开始研发熊猫ICCAD系统。但是，这时候新思科技与楷登电子进入中国市场，凭借着低价和成熟迅速地占领了国内的EDA软件市场，将自主研发扼杀在了摇篮之中。在芯片制造领域，荷兰ASML的DUV光刻机占据了全球97%的市场，EUV光刻机占据了100%的市场；生产芯片所用的材料也长期依赖进口。在封测领域，虽然我们已经走在了世界的前列，但是我们需要知道的是，光测试机一项设备，有47%和8%来自美国的泰瑞达和科休半导体，35%来自日本的爱德万，测试机的国产化率仍然很低。</p><p>​虽然看起来中国半导体产业做的很差，但我们必须要认识到的是，我们只是在尖端技术上与国外最新的技术有较大的差距，但是我们国家已经建设起了半导体领域的全产业链，并且在成熟工艺的应用上已经做到了较好的水平。芯片是国家的核心竞争力，早在2006年美国还未使用芯片禁令大棒的时候，我国就未雨绸缪，开始国产芯片的全产业链计划，进行芯片国产替代。在《国家中长期科学和技术发展规划纲要（2006-2020）》里设置国家科技重大专项，并确定了16个重大专项作为国家科技发展的重中之重，举全国之力进行攻关突破，其中集成电路装备因排第2被称为02专项。02专项在“十二五”期间重点实施的内容和目标分别是：重点进行45-22纳米关键制造装备攻关，开发32-22纳米互补金属氧化物半导体（CMOS）工艺、90-65纳米特色工艺，开展22-14纳米前瞻性研究，形成65-45纳米装备、材料、工艺配套能力及集成电路制造产业链，进一步缩小与世界先进水平差距，装备和材料占国内市场的份额分别达到10%和20%，开拓国际市场。</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/image-20220227150418528.png"/></div><p>​02专项在15年的持续投入和艰难攻关下，除了光刻机技术还没攻克外，我国在22-45nm芯片制造上基本实现了国产替代，并建立了自己的芯片全产业链，紧紧跟上国际先进水平，为实现芯片自主迈出重要一步。我们也应该清醒认识到，芯片发展是一个长期积累、高投入的过程，非一时之功可以达成。特别是要追赶上世界最先进的技术，必须要在人力、物力和资金方面的投入超过领先者，但实际上技术领先的国际芯片巨头在科研投入上远远超过我们，这也意味着他们跑得更快。在当前企业利润不能支撑科研投入的情况下，需要国家更多的扶持和投入。02项目虽然已收官，国家芯片大基金一期、二期已经设立，4千亿的资金投入彰显国家的气魄、眼光和决心，我们有理由相信：希望可期，胜利在望，未来在握。</p><p>​对于中国半导体产业，我们不能盲目自信，也不能妄自菲薄。我们必须得承认我们与最先进的技术仍然有差距，只有认识到自己的差距之后才有更大的进步空间。我们必须要认清的是，中国在面临国外的技术封锁之下，凭借着一己之力在往前追赶，中国是全世界唯一一个拥有整个半导体产业链的国家。尽管我们还不够强，但随着国家专项计划的一步步落实与推进，我们终究会追赶上世界领先水平的。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/460797683">芯片产业链概述 - 知乎 (zhihu.com)</a></p><p><a href="https://www.bilibili.com/video/BV1zp4y1i71y?spm_id_from=333.999.0.0">【差评君】全站最全分析：为什么说华为手机芯片看不到希望？_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/396067559">芯片企业：Fabless，foundry，IDM区别 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/68335137">X86新技术授权遇阻，国产X86芯片厂商前景黯淡！ - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/91242498">芯故事之细说EDA三巨头 - 知乎 (zhihu.com)</a></p><p><a href="https://www.bilibili.com/video/BV1Nz4y1d7JR?spm_id_from=333.999.0.0">硬核科普手机SoC制造全流程 ，看完就知道美国制裁华为究竟有多严重_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/293127504">我国半导体核心原材料现状 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/39025723">行业特刊—半导体行业上游原材料梳理 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/69146654">读完后，我更懂半导体设备了 - 知乎 (zhihu.com)</a></p><p><a href="https://mp.ofweek.com/ee/a845673525996">盘点全球六大半导体封测代工厂 (ofweek.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/404968848">半导体“封测” （行业概述&#x2F;总结） - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/82826888">三星、台积电、中芯国际们的芯片江湖 - 知乎 (zhihu.com)</a></p><p><a href="https://www.bilibili.com/video/BV13D4y1R7as?spm_id_from=333.999.0.0">国产光刻机还有戏吗？ASML成长史了解一下_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1tt4y1Q7Jv">【科普】中国制造的天堑，用数字告诉你，国产工业软件的真实差距_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV13D4y1R7as?spm_id_from=333.999.0.0">国产光刻机还有戏吗？ASML成长史了解一下_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1m54y1r7w4?spm_id_from=333.999.0.0">EUV光刻机我们想买，ASML也愿卖，但为何美国摇头就不成？_哔哩哔哩_bilibili</a></p><p><a href="https://www.szicc.net/GCEDA/PTIntro.aspx">国产EDA简介 (szicc.net)</a></p><p><a href="https://semiwiki.com/china/285941-chinas-position-in-the-global-semiconductor-value-chain/">China’s Position in the Global Semiconductor Value Chain - SemiWiki</a></p><p><a href="https://baike.baidu.com/item/02%E4%B8%93%E9%A1%B9/3360331">02专项_百度百科 (baidu.com)</a></p><p><a href="https://new.qq.com/omn/20210510/20210510A0568N00.html">实施15年的中国02专项收官，国产芯片全产业链建设进展如何_腾讯新闻 (qq.com)</a></p><p><a href="https://www.bilibili.com/video/BV1tt4y197uR?spm_id_from=333.999.0.0">【硬核科普】真·国产之光，什么是国家“02专项”_哔哩哔哩_bilibili</a></p><h1 id="三星-SAMSUNG"><a href="#三星-SAMSUNG" class="headerlink" title="三星 SAMSUNG"></a>三星 SAMSUNG</h1><p>三星集团的业务涉及电子、金融、机械、化学等众多领域，我们在此只需了解三星的电子领域，另外我们不讲三星的手机，电脑，电视等消费电子产品，而是讲这些产品的供应链中的产品和三星的代工厂。</p><h2 id="半导体产品"><a href="#半导体产品" class="headerlink" title="半导体产品"></a>半导体产品</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220331101131802.png" alt="image-20220331101131802"></p><h3 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h3><p><strong>动态随机存取存储器</strong>（<strong>Dynamic Random Access Memory</strong>，<strong>DRAM</strong>）是一种<a href="https://baike.baidu.com/item/%E5%8D%8A%E5%AF%BC%E4%BD%93">半导体</a><a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8">存储器</a>，主要的作用原理是利用<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AE%B9/12031635">电容</a>内存储<a href="https://baike.baidu.com/item/%E7%94%B5%E8%8D%B7">电荷</a>的多寡来代表一个<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制</a><a href="https://baike.baidu.com/item/%E6%AF%94%E7%89%B9">比特</a>（bit）是1还是0。由于在现实中<a href="https://baike.baidu.com/item/%E6%99%B6%E4%BD%93%E7%AE%A1/569042">晶体管</a>会有漏电电流的现象，导致电容上所存储的电荷数量并不足以正确的判别数据，而导致数据毁损。因此对于DRAM来说，周期性地充电是一个无可避免的要件。由于这种需要定时刷新的特性，因此被称为“动态”存储器。相对来说，静态存储器（<a href="https://baike.baidu.com/item/SRAM/7705927">SRAM</a>）只要存入数据后，纵使不刷新也不会丢失记忆。</p><p>DRAM通常以一个<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AE%B9">电容</a>和一个<a href="https://baike.baidu.com/item/%E6%99%B6%E4%BD%93%E7%AE%A1">晶体管</a>为一个单元排成二维矩阵。基本的操作机制分为读(Read)和写(Write)，读的时候先让Bitline(BL)先充电到操作电压的一半，然后在把晶体管打开让BL和电容产生电荷共享的现象，若内部存储的值为1，则BL的电压会被电荷共享抬高到高于操作电压的一半，反之，若内部存储的值为0，则会把BL的电压拉低到低于操作电压的一半，得到了BL的电压后，在经过放大器来判别出内部的值为0和1。写的时候会把晶体管打开，若要写1时则把BL电压抬高到操作电压使电容上存储著操作电压，若要写0时则把BL降低到0伏特使电容内部没有电荷。</p><p><strong>随机存取存储器</strong>（英语：<strong>R</strong>andom<strong>A</strong>ccess<strong>M</strong>emory，缩写：<strong>RAM</strong>），也叫<strong>主存</strong>，是与<a href="https://baike.baidu.com/item/CPU">CPU</a>直接交换数据的<a href="https://baike.baidu.com/item/%E5%86%85%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8/4567097">内部存储器</a>。它可以随时读写（刷新时除外，见下文），而且速度很快，通常作为<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>或其他正在运行中的程序的临时数据存储媒介。</p><p>主存（Main memory）即电脑内部最主要的存储器，用来加载各式各样的程序与数据以供<a href="https://baike.baidu.com/item/CPU">CPU</a>直接运行与运用。由于<a href="https://baike.baidu.com/item/DRAM">DRAM</a>的<a href="https://baike.baidu.com/item/%E6%80%A7%E4%BB%B7%E6%AF%94">性价比</a>很高，且扩展性也不错，是现今一般电脑<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%AD%98">主存</a>的最主要部分。2014年生产电脑所用的<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%AD%98">主存</a>主要是[DDR3 SDRAM](<a href="https://baike.baidu.com/item/DDR3">https://baike.baidu.com/item/DDR3</a> SDRAM)，而2016年开始[DDR4 SDRAM](<a href="https://baike.baidu.com/item/DDR4">https://baike.baidu.com/item/DDR4</a> SDRAM)逐渐普及化，笔电厂商如<a href="https://baike.baidu.com/item/%E5%8D%8E%E7%A1%95">华硕</a>及<a href="https://baike.baidu.com/item/%E5%AE%8F%E7%A2%81">宏碁</a>开始在笔电以DDR4存储器取代DDR3L。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220331184640231.png" alt="image-20220331184640231"></p><ul><li>DDR——全称：DDR SDRAM</li></ul><p><strong>DDR&#x3D;Double Data Rate双倍速率同步动态随机存储器</strong>。严格的说DDR应该叫DDR SDRAM，人们习惯称为DDR，其中，SDRAM 是Synchronous Dynamic Random Access Memory的缩写，即同步动态随机存取存储器。而DDR SDRAM是Double Data Rate SDRAM的缩写，是双倍速率同步动态随机存储器的意思。</p><p>DDR内存是在SDRAM内存基础上发展而来的，仍然沿用SDRAM生产体系，因此对于内存厂商而言，只需对制造普通SDRAM的设备稍加改进，即可实现DDR内存的生产，可有效的降低成本。</p><p>SDRAM（同步动态随机存取内存）可以看作一种特殊的DRAM（动态随机存取内存），我们平时说的<a href="https://www.zhihu.com/search?q=%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98%E6%9D%A1&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1316380536%7D">计算机内存条</a>就是一种DRAM。</p><p>一般的<strong>DRAM只有一个异步接口</strong>，采用异步传输的方式，异步传输技术简单，也比较稳定，但是数据的传输速率相对较慢。</p><p><strong>SDRAM除了异步接口，还多了一个同步接口</strong>。同步接口需要数据发送方和接收方有一个统一的时钟信号，技术相对复杂，相应的传输速率和并发度都更高。</p><p><strong>SDRAM就是一种传输速率更高的DRAM。</strong></p><p>上面说了，SDRAM的同步接口需要由一个统一的时钟信号控制，每个时钟周期传输一次数据。DDR SDRAM（也就是DDR）在每个<a href="https://www.zhihu.com/search?q=%E6%97%B6%E9%92%9F%E5%91%A8%E6%9C%9F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1316380536%7D">时钟周期</a>内能够传输两次数据，也就将SDRAM的数据传输了提升了一倍。<strong>也就是说DDR其实就是具有双倍数据传输率的SDRAM，在DRAM的基础上快上加快。</strong></p><p>目前已经发展了5代：<strong>DDR DDR2 DDR3  DDR4 DDR5</strong></p><p>对比一个内存，无非是对比它们的<strong>存储容量、传输速率</strong>以及<strong>耗电量</strong>。</p><p>DDR是由若干个内存芯片集成的，通过内存I&#x2F;O控制器对这些芯片进行分组控制。内存条的存储容量和传输速率，很多程度上取决于<a href="https://www.zhihu.com/search?q=%E5%86%85%E5%AD%98%E8%8A%AF%E7%89%87&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1316380536%7D">内存芯片</a>的容量和传输速率。</p><p><strong>内存条存储容量 &#x3D; 内存芯片的数量 * 内存芯片的容量</strong></p><p><strong>内存条的传输速率则取决于内存芯片的传输速率和对芯片分组控制的情况。</strong></p><p><strong>耗电量和电压有关。</strong></p><p>代数越高：</p><ul><li>时钟周期越短（也就是频率越高），传输速度也就越快；</li><li>能支持的理论最大容量越大，DDR4的理论最大容量已经达到512GB；</li><li>电压越小，耗电量也就越低。</li></ul><p>常见应用于电脑和服务器<strong>内存条</strong>颗粒。</p><ul><li>HBM</li></ul><p>HBM&#x3D;&#x3D;High Bandwidth Memory 是一款新型的CPU&#x2F;GPU 内存芯片（即 “RAM”），其实就是将很多个DDR芯片堆叠在一起后和GPU封装在一起，实现大容量，高位宽的DDR组合阵列。</p><p>现已经有两代：HBM,HBM2</p><p>HBM比DDR的优势是：高速，高带宽，高位宽，低功耗，低面积占用率</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220331190525172.png" alt="image-20220331190525172"></p><p>目前应用不算多，常见于封装到CPU中的内存和部分集成显卡的显存。</p><ul><li>GDDR——显存</li></ul><p><a href="https://product.pconline.com.cn/itbk/diy/graphics/1112/2628133.html">GDDR</a>是Graphics Double Data Rate的缩写，为显存的一种，GDDR是为了设计高端显卡而特别设计的高性能DDR存储器规格，其有专属的工作频率、时钟频率、电压，因此与市面上标准的DDR存储器有所差异，与普通DDR内存不同且不能共用。一般它比主内存中使用的普通DDR存储器时钟频率更高，发热量更小，所以更适合搭配高端显示芯片。</p><p>现已经发展到了第六代:GDDR6，常见应用于用显卡。</p><ul><li>LPDDR</li></ul><p>Low Power Double Data Rate SDRAM，是DDR SDRAM的一种，又称为 mDDR(Mobile DDR SDRAM),是美国<a href="https://baike.baidu.com/item/JEDEC/1684898">JEDEC</a>固态技术协会（JEDEC Solid State Technology Association）面向低功耗内存而制定的<a href="https://baike.baidu.com/item/%E9%80%9A%E4%BF%A1/300982">通信</a>标准，以低功耗和小体积著称，专门用于移动式电子产品。</p><p>现在已经发展到了第五代，常见应用于手机中的RAM内存</p><ul><li><p>模组——俗称内存条</p></li><li><p><strong>RDIMM</strong>带存储器的双列直插式存储模块</p></li></ul><p>包括用于优化时钟、命令和控制信号的寄存器 通过添加 8 位奇偶校验信号，实现错误纠正 支持 x4&#x2F;x8 组织&#x2F;每个 DIMM 和 3DPC 配置最高 2 个级别 </p><p>应用：服务器</p><ul><li><strong>LRDIMM</strong>低负载双列直插式存储模块</li></ul><p>包括用于优化时钟、命令和控制信号的寄存器 通过放置数据缓冲区优化数据信号 用于实现高密度和高速度的出色解决方案 支持 x4 组织&#x2F;每个 DIMM 和 3DPC 最高 4 个级别 </p><p>应用：服务器</p><ul><li><strong>UDIMM</strong>无缓冲双列直插式存储模块</li></ul><p>无缓冲区和寄存器：延迟值更小 支持 x8&#x2F;x16 组织&#x2F;每个 DIMM 和 2DPC 配置最高 2 个级别 </p><p>应用：台式机</p><ul><li>SODIMM无缓冲小型双列直插式存储模块</li></ul><p>比普通 DIMM 小 支持 x8&#x2F;x16&#x2F;每个 DIMM 和 2DPC 配置最高 2 个级别 适用于存在空间受限问题的系统 </p><p>应用：笔记本电脑</p><ul><li>ECC UDIMM &#x2F; ECC SODIMM带错误检查和纠正的无缓冲双列直插式存储模块 &#x2F; 带错误检查和纠正的小型无缓存双列直插式内存模块</li></ul><p>提供单一错误纠正和检测 支持 x8，每个 DIMM 最高 2 个级别 </p><p>应用：高端台式机、高端笔记本电脑、服务器</p><h3 id="SSD-固态硬盘"><a href="#SSD-固态硬盘" class="headerlink" title="SSD 固态硬盘"></a>SSD 固态硬盘</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220331191905784.png" alt="image-20220331191905784"></p><p>SSD组成的主要部件：主控芯片、NAND闪存芯片（NAND FLASH）、固件算法。</p><ul><li>主控<ul><li>嵌入式芯片，类似CPU</li><li>主流控制器：Marvell&#x2F;SandForce&#x2F;Samsung&#x2F;Indilinx</li></ul></li><li>固件<ul><li>主控按照固件中的程序，执行信号处理，坏块管理等</li></ul></li><li>闪存<ul><li>SLC、MLC、TLC</li><li>SLC颗粒：每个存储单元表示1bit，MLC-2bit，TLC-3bit</li><li>一个存储单元存储位数越多，自然容量越大，但带来可靠性、耐用性和性能的降低</li></ul></li></ul><p>主要说一下：NAND芯片</p><p><strong>NAND Flash全名为Flash Memory，属于非易失性存储设备(Non-volatile Memory Device)，</strong>基于浮栅(Floating Gate)晶体管设计，通过浮栅来锁存电荷，由于浮栅是电隔离的，所以即使在去除电压之后，到达栅极的电子也会被捕获。这就是闪存非易失性的原理所在。数据存储在这类设备中，即使断电也不会丢失。</p><p>与具有固定阈值电压的常规 MOSFET 不同，FGMOS 的阈值电压取决于存储在浮栅中的电荷量，电荷越多，阈值电压越高。与常规 MOSFET 类似，当施加到控制栅极的电压高于阈值电压时，FGMOS 开始导通。因此，通过测量其阈值电压并将其与固定电压电平进行比较来识别存储在 FGMOS 中的信息，被称为闪存中的读操作。</p><p><strong>SSD用户的数据全部存储于NAND闪存里，它是SSD的存储媒介，也是成本最高的部分。</strong>NAND Flash是目前闪存中最主要的产品，具备非易失、高密度、低成本的优势。被广泛用于 eMMC&#x2F;eMCP，U盘，SSD等市场。</p><p>NAND Flash闪存的主要分类以NAND闪存颗粒的技术为主，<strong>NAND闪存颗粒根据存储原理分为SLC、MLC、TLC和QLC四类，分别是：</strong></p><p><strong>SLC（英文全称(Single-Level Cell——SLC)即单层式储存</strong></p><p>SLC技术特点是在浮置闸极与源极之中的氧化薄膜更薄，在写入数据时通过对浮置闸极的电荷加电压，然后透过源极，即可将所储存的电荷消除，通过这样的方式，便可储存1个信息单元，即1bit&#x2F;cell，<strong>速度快寿命最长，价格贵（约MLC 3倍以上的价格），约10万次擦写寿命。</strong></p><p><strong>MLC（英文全称Multi-Level Cell——MLC)即多层式储存</strong></p><p>英特尔（Intel）在1997年9月最先开发成功MLC，其作用是将两个单位的信息存入一个Floating Gate（闪存存储单元中存放电荷的部分），然后利用不同电位（Level）的电荷，通过内存储存的电压控制精准读写。</p><p>即2bit&#x2F;cell，<strong>速度一般寿命一般，价格一般，约3000—1万次擦写寿命。</strong>MLC通过使用大量的电压等级，每个单元储存两位数据，数据密度比较大，可以一次储存4个以上的值，因此，MLC架构可以有比较好的储存密度。</p><p><strong>TLC（英文全称Trinary-Level Cell）即三层式储存</strong></p><p>TLC即3bit per cell，每个单元可以存放比MLC多1&#x2F;2的数据，共八个充电值，即3bit&#x2F;cell，也有Flash厂家叫8LC，所需访问时间更长，因此传输速度更慢。</p><p><strong>TLC优势价格便宜，每百万字节生产成本是最低的，价格便宜，但是寿命短，只有约1000次擦写寿命。</strong></p><p><strong>QLC（英文全称Quadruple-Level Cell）四层存储单元</strong></p><p>全称是Quad-Level Cell，四层式存储单元，即4bits&#x2F;cell。QLC闪存颗粒拥有比TLC更高的存储密度，同时成本上相比TLC更低，<strong>优势就是可以将容量做的更大，成本压缩得更低，劣势就是寿命更短，理论擦写次数仅150次。</strong></p><p><strong>而NAND闪存根据对应不同的空间结构来看，这四类技术可又分为2D结构和3D结构两大类，</strong>浮栅晶体管是主要用于2D FLASH，3D flash主要采用的是CT晶体管，浮栅是半导体，CT是绝缘体，二者在本质和原理上就有区别。</p><p><strong>2D结构NAND Flash</strong></p><p>2D结构的存储单元仅布置在芯片的XY平面中，因而使用2D闪存技术在同一晶圆中实现更高密度的唯一方法就是缩小制程工艺节点。</p><p>其缺点是，对于较小的节点，NAND闪存中的错误更为频繁；另外，可以使用的最小制程工艺节点存在限制，存储密度不高。</p><p><strong>3D结构NAND Flash</strong></p><p>为了提高存储密度，制造商开发了3D NAND或V-NAND（垂直NAND）技术，该技术将Z平面中的存储单元堆叠在同一晶圆上。</p><p>在3D NAND闪存中，存储器单元作为垂直串连接而不是2D NAND中的水平串，以这种方式构建有助于为相同的芯片区域实现高位密度。第一批3D Flash产品有24层。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220331192841076.png" alt="image-20220331192841076"></p><h3 id="嵌入式存储器"><a href="#嵌入式存储器" class="headerlink" title="嵌入式存储器"></a>嵌入式存储器</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220331193047159.png" alt="image-20220331193047159"></p><p>与上述的SSD不一样，SSD基本使用的都是SATA和NVME协议，UFS和eMMC是<a href="https://www.jedec.org/">JEDEC</a>制定的标准。电脑上的SSD，如M.2接口的SSD，使用的大多是NVME协议，手机平板等嵌入设设备使用的存储器为eMMC和UFS协议。</p><p>UFS（Universal Flash Storage）目标是取代eMMC。在2008年，JEDEC就开始为并行的eMMC寻找串行方案。NVMe（NVM Express）目标是替换掉SATA接口。早在2009年Intel就开始着手寻找SATA的替代方案，在2011年有了1.0。NVMe实际上是一种通讯协议，在通讯协议里是应用层，它使用PCIe协议作为数据和链路层。NVMe是为SSD而生。在此之前SSD都用SATA接口。有人会好奇SATA也是串行接口，为啥还要创造个新的接口。SATA接口采用AHCI规范，其已经成为制约SSD速度的瓶颈。AHCI只有1个命令队列，队列深度32；而NVMe可以有65535个队列，每个队列都可以深达65536个命令。NVMe也充分使用了MSI的2048个中断向量优势，延迟大大减小。UFS和NVMe应用的平台不一样，其实没有什么可比性，但是，有一个搅局的厂商——<strong>苹果</strong>。苹果定制了NVMe协议，引入到了iPhone上。NVMe是苹果为iPhone引入的，目前仅在iPhone 6s之后的机型中出现。很显然，这是<strong>苹果自己定制的技术</strong>，因为目前市面上没有可用的方案。在同一款iPhone上，不同容量的版本虽然采用的都是NVMe传输协议，但也存在MLC和TLC颗粒混用的情况。</p><p>eMMC和UFS物理本质就是NAND。<strong>UFSC可以说是eMMC的升级版</strong>，其速度快了不只是一点半点！NVMe、UFS有专门串行接口，读写操作同时进行；能够动态调配队列任务，无需等待上一进程结束。相反，eMMC的读写操作必须分开执行，指令也是打包的，在执行多任务时eMMC自然要慢一步。</p><p><strong>eMMC</strong>: embedded Multi Media Card</p><p>并行数据传输，半双工</p><p><strong>UFS</strong>: Universal Flash Storage</p><p>Universal Flash Storage，通用闪存存储。它有两个意思，一是指手机存储接口协议，类似SATA，PCIe&#x2F;NVMe；二是使用该协议的存储设备。</p><p>差分串行传输，全双工</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/8e1c013cff954dfab1ee20c011506112.jpeg"></p><h3 id="多芯片封装"><a href="#多芯片封装" class="headerlink" title="多芯片封装"></a>多芯片封装</h3><p>三星通过将移动 DRAM 与 NAND 巧妙地组合到一个紧密封装中，开发了全面的 MCP 产品阵容，实现了前沿的性能和设计</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/CgAGTF1fmoaAQP7uAAGO2Q89OUE766.png"></p><p>uMCP是基于eMCP延伸而来，eMCP大家都比较熟悉，是eMMC（NAND Flash+控制芯片）和低功耗的LPDDR封装在一起，目前仍广泛用于中、低端手机中。然而，eMMC规范标准发展到eMMC 5.1之后进展缓慢，这导致eMCP在性能上无法更上一层楼。</p><p>日前，三星推出了新一代uMCP，基于UFS 3.1和LPDDR5</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401075932189.png" alt="image-20220401075932189"></p><h3 id="消费级存储"><a href="#消费级存储" class="headerlink" title="消费级存储"></a>消费级存储</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401080114177.png" alt="image-20220401080114177"></p><p>内部固态硬盘存储芯片还是NAND FLASH，采用SLC&#x2F;MLC&#x2F;TLC&#x2F;QLT堆叠方式，采用NVMe或者SATA协议。</p><p>存储卡：现在玩相机的对存储卡了解多一点。其物理本质 还是NAND FLASH</p><p>存储卡有不同的类型，不同设备支持的内存卡类型也不一样。目前内存卡主要分为以下<strong>6类</strong>，分别是<strong>SD卡、TF卡（Micro SD卡）、CF卡、NM卡、XQD卡、CFast卡。</strong></p><p><strong>SD卡：</strong></p><p>SD卡（Secure Digital Memory Card）是一种基于半导体快闪记忆器的新一代记忆设备。SD卡由日本松下、东芝及美国SanDisk公司于1999年8月共同开发研制。SD卡是最常见的存储卡种类之一，数码相机、掌上游戏机，摄影机，多媒体播放器等等都会用到。大部分SD卡的侧面设有写保护控制。SD标准尺寸为32.0×24.0×2.1 mm。</p><p><strong>TF卡</strong>（<strong>Micro SD卡）</strong>：</p><p>TF卡全称TransFlash卡，由摩托罗拉和SANDISK共同研发，是一种超小型的卡。它的大小是SD卡的四分之一左右，尺寸为15.0×11.0×1.0 mm。TF卡采用SD架构设计，SD协会于2004年年底正式将其更名为 Micro SD卡。是最常见的存储卡。</p><p><strong>CF卡</strong>：</p><p>CF卡(Compact Flash) 于1994年首次由SanDisk公司生产并制定了相关规范，最初是一种用于便携式电子设备的数据存储设备。CF是最老也是最成功的标准之一，尤其在早期的专业数码相机市场。CF卡接口和PCMCIA-ATA一致，外形尺寸较小，仅43mm x 36mm x 3.3mm（5mm）。</p><p><strong>NM卡：</strong></p><p>NM卡（Nano Memory Card）是由华为开发的智能手机存储卡格式。相比TF小约45%，同时可以直接借由既有nano-SIM卡槽安装使用。</p><p><strong>XQD卡：</strong></p><p>XQD卡最初由SanDisk、Sony和Nikon在2010年11月发表，最终的规范在2011年12月发布。使用PCI Express传输资料，针对高分辨率的摄影机与数码相机开发，提供了500MB&#x2F;s的读取速度与125MB&#x2F;s的写入速度，储存容量可超过2TB。，无法向下相容CF卡。长宽尺寸介于CF卡和SD卡之间。</p><p><strong>CFast卡</strong> ：</p><p>CFast（CompactFast），采用 Serial ATA 总线。CFast和CF一样，都是CF协会统一制定标准和规范。CFast 1.0是基于SATA-Ⅱ接口，总线速率300MB&#x2F;s。CFast 2.0支持SATA-Ⅲ，总线速度600MB&#x2F;s。CFast外形尺寸和CF一样，厚度略厚0.3mm。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/v2-5ce570237a850c662515784774703e61_720w.jpg"></p><p>USB闪存盘：存储本质还是NAND FLASH</p><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401081004416.png" alt="image-20220401081004416"></p><p>移动处理器: Exynos xxxx</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401081421488.png" alt="image-20220401081421488"></p><p>汽车处理器:Exynos  Auto xxxx</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401081540429.png" alt="image-20220401081540429"></p><p>可穿戴设备处理器:Exynos  W xxxx</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401081708914.png" alt="image-20220401081708914"></p><p>调制解调器:Exynos  Modem xxxx，Exynos 调制解调器通过高性能 CPU 子系统实现超快的数据处理，其中包含一个用于处理调制解调器数据的 CPU 和用于负责嵌入式接入点 (AP) 的 CPU。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401081759294.png" alt="image-20220401081759294"></p><p>射频芯片RF:Exynos  RF</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401081856107.png" alt="image-20220401081856107"></p><h3 id="图像传感器"><a href="#图像传感器" class="headerlink" title="图像传感器"></a>图像传感器</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401081940413.png" alt="image-20220401081940413"></p><ul><li><strong>移动图像传感器:</strong></li></ul><p>ISOCELL HPx；SOCELL GNx；SOCELL JNx；SOCELL HMx；SOCELL GWx；SOCELL GHx；SOCELL JDx；SOCELL 3Tx；SOCELL 3Px；SOCELL 3Lx；SOCELL 3Mx；SOCELL GMx；SOCELL 2Lx；SOCELL 3Jx；SOCELL 4Hx；SOCELL 5Ex；SOCELL 5Fx</p><ul><li><strong>汽车传感器：</strong></li></ul><p>ISOCELL Auto 4AC</p><h3 id="显示芯片"><a href="#显示芯片" class="headerlink" title="显示芯片"></a>显示芯片</h3><p>移动显示驱动IC</p><p>面板显示驱动IC</p><h3 id="安全解决方案"><a href="#安全解决方案" class="headerlink" title="安全解决方案"></a>安全解决方案</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401082755784.png" alt="image-20220401082755784"></p><h3 id="电源管理芯片"><a href="#电源管理芯片" class="headerlink" title="电源管理芯片"></a>电源管理芯片</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401082814522.png" alt="image-20220401082814522"></p><h2 id="Foundry"><a href="#Foundry" class="headerlink" title="Foundry"></a>Foundry</h2><p>不展开讲了，世界上为数不多的IDM厂商！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220331101211109.png" alt="image-20220331101211109"></p><h1 id="英特尔-Intel"><a href="#英特尔-Intel" class="headerlink" title="英特尔 Intel"></a>英特尔 Intel</h1><p>因特尔有半导体产品，Foundry工厂，还有USB协议定制等半导体行业的各种产品和技术，除了消费级处理器，内存，存储外，其他大部分都是面向企业的，intel的东西太多了，挑选着讲！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401083203008.png" alt="image-20220401083203008"></p><h2 id="处理器-1"><a href="#处理器-1" class="headerlink" title="处理器"></a>处理器</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401083519562.png" alt="image-20220401083519562"></p><h2 id="图形处理单元"><a href="#图形处理单元" class="headerlink" title="图形处理单元"></a>图形处理单元</h2><ul><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/visual-technology/arc-discrete-graphics.html">英特尔® 锐炫™</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/discrete-gpus/iris-xe-max.html">英特尔® 锐炬® Xᵉ MAX</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/discrete-gpus/server-graphics-card.html">英特尔® 服务器 GPU</a></li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401084305516.png" alt="image-20220401084305516"></p><h2 id="FPGA"><a href="#FPGA" class="headerlink" title="FPGA"></a>FPGA</h2><ul><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/fpga.html">英特尔® FPGA</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/programmable/edge-centric-fpga.html">边缘为中心的 FPGA</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/fpga/max.html">CPLDs</a></li><li><a href="https://www.intel.cn/content/www/us/en/products/details/fpga/configuration-devices.html">配置设备</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/software/programmable/quartus-prime/overview.html">英特尔® Quartus® Prime 设计软件</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/fpga/intellectual-property.html">知识产权</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/fpga/find-fpga-boards.html">主板和套件</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/fpga/platforms/pac.html">加速卡</a></li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401084140831.png" alt="image-20220401084140831"></p><h2 id="系统和设备"><a href="#系统和设备" class="headerlink" title="系统和设备"></a>系统和设备</h2><ul><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/evo.html">英特尔® Evo™</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/events/processors-core-prc.html">笔记本电脑</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/gaming/gaming-laptops.html">游戏笔记本电脑</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/nuc.html">英特尔® NUC</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/systems-devices/desktops.html">台式机</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/systems-devices/workstations.html">工作站</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/solutions/iot.html">英特尔® 物联网 RFP 就绪套件</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/power/programmable/overview.html">电源解决方案</a></li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/servers/server-systems.html">单节点服务器</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/servers/multi-node-server-systems.html">多节点服务器</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/servers/data-center-blocks.html">英特尔® 数据中心模块</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/servers/server-chassis.html">服务器机箱</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/servers/server-boards.html">服务器主板</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/servers/raid.html">英特尔® RAID 产品</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/server-management/intel-server-management.html">英特尔® 服务器管理</a></li></ul><h2 id="内存和存储"><a href="#内存和存储" class="headerlink" title="内存和存储"></a>内存和存储</h2><ul><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/memory-storage.html">固态盘</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/intel-optane-technology.html">英特尔® 傲腾™ 技术</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/optane-dc-persistent-memory.html">英特尔® 傲腾™ 持久内存</a></li></ul><p>FLASH是一种存储芯片，全名叫Flash EEPROM Memory，通过程序可以修改数据，即平时所说的“闪存”。Flash又分为NAND flash和NOR flash二种。</p><p><strong>（1）Nor Flash存储器简介</strong></p><p>　　NOR Flash 的读取和我们常见的 SDRAM 的读取是类似，用户可以直接运行装载在 NOR FLASH 里面的代码，这样可以减少 SRAM 的容量从而节约成本。<br>　 intel公司1988年开发出了NOR flash技术。NOR的特点是芯片内执行（XIP, eXecute In Place），这样应用程序可以直接在flash 闪存内运行，不必再把代码读到系统RAM中。NOR的传输效率很高，在1～4MB的小容量时具有很高的成本效益，但是其很低的写入和擦除速度大大影响了它的性能。</p><p><strong>（2）Nand Flash存储器简介</strong><br>　　Nand-flash内存是flash内存的一种，1989年，东芝公司发表了NAND flash结构。其内部采用非线性宏单元模式，为固态大容量内存的实现提供了廉价有效的解决方案。</p><p>　　Nand-flash存储器具有<strong>容量较大，改写速度快</strong>等优点，适用于大量数据的存储，因而在业界得到了越来越广泛的应用，如嵌入式产品中包括数码相机、MP3随身听记忆卡、体积小巧的U盘等</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401084654719.png" alt="image-20220401084654719"></p><h2 id="无线产品"><a href="#无线产品" class="headerlink" title="无线产品"></a>无线产品</h2><ul><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/wireless/killer-series.html">英特尔® Killer™ 无线系列</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/wireless/wi-fi-6e-series.html">英特尔® Wi-Fi 6E (Gig+) 系列</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/wireless/wi-fi-6-series.html">英特尔® Wi-Fi 6 系列</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/wireless/wireless-ac-products.html">英特尔® Wireless-AC 产品</a></li></ul><h2 id="以太网产品"><a href="#以太网产品" class="headerlink" title="以太网产品"></a>以太网产品</h2><ul><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/ethernet.html">英特尔® 以太网技术</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/ethernet.html">英特尔® 以太网产品</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/network-io/smartnic.html">基础设施处理单元 (IPUs)</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/network-io/high-performance-fabrics/silicon-photonics.html">英特尔® 硅光子技术光纤收发器</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/network-io/programmable-ethernet-switch.html">可编程以太网交换机产品</a></li></ul><h2 id="eASIC"><a href="#eASIC" class="headerlink" title="eASIC"></a>eASIC</h2><p>英特尔® eASIC™ 设备是结构化 ASIC 平台，一种 介于 FPGA 和标准单元 ASIC 的中间技术。 相较于 FPGA，这些设备可降低单位成本和功耗，并缩短上市时间，而相较于标准蜂窝信号 ASIC，则可以降低非经常性工程成本。 全新英特尔® eASIC™ N5X 设备（曾用代号 Diamind Mesa），添加与英特尔® FPGA 兼容的硬核处理器系统和安全设备管理器，以扩展英特尔的逻辑产品系列。</p><ul><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/easic/n5x.html">英特尔® eASIC™ N5X 设备</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/easic/n3xs.html">英特尔® eASIC™ N3XS 设备</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/easic/n3x-n2x.html">英特尔® eASIC™ N3X 设备</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/easic/easicopy.html">英特尔® easicopy™ 设备</a></li></ul><h2 id="芯片组"><a href="#芯片组" class="headerlink" title="芯片组"></a>芯片组</h2><ul><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/chipsets/mobile-chipsets.html">移动式</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/chipsets/desktop-chipsets.html">台式机</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/products/details/chipsets/server-chipsets.html">服务器</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/design/products-and-solutions/processors-and-chipsets/platform-codenames.html">嵌入式</a></li></ul><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><ul><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/realsense-overview.html">英特尔® 实感™ 技术</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/vpro/overview.html">英特尔® vPro® 平台</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/unite/intel-unite-overview.html">英特尔 Unite® 解决方案</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/intel-select-solutions-overview.html">英特尔® 专项解决方案</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/internet-of-things/computer-vision/vision-products.html">视觉产品</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/silicon-innovations/silicon-innovations-technology.html">芯片创新</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/thunderbolt/overview.html">Thunderbolt™ 技术</a></li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401084834683.png" alt="image-20220401084834683"></p><h1 id="SK海力士-SK-Hynix"><a href="#SK海力士-SK-Hynix" class="headerlink" title="SK海力士 SK Hynix"></a>SK海力士 SK Hynix</h1><p>海力士半导体在1983年以<strong>现代电子</strong>产业有限公司成立，在1996年正式在韩国上市，1999年收购LG<a href="https://baike.baidu.com/item/%E5%8D%8A%E5%AF%BC%E4%BD%93">半导体</a>，2001年将公司名称改为(株)海力士半导体,从现代集团分离出来。2004年10月将系统IC业务出售给<a href="https://baike.baidu.com/item/%E8%8A%B1%E6%97%97%E9%9B%86%E5%9B%A2">花旗集团</a>，成为专业的存储器制造商。2012年2月，韩国第三大财阀<a href="https://baike.baidu.com/item/SK%E9%9B%86%E5%9B%A2">SK集团</a>宣布收购海力士21.05%的股份从而入主这家内存大厂。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401085554751.png" alt="image-20220401085554751"></p><h1 id="美光-Micron"><a href="#美光-Micron" class="headerlink" title="美光 Micron"></a>美光 Micron</h1><p>主营存储和内存：Crucial 英睿达 DRAM 和 SSD</p><h1 id="高通-Qualcomm"><a href="#高通-Qualcomm" class="headerlink" title="高通 Qualcomm"></a>高通 Qualcomm</h1><h2 id="处理器-2"><a href="#处理器-2" class="headerlink" title="处理器"></a>处理器</h2><h2 id="调制解调器-射频芯片"><a href="#调制解调器-射频芯片" class="headerlink" title="调制解调器-射频芯片"></a>调制解调器-射频芯片</h2><h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><h2 id="Wi-Fi-Atheros"><a href="#Wi-Fi-Atheros" class="headerlink" title="Wi-Fi Atheros"></a>Wi-Fi Atheros</h2><h1 id="博通-Broadcom"><a href="#博通-Broadcom" class="headerlink" title="博通 Broadcom"></a>博通 Broadcom</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/d86da666a2254b5dba6a45ad44e89148.jpeg"></p><p>这一下子牵扯到了惠普，安捷伦，安华高……还是看这篇文章吧：<a href="https://www.sohu.com/a/204858985_132567">一文看懂博通的前世今生 (sohu.com)</a></p><p>博通是典型的IC供应商了，基本都ToB业务，存储IC,无线网络IC,有线网络IC，博通在网络芯片方面做的是风生水起的，在网络芯片与之竞争的就是高通Atheros了。</p><p>博通打算收购高通被起诉了，收购失败！</p><h1 id="联发科-MediaTek（MTK）"><a href="#联发科-MediaTek（MTK）" class="headerlink" title="联发科 MediaTek（MTK）"></a>联发科 MediaTek（MTK）</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401092158971.png" alt="image-20220401092158971"></p><h1 id="德州仪器-TI"><a href="#德州仪器-TI" class="headerlink" title="德州仪器 TI"></a>德州仪器 TI</h1><p>无可争议的IC供应商巨头</p><ul><li><a href="https://www.ti.com.cn/zh-cn/amplifier-circuit/overview.html">放大器</a></li><li><a href="https://www.ti.com.cn/zh-cn/audio-ic/overview.html">音频</a></li><li><a href="https://www.ti.com.cn/zh-cn/clocks-timing/overview.html">时钟和计时</a></li><li><a href="https://www.ti.com.cn/zh-cn/data-converters/overview.html">数据转换器</a></li><li><a href="https://www.ti.com.cn/zh-cn/die-wafer-services/overview.html">裸片和晶圆服务</a></li><li><a href="https://www.ti.com.cn/zh-cn/dlp-chip/overview.html">DLP® 产品</a></li><li><a href="https://www.ti.com.cn/zh-cn/interface/overview.html">接口</a></li><li><a href="https://www.ti.com.cn/zh-cn/isolation/overview.html">隔离器件</a></li><li><a href="https://www.ti.com.cn/zh-cn/logic-voltage-translation/overview.html">逻辑和电压转换</a></li><li><a href="https://www.ti.com.cn/zh-cn/microcontrollers-mcus-processors/overview.html">微控制器 (MCU) 和处理器</a></li><li><a href="https://www.ti.com.cn/zh-cn/motor-drivers/overview.html">电机驱动器</a></li><li><a href="https://www.ti.com.cn/zh-cn/power-management/overview.html">电源管理</a></li><li><a href="https://www.ti.com.cn/zh-cn/rf-microwave/overview.html">射频 &amp; 微波</a></li><li><a href="https://www.ti.com.cn/zh-cn/sensors/overview.html">传感器</a></li><li><a href="https://www.ti.com.cn/zh-cn/applications/industrial/aerospace-defense/overview.html">航天与高可靠性</a></li><li><a href="https://www.ti.com.cn/zh-cn/switches-multiplexers/overview.html">开关和多路复用器</a></li><li><a href="https://www.ti.com.cn/zh-cn/wireless-connectivity/overview.html">无线连接</a></li></ul><h1 id="亚德诺-ADI"><a href="#亚德诺-ADI" class="headerlink" title="亚德诺 ADI"></a>亚德诺 ADI</h1><p>即美国模拟器件公司</p><p>模拟IC的王！</p><h1 id="英伟达-nVidia"><a href="#英伟达-nVidia" class="headerlink" title="英伟达 nVidia"></a>英伟达 nVidia</h1><p>我愿称之为“<strong>后摩尔时代最强IC芯片商</strong>”</p><p>今年来续踩中区块链&#x2F;BIT币&#x2F;AI等市场趋势！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401092725449.png" alt="image-20220401092725449"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401092745963.png" alt="image-20220401092745963"></p><h1 id="美国超微半导体公司-AMD"><a href="#美国超微半导体公司-AMD" class="headerlink" title="美国超微半导体公司 AMD"></a>美国超微半导体公司 AMD</h1><p>从Intel的代工厂到现在把Intel（消费级CPU）按在地上锤爆！</p><p>AMD YES！</p><p>CPU和GPU两开花</p><p>2020年10月27日 <a href="https://baike.baidu.com/item/AMD/5905">AMD</a> 同意以股票交易的形式，按照 350 亿美元的价值收购 Xilinx（赛灵思），AMD 预计交易在 2021 年底完成。</p><p>现在AMD收购了赛灵思，赛灵思是FPGA最强厂商（后面在讲），AMD现在又多了FPGA一个强有力的领域！</p><h1 id="苹果-Apple"><a href="#苹果-Apple" class="headerlink" title="苹果 Apple"></a>苹果 Apple</h1><p>苹果基于ARM的A系列和M系列产品让苹果在半导体差异的地位突飞猛进！</p><p>苹果在其他半导体领域会怎么样很难说，我觉得可能会来一波大的，苹果现在非常狗，疯狂收购IC厂！</p><h1 id="西部数据-Western-Digital"><a href="#西部数据-Western-Digital" class="headerlink" title="西部数据 Western Digital"></a>西部数据 Western Digital</h1><p>半导体存储厂商。</p><p>2011年，西数以43亿美元收购日立环球存储技术公司(HGST)</p><p>2015年10月闪迪公司被<a href="https://baike.baidu.com/item/%E8%A5%BF%E9%83%A8%E6%95%B0%E6%8D%AE">西部数据</a>以190亿<a href="https://baike.baidu.com/item/%E7%BE%8E%E9%87%91/4309458">美金</a>的价格收购。</p><p>2017年9月，西数以183亿美元收购东芝的半导体业务。</p><h1 id="意法半导体-ST"><a href="#意法半导体-ST" class="headerlink" title="意法半导体 ST"></a>意法半导体 ST</h1><p>欧洲半导体领军企业—意法半导体（STMicroelectronics）</p><p>意法半导体集团（STMicroelectronics）成立于1987年，总部位于瑞士，由意大利SGS微电子公司和法国Thomson半导体公司合并成立，于1994年于巴黎和纽约同步上市。意法半导体拥有三大业务部门：汽车和分立器件部门；模拟器件、MEMS和传感器部门；微控制器和数字IC部门。意法半导体采用IDM模式，拥有16个研发机构、39个设计和应用中心、13个制造基地。公司研发实力显著，拥有18,000项专利，研发设计人员8,100余名，研发人员占比18%，2020年研发投入占营收比重达到15%。</p><h1 id="恩智浦-NXP"><a href="#恩智浦-NXP" class="headerlink" title="恩智浦 NXP"></a>恩智浦 NXP</h1><p><strong>恩智浦</strong>半导体创立于2006年，其前身为<strong>荷兰飞利浦</strong>公司于1953年成立的半导体事业部，总部位于荷兰埃因霍温。 恩智浦2010年在美国纳斯达克上市。</p><p>2015年，恩智浦收购了由<strong>摩托罗拉</strong>创立的<strong>飞思卡尔</strong>半导体，成为全球前十大非存储类半导体公司，以及全球最大的汽车半导体供应商（Strategy Analytics）。在全球30个国家和地区设有办事处，总员工人数超30000，2019年全球营收为88.77亿美元。</p><p>优势：<a href="http://www.eeworld.com.cn/mcu/2015/0407/article_19188.html">微控制器</a><em>、*</em><a href="http://www.eeworld.com.cn/xfdz/spxgjs/">射频</a>*<em>、*</em><a href="http://www.eeworld.com.cn/MEMS/">传感器</a>**、无线(NFC)、模拟及<a href="http://www.eeworld.com.cn/dygl/">电源</a>，NFC、智能卡IC。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401093720939.png" alt="image-20220401093720939"></p><h1 id="飞利浦-Philips"><a href="#飞利浦-Philips" class="headerlink" title="飞利浦 Philips"></a>飞利浦 Philips</h1><p>在世界半导体行业的发展过程中，荷兰飞利浦贡献了不少力量，其孕育出了光刻机设备巨头ASML和半导体巨头恩智浦，可谓是一门双杰。</p><h1 id="赛灵思-Xilinx"><a href="#赛灵思-Xilinx" class="headerlink" title="赛灵思 Xilinx"></a>赛灵思 Xilinx</h1><p>赛灵思公司是全球完整可编程逻辑解决方案的领导厂商，占有该市场超过一半以上的份额，2008年度赛灵思公司的收入为19.1亿美元。赛灵思屡获殊荣的各种产品，包括硅片、软件、IP、开发板、入门套件，可使设计者为多种终端市场提供应用并大大缩短上市时间，包括航天&#x2F;国防、汽车、消费类、工业和有线&#x2F;无线通讯等。</p><p><strong>近日要闻</strong>2020年10月27日，美国超威半导体公司(AMD)与赛灵思公司（Xilinx）达成协议：AMD将以总价值350亿美元的全股票交易收购赛灵思公司。</p><p><strong>公司简介</strong>赛灵思于1984年2月在加利福尼亚成立，后来又于1990年4月重新在特拉华州重新注册成立，是全球领先的可编程逻辑完整解决方案的供应商，也是现场可<strong>编程逻辑门阵列（FPGA）</strong>、可编程SoC及自适应计算加速平台（ACAP）的发明者。</p><h1 id="飞思卡尔-Freescale"><a href="#飞思卡尔-Freescale" class="headerlink" title="飞思卡尔 Freescale"></a>飞思卡尔 Freescale</h1><p>飞思卡尔于2004年由原<a href="https://baike.baidu.com/item/%E6%91%A9%E6%89%98%E7%BD%97%E6%8B%89">摩托罗拉</a>的半导体部门组建。摩托罗拉于2003年10月宣布剥离半导体部门，第二年7月，飞思卡尔上市。</p><p>优势产品：<a href="http://www.eeworld.com.cn/tags/MCU">MCU</a>&amp;通信处理器、模拟技术与[电源管理](<a href="http://www.eeworld.com.cn/dygl/)%E3%80%81%E5%B0%84%E9%A2%91%E3%80%81%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5%E3%80%81%E4%BC%A0%E6%84%9F%E5%99%A8%E3%80%81%E8%BD%AF%E4%BB%B6%E5%92%8C%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E3%80%82MCU&%E9%80%9A%E4%BF%A1%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%88ARM">http://www.eeworld.com.cn/dygl/)、射频、无线连接、传感器、软件和开发工具。MCU&amp;通信处理器（ARM</a> MCU、ARM应用处理器、QorIQ多核处理器、Power处理器、<a href="http://www.eeworld.com.cn/DSP/">DSP</a>）。</p><h1 id="英飞凌-infineon"><a href="#英飞凌-infineon" class="headerlink" title="英飞凌 infineon"></a>英飞凌 infineon</h1><p>英飞凌科技公司于1999年4月1日在德国<a href="https://baike.baidu.com/item/%E6%85%95%E5%B0%BC%E9%BB%91/855">慕尼黑</a>正式成立，是全球<a href="https://baike.baidu.com/item/%E9%A2%86%E5%85%88/396771">领先</a>的半导体公司之一。其前身是<a href="https://baike.baidu.com/item/%E8%A5%BF%E9%97%A8%E5%AD%90%E9%9B%86%E5%9B%A2/3528373">西门子集团</a>的半导体部门，于1999年独立，2000年<a href="https://baike.baidu.com/item/%E4%B8%8A%E5%B8%82/2903553">上市</a>。其中文名称为亿恒科技，2002年后更名为英飞凌科技。</p><p>全球功率半导体企业的地域分布相对集中，头部企业主要分布于欧洲、美国和日本等国家和地区。从欧洲来看，以英飞凌、意法半导体等为代表的领军企业在全球功率半导体市场拥有较大影响力。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/v2-9d4f5a6b874e4de5408295f4167b0f87_720w.jpg"></p><h1 id="萨瑞-RENESAS"><a href="#萨瑞-RENESAS" class="headerlink" title="萨瑞 RENESAS"></a>萨瑞 RENESAS</h1><p>于2003年4月1日—由<a href="https://baike.baidu.com/item/%E6%97%A5%E7%AB%8B/1096995">日立</a>制作所半导体部门和<a href="https://baike.baidu.com/item/%E4%B8%89%E8%8F%B1%E7%94%B5%E6%9C%BA/6303478">三菱电机</a>半导体部门合并成立。RENESAS结合了日立与三菱在半导体领域方面的先进技术和丰富经验，是无线网络、汽车、消费与工业市场设计制造嵌入式半导体的全球领先供应商。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401095027034.png" alt="image-20220401095027034"></p><h1 id="铠侠-KAIXIA"><a href="#铠侠-KAIXIA" class="headerlink" title="铠侠 KAIXIA"></a>铠侠 KAIXIA</h1><p><a href="https://www.zhihu.com/search?q=%E4%B8%9C%E8%8A%9D%E5%AD%98%E5%82%A8%E5%85%AC%E5%8F%B8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1277071496%7D">东芝存储公司</a>（Toshiba Memory Corporation）宣布将从19年10月起更名为Kioxia，中文名称“铠侠”。</p><p>主营内存和存储。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401095528458.png" alt="image-20220401095528458"></p><h1 id="尔必达-ELPIDA"><a href="#尔必达-ELPIDA" class="headerlink" title="尔必达 ELPIDA"></a>尔必达 ELPIDA</h1><p>现在已经没了！</p><p>尔必达（ELPIDA）是日本唯一一家生产电脑等<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8/12717044">动态随机存取存储器</a>（DRAM）的企业，在DRAM领域市场份额世界第三。尔必达于1999年成立，2004年在<a href="https://baike.baidu.com/item/%E4%B8%9C%E4%BA%AC%E8%AF%81%E5%88%B8%E4%BA%A4%E6%98%93%E6%89%80/271790">东京证券交易所</a>主板上市。随着2008年秋爆发金融危机，公司业绩急速恶化。2012年2月27日，公司申请破产保护。2012年7月2日，被美国<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%85%89%E7%A7%91%E6%8A%80/3870379">美光科技</a>收购。</p><p>尔必达诞生于1999年，实际是整合了<a href="https://baike.baidu.com/item/%E6%97%A5%E7%AB%8B">日立</a>、<a href="https://baike.baidu.com/item/NEC">NEC</a>、<a href="https://baike.baidu.com/item/%E4%B8%89%E8%8F%B1%E7%94%B5%E6%9C%BA">三菱电机</a>的DRAM业务，其成立本身就带有保护日本DRAM产业的政府意志。</p><h1 id="日本电气-NEC"><a href="#日本电气-NEC" class="headerlink" title="日本电气 NEC"></a>日本电气 NEC</h1><p>半导体业务部门拆分出去了，已经称不上是半导体厂商了！</p><h1 id="富士通-Fujitsu"><a href="#富士通-Fujitsu" class="headerlink" title="富士通 Fujitsu"></a>富士通 Fujitsu</h1><p>半导体业务部门拆分出去了，已经称不上是半导体厂商了！</p><h1 id="日立-HITACHI"><a href="#日立-HITACHI" class="headerlink" title="日立 HITACHI"></a>日立 HITACHI</h1><p>半导体业务部门拆分出去了，已经称不上是半导体厂商了！</p><h1 id="松下-Panasonic"><a href="#松下-Panasonic" class="headerlink" title="松下 Panasonic"></a>松下 Panasonic</h1><p>半导体业务部门拆分出去了，已经称不上是半导体厂商了！</p><h1 id="三菱-Mitsubishi"><a href="#三菱-Mitsubishi" class="headerlink" title="三菱 Mitsubishi"></a>三菱 Mitsubishi</h1><p>半导体业务部门拆分出去了，已经称不上是半导体厂商了！</p><h1 id="索尼-SNOY"><a href="#索尼-SNOY" class="headerlink" title="索尼 SNOY"></a>索尼 SNOY</h1><p>日本半导体产业最后的希望了，独苗！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401101116733.png" alt="image-20220401101116733"></p><p>主要发力点在图像传感器上！</p><h1 id="紫光-Tsinghua-Unigroup"><a href="#紫光-Tsinghua-Unigroup" class="headerlink" title="紫光 Tsinghua Unigroup"></a>紫光 Tsinghua Unigroup</h1><p>紫光集团最早起步于1988年。当年，清华大学成立清华大学科技开发总公司，这是清华大学为加速科技成果产业化成立的全校第一家综合性校办企业，也是紫光集团前身。近年来，紫光集团逐步形成以集成电路为主导，从“芯”到“云”的高科技产业生态链，在全球信息产业中强势崛起。</p><h1 id="华为海思-Hisilicon"><a href="#华为海思-Hisilicon" class="headerlink" title="华为海思 Hisilicon"></a>华为海思 Hisilicon</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220401101917107.png" alt="image-20220401101917107"></p><p>移动处理器：麒麟 Kirin</p><p>人工智能芯片：昇腾 HUAWEI Ascend</p><p>云计算处理器：鲲鹏 Kunpeng</p><p>通信芯片：巴龙 Balong</p><p>联接芯片：凌霄 Gigahome</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>全球半导体产业格局的变化！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/v2-b6a5656262864428dfeb145123512ef0_720w.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/v2-72828e91527a4eb52b0dd520638ec332_720w.jpg"></p><p>从地区来看，目前，<strong>美国</strong>占据了半导体领域的绝对地位，不仅本土半导体企业牢牢占据主导优势，而且也通过资本方式控制了日韩台企业（三星\海力士\台积电\东芝\瑞萨），加上拥有较多自主权的欧洲也在最近几年逐年下跌（英飞凌\ST\NXP等这两年都跌出Top10），整个半导体器件行业，可以说是美国一家独大，也是唯一一个拥有完整半导体技术链的国家；<strong>韩国</strong>半导体全部压在三星和海力士身上，时至今日，韩国三星和海力士已成为第一大和第二大存储器件厂商，无论是DRAM还是NAND都拥有绝对的市场垄断地位；欧洲半导体厂商主要是三巨头：恩智浦（飞利浦）、英飞凌（西门子）、意法ST（意大利SGS&amp;法国Thomson），被美国压着，说实话，过得并不算好，但三大巨头各自发展状况都相对稳健，英飞凌和恩智浦重押未来汽车电子方向，ST在MCU领域占据绝对统治地位；<strong>日本</strong>半导体这些年过的是真的惨，厂商合作重组也没能自救，说到底还是美国不给留条活路。日本现在东芝变卖了东芝存储改名为铠侠已经不算是日本的半导体人企业了，命已经在美国资本手中了！独苗索尼压在图像传感器上面，过得还不错！可以参考一下视频，看一下为什么日本半导体到底是经历了什么：<a href="https://www.bilibili.com/video/BV17q4y1k7vo?spm_id_from=333.337.search-card.all.click">跌落神坛的日本半导体产业到底经历了什么？【差评君】_哔哩哔哩_bilibili</a></p><p>中国的半导体企业过得也不好，台湾地区的联发科做的还行，但是被高通和苹果压着打；大陆的华为海思在高端处理器上做的还是非常不错的，直逼高通，但是美国的强力打压，现在也残血了；紫光过得也非常不好，前段时间直接申请破产重组……</p><p>给中国半导体产业耐心和信心，期盼中国半导体产业站起来的那一天！</p><h1 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://semiconductor.samsung.com/cn/">三星半导体官方网站 | 三星半导体在中国 (samsung.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/465534924">全球十大半导体厂商排名：1987-2021年 - 知乎 (zhihu.com)</a></p><p><a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8/12717044">动态随机存取存储器_百度百科 (baidu.com)</a></p><p><a href="http://www.elecfans.com/d/845323.html">DRAM、FLASH和DDR的区别你都知道哪些-电子发烧友网 (elecfans.com)</a></p><p><a href="https://www.zhihu.com/question/324166754">ddr ，ddr2，ddr3，ddr4都有什么区别？ - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/33990592">HBM火了，它到底是什么？ - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/51354994">什么是CPU Die？ - 知乎 (zhihu.com)</a></p><p><a href="https://product.pconline.com.cn/itbk/diy/graphics/1112/2628133.html">GDDR是什么-太平洋IT百科 (pconline.com.cn)</a></p><p><a href="https://www.eefocus.com/mcu-dsp/423745">从GDDR1到GDDR6的详细资料都在这里-控制器&#x2F;处理器-与非网 (eefocus.com)</a></p><p><a href="https://new.qq.com/omn/20210709/20210709A028UC00.html">必看“芯”知识：SSD NAND Flash类型及主流厂商详情合集_腾讯新闻 (qq.com)</a></p><p><a href="https://www.cnblogs.com/emcc/p/5789513.html">关于SSD-主控、闪存和固件 - 寒汀暮雨钓孤舟 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.kingston.com.cn/cn/blog/pc-performance/nand-flash-technology-and-ssd">NAND 闪存技术和固态硬盘 (SSD) - 金士顿科技 (kingston.com.cn)</a></p><p><a href="https://blog.csdn.net/luohuatingyusheng/article/details/106636561">(1条消息) UFS–新一代高速存储_VirtuousLiu的博客-CSDN博客</a></p><p><a href="https://news.mydrivers.com/1/531/531065.htm">UFS&#x2F;eMMC到底是个啥？真相了-UFS,eMMC,闪存, ——快科技(驱动之家旗下媒体)–科技改变未来 (mydrivers.com)</a></p><p><a href="https://www.jedec.org/">Home | JEDEC</a></p><p><a href="https://baike.baidu.com/item/JEDEC/1684898">JEDEC_百度百科 (baidu.com)</a></p><p><a href="https://www.sohu.com/a/196510603_616364">选eMMC、UFS还是NVMe？ 手机ROM存储传输协议解析 (sohu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/344174968">Nand Flash 和Nor Flash的区别 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/26745577">杂谈闪存二：NOR和NAND Flash - 知乎 (zhihu.com)</a></p><p><a href="https://new.qq.com/omn/20210104/20210104A05DDO00.html">嵌入式存储产品发展趋势：uMCP取代eMCP序幕拉开_腾讯新闻 (qq.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/349600975">2021年存储卡内存卡推荐-类型速度品牌介绍，行车记录仪存储卡选择，手机内存卡监控高速存储卡推荐 - 知乎 (zhihu.com)</a></p><p><a href="https://www.sohu.com/a/204858985_132567">一文看懂博通的前世今生 (sohu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/387531418">欧洲半导体领军企业—意法半导体（STMicroelectronics）概览 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/tjcwt2011/article/details/72636862">(1条消息) 恩智浦+飞思卡尔后你需要知道的十件事_致守的博客-CSDN博客_恩智浦</a></p><p><a href="https://zhuanlan.zhihu.com/p/386860513">功率半导体领军企业—英飞凌（Infineon）概览 - 知乎 (zhihu.com)</a></p><p><a href="https://www.eefocus.com/mcu-dsp/354518">11张图片回顾摩托罗拉半导体历史，飞思卡尔已成过去式-控制器&#x2F;处理器-与非网 (eefocus.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/108196566">芯片战争-27：摩托罗拉半导体之霍根时代 - 知乎 (zhihu.com)</a></p><p><a href="https://www.jianshu.com/p/cba03ad36c48">荷兰皇家飞利浦—一个百年电子业巨头的前世今生 - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/161965316#">去年就已经散伙的松下半导体部门是如何成为华为救星的？ - 知乎 (zhihu.com)</a></p><p><a href="https://www.bilibili.com/video/BV17q4y1k7vo?spm_id_from=333.337.search-card.all.click">跌落神坛的日本半导体产业到底经历了什么？【差评君】_哔哩哔哩_bilibili</a></p><p><a href="https://finance.sina.com.cn/tech/2021-07-12/doc-ikqcfnca6394505.shtml">被申请破产重整，3000亿芯片巨头紫光集团到底发生了什么？|紫光集团|芯片|紫光_新浪科技_新浪网 (sina.com.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>半导体</tag>
      
      <tag>制造业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022美赛总结</title>
    <link href="/blog/post/Mathematics/SummaryOfMCM2022/"/>
    <url>/blog/post/Mathematics/SummaryOfMCM2022/</url>
    
    <content type="html"><![CDATA[<h1 id="备战"><a href="#备战" class="headerlink" title="备战"></a>备战</h1><p>2022年初，同学问我要不要参加美赛，我觉得是花费的假期的时间，不耽误开学后的上课，就一口答应了下来！<br>期末考试结束的第一天，我就开始询问学长的建议：主要就是跟着清风的是视频学完几个模型，再学习一下论文的排版和写作！</p><p>在家学习的效果不能说是特别好，优秀，良好，及格和不及格四个指标来打分的话，我给自己打<strong>良好</strong>！</p><p>在家不仅学习完了清风的大部分视频（因为一开始我就确定不做A,B两题了，后面更新的几章智能算法计划着到最后有时间再学一学），而且也做了笔记。所有的模型也都掌握了个七七八八了！也确实有些部分的知识没有掌握好！</p><p>这个假期学习数学建模熬了很多夜，平均在凌晨两点睡觉的，这个时候时间点也基本上都是在学习，手环记录的比这还晚之后入睡的基本都是玩手机玩的！</p><p>假期最后，学了美赛论文写作方法和论文的排版，这在美赛写作期间起了很大的作用！</p><p>2月15日一天没学习，2月16日就来到青岛了，和队友越好了早来一天时间，在学校附近的一个小旅馆应付了一晚上，讨论一下如何应对美赛！</p><p>2月17号进入校园，然后背着书包，拿着电脑去了HZZ(社团)的自习室，之后就傻眼了，钥匙被拿走了，等19号之后才能拿到钥匙。想了个办法去借钥匙，但是最后没能成功！于是就到教学区找了个地方学习！</p><h1 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h1><h2 id="2月18日，美赛第一天！"><a href="#2月18日，美赛第一天！" class="headerlink" title="2月18日，美赛第一天！"></a>2月18日，美赛第一天！</h2><h3 id="选题"><a href="#选题" class="headerlink" title="选题"></a>选题</h3><p>早上七点起床，到教室，看题！</p><p>A题 自行车手的功率分布，PASS！</p><p>B题 水和水电共享，PASS</p><p>C题 交易策略，关于资产配置的问题，数据分析和预测问题，可能回用到机器学习和回归分析，感觉有点意思，待定！</p><p>D题 数据分析？使用我们的分析！看不懂，没有很明确考的是什么！PASS！</p><p>E题 用进行碳封存的林业，可持续性发展问题，典型的环境类问题，考虑了一会，觉得有点难，待定！</p><p>F题 所有人一个（空间）！小行星采矿如何影响全球公平问题，很新颖，问题在于建立一个合理的模型，自圆其说，且需要大量的数据，待定！</p><hr><p>因为16，17号讨论的时候想的是，做E和F两题，这两天，针对这两文看了几篇论文，针对性学习了一下。于是在E和F两题中确定一个！</p><p>在第二次看题的时候，想了一下，E题思路不是很清晰，但F题确定了一个基本的方法，AHP——层次分析法！</p><p>使用AHP对不同国家进行打分，确定全球的一个公平程度。在引入小行星采矿这个量之后，该参数对之前全球公平模型进行度量，从而确定引入小行星采矿对全球公平的影响！初步思路完成！</p><p>第二步，开始找资料，这时候就傻眼了！关于全球公平度量的论文真的是少之又少，关于小行星采矿的论文不少，但是和我们的题目基本上没有什么关系。于是就遇到了美赛的第一个大问题——找不到相关的资料！</p><p>之后，队友就在找前几年的论文和网上的资料，看看能不能借鉴到一点东西。而我到谷歌学术我又回过头去看了一下前面的几个题目，重新对其分析，考虑难度和可行性。中午的时候都没有去吃饭，然后队友看到了一篇美赛O奖论文，用的层次分析法，两层指标，度量国家脆弱程度。然后我们将其更改了一下，用来度量全球公平程度！</p><p>之后，在建模过程中又遇到了问题，不知道有什么指标，因为实在是没有什么参考论文了！这时候已经是下午了，我们有了换题的打算，准备换C题，且看到网络上很多人选择了C题，C题给了数据，且知道一点思路。于是在C和F之间做权衡。因为C用到了机器学习，甚至会使用深度学习，我们担心编程会出问题，于是仍然选择了F题，毕竟也付出了半天的时间成本。</p><h3 id="定题"><a href="#定题" class="headerlink" title="定题"></a>定题</h3><p>在确定F题之后，下午到晚上6点多吃饭的期间，就找论文，找参数，最后是确定的四个大的因素。然后就开始了找数据，找的数据大部分都是出于世界银行（World Bank），Our World in Data，联合国（UN）。在找数据期间，也确定下来了影响四个因素的十六个指标。</p><p>然后直到晚上十一点左右，都在使用Excel进行数据的整理。数据收集和整理主要是队友B和我。</p><h2 id="2月19日，美赛第二天！"><a href="#2月19日，美赛第二天！" class="headerlink" title="2月19日，美赛第二天！"></a>2月19日，美赛第二天！</h2><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>上午和下午的时间基本上还是和昨天定题之后一行，队友B和我进行数据处理整合，最终汇集到了一个总的excel表格！</p><p><code>Excel的很多用法都不会，导致了在数据收集和整理的时候出现了很多问题，造成了时间的浪费！</code></p><p>比赛使用到编程的地方不多，只对收集完成的数据用了一次层次分析法。本来我是负责美赛的编程部分的，但是这次的建模基本上不需要编程，且层次分析法的代码早就已经有现成的了，队友直接把数据丢到程序中跑了一下，的出来了一些结果。</p><p>我在此之后绘制了几个流程图表格，并打算做一下数据可视化——使用FineBI进行世界地图的数据可视化。比赛之前只准备了中国和美国的Excel做地图可视化的模板，其他国家的也好做，但是做全球可视化真的没想到怎么做！先是使用Microsoft PoweBI尝试了一下，完全不知道怎么用，又去学习了一下使用FineBI，使用这个比较好上手，也有缺点是要求国家的名称是中文，但是之前在Excel统计的数据都是英文的，于是又使用了DeepL对excel转的PDF进行了翻译，然后又使用做了一个中文的表格，做了半天，最后的结果还是不错的，但是地球上的海洋是中文的，且没找到解决办法，并且打印出来的文件也有问题，一下午的操作没有什么成果！</p><p>队友A和B下午的时间在对模型进行完善，自圆其说，讨论了很多的方案，有的被否定了，也有的被加入到了模型中！</p><p>第一个模型就是用四个因素和16个指标度量全球公平。处理数据，得出全球各个国家的公平数值，然后用方差度量全球的公平程度，一些细节因素在想的过程中还是很难想的。</p><h3 id="换“战场”"><a href="#换“战场”" class="headerlink" title="换“战场”"></a>换“战场”</h3><p>晚上拿到了社团自习室的钥匙，于是就把阵地转移到了社团自习室，14小时通宵供电，无人监管，尽情的熬夜！</p><p>晚上的时间我仍然是在作图，主要使用Draw.io这款软件绘制流程图。</p><p>我在绘图的同时，与队友讨论并完善第一个模型，第一个模型还有很多说不通的地方。</p><h2 id="2月20日，美赛第三天！"><a href="#2月20日，美赛第三天！" class="headerlink" title="2月20日，美赛第三天！"></a>2月20日，美赛第三天！</h2><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>队友上午时间把第一个模型做的比较完善了，确定了参数之间的相互影响关系。由于之前数据可视化做的不好，实在是没什么办法了，我就采取了一个很笨拙的办法，在pixel map这个网页上下载了SVG格式的全球地图。然后把每个国家独立出来，一个个国家对照着excel表格进行填色。忙了将近三个小时，完成了数据量的一半左右，期间还与队友产生了分歧，关于数据可视化，队友A认为另一种指标来度量更好，而我觉得两种差不多，并且我已经做了很多了，推倒重来太可惜了，就产生了矛盾的和分歧，因为我在作图，我还是一意孤行坚持做完！我做到一半多的时候，因为实在是太繁琐，太麻烦，太浪费时间了，我就突然想到了Python！Python能做很多的高效工具啊！我之前怎么把这事儿给忘了！！！我平时使用Python其实挺多了，不知道为什么在关键时刻把它忘记了！</p><p>花了几分钟学习了一下Python的几个函数，看了几个例题，十来分钟就写出来了一个十几行的程序，然后运行程序，可视化地图一下子就做出来了！啊！！！我上午的时间又都被浪费了！有了这个Python程序之后，又把队友的指标参数做了可视化，最终确定队友的图像作为论文中的图像。</p><h3 id="第一个模型的写作"><a href="#第一个模型的写作" class="headerlink" title="第一个模型的写作"></a>第一个模型的写作</h3><p>中午没吃饭，下午两点多一起出超市买的面包，顺便也买了晚上的面包！吃完饭之后，都趴桌子上睡了一小会儿！</p><p>下午队友B开始把写作模型一的中文论文。这期间我没什么事情，我就在看网上学习了一下Python的Networkx库（寒假美赛期间就规划了学习这两个库，但是因为后期时间有点紧张，没有学），因为美赛更喜欢使用Matlab和Python做的图，但是我都是用Draw.io绘制的图形，就想学一学，看看能不能做出几个亮眼的图片。最后因为时间原因放弃了，只做了一个网络图，但最后并没有放到论文中。</p><p>晚上的时间就是把队友写好的文字进行翻译，之后再进行论文的排版，因为我看了清风的论文写作和排版的视频，我和队友B把第一本部分进行排版，队友A继续找参考资料，参考论文，进行第二个模型的建立。</p><h2 id="2月21日，美赛第四天！"><a href="#2月21日，美赛第四天！" class="headerlink" title="2月21日，美赛第四天！"></a>2月21日，美赛第四天！</h2><h3 id="上课-美赛"><a href="#上课-美赛" class="headerlink" title="上课&amp;美赛"></a>上课&amp;美赛</h3><p>今天开学了，上午的三四节和下午一下午我都有课，这期间我去上课了，队友没有这么多的课，这期间他们完成了第二个模型的初步建立。</p><p>下课之后，我回到了自习室，因为建立了新的模型，又需要我绘制结构图等，于是我再次绘制了几张图。同时需要一些数学函数图形，我就使用Geogebra软件，绘制了几个函数图形。</p><p>晚上的时间，共同商讨着完成了最后的模型。一起进行了模型二的修改，模型三是使用的优秀论文中的计算方法，比较快的就完成了。</p><p>图片什么得也基本都绘制完成了，最后就是写作部分了！</p><p>由于之前写作了不少，我们计划到22号凌晨两点之前完成所有的工作！但是计划不如变化。写作的论文中出现了一些尚未改正的参数，排版需要更改，公式需要编号等。这个部分由我和队友B完成了。完成了所有的工作之后，最后只剩下了Summary要写，这时候已经是凌晨两点了！</p><h2 id="2月22日，美赛第五天！"><a href="#2月22日，美赛第五天！" class="headerlink" title="2月22日，美赛第五天！"></a>2月22日，美赛第五天！</h2><h3 id="最后的冲刺！"><a href="#最后的冲刺！" class="headerlink" title="最后的冲刺！"></a>最后的冲刺！</h3><p>凌晨两点之后，我们三个都有点坚持不住了，就决定先休息一下，找了椅子拼凑了一下，凑合着睡了一个小时，有点冷！</p><p>三点起来，开始完成Summary，两个小时，三人商讨着完成了Summary，并检查了一下排版，确定了没什么问题之后，打印输出成PDF，在05:05发送了邮件，交上去了！</p><p>之后收拾完了，各自回去睡觉，第二天还有课要上！</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>我觉得这是一次不算特别成功的建模，但毕竟我们三人都只学习了一个月的时间，能做出这样子还算基本满意！</p><ul><li>本来计划是我负责编程部分，涉及到的数学太少了，没有多少程序可以写，然后在建模过程中迅速换了战略，主要进行收集数据，使用Python优势处理数据，使用Python和绘图软件绘制解释性的图片，也花了不少精力在论文排版。建模部分参与不算不多，第一个模型的建立还参与了一些，第二、三个模型建立的时候，一是在忙着绘图，二是需要上课，建模初期参与少，主要是提出想法完善模型。</li><li>因为是开放的题目，没有什么标准答案。第一个模型度量全球公平，我觉得比较新颖；第二个模型，引入了小行星采矿这个变量之后，对全球公平的影响，我觉得我们想的可能有点简单了，我觉得这里应该建立一个很大的模型，关于分配的模型，但是不知道用什么参数来衡量，我们最后的模型只做了很少一点这部分的内容。（当然也有可能是想法是错的）</li><li>学习时间太短了，只有差不多一个月的时间。因为前期不了解数学建模，以为Matlab会占据很大的部分，我就在年前系统性地学习了Matlab的语法。但是在实际使用中，用不到这么多复杂的东西，因此也浪费了很多的时间。年前学习清风的建模视频的时间比较少，导致了后面出现了学习时间紧张的问题。</li><li>论文写作也有点问题，大部分的内容都是直接翻译，复制粘贴的，只在最后检查了一下基本的语法，对其进行了少量的润色。特别是Summay部分，我觉得用的时间太少了，时间其实也算够了，主要还是大家有点熬不下去了，想快点解决，早交上去早结束。</li><li>前期学习的时候，没有进行实践，也没有读很多的论文，这也是一个很大的问题。没有什么经验，全凭着自我感觉，没有参数经验，问题还是挺大的！</li></ul><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>2022.5.6的上午正在上课，群里发来了一张截图！我们得到M奖！相当不错！在结果出来之前根本没想到能拿到这么好的奖项！班级里的其他队伍拿的是H或者是S奖，总体来说我们队伍是做的最好的！</p><p>仅此！</p><p>附：我们的荣誉！</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/Screenshot_20220506_133922.jpg"/></div>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模（二）</title>
    <link href="/blog/post/Mathematics/MathematicalModeling_2/"/>
    <url>/blog/post/Mathematics/MathematicalModeling_2/</url>
    
    <content type="html"><![CDATA[<h1 id="2022美赛备战"><a href="#2022美赛备战" class="headerlink" title="2022美赛备战"></a>2022美赛备战</h1><p><a href="https://www.bilibili.com/video/BV1Nr4y1U7Xg">2022年数学建模美赛备战参考——数学建模清风_哔哩哔哩_bilibili</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>MCM（数学建模竞赛）：A,B,C<br>ICM（交叉学科竞赛）：D,E,F</p><p>MCM要求更深的数学功底和变成基础<br>ICM要求写作和逻辑能力</p><p>A：连续型<br>B：离散型<br>C：数据挖掘<br>D：运筹学和网络科学<br>E：环境科学<br>F：政策相关的题目</p><h3 id="EF"><a href="#EF" class="headerlink" title="EF"></a>EF</h3><p>E,F是最简单的题目，题目要求我们自己收集数据，用到的模型：评价类模型，相关性分析，回归分析，拟合；<br>E,F比较开放，题目中的小问比较多，因此需要重视写作，论文的结构要求清晰<br>美赛不需要提交数据和代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">- 世界数据查找网站：https://www.gapminder.org/data/<br>- 国家数据查找：到每个国家的统计局官网<br>- 美赛的题目会给参考文献，可以使用参考文献的数据<br>- 实在找不到数据：根据实际和逻辑，自己编<br></code></pre></td></tr></table></figure><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>D题题目固定，涉及到图论，网络分析，优化问题<br>2020,2021:网络科学<br>matlab:centrality函数<br>python:networkx<br>网络结构可视化软件：gephi——<a href="https://gephi.org/">https://gephi.org/</a><br>运筹学：排队论，图论，选址优化</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>数据挖掘类题目，根据提供的数据分析出结论<br>回归分析，时间序列分析，传统机器学习模型<br>近年来出现了深度学习：2020自然语言处理，2021图像分类<br>深度学习：B站李沐——<a href="https://space.bilibili.com/1567748478">https://space.bilibili.com/1567748478</a><br>机器学习：<a href="https://www.bilibili.com/video/BV1v64y1B7vJ">https://www.bilibili.com/video/BV1v64y1B7vJ</a></p><h3 id="A-B"><a href="#A-B" class="headerlink" title="A B"></a>A B</h3><p>A——连续<br>问题中的变量因素是连续变化的，如温度，时间等<br>B——离散<br>问题中的变量因素是离散变化的，如数量<br>连续：微分方程<br>离散：差分方程</p><p>A和B可能会出现一道物理题目，涉及到热力学，流体力学，信号处理<br>B题目：可能是离散型优化问题，即组合优化问题——智能算法：遗传算法，模拟退火算法</p><p>A,B,D可能会用到元胞自动机模型（多主体建模），使用Netlogo仿真模拟软件</p><hr><h1 id="常用模型和算法"><a href="#常用模型和算法" class="headerlink" title="常用模型和算法"></a>常用模型和算法</h1><p><a href="https://www.bilibili.com/video/BV1B54y1U7rF">数学建模竞赛常考三大模型及十大算法_哔哩哔哩_bilibili</a></p><h2 id="三大模型"><a href="#三大模型" class="headerlink" title="三大模型"></a>三大模型</h2><h3 id="预测模型（中等难度）"><a href="#预测模型（中等难度）" class="headerlink" title="预测模型（中等难度）"></a>预测模型（中等难度）</h3><blockquote><p>神经网络预测、灰色预测、拟合插值预测（线性回归）、时间序列预测、马尔科夫链预测、微分方程预测、Logistic 模型等等。<br>应用领域：人口预测、水资源污染增长预测、病毒蔓延预测、竞赛获胜概率预测、月收入预测、销量预测、经济发展情况预测等在工业、农业、商业等经济领域，以及环境、社会和军事等领域中都有广泛的应用。</p></blockquote><h3 id="优化模型（偏难）"><a href="#优化模型（偏难）" class="headerlink" title="优化模型（偏难）"></a>优化模型（偏难）</h3><blockquote><p>规划模型（目标规划、线性规划、非线性规划、整数规划、动态规划）、图论模型、排队论模型、神经网络模型、现代优化算法（遗传算法、 模拟退火算法、蚁群算法、禁忌搜索算法）等等。<br>应用领域：快递员派送快递的最短路径问题、水资源调度优化问题、高速路 口收费站问题、军事行动避空侦察的时机和路线选择、物流选址问题、商区布局规划等各个领域。</p></blockquote><h3 id="评价模型（偏简单）"><a href="#评价模型（偏简单）" class="headerlink" title="评价模型（偏简单）"></a>评价模型（偏简单）</h3><blockquote><p>模糊综合评价法、层次分析法、聚类分析法、主成分分析评价法、 灰色综合评价法、人工神经网络评价法等等。<br>应用领域：某区域水资源评价、水利工程项目风险评价、城市发展程度评价、足球教练评价、篮球队评价、水生态评价、大坝安全评价、边坡稳定性评价</p></blockquote><h2 id="十大算法"><a href="#十大算法" class="headerlink" title="十大算法"></a>十大算法</h2><ol><li><p>蒙特卡洛算法<br>又称为随精选模拟算法，<br>是通过计算机仿真来解决问题的算法，同时可以通过模拟来检验自己模型的正确性，是比赛时，必用的方法</p></li><li><p>数据处理算法<br>数据拟合，参数估计，插值等：<br>比赛在通常会遇到大量的数据需要处理，而处理数据的关键就在于这些算法，通常使用matlab作为工具</p></li><li><p>规划类问题算法<br>线性规划，整体规划，多元规划，二次规划等规划类问题：<br>建模比赛中大数问题属于最优化问题，很多时候这些问题可以用数学规划算法来解决，通常使用Lindo，Lingo等软件实现</p></li><li><p>图论算法<br>最短路径，网络流，二分图等算法</p></li><li><p>动态规划，回溯搜索，分治算法，分支定界</p></li><li><p>最优化理论三大经典算法<br>模拟退火算法，遗传算法，神经网络</p></li><li><p>网格算法，穷举法</p></li><li><p>连续离散化方法</p></li><li><p>数值分析算法</p></li><li><p>图像处理算法</p></li></ol><hr><h1 id="美赛论文写作"><a href="#美赛论文写作" class="headerlink" title="美赛论文写作"></a>美赛论文写作</h1><p><a href="https://www.bilibili.com/video/BV1Na411w7c2?p=23">数学建模清风——论文写作方法教程（国赛和美赛）_哔哩哔哩_bilibili</a><br><a href="https://www.comap.com/undergraduate/contests/mcm/instructions.php">MCM: The Mathematical Contest in Modeling (comap.com)</a></p><p>2022 Contest Dates and Times:</p><p>Registration Deadline: Before 3:00 p.m. EST on Thursday, February 17, 2022.<br>Contest Starts: 5:00 p.m. EST on Thursday, February 17, 2022.<br>Contest Ends: 8:00 p.m. EST on Monday, February 21, 2022.<br>Solution Report Deadline: 9:00 p.m. EST on Monday, February 21, 2022.<br>Contest Results: The results will be posted on or before May 20, 2022.</p><p>2022美赛的关键时间节点报名截止时间 美国东部时间2022年2月17日 15:00之前（星期四） 北京时间2022年2月18日 凌晨4:00之前（星期五）<br>比赛开始时间 美国东部时间2022年2月17日 17:00（星期四） 北京时间2022年2月18日 上午6:00（星期五）<br>比赛截止时间 美国东部时间2022年2月21日 20:00（星期一） 北京时间2022年2月22日 上午9:00（星期二）<br>提交方案截止时间 美国东部时间2022年2月21日 21:00（星期一） 北京时间2022年2月22日 上午10:00（星期二）<br>比赛结果公布时间 美国东部时间2022年5月20日之前发布</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213141412720.png"/></div><h2 id="Summary-Sheet-摘要页（超级重要）"><a href="#Summary-Sheet-摘要页（超级重要）" class="headerlink" title="Summary Sheet 摘要页（超级重要）"></a>Summary Sheet 摘要页（超级重要）</h2><p>布局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">开头段（必要）<br>- 3-5行，2-3句话 <br>针对问题1<br>针对问题2<br>针对问题3<br>结尾段（可选）<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">开头段（必要）<br>- 3-5行，2-3句话 <br>Firstly<br>Then<br>Next<br>Finally<br>结尾段（可选）<br></code></pre></td></tr></table></figure><p>不能超过一页，读者在不阅读全文的情况下，就能获得必要的信息</p><p>摘要包含的三要素：解决了什么问题，应用了什么方法， 得到了什么结果</p><p>概括全文，行文简洁，突出论文的新见解，新方法和特色，不能有主观性</p><p>摘要是其他部分都写完之后，再来书写（半天时间）</p><ul><li><strong>摘要的开头段</strong></li></ul><p>三句话，三到五行</p><p>第一句话简单交代题目的背景（可选）</p><p>第二句话交代你们所作的事情（最重要）</p><p>第三句话说以先解决这个问题的实际意义（少部分论文有）</p><ul><li><strong>摘要的中间段</strong></li></ul><p>解决了什么问题，应用了什么方法， 得到了什么结果</p><ol><li>解决了什么问题：不单独提出我们要解决的问题，因为后面的两个要素会提到</li><li>应用了什么方法：紧扣题目</li><li>得到了什么结果：<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213143507222.png"/></div></li></ol><ul><li><strong>摘要的结尾段</strong></li></ul><p>介绍论文的亮点，对类似问题进行适当的推广</p><p>如果不会写的话，可以不写结尾段</p><ul><li>不要出现的废话<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213144115302.png"/></div></li><li>论文的标题title和关键词key world</li></ul><p>标题和关键词要求不严格</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213144636944.png"/></div><h2 id="Contents-目录"><a href="#Contents-目录" class="headerlink" title="Contents 目录"></a>Contents 目录</h2><p>目录快速生成——排版课程</p><h2 id="正文1-Introduction-引言"><a href="#正文1-Introduction-引言" class="headerlink" title="正文1 Introduction 引言"></a>正文1 Introduction 引言</h2><p>引言包含了两到三个小部分</p><ol><li><strong>Problem Background 问题背景</strong></li></ol><p>总结题目所给的背景</p><p>结合自己对赛题的理解，讲背景介绍有侧重的往自己研究的方向去靠</p><ol start="2"><li><p><strong>Restatement of the Problem 问题重述</strong></p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213145515405.png"/></div>1和2可以合并为一点</li><li><p><strong>Literature Review 文献综述</strong></p></li></ol><p>这部分主要是总结以前的学者针对这个问题已经做的研究。事实上，绝大多数期刊发表的论文都会有文献综述部 分。但在美赛特等奖论文中，只有不到30%的论文有这一部分，不是说这部分不重要，而是这一部分很难写。</p><p>注意：文献综述本身就是一种文体，可以作为论文独立发表，也可以放在论 文中作为独立的一个部分；我们在美赛中写的文献综述不需要达到上面定义写的<br>这么严格的标准。</p><blockquote><p>总结写作特点： 有很多学者都研究过这个问题(红色圈出来的编号就是参考文献的标记)，其中： </p><ul><li><p>某某学者建立了某某模型或者使用了某某方法研究了这个问题； </p></li><li><p>某某学者通过研究了这个问题得到了某某结论。</p></li></ul><p>技巧：文献综述中的文章能直接和你的论文中使用的模型或者得到的结论相互呼应！</p></blockquote><ol start="4"><li><strong>Our work 我们的工作</strong></li></ol><blockquote><p>大家如果看特等奖论文的话，会发现很多论文在这 一部分都绘制了一个漂亮的图形来介绍文章的思路，大<br>家可以模仿模仿。</p></blockquote><h2 id="正文2-Assumptions-and-Justifications-模型假设"><a href="#正文2-Assumptions-and-Justifications-模型假设" class="headerlink" title="正文2 Assumptions and Justifications 模型假设"></a>正文2 Assumptions and Justifications 模型假设</h2><p>美赛要求较高</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213151907484.png"/></div><h2 id="正文3-Notations-符号说明"><a href="#正文3-Notations-符号说明" class="headerlink" title="正文3 Notations 符号说明"></a>正文3 Notations 符号说明</h2><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213152534231.png"/></div>Glossary——术语汇编<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213152632036.png"/></div><h2 id="正文4-5-6-模型的建立与求解-正文最重要的部分"><a href="#正文4-5-6-模型的建立与求解-正文最重要的部分" class="headerlink" title="正文4 5 6 模型的建立与求解(正文最重要的部分)"></a>正文4 5 6 模型的建立与求解(正文最重要的部分)</h2><blockquote><p>模型建立：模型建立是将原问题抽象成用数学语言的表达式，它一定是在先 前的问题分析和模型假设的基础上得来的。因为比赛时间很紧，大多时候我们都是 使用别人已经建立好的模型。这部分一定要将题目问的问题和模型紧密结合起来， 切忌随意套用模型。我们还可以对已有模型的某一方面进行改进或者优化，或者建 立不同的模型解决同一个问题，这样就是论文的创新和亮点。 </p><p>模型求解：把实际问题归结为一定的数学模型后，就要利用数学模型求解所 提出的实际问题了。一般需要借助计算机软件进行求解，例如常用的软件有Matlab, Spss, Lingo, Excel, Stata, Python等。求解完成后，得到的求解结果应该规范准确并且 醒目，若求解结果过长，最好编入附录里。（注意：如果使用智能优化算法或者数值计算方法求解的话，需要简要阐明算法的计算步骤）</p></blockquote><p>每个模型作为一个单独的大标题</p><p>而美赛的命名方式五花八门，有些 论文使用建立的模型的名称命名；有些使用论文要解决 的问题命名；也有些论文使用和国赛一样简单粗暴的方<br>式命名。</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213152743785.png"/></div><p>可以以要解决的问题命名也可以以求解问题命名</p><blockquote><p>明确题意后，简述基本思路。首先，简要介绍利用的基本原理和基本思 想，再进行构建基本模型，如数学表达式、算法流程图等，要明确说明解题 的思想和思路，有逻辑性、合理性、可行性，需要完整叙述。也可以结合实 际问题，进行改进和完善基本模型，使其能有效、实用解决问题。 </p><p>三点要求： </p><ol><li>必须要有数学模型：即数学公式组成的一套数学结构、或者是一套 数学的解决方案等； </li><li>模型要求表达完整，正确和简明；</li><li>模型要有实用性，要能求解出来，以能够解决问题为原则。</li></ol></blockquote><p>模型求解的注意事项：</p><p>1）国赛中常出优化类问题，如果你用到了启发式算法求解的话，一定要简 要写明算法步骤，并要结合具体的问题来阐明计算的思路。</p><p>2）求解的结果应该在论文中突出的展示出来，有具体答案的问题比较简单， 直接放上数值计算结果即可；如果是开放类问题的话，一定要对结果进行阐明<br>和解释，如果能加上美观整洁的图表就更好了。</p><h2 id="正文-Data-Description-数据描述-不常见"><a href="#正文-Data-Description-数据描述-不常见" class="headerlink" title="正文 Data Description 数据描述(不常见)"></a>正文 Data Description 数据描述(不常见)</h2><blockquote><p>Data Description翻译过来就是数据描述。注意，这部分内容不是必须 的，大家根据自己的需要来进行添加。<br>如果自己收集了数据或者题目给了数据的话，可以先对数据进行一个 简单的介绍，或者将数据可视化，然后再从图形中得到一些直观的结论。<br>这里给大家一些相关的术语的翻译：</p><p> • Data Collection(数据的收集) </p><p>• Data Pre-processing(数据预处理) &#x2F; Data Cleaning(数据清洗) </p><p>• Data Visualization(数据可视化) </p><p>• Descriptive Statistical Analysis of the Data(数据的描述性统计分析) </p><p>​这部分内容在论文中的<strong>位置也比较灵活</strong>，我们可以将这个内容放到模型的建立与求解中，也有部分论文放在了引言部分，还有的论文将这个内容放到“Model Preparation模型准备”这个部分，这种见得比较少，我们之前 在国赛论文框架中介绍过模型准备的写法。特别的，<strong>如果做的是美赛C题 （C题一般是数据分析类型的题目），我们可以把这个部分单独作为一个大的部分，然后进行数据预处理和数据可视化分析。</strong></p></blockquote><h2 id="正文7-Sensitivity-Analysis-灵敏度分析（重要）-不是很懂"><a href="#正文7-Sensitivity-Analysis-灵敏度分析（重要）-不是很懂" class="headerlink" title="正文7 Sensitivity Analysis 灵敏度分析（重要）(不是很懂)"></a>正文7 Sensitivity Analysis 灵敏度分析（重要）(不是很懂)</h2><p><a href="https://zhuanlan.zhihu.com/p/69059271">数学建模中的灵敏度分析，到底在分析什么？ - 知乎 (zhihu.com)</a></p><blockquote><p>在这个部分中，我介绍了灵敏度分析、误差分析和稳定性检验的写法， 其中稳定性检验和灵敏度分析非常类似，因此大家要掌握的就是前面两种分 析的写法。 </p><p>在美赛的写作中，写的最多的就是灵敏度分析，因此这里我们的标题就直接取得是Sensitivity Analysis; 如果你既要写灵敏度分析，又要写误差分析， 那么你可以把标题改成： Sensitivity Analysis and Error Analysis. 注意： • 误差分析一般翻译为：Error Analysis • 稳定性检验的别称较多，还可以称为稳健型检验或稳健型分析，因此它的翻译也较多，可翻译为：Stability Test、 Robustness Test或者Robustness Analysis</p></blockquote><blockquote><p>模型的分析 ：在建模比赛中模型分析主要有两种，一个是灵敏度(性)分析， 另一个是误差分析。灵敏度分析是研究与分析一个系统（或模型）的状态或输出 变化对系统参数或周围条件变化的敏感程度的方法。其通用的步骤是：控制其他 参数不变的情况下，改变模型中某个重要参数的值，然后观察模型的结果的变化 情况。误差分析是指分析模型中的误差来源，或者估算模型中存在的误差，一般 用于预测问题或者数值计算类问题。 </p><p>模型的检验：模型检验可以分为两种，一种是使用模型之前应该进行的检验，例如层次分析法中一致性检验，灰色预测中的准指数规律的检验，这部分内容应该放在模型的建立部分；另一种是使用了模型后对模型的结果进行检验，数模中 最常见的是稳定性检验(有的论文也称为稳健型检验或稳健型分析)，实际上这里的稳定性检验和前面的灵敏度分析非常类似，等会大家看到例子就明白了。</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/2022-02-13_15-15-37-29.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/2022-02-13_15-15-37-36.png"/></div><h2 id="正文8-Model-Evaluation-and-Further-Discussion-模型的评价和进一步的讨论"><a href="#正文8-Model-Evaluation-and-Further-Discussion-模型的评价和进一步的讨论" class="headerlink" title="正文8  Model Evaluation and Further Discussion 模型的评价和进一步的讨论"></a>正文8  Model Evaluation and Further Discussion 模型的评价和进一步的讨论</h2><p>该部分可以翻译为模型的评价和进一步的讨论，对应于国赛框架中的模 型的评价、改进与推广部分</p><blockquote><p>我们可以把这个大的部分拆分成三个小部分写： </p><p>（1）Strengths 这里写论文或者模型的优点<br>（2）Weaknesses 这里写缺点：缺点写的个数一般要比优点少<br>（3） Further Discussion 进行进一步的讨论，这里可以写模型的改进和拓展。<br>            模型改进：Model Improvements 模型拓展：Model Extensions<br>        （这里单词写的都是复数形式，如果你只写了一点就改成单数形式）<br>另外，本部分的标题需要根据你的内容进行调整，例如：如果你没有写进一步讨论的话，就直接把标题写成模型的评价Model Evaluation 。</p></blockquote><h2 id="正文9-Conclusion-结论"><a href="#正文9-Conclusion-结论" class="headerlink" title="正文9 Conclusion 结论"></a>正文9 Conclusion 结论</h2><blockquote><p>Conclusion翻译过来就是结论，这个部分在国赛论文几 乎见不到，但在美赛中出现的频率很高。 </p><p>这个部分可以是论文中心思想的重申、研究结果或主要 观点的归纳，也可以是某些启示性的解释或考虑。 </p><p>有些论文把“Model Evaluation and Further Discussion”的 内容放到了结论部分.</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213155550897.png"/></div><p><strong>注意区分这三个部分！！！！！！</strong></p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213155712049.png"/></div><h2 id="References-参考文献"><a href="#References-参考文献" class="headerlink" title="References 参考文献"></a>References 参考文献</h2><blockquote><p> 本部分是参考文献，在美赛中，参考文献不要出现中文！ 如果要引用中文论文或者书籍怎么办？请自己翻译</p></blockquote><h2 id="Appendices-附录"><a href="#Appendices-附录" class="headerlink" title="Appendices 附录"></a>Appendices 附录</h2><p>附录中的代码也不要出现中文注释，也就是任何地方都不要出现中文</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213155934177.png"/></div><h2 id="Article-杂志文章"><a href="#Article-杂志文章" class="headerlink" title="Article 杂志文章"></a>Article 杂志文章</h2><p>美赛有些题目会要求大家给某个杂志写一篇文章(Article)</p><blockquote><p>（1）2020A题 In addition to your technical report, prepare a one- to two-page article for Hook<br>Line and Sinker magazine to help fishermen understand the seriousness of the problem and how your proposed solution(s) will improve their future business prospects.</p><p> 除了你的技术报告，准备一到两页的文章，作为Hook Line and Sinker 的杂 志内容，以帮助渔民了解问题的严重性，以及你的解决方案将如何改善他们未 来的业务前景。<br>（2）2020B题 Finally, write an informative, one- to two-page article describing your model and<br>its results for publication in the vacation magazine: Fun in the Sun, whose readers are mainly non-technical.<br>最后，写一篇内容丰富的一到两页的文章，描述你的模型及其结果，发表<br>在假期杂志上：Fun in the Sun ，读者都是小白，不懂太复杂的模型。</p><p>文章中不要写太过专业的话，确保你的读者能读得懂！</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213160515523.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213160344273.png"/></div><h2 id="Letter-写信"><a href="#Letter-写信" class="headerlink" title="Letter 写信"></a>Letter 写信</h2><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213160657899.png"/></div><h2 id="Memo-备忘录"><a href="#Memo-备忘录" class="headerlink" title="Memo 备忘录"></a>Memo 备忘录</h2><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213160759139.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213160811182.png"/></div><hr><h1 id="美赛论文排版"><a href="#美赛论文排版" class="headerlink" title="美赛论文排版"></a>美赛论文排版</h1><p><a href="https://www.bilibili.com/video/BV1Ci4y1c7Ld">数学建模清风——论文排版教程_哔哩哔哩_bilibili</a></p><p>LaTex学习成本太大了，因此使用Word进行排版。</p><blockquote><p>优秀论文共同特点： </p><p>（1）整体结构完整，大多数论文都是使用<strong>三级标题式</strong>进行布局； </p><p>（2）论文正文部分排版<strong>紧凑</strong>，没有大段空行，内容看上去翔实； </p><p>（3）表格整洁，一般使用<strong>三线表形式</strong>，<strong>表格上方有对应的标题</strong>； </p><p>（4）图形清晰美观，<strong>下方有对应的标题</strong>，文中要解释图形意义；（表上图下）</p><p>（5）公式编辑规范，大部分论文使用公式编辑器，且带有编号。</p></blockquote><h2 id="Word-基础知识"><a href="#Word-基础知识" class="headerlink" title="Word 基础知识"></a>Word 基础知识</h2><p><strong>F4</strong>键的作用是重复上一步操作，在PPT和Excel中也是同样的作用。</p><p>首行缩进不要打两个空格，应该在开始-段落中设置首行缩进</p><p>Ctrl+Enter：分页符</p><p>Delete：<strong>大多数时候我们删除某个内容使用的都是退格键，但有时候排版的时候，你会发现使用退格键删除后论文的排版格式乱掉了（特别是有表格需要排版的时候用的很多），这时候可以考虑使用删除键。我们以后遇到了再来给大家强调这一点。</strong></p><p>格式刷：先复制需要的格式，然后点击格式刷，点击格式刷一次，只能进行一次格复制，点击两次能进行无数次格式复制</p><p>左对齐，居中对齐，右对齐，两端对齐，分散对齐</p><p>项目符号，编号，多级列表</p><h2 id="样式和多级列表"><a href="#样式和多级列表" class="headerlink" title="样式和多级列表"></a>样式和多级列表</h2><p>引用-目录：插入目录</p><p>论文模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">（1）论文的首页是摘要页，论文标题使用三号黑体，摘要两个字使用四号黑体， 关键词两个字使用小四黑体。 <br>（2）论文的正文部分使用小四宋体(中文)和小四Times New Roman字体(西文)， 行距设置为单倍，首行缩进两个字符。 <br>（3）一级标题使用四号黑体，无缩进居中对齐，段前段后6磅，单倍行距，编号 使用“一、二、三、四、”等。<br>（4）二级标题使用小四黑体，无缩进左对齐，段后6磅，单倍行距，编号使用 “1.1 1.2 2.1 2.2 2.3 ”等。 <br>（5）三级标题使用小四黑体，无缩进左对齐，单倍行距，编号使用“3.1.1 3.1.2 5.3.1 5.3.2 ”等。不建议使用三级以上的标题，看起来太长了。 <br>（6）论文中的图片、表格居中对齐，无缩进；表格上方和图片下方的标题使用五号宋体加粗(中文)和五号Times New Roman字体加粗(西文)，无缩进，居中对齐。<br></code></pre></td></tr></table></figure><h2 id="表格的制作和排版"><a href="#表格的制作和排版" class="headerlink" title="表格的制作和排版"></a>表格的制作和排版</h2><p>三线表</p><p>使用边框刷子：点顶线：1.5磅；栏目线：0.75磅；底线：1.5磅</p><p>文字：水平居中</p><p>分布行，分布列：把表格的行和列都变成一样大小</p><p>制作三线表的模板</p><p>长表格的处理：excel预处理</p><p>宽表格的处理：excel预处理</p><p>两个并排的独立表格：excel预处理</p><p>有合并单元格的表格：先用excel预处理，断点用白色的边框替代</p><p>Stata的回归结果表格：</p><p>SPSS输出的表格：</p><p>文章或报告的封面：</p><p>自动生成表的标题：选中表格-引用-插入题注</p><p>文章的内容与表格相关联，如：结果请见表2，引用-交叉引用</p><p>Ctrl+A，全选，然后按F9，可以刷新整篇文章</p><p>文字与表格或者图像之间的间距可以设置为0.5行</p><h2 id="图形的制作和排版"><a href="#图形的制作和排版" class="headerlink" title="图形的制作和排版"></a>图形的制作和排版</h2><p>国赛中的图要求简约</p><p>美赛中的图要求美观，吸人眼球</p><p>图片首先设置无缩进，然后居中对齐，再在图片下边写上编号和图片的标题</p><p>（记住：表上图下，即表的标题在上面，图的标题在下 面）</p><p>图片的制作</p><ol><li>matlab或者python</li><li>excel，spss，origin</li><li>展示模型或者算法过程的流程图</li><li>描述问题分析或者建模思路的示意图</li></ol><p>使用PPT绘制思维导图——SmartArt</p><p>Xmind</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220213224256653.png"/></div>绘制示意图——PPT，Draw.io<p>绘制带用矢量图的示意图——阿里巴巴矢量图库，Islide矢量图插件，Draw.io</p><p>对图像的加工——PPT等</p><p>流程图的绘制：Draw.io</p><p>物理示意图的绘制：PPT，AxGraph(有水印)</p><p><a href="https://www.geogebra.org/download">应用下载 – GeoGebra</a></p><p><a href="https://echarts.apache.org/zh/index.html">Apache ECharts</a></p><p><a href="https://www.tableau.com/zh-cn">商业智能和分析软件 (tableau.com)</a></p><p><a href="https://powerbi.microsoft.com/zh-cn/">数据可视化 | Microsoft Power BI</a></p><p>社会网络图</p><ul><li>手动：Gelphi，<a href="https://www.yworks.com/products/yed/download">yEd - Graph Editor (yworks.com)</a></li><li>python的nerworkx包</li></ul><p>地理数据可视化GIS——经纬度可视化</p><ul><li>专业：ArcGIS，MapGIS，supermap</li><li>Tableau，Power BI</li><li>python的folium包</li></ul><p>使用Excel地图数据可视化——中国和美国的地图都有了</p><p>对任意国家的地图进行可视化设计：<a href="https://pixelmap.amcharts.com/">Pixel Map Generator | amCharts</a>（中国地图有问题）</p><p>图例，用PPT中的<strong>表格</strong></p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/2022-02-14_00-00-16-30.png"/></div>中国以及各个省市的地图：[阿里云 DataV - 数据可视化平台 (aliyun.com)](http://datav.aliyun.com/portal/school/atlas/area_selector)<h2 id="公式的编辑和排版"><a href="#公式的编辑和排版" class="headerlink" title="公式的编辑和排版"></a>公式的编辑和排版</h2><p>LaTex：<a href="https://www.latexlive.com/">在线LaTeX公式编辑器-编辑器 (latexlive.com)</a></p><p><a href="https://www.bilibili.com/video/BV1op4y1D76H">【老湿基】为妈咪叔 LaTeXLive.com 网页程序打call｜侠之大者，为国为民！_哔哩哔哩_bilibili</a></p><p>Word自带的公式编辑器：alt和&#x3D;同时按下</p><p>AxMath：免费部分功能</p><p>MathTpye：收费</p><p>将公式识别为LaTex代码：<a href="https://mathpix.com/">Mathpix Snip</a>，Mathpix每个月能免费用50次</p><p><a href="https://www.latexlive.com/">在线LaTeX公式编辑器-编辑器 (latexlive.com)</a>：也可以进行公式的识别</p><p>AxMath：</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214004439674.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214004724731.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214005116987.png"/></div><p>公式的自动编号</p><p>行内公式</p><p>行间公式——编号</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214005458220.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214010134567.png"/></div><p>插入公式时候出现的问题</p><ul><li>公式上浮问题</li></ul><p>选中段落，右键-段落-中文版式-将文本对齐方式改为居中-确定</p><ul><li>公式的间距过大——行内公式</li></ul><p>选中段落，右键-段落-取消勾选下面的这两个框</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214010959284.png"/></div><ul><li>公式编辑器中不要出现中文</li></ul><h2 id="参考文献的排版"><a href="#参考文献的排版" class="headerlink" title="参考文献的排版"></a>参考文献的排版</h2><blockquote><p>要求：所有引用他人或公开资料(包括网上资料)的成果必须按科技论文的规范 列出参考文献，并在正文引用处予以标注(引用-交叉引用)。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">我这里教给大家三种方案： <br>（1）自己手动设置参考文献（数模论文的参考文献不是很多，而且要求也没有那 么严格，因此推荐大家在数学建模比赛的论文中使用，这样比较节省时间） <br>（2）使用专业的文献管理软件，例如EndNote（需要下载软件并学习额外的操作， 如果你以后不走学术路线的话，可能使用的机会不是很多）<br>（3）Word自带的插入引文功能（插入引文的操作比较繁琐，不推荐大家使用）<br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214011920164.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214012125588.png"/></div><h2 id="附录的排版"><a href="#附录的排版" class="headerlink" title="附录的排版"></a>附录的排版</h2><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214012252380.png"/></div><p>代码高亮：<a href="https://highlightcode.com/">代码在线高亮工具 | 将高亮美化的代码一键粘贴到 Word 或 OneNote 中 (highlightcode.com)</a></p><p><a href="https://c.runoob.com/front-end/5536/">代码在线高亮 | 菜鸟工具 (runoob.com)</a></p><p><a href="https://tool.oschina.net/highlight">在线代码着色高亮 (oschina.net)</a></p><p><a href="http://codeinword.com/">CodeInWord|在word中优雅展现的代码|代码高亮|word中插入代码|代码格式化</a></p><p><a href="https://paste.ubuntu.com/">Ubuntu Pastebin</a>——支持Matlab</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214012659226.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214012756225.png"/></div><h2 id="美赛论文排版要求"><a href="#美赛论文排版要求" class="headerlink" title="美赛论文排版要求"></a>美赛论文排版要求</h2><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214013552953.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214014713227.png"/></div><p>目录过长，目录页超过了一页，可以把显示级别设置为2</p><p>用表格设置并排的图片</p><p>表格的嵌套</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214014923651.png"/></div><p>英文段字效果</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214015117427.png"/></div><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p><a href="https://www.bilibili.com/video/BV1v64y1B7vJ">数学建模清风第四次直播：利用matlab快速实现机器学习_哔哩哔哩_bilibili</a></p><p><a href="https://pan.baidu.com/s/1JtYzyBq00jaKHascLLo2ig">资料</a>——提取码：kkkk</p><h2 id="基本概念和分类"><a href="#基本概念和分类" class="headerlink" title="基本概念和分类"></a>基本概念和分类</h2><p>机器学习：</p><p>书中对于机器学习的一个定义： </p><p>机器学习正是这样一门学科,它致力于研究如何 通过计算的手段,利用经验来改善系统自身的性能.在计算机系统中，“经验”通常以 “数据”形式存在,</p><p>因此,机器学习所研究的主要内容,是关于在计算机上从数据中产 生“模型”(model)的算法，即“学习算法”(learning algorithm).</p><p>有了学习算法,我 们把经验数据提供给它,它就能基于这些数据产生模型;在面对新的情况时(例如看到一个没剖开的西瓜),模型会给我们提供相应的判断(例如好瓜)．</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/2022-02-14_13-13-35-12.png"/><p>机器学习：监督学习（supervised learning），无监督学习(unsupervised learning)，强化学习(reinforcement learning)，半监督学习(semi-supervised learning)，主动学习(active learning)</p><h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><p>监督学习是指从标注数据中学习预测模型的机器学习问题。标注数据表示输入输出的对应关系，预测模型对给定的输入产生响应的输出。监督学习的本质是学习输入到输出的映射统计规律。</p><p>翻译成白话：我们的数据既有输入变量又有输出变量（既有特征 feature 又有标签 label），我们要找到输入变量和输出变量之间的关系。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214134238920.png"/><p>监督学习根据<strong>输出变量Y的数据类型不同</strong>，又可以分成两种类型： </p><p>（1） 当<strong>输出变量Y取有限个离散值</strong>时，称为<strong>分类问题</strong>。 </p><blockquote><p>举例：</p><p>  判断西瓜的好坏（好瓜&#x2F;坏瓜） </p><p> 判断肿瘤的性质（良性&#x2F;恶性） </p><p> 根据鸢尾花的花萼长度、花萼宽度、花瓣长度和花瓣宽度这四个指标来判断它的种类（山鸢尾&#x2F;杂色鸢尾&#x2F;维吉尼亚鸢尾）</p><p>在分类问题中，当Y只取两类时，我们称为二分类问题，</p><p>当分类的类别为多个时， 称为多分类问题。</p></blockquote><p>（2） <strong>输出变量Y为连续型变量</strong>，称为<strong>回归问题</strong>。（此回归非彼回归） </p><blockquote><p>举例： </p><p> 给定房屋的一些信息（户型、是否靠近地铁等），预测房价<br> 给定土地的施肥量，预测农作物的产量</p></blockquote><h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>无监督学习是指从无标注数据中学习预测模型的机器学习问题。无标注数据是自然得到的数据，预测模型表示数据的类别、转换或概率。无监督学习的本质是学习数据中的统计规律或潜在结构。 </p><p>翻译成白话：我们的数据全部都是输入变量，没有输出变量。我们希望得到数据之间隐藏着的结构和规律。</p><p>无监督学习最常见的两种用法：聚类和降维。 </p><blockquote><p>聚类的例子：银行收集了客户的许多个人信息，根据这些个人信息可以将客户划 分到不同的用户群体（例如：贵宾客户、重点客户、普通客户、可能流失的客户等）， 银行可以为不同的用户群体制定出相应的个性化营销方案。 </p><p>降维的例子：输入变量的维度太大（指标个数太多了），我们需要通过降维的方法来构造出少数几个指标，这几个指标能保留原来这些输入变量的绝大部分信息。</p></blockquote><p>注意：有很多同学区分不开<strong>聚类和分类</strong>的概念，事实上你只要知道<strong>监督学习和无监督学习的核心区别就行了（有无输出变量Y）</strong>。</p><p><strong>在分类中，类别是已知的；而在聚类中，类别是不知道的</strong>，我们是通过数据的特征属性将数据划分到某几类中，这几个类代表的含义需要我们自己根据聚类的结果来定义。</p><h3 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h3><p>数据有：输入变量X和<strong>部分</strong>输入变量的输出Y</p><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>书中的定义：强化学习(reinforcement learning）是指智能系统在与环境的连 续互动中学习最优行为策略的机器学习问题。假设智能系统与环境的互动基于马尔可 夫决策过程（Markov decision process)，智能系统能观测到的是与环境互动得到的 数据序列。强化学习的本质是学习最优的序贯决策。 </p><blockquote><p>举个例子：如何让电脑玩游戏？以 flappy bird 这款游戏为 例，电脑怎么知道下一步小鸟要采取怎样的行动呢？ 通过不断与环境的交互和试错的过程，最终完成特定目的或使得整体行动收益最大化。<strong>（做对了给奖励，做错了给惩罚）</strong></p></blockquote><h2 id="模型评估的指标（监督学习）"><a href="#模型评估的指标（监督学习）" class="headerlink" title="模型评估的指标（监督学习）"></a>模型评估的指标（监督学习）</h2><h3 id="回归问题的评估指标"><a href="#回归问题的评估指标" class="headerlink" title="回归问题的评估指标"></a>回归问题的评估指标</h3><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214135900565.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214135927666.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214140001362.png"/><h3 id="分类问题的评估指标"><a href="#分类问题的评估指标" class="headerlink" title="分类问题的评估指标"></a>分类问题的评估指标</h3><p>混淆矩阵——可以使用matlab自动生成</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214140121030.png"/><p>在此之前，我们需要定义<strong>分类结果中的正类（positive）和负类（negative）</strong>，这里 的正类和负类实际上借用了医学中的阳性（positive）和阴性（negative）的概念，医学 中一般阴性代表正常，而阳性则代表患有疾病。</p><p><strong>在机器学习中，我们通常将更关注的事件定义为正类事件。（生活中我们通常会更关注那些结果不好的情况的出现）</strong></p><p>例如上面的西瓜分类的例子中，如果我们<strong>更关注坏瓜，就定义坏瓜为正类，好瓜为负类。</strong>（有些地方也用 0 和 1 表示分类结果，<strong>一般正类记为 1，负类记为 0</strong>）。</p><blockquote><p>这种划分正类和负类的标准也不是绝对的，如果你更关注好瓜，那么你也可以把好瓜定义成正类；另外有 时候我们很难去区分结果的好坏，例如我们要对猫和狗的图片进行分类，这时候正类和负类无论怎么定义都行。</p></blockquote><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214141022387.png"/><p>分类准确率，如果样本不平衡，计算出的结果回存在问题，因此这个指标本身存在问题</p><p>后两个指标，R和P更重要</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214141219859.png"/><blockquote><p>通常来说，<strong>查全率和查准率是负相关关系</strong>的。</p><p>怎么理解查全率和查准率的关系：（知乎：李韶华的回答） </p><ul><li><p>假设我们的目的是要找到人群中隐藏的坏人（把坏人当成正类）。 如果看重查全率R: <strong>宁可错杀一千个好人，不可漏过一个坏人</strong>。（全部识别成坏人<br>时查全率为1）</p></li><li><p>如果看重查准率 P: <strong>宁可漏过坏人，不可错杀无辜的好人。</strong>（让 FP 尽量小一点，没有充足的证据不会轻易判断一个人是坏人）</p></li></ul></blockquote><p> 查全率和查准率的调和平均</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214142331261.png"/><p>ROC曲线和AUC</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214142649880.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214143002227.png"/><h2 id="模型的泛化能力"><a href="#模型的泛化能力" class="headerlink" title="模型的泛化能力"></a>模型的泛化能力</h2><blockquote><p>模型的泛化能力(generalization ability)是指由该模型对未知数据的预测能力。</p></blockquote><p>过拟合问题！</p><h2 id="留出法"><a href="#留出法" class="headerlink" title="留出法"></a>留出法</h2><p>我们需要想一个办法，只使 用已有的样本数据来对模型的泛化能力进行一个评价。</p><p>实际上这个办法很容易想到：还是假设我们现在有 100 个西瓜的数据，这些西瓜 的特征数据X以及是否为好瓜Y我们是知道的。</p><blockquote><p>我们只拿出 80 个西瓜来训练我们的“西瓜分类器”，剩下的 20 个西瓜我们假装 不知道它们是好瓜还是坏瓜。接下来，我们把这 20 个西瓜的 X 输入到我们的“西瓜 分类器”中，来得到预测结果，并和这 20 个西瓜的真实类别进行对比来计算分类准<br>确率，这个结果就能反映模型的泛化能力的好坏。</p></blockquote><p>我们将这里的 80 个西瓜称为<strong>训练 集(train set)<strong>，它们用来</strong>训练我们的模型</strong>，得到我们模型中的待估参数；</p><p>剩下的 20 个 西瓜我们不参与模型的训练过程，只用来<strong>最后对模型的好坏进行测试</strong>，因此被称为**测试集(test set)**。</p><p>我们将上面这种对泛化能力进行评估的方法称为<strong>留出法（Hold-Out）</strong>。</p><blockquote><p>（1） 假设我们总共的样本量为N，我们要将其划分为训练集和测试集，这两个集合的划分比例通常设置为：6:4、<strong>7:3</strong> 或 8:2。</p><p>（2） 训练集和测试集的划分既要随机，又要尽可能保持数据分布的一致性（在分类问题中就是类别比例的相似），例如原来 100 个瓜中有 60 个好瓜，40 个坏瓜，那么你按照 8:2 的比例生成训练集和测试集时，尽量保证测试集中的 20 个样本内有 12 个好瓜和 8 个坏瓜。<strong>在分类任务中，保留类别比例</strong><br><strong>的采样方法称为分层采样（stratified sampling）。</strong></p></blockquote><p>留出法的<strong>缺陷</strong>：在留出法中，用于评价模型泛化能力的测试集只是所有样本的一部分，而且这个 结果不是很稳定，对模型的泛化能力的评价依赖于哪些样本点落入训练集，哪些样本点在测试集。</p><h2 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h2><blockquote><p>下面我们介绍一种用的更多的方法：k 折交叉验证（K-fold cross-validation）。 </p><p>我们先将数据集D随机的划分为 k 个大小相似的<strong>互斥子集</strong>。</p><p>每一次用 k-1 个子集 的并集作为训练集，剩下的一个子集作为测试集；</p><p>这样就可以<strong>获得 k 组训练&#x2F;测试集</strong>， 从而可进行 k 次训练和测试，最终返回的是这 k 次测试的平均结果，<strong>通常 k 取 10，此时称为 10 折交叉验证</strong>。</p></blockquote><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214144113341.png"/><h2 id="选择最好的模型"><a href="#选择最好的模型" class="headerlink" title="选择最好的模型"></a>选择最好的模型</h2><p>我们可以使用决策树、K 最近邻（KNN）、支持向量机（SVM）等常用的机器 学习模型。那么，我们应该怎样衡量一个模型的好坏呢？</p><blockquote><p>我们前面介绍了留出法和交叉验证法，这里面都需要将数据分成训练集和测试集。 因此，我们可以在同一个训练集下，分别对这些模型进行训练，然后将这些模型分别 在测试集上进行预测，并比较不同模型的泛化能力，我们选择泛化能力最好的模型。<br>（该模型在测试集上的表现最好，例如误差最小，具体的评价指标在前面有介绍）</p><p>另外，大多数的模型中都需要设定一些参数(parameter)，参数不同得到的结果可 能有很明显的差异。因此，除了要对模型进行选择外，还需要对模型中的参数进行设 定，这就是机器学习中常说的“参数调节”或简称<strong>“调参”(parameter tuning)<strong>。通常调<br>参依赖于经验，我们后面会介绍</strong>网格搜索</strong>的方法，来自动搜索使模型效果最好的参数。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">重要！！！！！<br>给定包含 N 个样本的数据集D，在选择模型的过程中，因为需要留出测试集的数 据进行评估测试，所以我们只使用了训练集的数据来训练模型，这会导致测试集的信 息在训练模型的过程中没有被利用到。因此，在模型选择和参数都调整完成后，我们 应该使用完整的数据集 D 来重新训练模型。这个模型在训练过程中使用了所有 N 个样<br>本，这才是我们最终需要的模型。<br></code></pre></td></tr></table></figure><h2 id="欠拟合和过拟合"><a href="#欠拟合和过拟合" class="headerlink" title="欠拟合和过拟合"></a>欠拟合和过拟合</h2><p>过拟合（overfitting）指的是模型在<strong>训练集上表现的很好</strong>，但是在<strong>测试集上表现的并不理想</strong>，也就是说模型对未知样本的预测表现一般，泛化能力较差。 </p><p>如果模型不仅在训练数据集上的<strong>预测结果不好</strong>，而且在<strong>测试数据集上的表现也不理想</strong>，也就是说两者的表现都很糟糕，那么我们有理由怀疑模型发生了欠拟合（underfitting）现象。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214150038778.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214150154298.png"/><blockquote><p>可能产生过拟合的常见原因： </p><blockquote><p>（1） 模型中参数设置的过多导致模型过于<strong>复杂</strong> ；</p><p>（2） 训练集的<strong>样本量不够</strong> ；</p><p>（3） 输入了某些完全错误的的特征 </p><p>​举个极端的例子：样本的编号。现在有 100 个西瓜，编号 1-60 的是好瓜， 编号 61-100 的是坏瓜，如果你把编号作为了输入变量放入了我们的模型， 那么有可能模型会将编号作为一个最重要的识别变量来对西瓜进行分类， 模型会认为只要编号小于等于 60 的都是好瓜，此时在训练集上的误差一 定为 0。。。。。。如果这时候你拿来编号大于 100 的需要判断好坏的瓜，模型 都会认为是坏瓜！</p></blockquote><p>解决过拟合的方法： </p><blockquote><p>（1） 通过前面介绍的交叉验证的方法来选择合适的模型，并对参数进行调节。 </p><p>（2） 扩大样本数量、训练更多的数据</p><p>（3） 对模型中的参数增加<strong>正则化</strong>（即增加惩罚项，参数越多惩罚越大）</p></blockquote></blockquote><blockquote><p>欠拟合则和过拟合刚好相反，我们可以增加模型的参数、或者选择更加复杂的模 型；也可以从数据中挖掘更多的特征来增加输入的变量，还可以使用一些集成算法（如 装袋法（Bagging），提升法（Boosting））。 </p><p>（注意：有可能模型的输入和输出一点关系都没有，举个极端的例子，你买的西 瓜好坏和你的个人特征没任何关系，例如你的性别身高体重等）</p></blockquote><h1 id="常见的机器学习算法的思想"><a href="#常见的机器学习算法的思想" class="headerlink" title="常见的机器学习算法的思想"></a>常见的机器学习算法的思想</h1><p><a href="https://space.bilibili.com/10781175">五分钟机器学习的个人空间_哔哩哔哩_bilibili</a></p><p><a href="https://space.bilibili.com/108044200">菊安酱的个人空间_哔哩哔哩_bilibili</a></p><h2 id="K最近邻（KNN）"><a href="#K最近邻（KNN）" class="headerlink" title="K最近邻（KNN）"></a>K最近邻（KNN）</h2><h2 id="决策树（Decision-Tree）"><a href="#决策树（Decision-Tree）" class="headerlink" title="决策树（Decision Tree）"></a>决策树（Decision Tree）</h2><h2 id="支持向量机（SVM）"><a href="#支持向量机（SVM）" class="headerlink" title="支持向量机（SVM）"></a>支持向量机（SVM）</h2><h3 id="线性支持向量机"><a href="#线性支持向量机" class="headerlink" title="线性支持向量机"></a>线性支持向量机</h3><h3 id="非线性支持向量机"><a href="#非线性支持向量机" class="headerlink" title="非线性支持向量机"></a>非线性支持向量机</h3><h2 id="集成学习（ensemble-learning）"><a href="#集成学习（ensemble-learning）" class="headerlink" title="集成学习（ensemble learning）"></a>集成学习（ensemble learning）</h2><h1 id="Matlab中机器学习的应用"><a href="#Matlab中机器学习的应用" class="headerlink" title="Matlab中机器学习的应用"></a>Matlab中机器学习的应用</h1><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214151111469.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220214151243335.png"/><h1 id="蒙特卡洛"><a href="#蒙特卡洛" class="headerlink" title="蒙特卡洛"></a>蒙特卡洛</h1><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214160645.png"/></div><h2 id="引例：布丰投针"><a href="#引例：布丰投针" class="headerlink" title="引例：布丰投针"></a>引例：布丰投针</h2><p>通过针与平行线中任意一条相交的概论，计算pi<br>axis：绘制坐标在的框架</p><h2 id="蒙特卡洛概述"><a href="#蒙特卡洛概述" class="headerlink" title="蒙特卡洛概述"></a>蒙特卡洛概述</h2><p> 蒙特卡洛方法又称统计模拟法，是一种随机模拟方法，以概率论和数理统计方法为基础的一种计算方法，是使用随机数来解决很多计算问题的方法。<br> 原理：由大数定理可知，当样本容量足够大的时候，事件的发生频率即其概率<br>蒙特卡洛不是一种算法，而是一种方法，蒙特卡洛没有固定的通用代码。</p><p>蒙特卡洛是枚举的一种变异</p><h2 id="应用1-三门问题"><a href="#应用1-三门问题" class="headerlink" title="应用1 三门问题"></a>应用1 三门问题</h2><p>三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门是否会增加参赛者赢得汽车的机率。如果严格按照上述的条件，那么答案是会。不换门的话，赢得汽车的几率是1&#x2F;3。换门的话，赢得汽车的几率是2&#x2F;3。<br>虽然该问题的答案在逻辑上并不自相矛盾，但十分违反直觉。这问题曾引起一阵热烈的讨论。<br><a href="https://www.bilibili.com/video/BV1ws411j7Mb">李永乐，三门问题</a></p><h2 id="应用2-模拟排队问题"><a href="#应用2-模拟排队问题" class="headerlink" title="应用2 模拟排队问题"></a>应用2 模拟排队问题</h2><p>指数分布</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214172441.png"/></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">normrnd()——正态分布<br>exprnd()——指数分布<br><br>tic<br>代码<br>toc<br>计算代码运行的时间<br></code></pre></td></tr></table></figure><h2 id="应用3-有约束的非线性规划问题"><a href="#应用3-有约束的非线性规划问题" class="headerlink" title="应用3 有约束的非线性规划问题"></a>应用3 有约束的非线性规划问题</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214174229.png"/></div><p>非线性规划——局部最优解，计算时需要初始值<br>全局最优解是计算不出来的！</p><p>把约束条件使用放缩法，计算出每个变量的取值范围</p><p>format long g——计算出的结果，显示更多的小数位数<br>x&#x3D;unifrnd(20,30,n,1):生成[20,30]之间均匀分布的随即数组成的n行1列的向量构成x</p><h2 id="应用4-01规划问题"><a href="#应用4-01规划问题" class="headerlink" title="应用4 01规划问题"></a>应用4 01规划问题</h2><p>unique函数：剔除一个矩阵或者向量的重复值，并将结果按照从小到大的顺序排列</p><p>循环进行超级多次，得到最优解</p><h2 id="应用5-导弹追踪问题"><a href="#应用5-导弹追踪问题" class="headerlink" title="应用5 导弹追踪问题"></a>应用5 导弹追踪问题</h2><p>连续的时间离散化<br>mod(8,3):求余数</p><h2 id="应用6-旅行商问题（TSP）"><a href="#应用6-旅行商问题（TSP）" class="headerlink" title="应用6 旅行商问题（TSP）"></a>应用6 旅行商问题（TSP）</h2><p>n数值过大的时候，可能出现的次数将达到非常大的量级</p><p>randperm函数：随即序列</p><p><a href="http://www.math.uwaterloo.ca/tsp/">http://www.math.uwaterloo.ca/tsp/</a></p><h1 id="数学规划模型"><a href="#数学规划模型" class="headerlink" title="数学规划模型"></a>数学规划模型</h1><p>数学规划：数学规划三运筹学的一个分支，期用来研究：在给定的条件下（约束条件），如何按照某一衡量指标（目标函数）来寻求计划，管理工作中的最优方案，即求目标函数在一定约束条件下的极值问题！</p><p>数学规划的一般形式</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214210140.png"/></div><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>数学规划的分类</p><ol><li><p>线性规划<br>目标函数和约束条件是决策变量的线性表达式<br>单纯形法</p></li><li><p>非线性规划<br>目标函数或者约束条件是决策变量的非线性表达式<br>没有通用算法，大多数算法都是选定决策变量的初始值之后，通过一定的搜索方法，寻找最优的决策变量</p></li><li><p>整数规划<br>要求变量取整数的数学规划，分为线性整数规划和非线性整数规划<br>求解线性整数规划问题能求解<br>非线性整数规划——蒙特卡洛模拟</p></li><li><p>0-1 规划<br>重点内容</p></li></ol><h2 id="线性规划问题的求解——matlab"><a href="#线性规划问题的求解——matlab" class="headerlink" title="线性规划问题的求解——matlab"></a>线性规划问题的求解——matlab</h2><p>Matlab中线性规划的标准型</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214211107.png"/></div><p>matlab中求解线性规划的命令<br>[x,fval] &#x3D; linprog[C,A,b,Aeg,beg,lb,ub,x0]</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% [x fval] = linprog(c, A, b, Aeq, beq, lb,ub, x0)  </span><br><span class="hljs-comment">% c是目标函数的系数向量，A是不等式约束Ax&lt;=b的系数矩阵，b是不等式约束Ax&lt;=b的常数项</span><br><span class="hljs-comment">% Aeq是等式约束Aeq x=beq的系数矩阵，beq是等式约束Aeq x=beq的常数项</span><br><span class="hljs-comment">% lb是X的下限，ub是X的上限，X是向量[x1,x2,...xn]&#x27; , 即决策变量。</span><br><span class="hljs-comment">% 迭代的初始值为x0（一般不用给）</span><br></code></pre></td></tr></table></figure><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214212457.png"/></div><h2 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h2><ol><li>生产决策问题</li><li>投料问题</li></ol><h2 id="整数规划"><a href="#整数规划" class="headerlink" title="整数规划"></a>整数规划</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214215820.png"/></div><p>Matlab 整数规划求解<br>[x,fval] &#x3D; intlinprog[C,intcon,A,b,Aeg,beg,lb,ub]<br>注：</p><ul><li>intlinprog不能指定初始值</li><li>intcon参数可以指定那些决策变量是整数<br>Matlab 线性0-1规划求解，仍然使用intlinprog函数，只不过是在lb和ub上作文章</li></ul><p>整数规划的例题</p><ol><li>背包问题</li><li>指派问题</li><li>钢管切割问题</li></ol><h2 id="Matlab中的非线性规划的标准型"><a href="#Matlab中的非线性规划的标准型" class="headerlink" title="Matlab中的非线性规划的标准型"></a>Matlab中的非线性规划的标准型</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ%E6%88%AA%E5%9B%BE20220214232434.png"/></div><p>非线性规划求解的函数<br>[x,fval] &#x3D; fmincon(@fun,x0,A,b,Aeq,beq,lb,up,@nonlfun,option)</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214232746.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214232803.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214232813.png"/></div><p>非线性规划的例题：</p><ol><li>选址问题</li><li>飞行管理问题</li></ol><h2 id="最大最小化模型"><a href="#最大最小化模型" class="headerlink" title="最大最小化模型"></a>最大最小化模型</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ%E6%88%AA%E5%9B%BE20220214233046.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214233058.png"/></div><h2 id="多目标规划模型"><a href="#多目标规划模型" class="headerlink" title="多目标规划模型"></a>多目标规划模型</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220214233109.png"/></div>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>MATLAB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo命令与目录结构</title>
    <link href="/blog/post/Knowledge/HexoCommands/"/>
    <url>/blog/post/Knowledge/HexoCommands/</url>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>超快速度：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p><p>支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p><p>一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。</p><p>插件和可扩展性：强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less&#x2F;Sass）轻易集成</p><h1 id="Hexo-命令"><a href="#Hexo-命令" class="headerlink" title="Hexo 命令"></a>Hexo 命令</h1><p><a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a></p><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo init [folder]<br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、<a href="https://pnpm.js.org/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/docs/#Install-Node-js">Node.js</a> 安装。</li></ol><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">hexo <span class="hljs-built_in">new</span> page --path about/<span class="hljs-keyword">me</span> <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-string">$ </span>hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo migrate &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo list &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出网站资料。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--safe</span><br></code></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--debug</span><br></code></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--silent</span><br></code></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 _config<span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br><br># 使用 custom<span class="hljs-variable">.yml</span> 和 custom2<span class="hljs-variable">.json</span>，其中 custom2<span class="hljs-variable">.json</span> 优先级更高<br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br></code></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 _config<span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br><br># 使用 custom<span class="hljs-variable">.yml</span>, custom2<span class="hljs-variable">.json</span> 和 custom3<span class="hljs-variable">.yml</span>，其中 custom3<span class="hljs-variable">.yml</span> 优先级最高，其次是 custom2<span class="hljs-variable">.json</span><br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br></code></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--draft</span><br></code></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ hexo <span class="hljs-params">--cwd</span> <span class="hljs-string">/path/to/cwd</span><br></code></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p><h1 id="框架的基本结构"><a href="#框架的基本结构" class="headerlink" title="框架的基本结构"></a>框架的基本结构</h1><p><a href="https://y0ngb1n.github.io/a/b821c4ca.html">Hexo 搭建个人博客 #03 框架的基本结构与打包后的文件介绍 | 杨斌的博客 (y0ngb1n.github.io)</a></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220329112917313.png"/><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs console">.<br>├── .deploy_git<br>├── node_modules<br>├── public<br>├── scaffolds<br>│   ├── draft.md<br>│   ├── page.md<br>│   └── post.md<br>├── source<br>│   └── _posts<br>│       └── hello-world.md<br>├── themes<br>├── .gitignore<br>├── _config.yml<br>├── db.json<br>├── package.json<br>└── package-lock.json<br></code></pre></td></tr></table></figure><h2 id="deploy-git"><a href="#deploy-git" class="headerlink" title=".deploy_git"></a>.deploy_git</h2><p>在输入 <code>hexo d</code> 部署到 GitHub 后自动创建。该目录的结构和 <code>public</code> 目录基本一致（不一致的情况是由于重新生成，但是没有发布站点造成，此时 <code>public</code> 内容新于 <code>.deploy_git</code> 内容）。</p><h2 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h2><p>存放安装的 Hexo 扩展，都是相应的 node 依赖模块。</p><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><p>在执行 <code>hexo g</code> 命令时，Hexo 程序会编译 <code>source</code>、<code>theme</code> 目录，生成的静态网页内容目录就是 <code>piblic</code>。</p><p>生成好的 <code>public</code> 文件夹内容就可以直接当成静态网站进行部署。</p><p>在执行 <code>hexo d</code> 命令时，会将 <code>piblic</code> 目录内容复制到 <code>.deploy_git</code> 目录。</p><h2 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h2><p><code>scaffolds</code> 是“脚手架、骨架”的意思，当你新建一篇文章（<code>hexo new &#39;title&#39;</code>）的时候，Hexo 是根据这个目录下的文件进行构建的。</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>存放用户资源的地方。</p><h2 id="posts"><a href="#posts" class="headerlink" title="_posts"></a>_posts</h2><p>存放博客文章的地方，其中的 <code>markdown</code> 文件、HTML 文件、org 文件等会被解析并放到 <code>public</code> 文件夹，发布到站点。</p><h2 id="其它以-（下划线）开头的文件-文件夹"><a href="#其它以-（下划线）开头的文件-文件夹" class="headerlink" title="其它以 _（下划线）开头的文件 &#x2F; 文件夹"></a>其它以 _（下划线）开头的文件 &#x2F; 文件夹</h2><p>将会被忽略。因此可以在 <code>source</code> 目录下创建  <code>_drafts</code> 目录用于存放未完成的草稿，其中内容不会发布到网站。</p><h2 id="其它非-开头的文件-文件夹"><a href="#其它非-开头的文件-文件夹" class="headerlink" title="其它非 _ 开头的文件 &#x2F; 文件夹"></a>其它非 _ 开头的文件 &#x2F; 文件夹</h2><p>会被拷贝到 <code>public</code> 目录并上传到站点。</p><ul><li>可以创建 <code>img</code> 目录来存放在博客引用到的图片等。</li><li>要添加新的页面（例如 <code>about</code>），执行 <code>hexo new page PageName</code> 命令即会在 <code>source</code> 中自动新建子目录 <code>PageName</code> 。</li><li><code>favicon.ico</code> 在主题配置文件中引用 <code>/favicon.ico</code> 来设置站点的页面图标。</li></ul><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p>网站的主题目录。默认安装 <code>landscape</code> 主题，你可以安装新主题到 <code>themes</code> 目录，也可以自己新建主题。</p><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数。</p><h2 id="db-json"><a href="#db-json" class="headerlink" title="db.json"></a>db.json</h2><p>自动生成的一个文件 JSON 文件，可以对博客的文件进行管理查找的，可以忽略。</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>Hexo 框架的参数和所有依赖的插件。</p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Hexo</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天文学合集笔记（二）</title>
    <link href="/blog/post/Astronomy/LearnAstronomy_2/"/>
    <url>/blog/post/Astronomy/LearnAstronomy_2/</url>
    
    <content type="html"><![CDATA[<p>天文学与其他自然科学的一个显著不同之处在于，天文学的实验方法是观测，通过观测来收集天体的各种信息。因而对观测方法和观测手段的研究，是天文学家努力研究的一个方向。在古代，天文学还与历法的制定有不可分割的关系。现代天文学已经发展成为观测全电磁波段的科学。<br>“天文”一词最早见于我国古老著作《易经》。《易传·彖·贲》说：“刚柔交错，天文也。文明以止，人文也。”还要求君子“观乎天文，以察时变。观乎人文，以化成天下。”</p><p><font face="黑体" size=6 color=MediumPurple><a href="https://www.ixigua.com/6758709082317668871?id=6684175083805606414">妈咪说MommyTalk天文合集（西瓜视频）</a></font></p><p><font face="黑体" size=6 color=MediumPurple><a href="https://www.bilibili.com/video/BV1zE411t7Uf?spm_id_from=333.999.0.0">妈咪说MommyTalk天文合集（哔哩哔哩）</a></font></p><p>妈咪说天文学视频合集观看记录第二期</p><p><a href="https://murphyhoucn.github.io/2021/12/27/%E5%A4%A9%E6%96%87%E5%90%88%E9%9B%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">天文合集笔记（一） - Murphy (murphyhoucn.github.io)</a></p><p>第21期到第30期</p><h1 id="第二十一期-黑洞"><a href="#第二十一期-黑洞" class="headerlink" title="第二十一期 黑洞"></a>第二十一期 黑洞</h1><p>18世纪，米歇尔和拉普拉斯等人就开始了对黑洞的讨论</p><h2 id="史瓦西黑洞"><a href="#史瓦西黑洞" class="headerlink" title="史瓦西黑洞"></a>史瓦西黑洞</h2><p>爱因斯坦的广义相对论发表之后，史瓦西计算出了施瓦西解</p><p><a href="https://baike.baidu.com/item/%E5%8D%A1%E5%B0%94%C2%B7%E5%8F%B2%E7%93%A6%E8%A5%BF/8222314">卡尔·史瓦西_百度百科 (baidu.com)</a></p><blockquote><p>卡尔·史瓦西，又译为卡尔·史瓦兹旭尔得<em>（Karl Schwarzschild，1873年10月9日至1916年5月11日）</em>，出生于德国法兰克福，德国物理学家、天文学家，天文学家<a href="https://baike.baidu.com/item/%E9%A9%AC%E4%B8%81%C2%B7%E5%8F%B2%E7%93%A6%E8%A5%BF/10087418">马丁·史瓦西</a>的父亲。</p><p>1915年12月，在<a href="https://baike.baidu.com/item/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6/122624">爱因斯坦</a>发表<a href="https://baike.baidu.com/item/%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/472897">广义相对论</a>1个月后，卡尔·史瓦西即得到<a href="https://baike.baidu.com/item/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E5%9C%BA%E6%96%B9%E7%A8%8B/386428">爱因斯坦场方程</a>的精确解。</p></blockquote><p>白矮星-&gt;中子星：钱德拉塞卡极限：1.4倍的太阳质量</p><p>中子星-&gt;黑洞：奥本海默极限：静态中子星是2.2倍的太阳质量；旋转中子星是2.9倍的太阳质量</p><p>史瓦西黑洞：中心奇点，密度无限大；史瓦西半径处的曲面叫做事件视界；</p><blockquote><p><strong>事件视界</strong>（英语：event horizon），是一种<a href="https://baike.baidu.com/item/%E6%97%B6%E7%A9%BA">时空</a>的曲隔界线。视界中任何的事件皆无法对视界外的观察者产生影响。在<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>周围的便是事件视界。在非常巨大的<a href="https://baike.baidu.com/item/%E5%BC%95%E5%8A%9B/13783671">引力</a>影响下，黑洞附近的<a href="https://baike.baidu.com/item/%E9%80%83%E9%80%B8%E9%80%9F%E5%BA%A6">逃逸速度</a>大于光速，使得任何光线皆不可能从事件视界内部逃脱。根据<a href="https://baike.baidu.com/item/%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA">广义相对论</a>，在远离视界的外部观察者眼中，任何从视界外部接近视界的物件，将须要用无限长的时间到达视界面，其影响会经历无止境逐渐增强的<a href="https://baike.baidu.com/item/%E7%BA%A2%E7%A7%BB">红移</a>；但该物件本身却不会感到任何异常，并会在有限时间之内穿过视界。</p></blockquote><p>黑洞内部的时空坐标是互换的，从表面延伸到奇点是一个时间坐标轴，只要进入到事件视界中，一定按照时间坐标，朝向奇点方向。因此，事件视界以内的等半径曲面是一个等时面，奇点是时间的终点。奇点与事件视界之间的区域是真空。</p><p>史瓦西黑洞的事件视界也称为无限红移面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">物理学中的红移（波长变大）<br>- 多普勒红移：由运动源相对于运动决定的。远离我们就是红移，靠近我们就是蓝移<br>- 宇宙学红移：由于时空的运动决定的。宇宙膨胀的效应。<br>- 引力红移：由于强引力场带来的红移。由于光子摆脱引力场向外辐射所造成的。强引力使得光子的频率变慢。<br></code></pre></td></tr></table></figure><p>宇宙学红移：</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-08_13-13-22-38.png"/><p><a href="https://baike.baidu.com/item/%E5%BC%95%E5%8A%9B%E6%97%B6%E9%97%B4%E8%86%A8%E8%83%80/12010053">引力时间膨胀_百度百科 (baidu.com)</a></p><blockquote><p>引力时间膨胀是指在宇宙有不同<a href="https://baike.baidu.com/item/%E5%8A%BF%E8%83%BD/291047">势能</a>的区域会导致时间以不同的速率度过的现象，<a href="https://baike.baidu.com/item/%E5%BC%95%E5%8A%9B">引力</a>导致的<a href="https://baike.baidu.com/item/%E6%97%B6%E7%A9%BA/724683">时空</a>扭曲率越大，时间就过得越慢。<a href="https://baike.baidu.com/item/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6/122624">爱因斯坦</a>最初在自己的<a href="https://baike.baidu.com/item/%E7%9B%B8%E5%AF%B9%E8%AE%BA/48750">相对论</a>中预测出这种现象，并其后由各种广义相对论实验中被证实。</p><p>其中一种证实方法就是把两个<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E9%92%9F/765460">原子钟</a>放在不同的高度（因此来自地球的引力效应会有差别），它们在一段时间后所测到的时间会有些许差别。其差别极小极小，甚至要用到<a href="https://baike.baidu.com/item/%E7%BA%B3%E7%A7%92/3395687">纳秒</a>来作单位。</p><p>引力时间膨胀首次由爱因斯坦于1907年提出，并是<a href="https://baike.baidu.com/item/%E7%8B%AD%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/473499">狭义相对论</a>中参照对象的加速前进所导致的结果。在<a href="https://baike.baidu.com/item/%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/472897">广义相对论</a>中，它被视为是时空<a href="https://baike.baidu.com/item/%E5%BA%A6%E8%A7%84%E5%BC%A0%E9%87%8F">度规张量</a>描述的在不同地点的<a href="https://baike.baidu.com/item/%E5%8E%9F%E6%97%B6/7680074">原时</a>的差。庞德-雷布卡实验首次直接证实了这种现象的存在。</p></blockquote><h2 id="克尔黑洞"><a href="#克尔黑洞" class="headerlink" title="克尔黑洞"></a>克尔黑洞</h2><p><a href="https://baike.baidu.com/item/%E5%85%8B%E5%B0%94%E9%BB%91%E6%B4%9E/6444865">克尔黑洞_百度百科 (baidu.com)</a></p><blockquote><p>克尔<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E/10952">黑洞</a>是指不随时间变化的绕轴转动的<a href="https://baike.baidu.com/item/%E8%BD%B4%E5%AF%B9%E7%A7%B0/1914298">轴对称</a><a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E/10952">黑洞</a>。</p><p>这类黑洞的中心是一个奇环，有内、外两个视界。内视界为黑洞奇异性的界限，而外视界则为不可逃脱的<a href="https://baike.baidu.com/item/%E7%95%8C%E9%99%90/32431">界限</a>。这就意味，一旦你落入外视界，你不会立即被黑洞的种种<a href="https://baike.baidu.com/item/%E5%A5%87%E5%BC%82%E6%80%A7/12720329">奇异性</a>摧毁，但此时你将会不可避免地落入内视界。两界面仅在两极处相切。除去两视界外，克尔黑洞的最外围还有一个界限称为静止界限（简称静界）或<a href="https://baike.baidu.com/item/%E6%97%A0%E9%99%90%E7%BA%A2%E7%A7%BB%E9%9D%A2/7476716">无限红移面</a>。静界产生于克尔黑洞的参考系拖拽效应，通俗地讲，就是克尔黑洞旋转时拖动着周围的时空一起转动。可以理解为在静界处时空的“旋转速度”等于光速，这就意味着静界内的飞船无论如何不能保持相对静止（物体移动的最大速度为光速）。静界并非克尔黑洞的真正界限，因为进入静界后仍然可以逃离。静界和视界之间的夹层称为能层。克尔黑洞可能与白洞连接，因此，进入克尔黑洞的物体只要不撞在奇环上就有可能从白洞出来。</p><p>在内视界内部，和<a href="https://baike.baidu.com/item/%E5%8F%B2%E7%93%A6%E8%A5%BF%E9%BB%91%E6%B4%9E/7476963">史瓦西黑洞</a>一样有一个奇异性质汇聚的地方，但是不像史瓦西黑洞那样是一个<a href="https://baike.baidu.com/item/%E5%A5%87%E7%82%B9">奇点</a>，而是一个独特的奇异环，一个充满了<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E6%95%88%E5%BA%94">量子效应</a>奇异性质的面，安静地平躺在黑洞赤道面上。</p><p>由于克尔黑洞有<a href="https://baike.baidu.com/item/%E8%83%BD%E5%B1%82">能层</a>，意思就是能够从中提取能量的一层。克尔黑洞的能量组成有两部分：质量对应的引力势能和转动对应的转动动能。我们所能提取的是转动能。</p><p>提取方法：派飞船进入能层，然后朝黑洞转动方向的反方向扔下一个重物，然后快速离去。这个过程会使黑洞转动的角动量降低，减少的部分转移到飞船上，另外，转动量也降低，这部分能量也转移到了飞船上，这就从黑洞中提取了能量。不过，黑洞也不吃亏，它虽然失去了转动能，但是得到了一大块物质。<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>并不在乎转动能，它在乎的是视界的面积。黑洞进行的任何活动都保持视界面积只增加不减少，上述过程能够使视界面积增加，所以能够进行。</p></blockquote><p><a href="https://baike.baidu.com/item/%E7%8B%84%E6%8B%89%E5%85%8B%E4%B9%8B%E6%B5%B7/1732536">狄拉克之海_百度百科 (baidu.com)</a></p><blockquote><p>狄拉克之海简单说就是<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90">量子</a><a href="https://baike.baidu.com/item/%E7%9C%9F%E7%A9%BA">真空</a>的零点能组成的<a href="https://baike.baidu.com/item/%E8%B4%9F%E8%83%BD%E9%87%8F/6430294">负能量</a>的粒子海。尽管这些粒子是不可观察的，但它们决不是虚幻的，如果用足够的能量就可以形成，哪里有物质，哪里就有狄拉克之海，想象观察到的宇宙就好像漂浮在其表面上。</p></blockquote><p><a href="https://baike.baidu.com/item/%E7%BD%97%E6%9D%B0%C2%B7%E5%BD%AD%E7%BD%97%E6%96%AF/1764764">罗杰·彭罗斯_百度百科 (baidu.com)</a></p><blockquote><p>罗杰·彭罗斯<em>（Roger Penrose，1931年8月8日-）</em>，英国数学物理学家、牛津大学数学系名誉教授，他在数学物理方面的工作拥有高度评价，特别是对广义相对论与宇宙学方面的贡献。</p><p>罗杰·彭罗斯出生于英国埃塞克斯州的一个医生家庭，他的爸爸是著名的人类遗传学家<a href="https://baike.baidu.com/item/%E8%8E%B1%E6%98%82%E5%86%85%E5%B0%94%C2%B7%E5%BD%AD%E7%BD%97%E6%96%AF/16279608">莱昂内尔·彭罗斯</a>。罗杰·彭罗斯毕业于<a href="https://baike.baidu.com/item/%E4%BC%A6%E6%95%A6%E5%A4%A7%E5%AD%A6/688350">伦敦大学</a>的附属中学，而后本科毕业于英国<a href="https://baike.baidu.com/item/%E4%BC%A6%E6%95%A6%E5%A4%A7%E5%AD%A6%E5%AD%A6%E9%99%A2/325705">伦敦大学学院</a>（UCL）。 [1] </p><p>2020年10月6日，<a href="https://baike.baidu.com/item/%E7%91%9E%E5%85%B8%E7%9A%87%E5%AE%B6%E7%A7%91%E5%AD%A6%E9%99%A2/1818683">瑞典皇家科学院</a>常任秘书戈兰·汉松宣布，将2020年<a href="https://baike.baidu.com/item/%E8%AF%BA%E8%B4%9D%E5%B0%94%E7%89%A9%E7%90%86%E5%AD%A6%E5%A5%96/211390">诺贝尔物理学奖</a>授予罗杰·彭罗斯，因为其发现黑洞的形成是对广义相对论的有力预测。</p></blockquote><p>彭罗斯过程</p><blockquote><p>1969年，英国物理学家罗杰·彭罗斯(Roger Penrose)提出，可以通过将一个物体丢入黑洞的能层(黑洞事件视界的外层)来泵出能量。</p><p>彭罗斯率先发现，黑洞的能层有一个奇怪的特性：落入其中的物体将在这个不寻常的空间区域中获得负能量。用通俗的比喻，大概可以理解成，当你被黑洞捕获时，你的“财产”包括你本身就不再属于自己了，而是属于黑洞；在落入债权人“黑洞”手里之前，你在客观层面保有自己的资产；等落到债权人手里之后，立刻就被盘剥一空，你自己也归人家所有，而你甚至还要为黑洞把你抓进来而付出的能量买单！所以你的资产(能量)就是负的。</p><p>既然如此，如果我们把类似二级火箭的东西投入黑洞，在接近能层的高度，让火箭点火分离。借助反冲力，火箭的上半部分扭转下坠之势，下半部分则加速落入黑洞。</p><p>落入黑洞的那部分，转为负的质量能；再考虑整体的能量守恒和动量关系，逃逸的那部分携带的能量大于它在二级助推时反冲作用获得的能量！相当于变相从黑洞中泵出了能量。但能量不会无中生有，逃逸出来的多了，说明黑洞的就少了。但是黑洞确实吞下了物质，质量不会减少，那黑洞损失了什么？角动量！</p></blockquote><p>通过彭罗斯过程，不断从克尔黑洞中提取能量，克尔黑洞最终会变成史瓦西黑洞。</p><p><a href="https://baike.baidu.com/item/%E8%A3%B8%E5%A5%87%E7%82%B9/2391519">裸奇点_百度百科 (baidu.com)</a></p><blockquote><p>裸奇点是理论中没有视界包围住的引力奇点。在广义相对论中所描绘的黑洞是由奇点与包围住它的视界所构成，速度最快的光也无法逃脱到视界之外，因此理论上外界观察者无法直接观测到黑洞内部的现象。裸奇点则与之相反，光与其他粒子有机会逃离奇点至远方，而视界因此不存在；外界观察者有机会观察到发生在奇点附近剧烈扭曲<a href="https://baike.baidu.com/item/%E6%97%B6%E7%A9%BA">时空</a>的现象。</p><p>裸奇点的存在对于天文物理等领域来说有其重要性，其中之一是可能得以观察到星体坍缩成无限大密度的点的一些过程。另一方面，其存在与特性乃是对量子引力理论进行检验的良好机会。</p></blockquote><p><a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99%E7%9B%91%E5%AF%9F%E5%81%87%E8%AE%BE">宇宙监察假设_百度百科 (baidu.com)</a></p><blockquote><p>宇宙监察假设由著名物理学家罗杰·彭罗斯于1969年提出。彭罗斯猜测，在一颗<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F/493">恒星</a>的坍缩过程中如果产生一个<a href="https://baike.baidu.com/item/%E5%A5%87%E7%82%B9/9142765">奇点</a>，就必然会有一个<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E8%A7%86%E7%95%8C/472861">事件视界</a>随之形成。</p></blockquote><h2 id="克尔纽曼黑洞"><a href="#克尔纽曼黑洞" class="headerlink" title="克尔纽曼黑洞"></a>克尔纽曼黑洞</h2><p><a href="https://baike.baidu.com/item/%E6%97%8B%E8%BD%AC%E5%B8%A6%E7%94%B5%E9%BB%91%E6%B4%9E/7585290">旋转带电黑洞_百度百科 (baidu.com)</a></p><blockquote><p>旋转带电黑洞称为克尔-纽曼黑洞，具有电荷的旋转黑洞非常象一个<a href="https://baike.baidu.com/item/%E8%B4%A8%E5%AD%90/65645">质子</a>，但它必然比质子大，因为形成黑洞有一个质量下限，那就是<a href="https://baike.baidu.com/item/%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98">奥本海默</a>质量下限，大概是2到3个<a href="https://baike.baidu.com/item/%E5%A4%AA%E9%98%B3%E8%B4%A8%E9%87%8F">太阳质量</a>。也就是说，在经典广义相对论中，不能把质子想象成为一个黑洞，因为两者在尺度上，是具有基本介绍<a href="https://baike.baidu.com/item/%E5%A4%A9%E5%A3%A4%E4%B9%8B%E5%88%AB/5967025">天壤之别</a>。但带有电荷的旋转黑洞是最普遍的，这就是克尔——纽曼黑洞。</p></blockquote><p><a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E%E6%97%A0%E6%AF%9B%E5%AE%9A%E7%90%86/1014887">黑洞无毛定理_百度百科 (baidu.com)</a></p><blockquote><p>黑洞无毛定理是1973年<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91">霍金</a>、卡特尔（B. Carter）等人严格证明了“黑洞无毛定理”：“无论什么样的黑洞，其最终性质仅由几个物理量（质量、<a href="https://baike.baidu.com/item/%E8%A7%92%E5%8A%A8%E9%87%8F/290656">角动量</a>、电荷）唯一确定”</p><p>即当黑洞形成之后，只剩下这三个不能变为电磁辐射的守恒量，其他一切信息（“毛发”）都丧失了，黑洞几乎没有形成它的物质所具有的任何复杂性质，对前身物质的形状或成分都没有记忆。其实这是一种消繁归简的命名原则！ 于是“<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>”的术语发明家惠勒（J.A. Wheeler）戏称这特性为“黑洞无毛”。</p></blockquote><h2 id="霍金对黑洞的贡献"><a href="#霍金对黑洞的贡献" class="headerlink" title="霍金对黑洞的贡献"></a>霍金对黑洞的贡献</h2><h3 id="推广了奇点定理"><a href="#推广了奇点定理" class="headerlink" title="推广了奇点定理"></a>推广了奇点定理</h3><p><strong>彭罗斯</strong>证明了，在 大质量天体 塌缩成黑洞的过程中，必然存在一个点，所有的塌缩物质在这个点之后不再存在路径。</p><p><a href="https://user.guancha.cn/main/content?id=390841">2020年诺贝尔物理学奖权威解读，你想知道的都在这里！_风闻 (guancha.cn)</a></p><blockquote><p>2020 年诺贝尔物理学奖将一半颁给了</p><p><strong>罗杰·彭罗斯 (Roger Penrose)</strong></p><p>以表彰其给出的黑洞形成的证明，并成为广义相对论的有力证据。</p><p>另一半由</p><p><strong>赖因哈德·根策尔 (Reinhard Genzel)</strong></p><p><strong>安德烈娅·盖兹 (Andrea Ghez)</strong></p><p>共享，表彰他们在银河系中心发现超高质量高密度物质。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220208135016061.png"/><p>2020 年诺贝尔物理学奖将一半的奖金颁给了罗杰·彭罗斯（Roger Penrose）其证明了黑洞的形成，这成为广义相对论的有力证据。</p><p>黑洞的概念其实早就有了，早在 18 世纪米歇尔还有拉普拉斯等人就讨论过，一个具有与地球同样密度，而直径为太阳 250 倍的明亮天体，它发射的光将被自身引力吸引而不能被我们看到。</p><p>出于这个朴素的想法，宇宙中最明亮的天体却很可能是看不见的。在前面的论述中，拉普拉斯还给出了黑洞的史瓦西半径公式。</p><p>虽然这个公式确实是对的，和今天用广义相对论推导得出来的一样，但是当时拉普拉斯是通过把光假设成粒子，用万有引力定律计算的，这个计算过程不太对。后来爱因斯坦发表了广义相对论，很快史瓦西就根据理论场方程给出了史瓦西解。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220208135030953.png"/><p>第一张黑洞照片</p><p>黑洞的史瓦西解在当时并没有引起多大重视，这个解说时空中间是一个奇点，密度无限大，这实在是超乎想象。但是现在第一张黑洞照片也已经被拍摄出来了，我们几乎确信黑洞就是真实存在的。黑洞长什么样呢？对于史瓦西黑洞，黑洞中间就是一个奇点，这个点密度无限大，在史瓦西半径处这个曲面就叫做事件视界，也就是说只要物质——包括光，进入到事件视界以内，就别想出来了。黑洞比较特殊，它内部的时空坐标是互换的，就是我们理解的半径从表面一直延伸到奇点，这是一个时间坐标，只要进入到黑洞内部，就必须往奇点方向掉，所以严格来说事件视界以内的等半径曲面是一个等时面，奇点处就是时间的终点。假如有一艘宇宙飞船它掉进黑洞的事件视界里了，那他无论向哪个方向加大动力，都只能让他更快地奔向奇点，直至相撞。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220208135057869.png"/><p>不过关于黑洞的形成，从这个抽象的概念提出以后就有人怀疑，说<strong>黑洞坍缩之后会不会不存在奇点呢？</strong> 我们计算出来的奇点可能是理想中的情况，在一个高度对称的情况下的结果，广义相对论的场方程因为十分难解，所以人们确实会先考虑一些对称的情况。但是真实情况，恒星坍缩很有可能不是高度对称的，恒星可能是奇形怪状的，每个地方坍缩的速度不一样，所以最终有可能不是坍缩成一个点。</p><p>这件事儿就是彭罗斯最先给出证明的，他证明了对于史瓦西黑洞不管是不是高度对称，恒星原来可能长的奇形怪状的，都没关系，最终都会坍缩成一个点，就是一个密度无限大的奇点。</p><p>后来是霍金在博士论文中把彭罗斯的证明进行了推广，这是 1966 年的事儿，当年霍金 24 岁，他把彭罗斯的奇点定理推广到了任意黑洞，正是这个奇点定理保证了奇点的存在，这个点在物理上的理解就是时间结束的地方，所有物质只进不出，所以后来人们又研究，那会不会存在时间开始的地方呢？所有物质只出不进呗？理论上存在，就是白洞，广义相对论允许黑洞和白洞的存在。</p><p>但是黑洞可以由恒星坍缩形成，那白洞怎么形成呢？这个问题现在还不是很好理解，所以物理学家其实讨论的并不多。1970 年霍金和彭罗斯共同合作又写了一篇论文，他们认为宇宙大爆炸就是开始于一个奇点，这个奇点就是一个白洞，并且在宇宙大爆炸初期还会形成一些质量很小的黑洞，不过这个但是到现在为止还没有观测证据。</p><p>五十多年来，物理学家一直认为，银河系中心可能存在一个黑洞。自从 19 世纪 60 年代初发现类星体以来，物理学家就认为在包括银河系在内的大多数大型星系中可能会发现超大质量黑洞。然而，目前还没有人能解释星系及其黑洞是如何形成的，并且这些星系及其黑洞的质量介于几百万到数十亿之间。</p><p>一百年前，美国天文学家哈洛·沙普利（Harlow Shapley）率先在人马座的方向上确定了银河系的中心。在后来的观察中，天文学家在那里发现了一个强大的无线电波源，并将那里标记为人马座 A<em>。到了 19 世纪 60 年代末，人们发现，人马座 A</em> 占据了银河系的中心，并且银河系轨道上的所有恒星都围绕着它。</p><p>直到 19 世纪 90 年代，更大的望远镜和更好的设备才使我们对人马座 A* 能进行更系统的研究。赖因哈德·根策尔（Reinhard Genzel）和安德烈娅·盖兹（Andrea Ghez）各自开始了一项研究，他们试图穿过尘埃云观测到银河系的中心。他们与研究小组一起开发和完善了技术，搭建了专业的实验装置，并致力于长期研究。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220208135116278.png"/><p>图三 银河系，我们的星系，它的形状像一个大约 100,000 光年大的光盘。它的旋臂由气体和灰尘以及几千亿颗恒星组成。我们的太阳是这些恒星中的一个。</p><p>只有世界上最大的望远镜才能注视遥远的恒星——天文学上绝对越大越好。德国天文学家赖因哈德·根策尔（Reinhard Genzel）和他的小组最初使用的是 NTT，即智利 La Silla 山上的新型望远镜。后来，他们将观测地点移至 Paranal 山脉（也在智利）的甚大望远镜设施 VLT。VLT 拥有四台巨型望远镜，其大小是 NTT 的两倍，具有世界上最大的单片镜，每片镜的直径均超过 8 米。</p><p>在美国，安德烈娅·盖兹（Andrea Ghez）和她的研究小组使用位于夏威夷冒纳凯阿山（Mauna Kea）上的凯克望远镜。凯克望远镜的口径有近 10 米，是目前世界上口径最大的光学&#x2F;近红外线望远镜。它由 36 个六边形镜片以蜂窝状组合而成，可以分别控制这些镜片来更好地聚焦星光。</p><p>因为我们生活在深达100公里的大气环境中，所以无论望远镜有多大，它们所能分辨的细节都会有所限制。望远镜上方或周围的温度比周围环境高或低，它们上方的空气会像透镜一样将光线折射到望远镜的镜片上，使光波失真。这是星星闪烁的原因，也是其图像模糊的原因。</p><p>自适应光学的出现对于改善观测至关重要。望远镜现在会配备了一个薄的附加镜片，用来补偿空气的湍流带来的影响并校正畸变的图像。</p><p>近三十年来，赖因哈德·根策尔（Reinhard Genzel）和安德烈娅·盖兹（Andrea Ghez）在遥远的银河系中心恒星混杂的环境中观测恒星。他们不断开发和完善他们的技术，并配备了更加灵敏的数字光传感器和更好的自适应光学器件，使图像分辨率提高了千倍以上。他们现在能够更精确地确定星星的位置，并长期进行跟踪。</p><p>研究人员追踪了众多恒星中约 30 个最亮的恒星。恒星在距中心一光月半径内移动最快，在其中进行忙碌的舞蹈，就像一群蜜蜂一样。另一方面，在该区域之外的恒星则以更有序的方式遵循其椭圆形轨道。</p><p>来自两个不同团队的观测结果符合地非常好，这让我们足以肯定在我们所处的银河系的中心，存在着一个黑洞，其质量大约为 4 百万倍太亮质量，其占据的体积和我们的太阳系大小相当。</p><p>我们可能很快就能直接看到人马座 A<em>。这个观测活动就在计划中，在一年以前，事件视界望远镜成功地对一个超大质量黑洞和其周围环境进行成像。这个黑洞就是 M87 星系（又称室女座A星系）黑洞，距离我们 5.5 千万光年，看起来像在漆黑的眼眸外围着一圈深红的火。M87星系黑洞是如此巨大，比起人马座 A</em> 要大 1000 倍。不过和也是在最近发现的相撞产生引力波的两个黑洞相比，这俩还是轻得多。像黑洞一样，在此之前引力波仅作为爱因斯坦广义相对论的理论推演而存在，然后于 2015 年秋季被美国 LIGO 探测器首次探测（2017 年诺贝尔物理学奖）。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220208135132020.png"/><p>罗杰·彭罗斯证实了黑洞是广义相对论的直接结果，广义相对论在超强重力下仍然适用。理论物理领域中正努力构建一套新的量子引力理论。这必须要将物理领域中的两大支柱相结合——相对论与量子力学，黑洞的内部必然是两大理论共同作用的结果。</p><p>同时，观测活动越来越靠近黑洞。赖因哈德·根策尔与安德烈娅·米娅·盖兹的开创性工作为广义相对论及其最古怪的预测提供了新一代精确检验。这些测量也很有可能为新的理论观点提供线索。宇宙仍然有很多秘密与惊喜等着我们去发现。</p></blockquote><p>霍金将彭罗斯的奇点定理推广到了任意黑洞中。</p><p>黑洞奇点是时间结束的地方，白洞是时间开始的地方。广义相对论允许黑洞和白洞的存在。</p><p>黑洞由恒星坍缩而成，但是白洞如何形成，天文学家和物理学家，还没有解释清楚。</p><p><a href="https://baike.baidu.com/item/%E7%99%BD%E6%B4%9E/32547">白洞（特殊天体）_百度百科 (baidu.com)</a></p><blockquote><p>白洞是一个强引力源，其外部引力性质均与黑洞相同，白洞可以把它周围的物质吸积到边界上形成物质层。白洞理论主要可用来解释一些高能天体现象。 [1] </p><p>白洞是宇宙中的喷射源，可以向外部区域提供物质和能量，但不能吸收外部区域的任何物质和辐射，所以白洞是一个只发射、不吸收的特殊宇宙天体，与黑洞正好相反。</p><p>广义相对论所预言的一种性质正好与黑洞相反的特殊天体。白洞还仅是一种理论模型，但尚未被观测所证实。按照白洞理论，白洞和黑洞相似，也有一个封闭的边界。聚集在白洞内的物质，只可以经边界向外运动，而不能反向运动。因此这种天体外面的物质不能进入。</p><p>根据白洞理论，有人认为<a href="https://baike.baidu.com/item/%E7%B1%BB%E6%98%9F%E4%BD%93/347669">类星体</a>的核心可能是一个白洞。当白洞内<a href="https://baike.baidu.com/item/%E8%B6%85%E5%AF%86%E6%80%81%E7%89%A9%E8%B4%A8/1307814">超密态物质</a>向外喷射时，就会同它周围的物质发生猛烈的碰撞，从而释放出巨大能量。由此推断，有些<a href="https://baike.baidu.com/item/X%E5%B0%84%E7%BA%BF">X射线</a>、<a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99%E7%BA%BF/2867206">宇宙线</a>、<a href="https://baike.baidu.com/item/%E5%B0%84%E7%94%B5%E7%88%86%E5%8F%91/5918752">射电爆发</a>、<a href="https://baike.baidu.com/item/%E5%B0%84%E7%94%B5%E5%8F%8C%E6%BA%90/4006483">射电双源</a>等现象，可能会与白洞的这种效应有关。白洞的力是排斥力与黑洞的吸引力相反的力。</p></blockquote><p>1970年，<strong>史蒂芬·霍金</strong>（Stephen Hawking）和<strong>罗杰·彭罗斯</strong>（Roger Penrose）发表了一篇著名的论文，他们证明了，如果让时间一直倒流，那么宇宙故事的开场将是<strong>大爆炸奇点</strong>。</p><h3 id="提出了黑洞面积定理"><a href="#提出了黑洞面积定理" class="headerlink" title="提出了黑洞面积定理"></a>提出了黑洞面积定理</h3><p>黑洞的表面只能随时间增加，不能随时间减小</p><p>两个黑洞可以合并成一个，但是一个黑洞不能分裂成两个</p><blockquote><p>1971年，霍金在宇宙监督假设和强能量条件的基础上推导出了黑洞面积定理：黑洞的表面积不会随着时间的推移而减少。面积定理吸引了许多物理学家，因为它反应了热力学第二定律，即熵不能随着时间减少。</p></blockquote><blockquote><p>1971年，霍金在宇宙监督假设和强能量条件的基础上推导出了黑洞面积定理：黑洞的表面积不会随着时间的推移而减少。面积定理吸引了许多物理学家，因为它反应了热力学第二定律，即熵不能随着时间减少。</p><p>如果黑洞把物体吸入内部，那么它的质量会增加，从而也增加了黑洞的表面积。但是，被吸进的物体会使黑洞角动量增加，使表面积减少。不过，由于附加质量而增加的表面积总是大于由附加转动减少的表面积，最终结果是黑洞的表面积还是增加了。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220208135154732.png"/><p>根据面积定理，两个黑洞可以合并成一个黑洞，合并后的表面积大于合并前各黑洞表面积之和。但是，如果一个大黑洞自发地分裂成两个小黑洞，那么总的表面积将会减少，这和面积定理相违背，因此是不可能发生的。</p><p>理论需要实验的证明，而引力波天文学的发展使我们得以验证霍金的面积定理。麻省理工学院天体物理学家团队分析了2015年探测到的第一个引力波信号。他们将数据分成两个时段：合并前和合并后，且分别计算了它们的表面积。结果发现，新形成黑洞的表面积大于两个旧黑洞的表面积之和，实验的置信水平为95%。</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220208135213765.png"/><p>黑洞和引力波是广义相对论的结果，而面积定理也是从广义相对论发展而来的。之前引力波的观测结果很好地符合了广义相对论，因此面积定理也不太可能偏离。</p><p>霍金的面积定理很好地把黑洞与热力学联系在一起，而霍金辐射则把广义相对论和量子力学联系在一起。由于量子涨落，宇宙中会“凭空”产生一些粒子，通常情况下，这些粒子成对出现并快速结合而湮灭。但是，如果这些粒子出现在黑洞视界附近，其中一个粒子落入黑洞中，另一个粒子自由地逃往宇宙，黑洞就发出了霍金辐射。</p><p>霍金辐射会使黑洞的表面积收缩，违反面积定理。不过，由于霍金辐射非常微弱，需要极长的时间才能观察到面积的缩小，因此它不会阻碍实验的进行。</p></blockquote><p><a href="https://baike.baidu.com/item/%E7%BA%A6%E7%BF%B0%C2%B7%E9%98%BF%E5%A5%87%E5%8D%9A%E5%B0%94%E5%BE%B7%C2%B7%E6%83%A0%E5%8B%92/1983397">约翰·阿奇博尔德·惠勒_百度百科 (baidu.com)</a></p><blockquote><p>为了解释宇宙中大质量<a href="https://baike.baidu.com/item/%E8%B6%85%E5%B7%A8%E6%98%9F/1586057">超巨星</a><a href="https://baike.baidu.com/item/%E5%9D%8D%E7%BC%A9/6259209">坍缩</a>时产生的现象，惠勒创造了“黑洞”这个相当简洁、贴切、概括性的词汇。此外，惠勒还在<a href="https://baike.baidu.com/item/%E6%A0%B8%E8%A3%82%E5%8F%98/492775">核裂变</a>研究领域获得创造性成果，选定铀－235作为制造原子弹的原料，是第一位从事原子弹理论研究的美国人。他曾从事氢弹研制工作，在统一场研究中有相当成就。惠勒在<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E7%90%86%E8%AE%BA/4836762">量子理论</a>和相对论研究上成就巨大，他还创造了诸如“虫洞”和“<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E6%B3%A1%E6%B2%AB/3991717">量子泡沫</a>”等词汇，并且成为物理学中的重要术语。</p><p><strong>黑洞 推翻物理法则</strong></p><p>事实上，惠勒在一个问题上将爱因斯坦理论向前大大推进了。</p><p>1939年，后来成为“<a href="https://baike.baidu.com/item/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%AE%A1%E5%88%92/2141">曼哈顿计划</a>”负责人的<a href="https://baike.baidu.com/item/%E7%BD%97%E4%BC%AF%E7%89%B9%C2%B7%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98/4771793">罗伯特·奥本海默</a>（Robert Oppenheimer）与一名学生称，爱因斯坦的方程式做出了一个天启式的预言：一颗足够重量的死恒星将会崩裂，它制造出极密的堆积，以致光都无法穿越。这颗恒星会一直分裂下去，而宇宙空间则会像个黑斗篷一样将其包裹。在这个堆积中心，空间会无尽地弯曲，物质无穷密集，形成一种既密实又单一的矛盾景象，也就是我们现在说的物质为零的“黑洞中心”。</p><p>惠勒最先是反对这个结论的。1958年在比利时的一场会议中，他与奥本海默对峙。惠勒说，这个崩溃理论未能很好地解释类似恒星中物质的命运，他反驳说，物质怎么可能竟然发展到无物质呢。毕竟，物理法则怎么可能发展到违背自己以达到“无物理”的地步呢？</p><p>但是很快，当解释这颗崩裂行星的内部和外部的数学公式出现时，他与其他一些学者都被说服了。1969年在纽约的一次会议上，为了说服场下听众，他灵机一动，冒出了“黑洞”这个词，以描述这些恒星可怕而充满戏剧性的命运。“黑洞”一词从此流传开来。</p><p>在惠勒1999年的自传中，他写道：“黑洞教育我们空间可以像纸一样被揉捏成一个无穷小的点，小到时间会像火焰一样被熄灭，而我们之前所以为的‘神圣’不可变的物理法则也再不是那样了。”</p><p>1976年，惠勒从<a href="https://baike.baidu.com/item/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E5%A4%A7%E5%AD%A6/400839">普林斯顿大学</a>退休，来到了<a href="https://baike.baidu.com/item/%E5%BE%97%E5%85%8B%E8%90%A8%E6%96%AF%E5%A4%A7%E5%AD%A6/3794332">得克萨斯大学</a>，同时，他开始思考曾经让爱因斯坦和玻尔都感到迷惑的一个问题：如何用<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90/135660">量子</a>结构的奇怪法则来观察现实。“<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E9%9D%A9%E5%91%BD/12299759">量子革命</a>”的基础是海森堡1927年提出的“<a href="https://baike.baidu.com/item/%E4%B8%8D%E7%A1%AE%E5%AE%9A%E5%8E%9F%E7%90%86/4661362">不确定原理</a>”，这个原理给认识自然物质加了很多限制，比如它认为即使在理论上，人们也是不可能同时知道<a href="https://baike.baidu.com/item/%E4%BA%9A%E5%8E%9F%E5%AD%90%E7%B2%92%E5%AD%90/2190815">亚原子粒子</a>的速度和位置的。在这种条件下，如果不去观察的话，亚原子粒子及其运动就会处于一片惠勒称之为“巨大的烟雾龙”的<a href="https://baike.baidu.com/item/%E7%B2%92%E5%AD%90/81757">粒子</a>云状态中，模糊不清。这个想法曾让爱因斯坦很沮丧，他甚至有一次问惠勒，如果人们都不去看月亮的话，那月亮还会不会在天上？</p><p>不过，惠勒却在思考，<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90/135660">量子</a>不确定原则是否能运用于整个宇宙和历史，这点是否是认识所有存在物质的关键。“我们不再满足于仅仅观察粒子，或<a href="https://baike.baidu.com/item/%E5%BC%95%E5%8A%9B%E5%9C%BA/2250565">引力场</a>，或几何，甚至时空，”他在1981年的一篇文章中写道，“今天我们对物理的要求是，要了解存在本身。”</p></blockquote><blockquote><p>作为一位出色的教育家，惠勒对于教育有特殊的理解。“大学里为什么要有学生？”惠勒说，“那是因为老师有不懂的东西，需要学生来帮助解答。” 1970年代初期，惠勒的学生<a href="https://baike.baidu.com/item/%E8%B4%9D%E8%82%AF%E6%96%AF%E5%9D%A6/9544588">贝肯斯坦</a>（Bekenstein）提出，黑洞的视界面积正比于黑洞的熵，这个思想与当时的<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91/171893">霍金</a>等人“黑洞无毛”的观点相悖，几乎所有的黑洞物理学家都站在霍金一边，只有惠勒支持贝肯斯坦，他说：“这个想法足够疯狂了，所以它很有可能是对的。”而贝肯斯坦的确对了。早逝的<a href="https://baike.baidu.com/item/%E8%B4%B9%E6%9B%BC/433887">费曼</a>曾经说：“有人说惠勒晚年陷入了疯狂，其实惠勒一直都疯狂。”</p></blockquote><p><a href="https://baike.baidu.com/item/%E8%B4%9D%E8%82%AF%E6%96%AF%E5%9D%A6/9544588">贝肯斯坦_百度百科 (baidu.com)</a></p><blockquote><p>1972年，<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E5%A4%A7%E5%AD%A6">美国普林斯顿大学</a>青年研究生<a href="https://baike.baidu.com/item/%E8%B4%9D%E8%82%AF%E6%96%AF%E5%9D%A6">贝肯斯坦</a>提出黑洞“<a href="https://baike.baidu.com/item/%E6%97%A0%E6%AF%9B%E5%AE%9A%E7%90%86">无毛定理</a>”：星体坍缩成黑洞后，只剩下质量，角动量，电荷三个基本守恒量继续起作用。其他一切因素（“毛发”）都在进入黑洞后消失了。这一定理后来由霍金等四人严格证明。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/113682483">物质场的纠缠熵及与黑洞熵的关系 - 知乎 (zhihu.com)</a></p><h3 id="霍金辐射"><a href="#霍金辐射" class="headerlink" title="霍金辐射"></a>霍金辐射</h3><p>第二十二期详解</p><blockquote><p><strong>黑洞辐射</strong>（<strong>英语：Hawking radiation</strong>）是以<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90">量子</a>效应理论推测出的一种由<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>散发出来的热辐射。此理论在1974年由物理学家<a href="https://baike.baidu.com/item/%E5%8F%B2%E8%92%82%E8%8A%AC%C2%B7%E9%9C%8D%E9%87%91">史蒂芬·霍金</a>提出。有了霍金辐射的理论就能说明如何降低黑洞的质量而导致黑洞蒸散的现象。</p></blockquote><h1 id="第二十二期-黑洞信息佯谬"><a href="#第二十二期-黑洞信息佯谬" class="headerlink" title="第二十二期 黑洞信息佯谬"></a>第二十二期 黑洞信息佯谬</h1><h2 id="霍金的经历"><a href="#霍金的经历" class="headerlink" title="霍金的经历"></a>霍金的经历</h2><p><a href="https://baike.baidu.com/item/%E6%96%AF%E8%92%82%E8%8A%AC%C2%B7%E5%A8%81%E5%BB%89%C2%B7%E9%9C%8D%E9%87%91/950423">斯蒂芬·威廉·霍金_百度百科 (baidu.com)</a></p><blockquote><p>斯蒂芬·威廉·霍金（Stephen William Hawking），1942年1月8日出生于<a href="https://baike.baidu.com/item/%E8%8B%B1%E5%9B%BD/144602">英国</a><a href="https://baike.baidu.com/item/%E7%89%9B%E6%B4%A5">牛津</a>，出生当天正好是<a href="https://baike.baidu.com/item/%E4%BC%BD%E5%88%A9%E7%95%A5">伽利略</a>逝世300年忌日。父亲法兰克是毕业于<a href="https://baike.baidu.com/item/%E7%89%9B%E6%B4%A5%E5%A4%A7%E5%AD%A6">牛津大学</a>的<a href="https://baike.baidu.com/item/%E7%83%AD%E5%B8%A6%E7%97%85">热带病</a>专家，母亲伊莎贝尔1930年毕业于牛津研究<a href="https://baike.baidu.com/item/%E5%93%B2%E5%AD%A6">哲学</a>、<a href="https://baike.baidu.com/item/%E6%94%BF%E6%B2%BB">政治</a>和<a href="https://baike.baidu.com/item/%E7%BB%8F%E6%B5%8E">经济</a>。</p><p>霍金毕业于<a href="https://baike.baidu.com/item/%E7%89%9B%E6%B4%A5%E5%A4%A7%E5%AD%A6">牛津大学</a>（University of Oxford）和<a href="https://baike.baidu.com/item/%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6">剑桥大学</a>（University of Cambridge），并获<a href="https://baike.baidu.com/item/%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6">剑桥大学</a>博士学位。</p><p>1959年17岁的霍金入读<a href="https://baike.baidu.com/item/%E7%89%9B%E6%B4%A5%E5%A4%A7%E5%AD%A6">牛津大学</a>的大学学院攻读自然科学，用了很少时间而得到一等荣誉学位，随后转读剑桥大学研究<a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99%E5%AD%A6/820648">宇宙学</a>。</p><p>1963年，21岁的他不幸被诊断患有肌肉萎缩性侧索硬化症即运动神经细胞病。当时，医生曾诊断身患绝症的他只能活两年，可他一直坚强地活了下来。</p><p>1965年，23岁时他取得了博士学位留在剑桥大学进行研究工作。</p></blockquote><p><a href="https://baike.baidu.com/item/%E9%9C%8D%E4%BC%8A%E5%B0%94/6407589">霍伊尔（英国天文学家）_百度百科 (baidu.com)</a></p><blockquote><p>福雷德·霍伊尔是英国天文学家，他解决了或协助解决了<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8D%81%E4%B8%96%E7%BA%AA/9861119">二十世纪</a>天文学的许多重要问题，并激励其他的科学家进 行<a href="https://baike.baidu.com/item/%E7%A0%94%E7%A9%B6/1883844">研究</a>。今天，许多天文学家常常提到霍伊尔，认为他是最初<a href="https://baike.baidu.com/item/%E7%81%B5%E6%84%9F/18583">灵感</a>的源泉。</p><p>福雷德·霍伊尔因对恒星内部由氢元素产生其它元素的一种叫做核子融合的过程所做的解释而为科学家们所熟知，然而他最著名成就是他的宇宙稳态理论。</p><p><a href="https://baike.baidu.com/item/%E7%A8%B3%E6%81%92%E6%80%81%E5%AE%87%E5%AE%99%E6%A8%A1%E5%9E%8B">稳恒态宇宙模型_百度百科 (baidu.com)</a></p><blockquote><p>1948 年英国邦迪（Hermann BOndi，1919-），<a href="https://baike.baidu.com/item/%E9%9C%8D%E4%BC%8A%E5%B0%94/6407589">霍伊尔</a>（Fred Hoyle，1915-）和戈尔德（Thomas Gold，1920-）等人提出的宇宙模型。提出<a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E5%AE%87%E5%AE%99%E5%AD%A6%E5%8E%9F%E7%90%86/4490091">完全宇宙学原理</a>，即宇宙在空间上均匀各向同性，在时间上稳恒不变；认为宇宙各处不断从虚无中产生物质，以保证宇宙膨胀中物质密度维持不变。克服了宇宙年龄困难和光度徉谬。在理论上违背了通常的守恒律，没有说明物质产生的具体途径和机制；在观测上得不到星系、<a href="https://baike.baidu.com/item/%E5%B0%84%E7%94%B5%E6%BA%90%E8%AE%A1%E6%95%B0/5914090">射电源计数</a>的支持，也无法解释背景辐射和元素丰度等事实。这条原理必须承认标准<a href="https://baike.baidu.com/item/%E5%A4%A7%E7%88%86%E7%82%B8%E6%A8%A1%E5%9E%8B/2565763">大爆炸模型</a>，假若宇宙以一种极不规则的方式演化，即不会有生命及人类进化出现了，其无法承载所有物理定律，故其被否定了。</p></blockquote></blockquote><p><a href="https://www.nature.com/articles/35001716">Dennis Sciama (1926–99) | Nature</a></p><p>霍金在剑桥研究生时候的老师</p><blockquote><p><strong>Penrose</strong>在新书（Cycles of Time）的前言里，说他50多年前到剑桥读数学研究生时，跟<strong>Dennis Sciama</strong>学过宇宙学。他那本上了电影镜头的大书<em><strong>The Road to Reality</strong></em> (<a href="http://www.sciencenet.cn/blog/user_content.aspx?id=365906">http://www.sciencenet.cn/blog/user_content.aspx?id=365906</a>) 也是敬献给Sciama的——虽然他读的数学，并不是Sciama的专业。 Sciama是大师傅<strong>Dirac</strong>的博士（1953），他自己也成了引领英国宇宙学的大师傅。他（还有美国的<strong>Wheeler</strong>, 俄罗斯的<strong>Zel’dovich</strong>）通过徒子徒孙们，塑造了宇宙学的今天。 与那两位导师不同的是<strong>，Sciama把大部分精力都用来为剑桥的学生营造理想的成长环境，而把个人的研究放在第二位</strong>。所以，他比学生还“落后”，一直没当上剑桥教授，也没获得学生那样的荣誉。 他就像催化剂，促进同学逼近科学前沿。如果伦敦有什么精彩演讲，他会带着同学坐火车去听。他认为，认识宇宙的最佳路线就是依靠他的学生，让学生去解决最艰难的问题，而他去寻找新的问题…… 从Sciama门下走出了30多个学生，包括**George Ellis (1964), Stephen Hawking (1966), Brandon Carter (1967), Martin Rees (1967), Gary Gibbons (1973), James Binney (1975)**等，随便检索几十年来的宇宙学文献，就知道他们是什么样的同学。根据数学物理“族谱”的统计，这些学生的学生有300多个。（<a href="http://genealogy.math.ndsu.nodak.edu/id.php?id=72653&fChrono=1">http://genealogy.math.ndsu.nodak.edu/id.php?id=72653&amp;fChrono=1</a> ）</p><p> Sciama的书我只读过一本《<strong>现代宇宙学</strong>》（有商务印书馆中译本），是他那个时代的入门读物。宇宙学也没忘这个好老师，2009年3月，<strong>Portsmouth</strong>大学将<strong>宇宙学与引力论研究所（ICG）</strong>大楼命名为Sciama楼。 </p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/201011791021695.jpg"/><p>Dennis Sciama (1926-1999)</p></blockquote><h2 id="霍金辐射-1"><a href="#霍金辐射-1" class="headerlink" title="霍金辐射"></a>霍金辐射</h2><p><a href="https://zhuanlan.zhihu.com/p/34655949">史蒂芬·霍金最伟大贡献：霍金辐射 - 知乎 (zhihu.com)</a></p><p>经典的黑洞模型是黑洞只进不去，霍金将量子效应加入到了黑洞之中，量子理论中，真空不是空无一物的，真空中不停地有虚粒子对的出现（一个虚粒子和一个虚反粒子，且在短时间内迅速湮灭）</p><p>虚粒子在短时间内如果不能迅速湮灭，那虚粒子就能通过量子隧穿效应变成实粒子，从而被观察到。</p><p><a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E9%9A%A7%E7%A9%BF%E6%95%88%E5%BA%94/1825408">量子隧穿效应_百度百科 (baidu.com)</a></p><blockquote><p>在<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/131692">量子力学</a>里，<strong>量子隧穿效应</strong>（Quantum tunneling effect）指的是，像<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90/143051">电子</a>等微观粒子能够穿入或穿越位势垒的<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90/135660">量子</a>行为，尽管位势垒的高度大于粒子的总能量。在<a href="https://baike.baidu.com/item/%E7%BB%8F%E5%85%B8%E5%8A%9B%E5%AD%A6/649603">经典力学</a>里，这是不可能发生的，但使用量子力学理论却可以给出合理解释。</p></blockquote><p><a href="https://baike.baidu.com/item/%E5%8D%A1%E8%A5%BF%E7%B1%B3%E5%B0%94%E6%95%88%E5%BA%94/1254463">卡西米尔效应_百度百科 (baidu.com)</a></p><blockquote><p><strong>卡西米尔效应</strong>（英语：Casimir effect）是由<a href="https://baike.baidu.com/item/%E8%8D%B7%E5%85%B0">荷兰</a>物理学家<a href="https://baike.baidu.com/item/%E4%BA%A8%E5%BE%B7%E9%87%8C%E5%85%8B%C2%B7%E5%8D%A1%E8%A5%BF%E7%B1%B3%E5%B0%94">亨德里克·卡西米尔</a>（Hendrik Casimir）于1948年提出的一种现象，此效应随后被侦测到，并以卡西米尔为名以纪念他。其根据<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%9C%BA%E8%AE%BA">量子场论</a>的“真空不空”观念——即使没有物质存在的<a href="https://baike.baidu.com/item/%E7%9C%9F%E7%A9%BA">真空</a>仍有能量涨落，而提出此效应：真空中两片<a href="https://baike.baidu.com/item/%E4%B8%AD%E6%80%A7">中性</a>（不带电）的<a href="https://baike.baidu.com/item/%E9%87%91%E5%B1%9E">金属</a>板会出现吸力；这在经典理论中是不会出现的现象。这种效应只有在两物体的<a href="https://baike.baidu.com/item/%E8%B7%9D%E7%A6%BB">距离</a>非常之小时才可以被检测到。例如，在<a href="https://baike.baidu.com/item/%E4%BA%9A%E5%BE%AE%E7%B1%B3">亚微米</a>尺度上，该效应导致的吸引力成为中性导体之间主要作用力。事实上在10<a href="https://baike.baidu.com/item/%E7%BA%B3%E7%B1%B3">纳米</a>间隙上（大概是一个<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90">原子</a>尺度的100倍），卡西米尔效应能产生1个<a href="https://baike.baidu.com/item/%E5%A4%A7%E6%B0%94%E5%8E%8B">大气压</a>的<a href="https://baike.baidu.com/item/%E5%8E%8B%E5%8A%9B">压力</a>（101.3千帕）。一对中性原子之间的<a href="https://baike.baidu.com/item/%E8%8C%83%E5%BE%B7%E7%93%A6%E8%80%B3%E6%96%AF%E5%8A%9B">范德瓦耳斯力</a>是一种类似的效应。</p></blockquote><p><a href="https://baike.baidu.com/item/%E7%9C%9F%E7%A9%BA%E6%9E%81%E5%8C%96/2454457">真空极化_百度百科 (baidu.com)</a></p><blockquote><p>在<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%9C%BA%E8%AE%BA">量子场论</a>里，尤其是<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E7%94%B5%E5%8A%A8%E5%8A%9B%E5%AD%A6">量子电动力学</a>， <strong>真空极化</strong>是一个在背景<a href="https://baike.baidu.com/item/%E7%94%B5%E7%A3%81%E5%9C%BA">电磁场</a>中产生<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90">电子</a>-正子<a href="https://baike.baidu.com/item/%E8%99%9A%E7%B2%92%E5%AD%90%E5%AF%B9">虚粒子对</a>的过程。 产生的虚粒子对会改变原本电荷和电流的分布。 有时这被视作<a href="https://baike.baidu.com/item/%E8%A7%84%E8%8C%83%E7%8E%BB%E8%89%B2%E5%AD%90">规范玻色子</a>（光子）的自身能量（self energy）。 1997年，日本TRISTAN<a href="https://baike.baidu.com/item/%E7%B2%92%E5%AD%90%E5%8A%A0%E9%80%9F%E5%99%A8/3287178">粒子加速器</a>观测到真空极化的现象。</p><p>根据量子场论，一个包含作用粒子的<a href="https://baike.baidu.com/item/%E5%9F%BA%E6%80%81">基态</a>（或<a href="https://baike.baidu.com/item/%E7%9C%9F%E7%A9%BA%E6%80%81">真空态</a>）不单纯只是个空无一物的空间， 它包含了存活时间很短虚正反粒子对，从真空中产生并彼此湮灭。</p><p>部分正反粒子对带有电荷，例如正负电子对。 这类的粒子对会形成<a href="https://baike.baidu.com/item/%E7%94%B5%E5%81%B6%E6%9E%81%E7%9F%A9">电偶极矩</a>。在电磁场的作用下粒子对会产生位移，并且反过来影响电磁场。 （部分的遮蔽效应或<a href="https://baike.baidu.com/item/%E4%BB%8B%E7%94%B5%E8%B4%A8">介电质</a>效应） 因此场的作用会比原先预期的来得小。 而这个虚粒子对转向的过程就是<strong>真空极化</strong>。</p></blockquote><p><a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E%E8%BE%90%E5%B0%84/10426235">黑洞辐射_百度百科 (baidu.com)</a></p><blockquote><p><strong>霍金辐射</strong>（<strong>英语：Hawking radiation</strong>）是以<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90">量子</a>效应理论推测出的一种由<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>散发出来的热辐射。此理论在1974年由物理学家<a href="https://baike.baidu.com/item/%E5%8F%B2%E8%92%82%E8%8A%AC%C2%B7%E9%9C%8D%E9%87%91">史蒂芬·霍金</a>提出。有了霍金辐射的理论就能说明如何降低黑洞的质量而导致黑洞蒸散的现象。 [1] </p><p>而因为霍金辐射能够让黑洞失去质量，当黑洞损失的质量比增加的质量多的时候就会造成缩小，最终消失。而比较小的微黑洞的发散量通常会比正常的黑洞大，所以前者会比后者缩小与消失的速度还要快。</p><p>霍金的分析迅速成为第一个令人信服的<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%BC%95%E5%8A%9B%E7%90%86%E8%AE%BA/793833">量子引力理论</a>，尽管目前尚未实际观察到霍金辐射的存在。在2008年6月<a href="https://baike.baidu.com/item/NASA">NASA</a>发射了GLAST卫星，它可以寻找蒸发的黑洞中<a href="https://baike.baidu.com/item/%CE%B3%E5%B0%84%E7%BA%BF">γ射线</a>的闪光。而在额外维度理论，<a href="https://baike.baidu.com/item/%E9%AB%98%E8%83%BD%E7%B2%92%E5%AD%90/2360922">高能粒子</a>对撞也有可能创造出会自我消失的微黑洞。</p><p>2010年9月，一项模拟重力研究的结果被部分科学家认为是首次展示出霍金辐射的可能存在与可能性质。然而，霍金辐射仍未被实际观测到。</p><p>黑洞是一个<a href="https://baike.baidu.com/item/%E4%B8%87%E6%9C%89%E5%BC%95%E5%8A%9B">万有引力</a>极大的地方，它周围的<a href="https://baike.baidu.com/item/%E7%89%A9%E8%B4%A8">物质</a>会被重力拉进去。以经典力学上来说，它的引力超强，甚至电磁辐射波也无法逃脱。目前虽尚未了解如何统一<a href="https://baike.baidu.com/item/%E9%87%8D%E5%8A%9B">重力</a>与<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6">量子力学</a>，但远离黑洞之处的重力效应却微弱到依然可以使计算结果符合<a href="https://baike.baidu.com/item/%E5%BC%AF%E6%9B%B2%E6%97%B6%E7%A9%BA">弯曲时空</a>的<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%9C%BA%E8%AE%BA">量子场论</a>框架。霍金表示量子效应允许黑洞发射精确的<a href="https://baike.baidu.com/item/%E9%BB%91%E4%BD%93%E8%BE%90%E5%B0%84">黑体辐射</a>。这电磁辐射仿佛被一个温度和黑洞的质量成<a href="https://baike.baidu.com/item/%E5%8F%8D%E6%AF%94">反比</a>的<a href="https://baike.baidu.com/item/%E9%BB%91%E4%BD%93">黑体</a>发出。</p><p>举例来说，<a href="https://baike.baidu.com/item/%E5%A4%AA%E9%98%B3%E8%B4%A8%E9%87%8F">太阳质量</a>的黑洞的温度仅有60nK；事实上，黑洞会吸收比自身发射要多得多的<a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99%E5%BE%AE%E6%B3%A2%E8%83%8C%E6%99%AF%E8%BE%90%E5%B0%84">宇宙微波背景辐射</a>。黑洞的温度吸收与其发射数量相等的辐射。更小的<a href="https://baike.baidu.com/item/%E5%8E%9F%E7%94%9F%E9%BB%91%E6%B4%9E">原生黑洞</a>则会散发比自身吸收更多的辐射，因此逐渐失去质量。</p><p>在没有霍金辐射的概念以前，物理界有一个难题，就是如果把有很多<a href="https://baike.baidu.com/item/%E7%86%B5">熵</a>的东西丢进黑洞里，那岂不是把那些熵给消灭掉了吗？但是熵在宇宙里是永增不减的，因此这代表黑洞应该也有很多熵，而有熵的任何东西都会释放<a href="https://baike.baidu.com/item/%E9%BB%91%E4%BD%93%E8%BE%90%E5%B0%84">黑体辐射</a>，因此黑洞也会释放黑体辐射？但释放的机制又如何？霍金辐射就解释了黑洞释放黑体辐射的机制。根据<a href="https://baike.baidu.com/item/%E6%B5%B7%E6%A3%AE%E5%A0%A1%E6%B5%8B%E4%B8%8D%E5%87%86%E5%8E%9F%E7%90%86">海森堡测不准原理</a>，在<a href="https://baike.baidu.com/item/%E7%9C%9F%E7%A9%BA">真空</a>中会瞬间凭空且自然地产生许多<a href="https://baike.baidu.com/item/%E7%B2%92%E5%AD%90">粒子</a>-<a href="https://baike.baidu.com/item/%E5%8F%8D%E7%B2%92%E5%AD%90">反粒子</a>（<a href="https://baike.baidu.com/item/%E8%99%9A%E7%B2%92%E5%AD%90">虚粒子</a>）对，并且在极短的时间内成对<a href="https://baike.baidu.com/item/%E6%B9%AE%E7%81%AD">湮灭</a>，在宏观上没有质量产生。</p><p>雅可夫·鲍里索维奇·泽尔多维奇、雅各布·贝肯斯坦和史蒂芬·霍金等物理学者将量子力学和广义相对论结合起来，结果显示视界的温度并非是零，而且还会发光，虽然极其微弱。这种光就是所谓的“霍金辐射”；当成双成对的粒子——如电子和正电子，或一对光子——在强烈的引力场中被制造出来时，其中一个粒子会坠入黑洞，另一个会逃离，从而产生这种辐射。</p><p>如果一个粒子对在黑洞附近形成，由于黑洞的<a href="https://baike.baidu.com/item/%E5%BC%95%E5%8A%9B">引力</a>场很强，导致配对诞生的正反<a href="https://baike.baidu.com/item/%E7%B2%92%E5%AD%90">粒子</a>被扯开，有可能有一个跌入<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E8%A7%86%E7%95%8C">事件视界</a>，而另一个没有，从而被黑洞的引力提升成实粒子。但这样就违反了<a href="https://baike.baidu.com/item/%E8%83%BD%E9%87%8F%E5%AE%88%E6%81%92%E5%AE%9A%E5%BE%8B">能量守恒定律</a>，所以另一个粒子的质量一定是从黑洞本身的<a href="https://baike.baidu.com/item/%E8%B4%A8%E9%87%8F">质量</a>而来——这就是黑洞释放辐射的一个简化解释。</p><p>绝对<a href="https://baike.baidu.com/item/%E7%9C%9F%E7%A9%BA">真空</a>违反了量子力学中的<a href="https://baike.baidu.com/item/%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E5%8E%9F%E7%90%86/473553">不确定性原理</a>，所以并不存在。当空间趋向绝对真空的过程中会产生<a href="https://baike.baidu.com/item/%E8%99%9A%E7%B2%92%E5%AD%90%E5%AF%B9">虚粒子对</a>，两个粒子对撞后又会消失，这样即不会违反量子力学，也不会违反物质守恒。当这种量子现象发生在黑洞的视界边缘，视界之外的虚粒子因为在视界之外，所以可以被观测到，从而变为实粒子，而视界之内的虚粒子因为在视界之内，所以会被黑洞吞噬，不会被观察到。因为视界之外的粒子是带有质量的真实粒子，由质量和能量守恒定律，视界之内被黑洞吞噬的粒子有负质量，所以黑洞的质量会因为这样的作用而减少。从外界看来，黑洞好像在慢慢蒸发。黑洞越小，蒸发速度越快，直到黑洞完全的蒸发。但由于这样的作用极为缓慢，和太阳质量一样的黑洞需要用大约10年来蒸发0.0000001%的质量。</p></blockquote><p>霍金辐射理论带来的结论：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 经典的黑洞理论，黑洞的面积只增不减，在考虑到了量子效应的黑洞理论中，黑洞的面积能减少，甚至黑洞完全蒸发掉<br>2. 霍金辐射保全了热力学第二定律<br>3. 黑洞存在真温度，黑洞是一个具有温度的黑体，黑洞的温度与质量成反比。<br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-08_14-14-29-20.png"/><h2 id="黑洞信息佯谬"><a href="#黑洞信息佯谬" class="headerlink" title="黑洞信息佯谬"></a>黑洞信息佯谬</h2><blockquote><p>黑洞信息佯谬（<a href="https://baike.baidu.com/item/%E8%8B%B1%E8%AF%AD/109997">英语</a>：black hole information paradox）起源于<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/131692">量子力学</a>与<a href="https://baike.baidu.com/item/%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/472897">广义相对论</a>两者的结合。其指出物理<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF/111163">信息</a>可能永久消失于<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E/10952">黑洞</a>中，导致许多<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E6%80%81/301604">量子态</a>简并为单一状态。</p><p><strong>黑洞信息佯谬</strong>（英语：Black hole information paradox）起源于<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6">量子力学</a>与广义相对论两者的结合。其指出物理<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF">信息</a>可能永久消失于<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>中，导致许多不同的物理状态最终会变为相同的状态，跟<a href="https://baike.baidu.com/item/%E6%97%A0%E6%AF%9B%E5%AE%9A%E7%90%86">无毛定理</a>的内涵相符合。这现象违反了一个科学上的宗旨，亦即原则上，由于量子决定性，一物理系统于某个时刻的完整信息会决定其它任意时刻的状态。量子力学中的一项基础假设指出：一系统的完整信息涵盖于其<a href="https://baike.baidu.com/item/%E6%B3%A2%E5%87%BD%E6%95%B0">波函数</a>，直到发生<a href="https://baike.baidu.com/item/%E6%B3%A2%E5%87%BD%E6%95%B0%E5%9D%8D%E7%BC%A9">波函数坍缩</a>。波函数的时间演化由<a href="https://baike.baidu.com/item/%E5%B9%BA%E6%AD%A3%E7%AE%97%E7%AC%A6">幺正算符</a>来决定，而<a href="https://baike.baidu.com/item/%E5%B9%BA%E6%AD%A3%E6%80%A7">幺正性</a>暗示了<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E4%B8%96%E7%95%8C/840122">量子世界</a>信息的保存。</p><p>关于黑洞信息佯谬，有两项原理主导：</p><ul><li>量子决定性：给定目前的波函数，透过演化<a href="https://baike.baidu.com/item/%E7%AE%97%E7%AC%A6">算符</a>可确定地预测出未来的波函数。</li><li><a href="https://baike.baidu.com/item/%E5%8F%AF%E9%80%86%E6%80%A7">可逆性</a>：演化算符具有逆算符，因此过去的波函数与未来的波函数具有一样的决定性。</li></ul><p>这两项原理的结合则表示信息总是得以保存。</p><p>1970年代中期以来，<a href="https://baike.baidu.com/item/%E5%8F%B2%E8%92%82%E8%8A%AC%C2%B7%E9%9C%8D%E9%87%91">史蒂芬·霍金</a>与雅各布·贝肯斯坦将基于广义相对论与量子场论的<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E%E7%83%AD%E5%8A%9B%E5%AD%A6">黑洞热力学</a>推展，发现其结果不只与信息守恒律相矛盾，而且无法解释信息丧失的情形。霍金的计算指出，<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91%E8%BE%90%E5%B0%84">霍金辐射</a>将导致黑洞蒸发而消失，辐射出来的粒子也不会携带任何黑洞内部的线索，导致其中的信息将永远消失。 [1] </p><p>今日许多<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AD%A6%E5%AE%B6">物理学家</a>相信<a href="https://baike.baidu.com/item/%E5%85%A8%E6%81%AF%E5%8E%9F%E7%90%86">全息原理</a>（特别是<a href="https://baike.baidu.com/item/AdS%2FCFT%E5%AF%B9%E5%81%B6">AdS&#x2F;CFT对偶</a>）可指出先前霍金结果的错误，而信息实际上是保存的。2004年，霍金对先前索恩-霍金-普雷斯基尔赌局认输，承认黑洞蒸发确实会保存信息。</p></blockquote><blockquote><p>1975年，<a href="https://baike.baidu.com/item/%E5%8F%B2%E8%92%82%E8%8A%AC%C2%B7%E9%9C%8D%E9%87%91">史蒂芬·霍金</a>与雅各布·贝肯斯坦提出黑洞会缓慢地向外辐射能量，导致了一个问题。由<a href="https://baike.baidu.com/item/%E6%97%A0%E6%AF%9B%E5%AE%9A%E7%90%86">无毛定理</a>，我们可推论<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91%E8%BE%90%E5%B0%84">霍金辐射</a>完全与进入黑洞的物质不相关。然而，如果进入黑洞的物质是个纯<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E6%80%81">量子态</a>，其状态最终会被变换成为霍金辐射的混合态，进而毁灭原量子态的信息。这违反了<a href="https://baike.baidu.com/item/%E5%88%98%E7%BB%B4%E5%B0%94%E5%AE%9A%E7%90%86">刘维尔定理</a>对信息守恒的预测并导致了物理上的佯谬。</p><p>更精确地说，若有个处于<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E7%BA%A0%E7%BC%A0">量子纠缠</a>的标量子态，且该纠缠系统之一部分被抛入黑洞中，留下另一部分在黑洞外。现思考对应于这纯态的密度算符，取这密度算符对于进入黑洞部分的偏迹数，则结果会显示出，在黑洞外的部分处于混合态。但由于任何在黑洞内部的物体都会在有限时间内击中<a href="https://baike.baidu.com/item/%E5%BC%95%E5%8A%9B%E5%A5%87%E7%82%B9">引力奇点</a>，取偏迹数的部分可能会从物理系统里完全消失地杳然无踪。</p><p>霍金相信<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E%E7%83%AD%E5%8A%9B%E5%AD%A6">黑洞热力学</a>与无毛定理的结合会导致量子信息被毁灭的结论。然而，约翰·普雷斯基尔等物理学家则认为信息不会在黑洞中消失，并为此和霍金与<a href="https://baike.baidu.com/item/%E5%9F%BA%E6%99%AE%C2%B7%E7%B4%A2%E6%81%A9">基普·索恩</a>在1997年打了一场赌。这导致伦纳德·萨斯坎德与<a href="https://baike.baidu.com/item/%E6%9D%B0%E6%8B%89%E5%BE%B7%C2%B7%E7%89%B9%C2%B7%E8%83%A1%E5%A4%AB%E7%89%B9">杰拉德·特·胡夫特</a>对霍金的理论“宣战”，萨斯坎德并在2008年著书《<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E%E6%88%98%E4%BA%89">黑洞战争</a>》专述此事。该书并特别说明这场“战争”纯粹是科学上的争论，而参与双方仍旧是朋友。该书以胡夫特提出、萨斯坎德赋予<a href="https://baike.baidu.com/item/%E5%BC%A6%E8%AE%BA">弦论</a>上诠释的<a href="https://baike.baidu.com/item/%E5%85%A8%E6%81%AF%E5%8E%9F%E7%90%86">全息原理</a>作为整场“战争”的总结。</p><p>目前，物理学界有数种解决此佯谬的可能方案。自从1997年<a href="https://baike.baidu.com/item/%E8%83%A1%E5%AE%89%C2%B7%E9%A9%AC%E5%B0%94%E8%BE%BE%E8%A5%BF%E9%82%A3">胡安·马尔达西那</a>提出<a href="https://baike.baidu.com/item/AdS%2FCFT%E5%AF%B9%E5%81%B6">AdS&#x2F;CFT对偶</a>之后，物理学家们大多认为信息是守恒的，并且霍金辐射不完全是热力学的，而是有着量子修正。此外还有其他的可能性，譬如说信息在霍金辐射的末尾被保存在普朗克尺度残余，又或者<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6">量子力学</a>定律的修正以允许非幺正性的时间演变。</p><p>2004年7月，史蒂芬·霍金发表了一篇论文，其中提到<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E8%A7%86%E7%95%8C">事件视界</a>的量子摄动可能可以允许信息从黑洞中逃出，并可能可以解决此佯谬。他的论述假设AdS 黑洞与热量子<a href="https://baike.baidu.com/item/%E5%85%B1%E5%BD%A2%E5%9C%BA%E8%AE%BA">共形场论</a>之AdS&#x2F;CFT对偶的幺正性。在宣布他的结论之后，霍金对先前的索恩-霍金-普雷斯基尔赌局认输，并赠送普雷斯基尔一本棒球百科全书，因为“从中可以任意获取信息”。然而，索恩并没被霍金的证明所说服，因此并未对该赌局认输。2015年3月17日，德扬·史杜高域（Dejan Stojkovic）与安舒尔·赛尼（Anshul Saini）发表在《<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E8%AF%84%E8%AE%BA%E5%BF%AB%E6%8A%A5">物理评论快报</a>》的论文表示，若考虑原先被忽略的粒子间相互作用，霍金辐射即能符合幺正性，信息因此不会丧失。2015年8月25日，霍金在<a href="https://baike.baidu.com/item/%E6%96%AF%E5%BE%B7%E5%93%A5%E5%B0%94%E6%91%A9">斯德哥尔摩</a>皇家工学院发表演说，并认为信息可能被储存在<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E8%A7%86%E7%95%8C">事件视界</a>上，即便原先携带该信息的粒子已经坠入黑洞中，储存在事件视界上的信息则会随霍金辐射重新释放至外界。</p><p>根据<a href="https://baike.baidu.com/item/%E7%BD%97%E6%9D%B0%C2%B7%E5%BD%AD%E7%BD%97%E6%96%AF">罗杰·彭罗斯</a>的说法，量子系统中幺正性的丧失并不是一个问题，因为量子测量本身即不具备幺正性。彭罗斯宣称量子系统在重力的影响之下将不再具备幺正性，而黑洞中正是如此。彭罗斯提出的共形循环宇宙学严重依赖于信息在黑洞中丧失的条件。这个新形态的<a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99%E5%AD%A6%E6%A8%A1%E5%9E%8B/12720901">宇宙学模型</a>可使用对<a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99%E5%BE%AE%E6%B3%A2%E8%83%8C%E6%99%AF%E8%BE%90%E5%B0%84">宇宙微波背景辐射</a>（CMB）数据的详细分析做测试。如果该理论是正确的，则宇宙微波背景辐射将展现温度略高或略低的圆形模式。在2010年11月，彭罗斯和瓦赫·古尔扎江宣布他们在<a href="https://baike.baidu.com/item/%E5%A8%81%E5%B0%94%E9%87%91%E6%A3%AE%E5%BE%AE%E6%B3%A2%E5%90%84%E5%90%91%E5%BC%82%E6%80%A7%E6%8E%A2%E6%B5%8B%E5%99%A8">威尔金森微波各向异性探测器</a>与<a href="https://baike.baidu.com/item/%E6%AF%AB%E7%B1%B3%E6%B3%A2%E6%AE%B5%E6%B0%94%E7%90%83%E8%A7%82%E5%A4%A9%E8%AE%A1%E5%88%92">毫米波段气球观天计划</a>测得的数据发现了此种圆形模式，但他们的结果仍正在处于争论当中。</p></blockquote><p>主要的几种可能解答</p><blockquote><p><strong>信息永久丧失</strong></p><ul><li>优点：看似基于半经典重力较无争议的计算所得出的结论。</li><li>缺点：违反幺正性，以及<a href="https://baike.baidu.com/item/%E8%83%BD%E9%87%8F%E5%AE%88%E6%81%92">能量守恒</a>或<a href="https://baike.baidu.com/item/%E5%9B%A0%E6%9E%9C%E5%BE%8B">因果律</a>。</li></ul><p><strong>信息随黑洞蒸发逐渐释出</strong></p><ul><li>优点：直观上吸引人的，因为它性质上类似于经典燃烧过程中的信息恢复。</li><li>缺点：与经典和半经典重力理论（不允许信息从黑洞内部漏出）有着较大的差异，即便在巨观黑洞的情形之下。</li></ul><p><strong>信息在黑洞蒸发殆尽时瞬间释出</strong></p><ul><li>优点：只在<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%BC%95%E5%8A%9B">量子引力</a>作用主宰时，才会与经典和半经典重力理论有较明显的差异。</li><li>缺点：在信息释出前的瞬间，一个极小的黑洞需要有能力储存任意量的信息，而这违反了<a href="https://baike.baidu.com/item/%E8%B4%9D%E8%82%AF%E6%96%AF%E5%9D%A6%E4%B8%8A%E9%99%90">贝肯斯坦上限</a>。</li></ul><p><strong>信息被储存在普朗克尺度残余</strong></p><ul><li>优点：不需要任何的信息释出机制。</li><li>缺点：为了容纳从任何已蒸发黑洞而来的信息，此类残余需要无限数目的内部态。有人认为，这将有可能产生无限对的该种残余的量，因为它们从低能有效理论的角度来看很小，而且具备不可区别性。</li></ul><p><strong>信息被储存在从本宇宙分离的子宇宙</strong></p><ul><li>优点：此为<a href="https://baike.baidu.com/item/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6-%E5%98%89%E5%BD%93%E7%90%86%E8%AE%BA">爱因斯坦-嘉当理论</a>所预测的情形，该理论将广义相对论扩展至具有内生<a href="https://baike.baidu.com/item/%E8%A7%92%E5%8A%A8%E9%87%8F">角动量</a>的物质，而且没有违反已知的任何物理定律。</li><li>缺点：爱因斯坦-嘉当理论难以被测试，因为该理论的预测与广义相对论所预测的相异处仅存在于极高密度时。 [2]</li></ul><p><strong>信息被储存在未来与过去之间的关联</strong></p><ul><li>优点：半经典重力即已足够。也就是说，这不需要用到尚未被研究透彻的<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%BC%95%E5%8A%9B">量子引力</a>细节部分。</li><li>缺点：违背人们的直观认知，亦即自然是随着时间演变的实体。</li></ul></blockquote><p>信息守恒对应着量子粒子的根基——幺正性</p><p>决定论——拉普拉斯妖：我们可以把宇宙现在的状态视为其过去的果以及未来的因。如果一个智者能知道某一刻所有自然运动的力和所有自然构成的物件的位置，假如他也能够对这些数据进行分析，那宇宙里最大的物体到最小的粒子的运动都会包含在一条简单公式中。对于这智者来说没有事物会是含糊的，而未来只会像过去般出现在他面前。</p><p><a href="https://zhuanlan.zhihu.com/p/35239781">物理四神兽——拉普拉斯的妖 - 知乎 (zhihu.com)</a></p><p><a href="https://baike.baidu.com/item/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%A6%96/886716">拉普拉斯妖（法国数学家拉普拉斯提出的一种假想生物）_百度百科 (baidu.com)</a></p><blockquote><p>拉普拉斯妖（Démon de Laplace）是由法国数学家<a href="https://baike.baidu.com/item/%E7%9A%AE%E5%9F%83%E5%B0%94-%E8%A5%BF%E8%92%99%C2%B7%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF">皮埃尔-西蒙·拉普拉斯</a>于1814年提出的一种假想生物。此“恶魔”知道宇宙中每个<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90/420269">原子</a>确切的位置和<a href="https://baike.baidu.com/item/%E5%8A%A8%E9%87%8F/168287">动量</a>，能够使用<a href="https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E5%AE%9A%E5%BE%8B/10982531">牛顿定律</a>来展现宇宙事件的整个过程，过去以及未来。</p><p>拉普拉斯坚信<a href="https://baike.baidu.com/item/%E5%86%B3%E5%AE%9A%E8%AE%BA/748990">决定论</a>，他在他的概述论（<em>Essai philosophique sur les probabilités</em>）导论部分写道：</p><p>“我们可以把宇宙现在的状态视为其过去的果以及未来的因。如果一个智者能知道某一刻所有自然运动的力和所有自然构成的物件的位置，假如他也能够对这些数据进行分析，那宇宙里最大的物体到最小的粒子的运动都会包含在一条简单公式中。对于这智者来说没有事物会是含糊的，而未来只会像过去般出现在他面前。”</p><p>拉普拉斯这里所说的“智者”即后人所谓的拉普拉斯妖。</p></blockquote><p>在含时薛定谔方程中，对于一个量子态的过去和将来是一件很确定的事</p><blockquote><p>薛定谔方程（Schrödinger equation），又称<a href="https://baike.baidu.com/item/%E8%96%9B%E5%AE%9A%E8%B0%94/165034">薛定谔</a>波动方程（Schrodinger wave equation），是由奥地利物理学家薛定谔提出的量子力学中的一个<a href="https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E6%96%B9%E7%A8%8B/10673664">基本方程</a>，也是量子力学的一个基本假定。</p><p>它是将<a href="https://baike.baidu.com/item/%E7%89%A9%E8%B4%A8%E6%B3%A2/3288667">物质波</a>的概念和<a href="https://baike.baidu.com/item/%E6%B3%A2%E5%8A%A8%E6%96%B9%E7%A8%8B/1613956">波动方程</a>相结合建立的二阶<a href="https://baike.baidu.com/item/%E5%81%8F%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/818038">偏微分方程</a>，可描述<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%A7%82">微观</a>粒子的运动，每个微观系统都有一个相应的薛定谔<a href="https://baike.baidu.com/item/%E6%96%B9%E7%A8%8B%E5%BC%8F/1285238">方程式</a>，通过解方程可得到<a href="https://baike.baidu.com/item/%E6%B3%A2%E5%87%BD%E6%95%B0/473629">波函数</a>的具体形式以及对应的能量，从而了解微观系统的性质。薛定谔方程表明量子力学中，粒子以概率的方式出现，具有不确定性，宏观尺度下失效可忽略不计。</p></blockquote><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220208144239280.png"/><p><a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E6%80%81/301604">量子态_百度百科 (baidu.com)</a></p><blockquote><p>在<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E7%89%A9%E7%90%86/7052617">量子物理</a>中，量子态描述了一个孤立系统的状态，包含了系统所有的信息。如根据<a href="https://baike.baidu.com/item/%E7%8E%BB%E6%81%A9/434164">玻恩</a>的波函数统计解释，只要知道了系统量子态的信息，就能给出对系统进行测量的结果。量子态包括纯态和混态。</p></blockquote><p><a href="https://baike.baidu.com/item/%E9%A9%AC%E5%85%8B%E6%96%AF%C2%B7%E7%8E%BB%E6%81%A9">马克斯·玻恩_百度百科 (baidu.com)</a></p><blockquote><p>马克斯·玻恩（Max Born，1882年12月11日—1970年1月5日），男，是德国犹太裔<a href="https://baike.baidu.com/item/%E7%90%86%E8%AE%BA%E7%89%A9%E7%90%86%E5%AD%A6">理论物理学</a>家、量子力学奠基人之一，因对量子力学的基础性研究尤其是对<a href="https://baike.baidu.com/item/%E6%B3%A2%E5%87%BD%E6%95%B0/473629">波函数</a>的<a href="https://baike.baidu.com/item/%E7%BB%9F%E8%AE%A1%E5%AD%A6/1175">统计学</a>诠释而获得1954年的<a href="https://baike.baidu.com/item/%E8%AF%BA%E8%B4%9D%E5%B0%94%E7%89%A9%E7%90%86%E5%AD%A6%E5%A5%96/211390">诺贝尔物理学奖</a>。</p><p>马克斯·玻恩1901年起在<a href="https://baike.baidu.com/item/%E5%B8%83%E9%9B%B7%E6%96%AF%E5%8A%B3/7064769">布雷斯劳</a>、<a href="https://baike.baidu.com/item/%E6%B5%B7%E5%BE%B7%E5%A0%A1/962636">海德堡</a>、<a href="https://baike.baidu.com/item/%E8%8B%8F%E9%BB%8E%E4%B8%96/763726">苏黎世</a>和<a href="https://baike.baidu.com/item/%E5%93%A5%E5%BB%B7%E6%A0%B9/4180601">哥廷根</a>等各所大学学习，先是法律和伦理学，后是数学、物理和天文学。1907年获得博士学位。1912年与西尔多·冯·卡门合作发表了《关于空间点阵的振动》的著名论文，从此开始了他以后几十年创立点阵理论的事业。1921年成为哥廷根大学物理系主任。 [1] 1936年任<a href="https://baike.baidu.com/item/%E7%88%B1%E4%B8%81%E5%A0%A1%E5%A4%A7%E5%AD%A6/323601">爱丁堡大学</a>教授，1937年当选为英国伦敦<a href="https://baike.baidu.com/item/%E7%9A%87%E5%AE%B6%E5%AD%A6%E4%BC%9A">皇家学会</a>会员。玻恩还是《哥廷根宣言》的签署人。</p></blockquote><p><a href="https://baike.baidu.com/item/%E6%B3%A2%E5%87%BD%E6%95%B0/473629">波函数_百度百科 (baidu.com)</a></p><blockquote><p>波函数是<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/131692">量子力学</a>中描写微观系统状态的函数。在经典力学中，用<a href="https://baike.baidu.com/item/%E8%B4%A8%E7%82%B9/495707">质点</a>的位置和<a href="https://baike.baidu.com/item/%E5%8A%A8%E9%87%8F/168287">动量</a>（或速度）来描写宏观质点的状态，这是质点状态的经典描述方式，它突出了质点的<a href="https://baike.baidu.com/item/%E7%B2%92%E5%AD%90%E6%80%A7/8754634">粒子性</a>。由于<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%A7%82%E7%B2%92%E5%AD%90/1125264">微观粒子</a>具有<a href="https://baike.baidu.com/item/%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/213638">波粒二象性</a>，粒子的位置和动量不能同时有确定值（见<a href="https://baike.baidu.com/item/%E6%B5%8B%E4%B8%8D%E5%87%86%E5%85%B3%E7%B3%BB">测不准关系</a>），因而质点状态的经典描述方式不适用于对<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%A7%82%E7%B2%92%E5%AD%90/1125264">微观粒子</a>状态的描述，物质波于宏观尺度下表现为对几率波函数的期望值，不确定性失效可忽略不计。</p></blockquote><p><a href="https://www.wanweibaike.net/wiki-%E5%88%98%E7%BB%B4%E5%B0%94%E5%AE%9A%E7%90%86_(%E5%93%88%E5%AF%86%E9%A1%BF%E5%8A%9B%E5%AD%A6)">刘维尔定理 (哈密顿力学) - 万维百科 (wanweibaike.net)</a></p><p><a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E5%AE%88%E6%81%92%E5%AE%9A%E5%BE%8B/878197">信息守恒定律_百度百科 (baidu.com)</a></p><blockquote><p>2004年7月21日，在<a href="https://baike.baidu.com/item/%E7%88%B1%E5%B0%94%E5%85%B0/40941">爱尔兰</a><a href="https://baike.baidu.com/item/%E9%83%BD%E6%9F%8F%E6%9E%97/907226">都柏林</a>举行的“第17届国际广义相对论和万有引力大会”上，英国传奇科学家斯蒂芬·霍金教授宣布了他对<a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99%E9%BB%91%E6%B4%9E/810829">宇宙黑洞</a>的最新研究结果，<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91/171893">霍金</a>的态度来了个180度转弯，表示自己原来的观点错了，信息应该守恒：黑洞并非如他和其他大多数物理学家以前认为的那样，对其周遭的一切“完全吞食”，事实上被吸入黑洞深处的物质的某些信息实际上可能会在某个时候释放出来：信息守恒。</p></blockquote><blockquote><h3 id="黑洞内涵"><a href="#黑洞内涵" class="headerlink" title="黑洞内涵"></a>黑洞内涵</h3><p>原因是先前把黑洞想得太理想化了，把黑洞<a href="https://baike.baidu.com/item/%E7%83%AD%E8%BE%90%E5%B0%84/120950">热辐射</a>也想得太理想化了。不过，霍金一直没有给出严格的证明来支持自己的新观点。<a href="https://baike.baidu.com/item/%E7%B4%A2%E6%81%A9/3497142">索恩</a>表示此事不能由<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91/171893">霍金</a>一个人说了算，他仍坚持信息不守恒的看法。普瑞斯基则表示没有听懂霍金的演讲，不明白自己为什么赢了。目前，这一牵扯到量子论基础的敏感问题还远未解决。</p><p>黑洞不仅仅是一颗死亡了的星体，它具有丰富的内涵。黑洞的<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91%E8%BE%90%E5%B0%84">霍金辐射</a>理论表明，黑洞不仅具有一般的力学性质，而且具有<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90">量子</a>性质和热性质。如果<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>的辐射谱为严格的<a href="https://baike.baidu.com/item/%E9%BB%91%E4%BD%93%E8%B0%B1">黑体谱</a>，则<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E%E8%BE%90%E5%B0%84">黑洞辐射</a>过程中信息丢失。Parikh和Wilczek认为，黑洞的霍金辐射的确可以看成是一种<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E6%95%88%E5%BA%94">量子效应</a>，但辐射<a href="https://baike.baidu.com/item/%E7%B2%92%E5%AD%90/81757">粒子</a>贯穿的<a href="https://baike.baidu.com/item/%E5%8A%BF%E5%9E%92/8488017">势垒</a>不是预先存在的，而是由出射粒子自身产生的。他们的研究结果支持信息守恒。</p><h3 id="黑洞理论研究"><a href="#黑洞理论研究" class="headerlink" title="黑洞理论研究"></a>黑洞理论研究</h3><p><a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>理论的研究已经超出了黑洞本身，它不仅通过信息疑难触及了量子论的重要基石——<a href="https://baike.baidu.com/item/%E5%B9%BA%E6%AD%A3%E6%80%A7">幺正性</a>，而且掀开了探讨时间性质的新篇章。</p><p>黑洞内部有一个<a href="https://baike.baidu.com/item/%E5%A5%87%E7%82%B9">奇点</a>，那是<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E7%BB%88%E7%BB%93/6604730">时间终结</a>的地方。<a href="https://baike.baidu.com/item/%E5%A4%A7%E7%88%86%E7%82%B8">大爆炸</a>宇宙有一个初始奇点，那是时间开始的地方。彭若斯和<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91/171893">霍金</a>曾经证明过一个“<a href="https://baike.baidu.com/item/%E5%A5%87%E6%80%A7%E5%AE%9A%E7%90%86">奇性定理</a>”，该定理表明，任何一个真实的时空都一定存在奇点，即一定存在时间有开始或终结的过程。时间有没有开始和结束，原本是哲学家和神学家议论的话题，现在经过对黑洞和宇宙的研究，这一话题被纳入了物理学的领域。</p><p>宇宙学家相信，太空中有许多类型的黑洞，从质量相当于一座山的小黑洞，到位于星系中央的<a href="https://baike.baidu.com/item/%E8%B6%85%E7%BA%A7%E9%BB%91%E6%B4%9E">超级黑洞</a>，不一而足。科学家过去认为，从巨大的星体到<a href="https://baike.baidu.com/item/%E6%98%9F%E9%99%85%E5%B0%98%E5%9F%83">星际尘埃</a>等，一旦掉进去，就再不能逃出，就连光也不能“幸免于难”。而<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91/171893">霍金</a>教授关于<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>的最新研究有可能打破这一结论。经过长时间的研究，他发现，一些被黑洞吞没的物质随着时间的推移，慢慢地从黑洞中“流淌”出来。</p><p>霍金关于黑洞的这一新理论解决了关于黑洞信息的一个似是而非的观点，他的<a href="https://baike.baidu.com/item/%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6/278542">剑桥大学</a>的同行都为此兴奋不已。过去，黑洞一直被认为是一种纯粹的破坏力量，而现在的最新研究表明，黑洞在星系形成过程中可能扮演了重要角色。</p><p>2013年5月14日，美国引力基金会宣布，中国科学院武汉物理与数学研究所<a href="https://baike.baidu.com/item/%E5%BC%A0%E4%BF%9D%E6%88%90/12801043">张保成</a>副研究员、蔡庆宇研究员、<a href="https://baike.baidu.com/item/%E8%A9%B9%E6%98%8E%E7%94%9F/8788608">詹明生</a>研究员和清华大学尤力教授合作完成的题为“信息守恒是基本定律：揭示<a href="https://baike.baidu.com/item/%E9%9C%8D%E9%87%91%E8%BE%90%E5%B0%84/472934">霍金辐射</a>中丢失的信息”的论文荣获本年度引力论文比赛第一名。</p><p>本篇获奖文章首先从<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E4%BF%A1%E6%81%AF/2392884">量子信息</a>的角度阐述了信息守恒是自然界的必然要求。随后，结合作者之前的工作，即在隧穿辐射的物理图像下，证明了<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E%E8%BE%90%E5%B0%84/10426235">黑洞辐射</a>之间存在携带信息的关联以及整个辐射过程中熵守恒，文章指出信息守恒仍然是自然界的基本定律，即使黑洞这样的强引力体系也莫能例外。在文中，结合他们最近的理论研究结果，作者还分析了如何进一步在实验中检验黑洞信息丢失问题，并且指出一旦LHC实验中观测到<a href="https://baike.baidu.com/item/%E9%AB%98%E8%83%BD%E7%B2%92%E5%AD%90/2360922">高能粒子</a>碰撞产生的小黑洞，并且辐射粒子能量的协方差和理论计算结果一致，则可以在实验上进一步确认黑洞信息守恒。在理论上证明黑洞信息守恒，这不仅进一步展示了量子力学的普适性，而且对构建量子力学与引力的统一理论具有重要的启示作用。 [1] </p></blockquote><p>如何将量子力学与广义相对论统一</p><ul><li>弦论:<a href="https://www.bilibili.com/video/BV1bQ4y1h7je/">【统一之路】超弦理论(6)：全息原理和AdS&#x2F;CFT（第30期）_哔哩哔哩_bilibili</a></li><li>圈量子引力</li></ul><p><a href="https://baike.baidu.com/item/%E5%BC%A6%E7%90%86%E8%AE%BA/1055975">弦理论（理论物理的一个分支学科）_百度百科 (baidu.com)</a></p><blockquote><p>弦理论，是<a href="https://baike.baidu.com/item/%E7%90%86%E8%AE%BA%E7%89%A9%E7%90%86/2490260">理论物理</a>的一个分支学科，弦论的一个基本观点是，自然界的基本单元不是电子、光子、中微子和夸克之类的点状粒子，而是很小很小的线状的“弦”（包括有端点的“开弦”和圈状的“<a href="https://baike.baidu.com/item/%E9%97%AD%E5%BC%A6/9983692">闭弦</a>”或闭合弦）。弦的不同振动和运动就产生出各种不同的基本粒子，能量与物质是可以转化的，故弦理论并非证明物质不存在。弦论中的弦尺度非常小，操控它们性质的基本原理预言，存在着几种尺度较大的薄膜状物体，后者被简称为“膜”。直观的说，我们所处的宇宙空间可能是9+1维时空中的D3膜。弦论是现在最有希望将自然界的基本粒子和四种<a href="https://baike.baidu.com/item/%E7%9B%B8%E4%BA%92%E4%BD%9C%E7%94%A8%E5%8A%9B/8750748">相互作用力</a>统一起来的理论。</p><p>弦理论是一门理论物理学上的学说。理论里的物理模型认为组成所有物质的最基本单位是一小段“能量弦线”，大至星际<a href="https://baike.baidu.com/item/%E9%93%B6%E6%B2%B3">银河</a>，小至<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90/143051">电子</a>，<a href="https://baike.baidu.com/item/%E8%B4%A8%E5%AD%90/65645">质子</a>，<a href="https://baike.baidu.com/item/%E5%A4%B8%E5%85%8B/76646">夸克</a>一类的基本粒子都是由这占有<a href="https://baike.baidu.com/item/%E4%BA%8C%E7%BB%B4%E6%97%B6%E7%A9%BA">二维时空</a>的“能量线”所组成。中文的翻译上，一般是译作“弦”。超弦理论可以解决和<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E/10952">黑洞</a>相关的问题。</p><p>在弦理论中，基本对象不是占据空间单独一点的基本粒子，而是一维的弦。这些弦可以有<a href="https://baike.baidu.com/item/%E7%AB%AF%E7%82%B9/7622759">端点</a>，或者他们可以自己连接成一个闭合圈环。正如小提琴上的弦，弦理论中支持一定的振荡模式，或者<a href="https://baike.baidu.com/item/%E5%85%B1%E6%8C%AF">共振</a>频率，其<a href="https://baike.baidu.com/item/%E6%B3%A2%E9%95%BF/829184">波长</a>准确地配合。</p></blockquote><p><a href="https://baike.baidu.com/item/%E5%9C%88%E9%87%8F%E5%AD%90%E5%BC%95%E5%8A%9B/10450703">圈量子引力_百度百科 (baidu.com)</a></p><blockquote><p>圈量子引力的主要物理设想都以<a href="https://baike.baidu.com/item/%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/472897">广义相对论</a>和量子力学为基础， 而不附加任何额外的结构。作为一个数学上严格的不依赖于背景的理论框架， 它成功地贯彻了<a href="https://baike.baidu.com/item/%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/472897">广义相对论</a>的本质思想， 导出了时空的不连续性， 与<a href="https://baike.baidu.com/item/%E7%89%A9%E8%B4%A8%E5%9C%BA/8892811">物质场</a>的藕合给出了不发散的结果， 并且提供了研究<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E9%BB%91%E6%B4%9E/4274737">量子黑洞</a>物理和<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%AE%87%E5%AE%99%E5%AD%A6/3225999">量子宇宙学</a>的严格的理论框架。由于所触及问题的根本性和复杂性，这一领域的研究依然有待取得更大的进展。研究的核心是该理论的低能近似和<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90/135660">量子</a><a href="https://baike.baidu.com/item/%E5%8A%A8%E5%8A%9B%E5%AD%A6/650892">动力学</a>问题。</p></blockquote><h1 id="第二十三期-宇宙膨胀"><a href="#第二十三期-宇宙膨胀" class="headerlink" title="第二十三期 宇宙膨胀"></a>第二十三期 宇宙膨胀</h1>]]></content>
    
    
    <categories>
      
      <category>天文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>天文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春节-历法</title>
    <link href="/blog/post/Astronomy/SpringFestival_Calendar/"/>
    <url>/blog/post/Astronomy/SpringFestival_Calendar/</url>
    
    <content type="html"><![CDATA[<h1 id="历法"><a href="#历法" class="headerlink" title="历法"></a>历法</h1><p>冬奥会</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/冬奥会.jpg"/><h2 id="阳历"><a href="#阳历" class="headerlink" title="阳历"></a>阳历</h2><p><a href="https://baike.baidu.com/item/%E5%A4%AA%E9%98%B3%E5%8E%86/4857744">太阳历_百度百科 (baidu.com)</a></p><blockquote><p><a href="https://baike.baidu.com/item/%E5%A4%AA%E9%98%B3/9954365">太阳</a>历又称为阳历，是以地球绕太阳公转的运动周期为基础而制定的历法。</p><p>太阳历的历年近似等于回归年，一年12个月，这个“月”，实际上与朔望月无关。</p><p>阳历的月份、日期都与太阳在<a href="https://baike.baidu.com/item/%E9%BB%84%E9%81%93/14773">黄道</a>上的位置较好地符合，根据阳历的<a href="https://baike.baidu.com/item/%E6%97%A5%E6%9C%9F/10041963">日期</a>，在一年中可以明显看出四季寒暖变化的情况；但在每个月份中，看不出月亮的朔、望、两弦。</p><p>如今<a href="https://baike.baidu.com/item/%E4%B8%96%E7%95%8C/24458">世界</a>通行的公历就是一种阳历，平年365天，闰年366天，每四年一闰，每满百年少闰一次，到第四百年再闰，即每四百年中有97个闰年。公历的历年平均长度与回归年只有26秒之差，要累积3300年才差一日。</p></blockquote><h2 id="阴历"><a href="#阴历" class="headerlink" title="阴历"></a>阴历</h2><p><a href="https://baike.baidu.com/item/%E9%98%B4%E5%8E%86/450297">阴历_百度百科 (baidu.com)</a></p><blockquote><p>阴历是中国传统历法之一，也被称为旧历、汉历、古历等，辛亥革命后改用西方太阳历（公历），而现代叫法的农历属于阴阳合历。</p><p>阴历在中国传统历法中主要指按月球的月相周期变化来安排的历法，即以朔望月作为确定历月的基础，一年为十二个历月的一种历法。在历法发展衍变过程中，与干支历中二十四节气结合形成了农历（汉历），用于科学地指导农业生产。虽然，阴历、农历都俗称古历、汉历、旧历，不过阴历和农历（汉历）是有区别的，传统上使用的农历（汉历）实际上是一种阴阳合历，而不是传统意义上的阴历。</p><p>阴历定月的依据是月亮球的运动规律：月球运行的轨道，名曰白道，白道与黄道同为天体上之两大圆，以五度九分而斜交，月球绕地球一周，出没于黄道者两次，历时二十七日七小时四十三分十一秒半（27.32日），为月球公转一周所需的时间，谓之“恒星月”。唯当月球绕地球之时，地球因绕日公转而位置亦有变动，计前进二十七度余，而月球每日行十三度十五分，故月球自合朔，全绕地球一周，复至合朔，实需二十九日十二时四十四分二秒八（29.53天），谓之“朔望月”，习俗所谓一个月，即指朔望月而言。</p></blockquote><h2 id="农历"><a href="#农历" class="headerlink" title="农历"></a>农历</h2><p><a href="https://baike.baidu.com/item/%E5%86%9C%E5%8E%86/67925">农历（中国传统历法）_百度百科 (baidu.com)</a></p><blockquote><p>农历，<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%9B%BD%E4%BC%A0%E7%BB%9F%E5%8E%86%E6%B3%95/10633918">中国传统历法</a>。它根据月相的变化周期，每一次月相朔望变化为一个月；并把一个太阳回归年划分为24段，形成<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8D%81%E5%9B%9B%E8%8A%82%E6%B0%94/191597">二十四节气</a>。通过参考太阳回归年，设置<a href="https://baike.baidu.com/item/%E9%97%B0%E6%9C%88/380225">闰月</a>使其平均历年与回归年相适应。农历融合<a href="https://baike.baidu.com/item/%E9%98%B4%E5%8E%86/450297">阴历</a>与<a href="https://baike.baidu.com/item/%E9%98%B3%E5%8E%86/90076">阳历</a>形成为一种阴阳合历历法。</p><p>农历又有夏历、阴历、旧历、华历、中历等称。因使用“夏正”，旧时多称为夏历，1970年以后“<a href="https://baike.baidu.com/item/%E5%A4%8F%E5%8E%86/2263478">夏历</a>”改称为“农历”。农历属于阴阳合历，其年份分为<a href="https://baike.baidu.com/item/%E5%B9%B3%E5%B9%B4">平年</a>和<a href="https://baike.baidu.com/item/%E9%97%B0%E5%B9%B4">闰年</a>。平年为十二个月；闰年为十三个月。月份分为大月和小月，<a href="https://baike.baidu.com/item/%E5%A4%A7%E6%9C%88">大月</a>三十天，<a href="https://baike.baidu.com/item/%E5%B0%8F%E6%9C%88/29773">小月</a>二十九天，其平均历月等于一个<a href="https://baike.baidu.com/item/%E6%9C%94%E6%9C%9B%E6%9C%88">朔望月</a>。</p><p>农历作为阴阳合历，其使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8D%81%E5%9B%9B%E8%8A%82%E6%B0%94/191597">二十四节气</a>来表征阳历部分。</p><p>2017年颁布的农历编算标准中以“太阳视黄经变化360°的<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4/25651">时间</a>间隔。该时间间隔内，<a href="https://baike.baidu.com/item/%E5%9C%B0%E7%90%83/6431">地球</a>上经历一个完整的四季变换周期。” [3] 为一个<a href="https://baike.baidu.com/item/%E5%9B%9E%E5%BD%92%E5%B9%B4/899065">回归年</a>，太阳从黄经零度起，沿黄经每运行15度所经历的时日称为一个节气。每年运行360度。以“一个回归年内24个太阳地心视黄经等于15度的整数倍的时刻的总称。” [3] 为<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8D%81%E5%9B%9B%E8%8A%82%E6%B0%94/191597">二十四节气</a>。</p></blockquote><h2 id="公历"><a href="#公历" class="headerlink" title="公历"></a>公历</h2><p><a href="https://baike.baidu.com/item/%E5%85%AC%E5%85%83/17855">公元（纪年体系）_百度百科 (baidu.com)</a></p><blockquote><p>公元，即<a href="https://baike.baidu.com/item/%E5%85%AC%E5%8E%86%E7%BA%AA%E5%B9%B4/7247681">公历纪年</a>法，是一种源自于<a href="https://baike.baidu.com/item/%E8%A5%BF%E6%96%B9/1726251">西方</a><a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A/73320">社会</a>的<a href="https://baike.baidu.com/item/%E7%BA%AA%E5%B9%B4/792970">纪年</a><a href="https://baike.baidu.com/item/%E6%96%B9%E6%B3%95/2444">方法</a>。原称<a href="https://baike.baidu.com/item/%E5%9F%BA%E7%9D%A3%E7%BA%AA%E5%85%83/2916418">基督纪元</a>，又称<a href="https://baike.baidu.com/item/%E8%A5%BF%E5%8E%86/10107438">西历</a>或<a href="https://baike.baidu.com/item/%E8%A5%BF%E5%85%83/3653975">西元</a>，是由<a href="https://baike.baidu.com/item/%E6%84%8F%E5%A4%A7%E5%88%A9/148336">意大利</a>医生兼哲学家Aloysius Lilius对儒略历加以改革而制成的一种历法——《<a href="https://baike.baidu.com/item/%E6%A0%BC%E9%87%8C%E5%8E%86/7107947">格里历</a>》。<a href="https://baike.baidu.com/item/1582%E5%B9%B4/2225465">1582年</a>，时任罗马教皇的<a href="https://baike.baidu.com/item/%E6%A0%BC%E5%88%97%E9%AB%98%E5%88%A9%E5%8D%81%E4%B8%89%E4%B8%96/9311830">格列高利十三世</a>予以<a href="https://baike.baidu.com/item/%E6%89%B9%E5%87%86/9027557">批准</a>颁行。</p><p>公历纪年以耶稣诞生之年作为纪年的开始。在儒略历与<a href="https://baike.baidu.com/item/%E6%A0%BC%E9%87%8C%E9%AB%98%E5%88%A9%E5%8E%86/9556174">格里高利历</a>中，在耶稣诞生之后的日期，称为主的年份Anno Domini（A.D.）（拉丁）。而在耶稣诞生之前，称为主前Before Christ（B.C.）。但是现代学者为了淡化其宗教色彩以及避免非基督徒的反感而多半改称用“公元”（Common era，缩写为C.E.）与“公元前”（Before the Common Era，缩写为 B.C.E.）的说法。</p><p><a href="https://baike.baidu.com/item/%E8%BE%9B%E4%BA%A5%E9%9D%A9%E5%91%BD/5560">辛亥革命</a>爆发后次年（1912年），当时的<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%8D%8E%E6%B0%91%E5%9B%BD%E6%94%BF%E5%BA%9C/10323308">中华民国政府</a>采用公历作为国历，纪年方面，<a href="https://baike.baidu.com/item/%E5%85%AC%E5%85%83%E7%BA%AA%E5%B9%B4%E6%B3%95/1877551">公元纪年法</a>与<a href="https://baike.baidu.com/item/%E6%B0%91%E5%9B%BD%E7%BA%AA%E5%B9%B4%E6%B3%95/4076711">民国纪年法</a>并行。</p><p>1949年9月27日，经过中国人民政治协商会议第一届全体会议通过，新成立的中华人民共和国使用国际社会上大多数国家通用的公历和公元作为历法与纪年。</p></blockquote><h1 id="春节译法"><a href="#春节译法" class="headerlink" title="春节译法"></a>春节译法</h1><p><a href="https://weibo.com/tv/show/1034:4732849572741223">https://weibo.com/tv/show/1034:4732849572741223</a></p><p>最近外网大平台，出现了我们农历新年英文该如何翻译的大讨论或者是争论。无非就是韩国甚至越南等等国家要求农历新年翻译成Lunar New Year （阴历新年或者是月亮历新年吧）。理由是农历春节是流行于东亚甚至是南亚许多地方的，而且基本都有上千年或者是至少几百年的历史了，而且许多习俗大同小异。要是翻译成Chinese New Year，就变成中国新年或者是中国春节了，会伤害其他国家的自尊心等等。<br>而这个提议被许多西方国家也开始注意和接纳，这个本来也不奇怪。但我们自己作为中国历的发祥地和许多年俗的创始地，在这点上却是不能附和的吧。但我们现在许多官方教材和翻译中也大量使用所谓更正式的Lunar New Year这个译法了。这个趋势是需要校正一下的吧。<br>必须坚持翻译成“中国春节Chinese New Year”，如果我们自己官方也跟着起舞，跟随其他人也翻译成“Lunar New Year 阴历新年”，后边局面恐怕就越来越混乱了。</p><p>首先， “传统新年”许多地方都有的，目前的西历（罗马历法）没占据世界编年主流时候，世界各地出现过许多编年纪时纪年历法的，而且其中大把的按月亮或按太阳运转纪年的，只是大多都不够精准或影响力不够，最后逐渐消亡退出历史了。<br>要知道没有一个强大的国家力量持续支持研究积累，而且没有一群人上百年经年的观测记录校正话，无论是月亮历还是太阳历诞生都是困难的，勉强作出来的也会是粗糙无法流行实用的。<br>我们今天流行的农历，事实上并不是简单的月亮历，而是多种历法的综合矫正结果。比如二十四节气明明就是结合太阳年度运转的结晶；还有闰年闰月的，必须是能发现月亮和太阳运转纪年差距时候才能才会做的事。<br>更直白的再说一句吧：我们今天的春节是中国农历的新年，不是简单月亮历法的新年。所以，翻译只能是Chinese New Year。</p><h1 id="猎户座的福禄寿"><a href="#猎户座的福禄寿" class="headerlink" title="猎户座的福禄寿"></a>猎户座的福禄寿</h1><p>春节前猎户座三星高照没错，但他们不是福、禄、寿三星。<br>虽然春节前是猎户三星高高地挂于南方天空很显眼，但猎户座三颗星在中国古代正统的划分是西方白虎，那嘎达基本上都是些不太吉利的星。说他们是福禄寿是民间的一种讹传。</p><p>中国正统星象记载里福禄寿分别是：<br>福星：木星。哎呀木星老厉害了，对中西方文化历法里都有很多可说的故事。<br>禄星：大熊星座的爪子尖，哎就是文昌星了。我们经常听的文曲星就在附近离的不远。这俩其实有些微的区别，不过如果你是考生想拜一拜求个心理安慰，那顺带着朝北一起拜了总是没错的。<br>寿星：老人星。这个在南方可以看到的老人星也被称作南极南极老人。其实天上不只有老人、还有子星、孙星、厕星、屎星等等。跟希腊神话一比，咱这个是真实在。</p><h2 id="二十四节气。"><a href="#二十四节气。" class="headerlink" title="二十四节气。"></a>二十四节气。</h2><p><a href="http://www.news.cn/2022-02/05/c_1128333826.htm">北京冬奥会|24节气与黄道12宫，希巴克斯当一笑_北京2022年冬奥会_新华网 (news.cn)</a></p><blockquote><p>​新华社广州2月5日电（记者王浩明）4日晚，北京冬奥会开幕式上，美轮美奂的二十四节气倒计时惊艳了世界。</p><p>​也有人疑问，坐在观众席和电视机前的世界人民，能理解中国式的浪漫美学吗？</p><p>​二十四节气的英译是“The 24 solar terms”，solar意为“太阳的”。这个翻译非常精准，因为二十四节气正反映了一年中太阳运行的规律，比如，“春分”太阳直射赤道，“夏至”太阳直射北回归线，“冬至”太阳直射南回归线，二十四节气将太阳直射点从北回归线到南回归线之间的区域等分12份，从“春分”回到“春分”，就走完了一年。</p><p>　　而古希腊的数学家和天文学家希巴克斯为标示太阳在黄道（是从地球上看太阳一年在天空中走过的路线）上观行的位置，将黄道带分成十二个区段，每隔30度为一“宫”，并以当时各“宫”内所包含的主要星座来命名，这便是十二星座的起源，希巴克斯划分黄道十二宫的起始0度点，恰恰是二十四节气中的“春分”。</p><p>　而正因为掌握了太阳的往复规律，人类的耕种与收获更加得心应手，人类文明才得以进入新的发展阶段。</p><p>　　因为共同的月圆月缺，东方和西方的古代时间和历法均不约而同地选择了十二进制，很多都沿用至今，而不管是东方的二十四节气还是西方的黄道十二宫，都是人类尝试理解自然的异曲同工。</p><p>　　纵相隔万里，亦咫尺天涯——几千年的人类探索，呼应着今时“更团结”的奥林匹克精神，而希巴克斯若能穿越到2022年2月4日晚的北京，当会心一笑。</p></blockquote><p><a href="http://www.cma.gov.cn/2011xzt/essjqzt/jqhz/jqhz02/201312/t20131213_233952.html">24节气中英文对照_中国气象局 (cma.gov.cn)</a></p><blockquote><p>　　立春 the Beginning of Spring （1st solar term）Feb.3,4, or 5</p><p>　　雨水 Rain Water （2nd solar term）Feb.18,19 or 20</p><p>　　惊蛰 the Waking of Insects （3rd solar term）Mar.5,6, or 7</p><p>　　春分 the Spring Equinox （4th solar term）Mar.20,21 or 22</p><p>　　清明 Pure Brightness （5th solar term）Apr.4,5 or 6</p><p>　　谷雨 Grain Rain （6th solar teram）Apr.19,20 or 21</p><p>　　立夏 the Beginning of Summer （7th solar term）May 5,6 or 7</p><p>　　小满 Lesser Fullness of Grain （8th solar term）May 20,21 or 22</p><p>　　芒种 Grain in Beard （9th solar term）Jun.5,6 or 7</p><p>　　夏至 the Summer Solstice （10th solar term）Jun.21 or 22</p><p>　　小暑 Lesser Heat （11th solar term）Jul.6,7 or 8</p><p>　　大暑 Greater Heat （12th solar term）Jul.22,23 or 24</p><p>　　立秋 the Beginning of Autumn （13th solar term）Aug.7,8 or 9</p><p>　　处暑 the End of Heat （14th solar term）Aug.22,23 or 24</p><p>　　白露 White Dew （15th solar term）Sep.7,8 or 9</p><p>　　秋分 the Autumn Equinox （16th solar term）Sep.22,23 or 24</p><p>　　寒露 Cold Dew （17th solar term）Oct.8 or 9</p><p>　　霜降 Frost’s Descent （18th solar term）Oct.23 or 24</p><p>　　立冬 the Beginning of Winter （19th solar term）Nov.7 or 8</p><p>　　小雪 Lesser Snow （20th solar term）Nov.22 or 23</p><p>　　大雪 Greater Snow （21st solar term）Dec.6,7 or 8</p><p>　　冬至 the Winter Solstice （22nd solar term）Dec.21,22 or 23</p><p>　　小寒 Lesser Cold （23rd solar term）Jan.5,6 or 7</p><p>　　大寒 Greater Cold （24th solar term）Jan.20 or 21</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>天文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>天文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天体表</title>
    <link href="/blog/post/Astronomy/Celestial/"/>
    <url>/blog/post/Astronomy/Celestial/</url>
    
    <content type="html"><![CDATA[<p>本文汇总了常用的五种星表：<br>梅西耶天体表（Messier Catalogue，编号M）<br>科德维尔天体表（Caldwell Catalogue，编号C）<br>赫歇尔目录 GC<br>星表星云和星团新总表（New General Catalogue of Nebulae and Clusters of Stars，编号NGC）<br>星云星团新总表续编（Index Catalogue of Nebulae and Clusters of Stars，编号IC）</p><h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><h2 id="梅西耶天体表（Messier-Catalogue，编号M）"><a href="#梅西耶天体表（Messier-Catalogue，编号M）" class="headerlink" title="梅西耶天体表（Messier Catalogue，编号M）"></a>梅西耶天体表（Messier Catalogue，编号M）</h2><p>查尔斯·梅西耶（Charles Messier，1730—1817）是<strong>法国天文学家</strong>。他的成就在于给星云、星团和星系编上了号码，并制作了著名的“梅西耶星团星云列表”，即我们熟知的深空天体M列表。可以说在业余天文爱好者中，使用最多的深空天体星表就是梅西耶表了。每年的春分前后，全球的天文爱好者还会进行<strong>梅西耶天体马拉松</strong>，试图在一晚上的时间内观测到尽可能多的梅西耶天体。</p><p>梅西耶星表是由110个明亮天体组成的星表，它是星云、星团和星系中的精华部分，也是天空中最为壮观美丽的天体。梅西耶星表是200多年前的产物，表中所列天体的亮度大多都在10等以内，使用小型天文望远镜都可以看到。是天空中最壮观、最漂亮的天体。</p><p><strong>NGC总表</strong>是由德雷耶尔编订的，里面共收录了7840个天体。基本上每个梅西耶星表里的天体都有NGC编号。<strong>梅西耶星表编号共110个</strong>。但因为梅西耶本人观测上的失误，梅西耶星表中有3个天体实际上不存在。而NGC星表因为数据量太大，里面存在重复编号、天体不存在等问题。</p><p>受当时观测能力的限制，后人发现这110个M天体并不都是真正的深空天体。其中M40是位于大熊座的一对双星，亮度分别为9.0等和9.6等。两星看起来相距很近，实则只是一对并无联系的光学双星。本世纪间距约51角秒，比梅西耶当年观测它们的时候分得更开些。M73是位于宝瓶座的一组四合星，也是一个彼此间并无物理关联的小星群（asterism）。M102是1781年由梅襄在北天发现的一个星系。两年后，他又在给约翰第三·伯努利（此人是天文学家，系数学家约翰·伯努利的孙子）的一封信中否认了这一发现，称那不过是M101的重复记录。不过，后人在梅西耶星表原始手稿的第102号所记录的天区附近，的确发现了一个与其文字描述相吻合的侧向星系NGC5866。梅襄当夜看到的目标是不是它，目前仍存有争议。为了保证星表的完整性，当下的普遍做法是姑且认为NGC5866就是M102，毕竟NGC5866附近的其他星系同梅西耶星表的星系比起来都太过暗淡了。M40、M73和M102常合称为“遗失的梅西耶天体”，尽管它们上榜“梅西耶星表”有这样那样的疑问，可是原则上我们仍然将其保留于星表中，与其他M天体一视同仁。</p><p>总的来说，梅西耶天体共包含了七种类型的深空天体。除却上述的三个“遗失的梅西耶天体”外，余下的分别有：26个疏散星团、29个球状星团、1个超新星遗迹、39个星系、1个反射星云、6个发射星云和4个行星状星云，共计106个。另有一个M24无法归入以上任何类别。初看起来，M24好像是银河中部一个膨大的星云，但实际上它是盘踞在银河系盘面上的厚重的暗星云中间的一个空洞。透过它，人们可一窥银河系中心的模样。所以严格来讲，M24不能算作一个天体，它其实是银河的一部分。那39个星系还可以按照“哈勃星系分类法”做进一步的划分，其中包含有8个棒旋星系、2个矮椭圆星系、6个椭圆星系、3个透镜状星系、19个漩涡星系和1个星暴星系。</p><table><thead><tr><th><strong>编号</strong></th><th><strong>NGC</strong></th><th><strong>赤经(2000)</strong></th><th><strong>赤纬(2000)</strong></th><th><strong>视大小&#x2F; ′</strong></th><th><strong>视星等</strong></th><th><strong>星座</strong></th><th><strong>类型或名称</strong></th><th><strong>距地距离（光年）</strong></th></tr></thead><tbody><tr><td>M 1</td><td>1952</td><td>05 34.5</td><td>+22 01</td><td>6×4’</td><td>8.4</td><td>金牛座</td><td><a href="https://baike.baidu.com/item/%E8%9F%B9%E7%8A%B6%E6%98%9F%E4%BA%91">蟹状星云</a></td><td>7200</td></tr><tr><td>M 2</td><td>7089</td><td>21 33.5</td><td>－00 49</td><td>13</td><td>6.5</td><td>宝瓶座</td><td>球状星团</td><td>36900</td></tr><tr><td>M 3</td><td>5272</td><td>13 42.5</td><td>+28 23</td><td>16</td><td>6.4</td><td>猎犬座</td><td>球状星团</td><td>32200</td></tr><tr><td>M 4</td><td>6121</td><td>16 23.6</td><td>－26 32</td><td>26</td><td>5.9</td><td>天蝎座</td><td>球状星团</td><td>7100</td></tr><tr><td>M 5</td><td>5904</td><td>15 18.6</td><td>+02 05</td><td>17</td><td>5.6</td><td>巨蛇座</td><td>球状星团</td><td>25000</td></tr><tr><td>M 6</td><td>6405</td><td>17 40.1</td><td>－32 13</td><td>25</td><td>5.3</td><td>天蝎座</td><td>疏散星团</td><td>1900</td></tr><tr><td>M 7</td><td>6475</td><td>17 53.9</td><td>－34 49</td><td>80</td><td>4.1</td><td>天蝎座</td><td>疏散星团</td><td>800</td></tr><tr><td>M 8</td><td>6523</td><td>18 03.8</td><td>－24 23</td><td>90×40</td><td>6.0</td><td>人马座</td><td><a href="https://baike.baidu.com/item/%E7%A4%81%E6%B9%96%E6%98%9F%E4%BA%91">礁湖星云</a></td><td>3900</td></tr><tr><td>M 9</td><td>6333</td><td>17 19.2</td><td>－18 31</td><td>9</td><td>7.7</td><td>蛇夫座</td><td>球状星团</td><td>26000</td></tr><tr><td>M 10</td><td>6254</td><td>16 57.1</td><td>－04 06</td><td>15</td><td>6.6</td><td>蛇夫座</td><td>球状星团</td><td>14700</td></tr><tr><td>M 11</td><td>6705</td><td>18 51.1</td><td>－06 16</td><td>14</td><td>6.3</td><td>盾牌座</td><td>疏散星团</td><td>5540</td></tr><tr><td>M 12</td><td>6218</td><td>16 47.2</td><td>－01 57</td><td>15</td><td>6.7</td><td>蛇夫座</td><td>球状星团</td><td>18200</td></tr><tr><td>M 13</td><td>6205</td><td>16 41.7</td><td>+36 28</td><td>17</td><td>5.8</td><td>武仙座</td><td>球状星团</td><td>23500</td></tr><tr><td>M 14</td><td>6402</td><td>17 37.6</td><td>－03 15</td><td>12</td><td>7.6</td><td>蛇夫座</td><td>球状星团</td><td>35100</td></tr><tr><td>M 15</td><td>7078</td><td>21 30.0</td><td>+12 10</td><td>12</td><td>6.2</td><td>飞马座</td><td>球状星团</td><td>31100</td></tr><tr><td>M 16</td><td>6611</td><td>18 18.8</td><td>－13 47</td><td>7</td><td>6.4</td><td>巨蛇座</td><td><a href="https://baike.baidu.com/item/%E8%80%81%E9%B9%B0%E6%98%9F%E4%BA%91">老鹰星云</a></td><td>5490</td></tr><tr><td>M 17</td><td>6618</td><td>18 20.8</td><td>－16 11</td><td>11</td><td>7.0</td><td>人马座</td><td><a href="https://baike.baidu.com/item/%CF%89%E6%98%9F%E4%BA%91">ω星云</a></td><td>4200</td></tr><tr><td>M 18</td><td>6613</td><td>18 19.9</td><td>－17 08</td><td>9</td><td>7.5</td><td>人马座</td><td>疏散星团</td><td>6300</td></tr><tr><td>M 19</td><td>6273</td><td>17 02.6</td><td>－26 16</td><td>14</td><td>6.8</td><td>蛇夫座</td><td>球状星团</td><td>22000</td></tr><tr><td>M 20</td><td>6514</td><td>18 02.3</td><td>－23 02</td><td>28</td><td>9.0</td><td>人马座</td><td><a href="https://baike.baidu.com/item/%E4%B8%89%E5%8F%B6%E6%98%9F%E4%BA%91">三叶星云</a></td><td>5600</td></tr><tr><td>M 21</td><td>6531</td><td>18 04.6</td><td>－22 30</td><td>13</td><td>6.5</td><td>人马座</td><td>疏散星团</td><td>4350</td></tr><tr><td>M 22</td><td>6656</td><td>18 36.4</td><td>－23 54</td><td>24</td><td>5.1</td><td>人马座</td><td>球状星团</td><td>10300</td></tr><tr><td>M 23</td><td>6494</td><td>17 56.8</td><td>－19 01</td><td>27</td><td>6.9</td><td>人马座</td><td>疏散星团</td><td>4500</td></tr><tr><td>M 24</td><td>6603</td><td>18 18.4</td><td>－18 25</td><td>90</td><td>4.6</td><td>人马座</td><td><a href="https://baike.baidu.com/item/%E7%96%8F%E6%95%A3%E6%98%9F%E5%9B%A2">疏散星团</a></td><td>16000</td></tr><tr><td>M 25</td><td>4725</td><td>18 31.6</td><td>－19 15</td><td>40</td><td>6.5</td><td>人马座</td><td>疏散星团</td><td>2000</td></tr><tr><td>M 26</td><td>6694</td><td>18 45.2</td><td>－09 24</td><td>15</td><td>8.0</td><td>盾牌座</td><td>疏散星团</td><td>4900</td></tr><tr><td>M 27</td><td>6853</td><td>19 59.6</td><td>+22 43</td><td>8×6</td><td>7.4</td><td>狐狸座</td><td><a href="https://baike.baidu.com/item/%E5%93%91%E9%93%83%E6%98%9F%E4%BA%91">哑铃星云</a></td><td>820</td></tr><tr><td>M 28</td><td>6626</td><td>18 24.5</td><td>－24 52</td><td>11</td><td>6.8</td><td>人马座</td><td>球状星团</td><td>15000</td></tr><tr><td>M 29</td><td>6913</td><td>20 23.9</td><td>+38 32</td><td>7</td><td>7.1</td><td>天鹅座</td><td>疏散星团</td><td>3000</td></tr><tr><td>M 30</td><td>7099</td><td>21 40.4</td><td>－23 11</td><td>11</td><td>7.2</td><td>摩羯座</td><td>球状星团</td><td>41000</td></tr><tr><td>M 31</td><td>224</td><td>00 42.7</td><td>+41 16</td><td>178×63’</td><td>3.4</td><td>仙女座</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E5%A5%B3%E5%BA%A7%E6%98%9F%E7%B3%BB">仙女座星系</a></td><td>2300000</td></tr><tr><td>M 32</td><td>221</td><td>00 42.7</td><td>+40 52</td><td>8×6</td><td>8.1</td><td>仙女座</td><td>椭圆星系</td><td>2300000</td></tr><tr><td>M 33</td><td>598</td><td>01 33.9</td><td>+30 39</td><td>73×45</td><td>5.7</td><td>三角座</td><td><a href="https://baike.baidu.com/item/%E6%BC%A9%E6%B6%A1%E6%98%9F%E7%B3%BB">漩涡星系</a></td><td>2500000</td></tr><tr><td>M 34</td><td>1039</td><td>02 42.0</td><td>+42 47</td><td>35</td><td>5.5</td><td>英仙座</td><td>疏散星团</td><td>1390</td></tr><tr><td>M 35</td><td>2168</td><td>06 08.9</td><td>+24 20</td><td>28</td><td>5.3</td><td>双子座</td><td>疏散星团</td><td>2600</td></tr><tr><td>M 36</td><td>1960</td><td>05 36.1</td><td>+34 08&#96;</td><td>12</td><td>6.3</td><td>御夫座</td><td>疏散星团</td><td>4110</td></tr><tr><td>M 37</td><td>2099</td><td>05 52.4</td><td>－32 33</td><td>24</td><td>6.2</td><td>御夫座</td><td>疏散星团</td><td>4170</td></tr><tr><td>M 38</td><td>1912</td><td>05 28.7</td><td>+35 50</td><td>21</td><td>7.4</td><td>御夫座</td><td>疏散星团</td><td>4610</td></tr><tr><td>M 39</td><td>7092</td><td>21 32.2</td><td>+48 26</td><td>32</td><td>5.2</td><td>天鹅座</td><td>疏散星团</td><td>864</td></tr><tr><td>M 40</td><td></td><td>12 22.4</td><td>+58 05</td><td>&#x2F;</td><td>8.4</td><td>大熊座</td><td>光学双星</td><td>&#x2F;</td></tr><tr><td>M 41</td><td>2287</td><td>06 47.0</td><td>－20 44</td><td>38</td><td>4.6</td><td>大犬座</td><td>疏散星团</td><td>2500</td></tr><tr><td>M 42</td><td>1976</td><td>05 35.4</td><td>－05 27&#96;</td><td>85×60</td><td>4.0</td><td>猎户座</td><td><a href="https://baike.baidu.com/item/%E7%8C%8E%E6%88%B7%E5%BA%A7%E5%A4%A7%E6%98%9F%E4%BA%91">猎户座大星云</a></td><td>1500</td></tr><tr><td>M 43</td><td>1982</td><td>05 35.6</td><td>－05 16</td><td>20×15</td><td>9.0</td><td>猎户座</td><td><a href="https://baike.baidu.com/item/%E5%BC%A5%E6%BC%AB%E6%98%9F%E4%BA%91">弥漫星云</a></td><td>1500</td></tr><tr><td>M 44</td><td>2632</td><td>08 40.1</td><td>+19 59</td><td>95</td><td>3.7</td><td>巨蟹座</td><td><a href="https://baike.baidu.com/item/%E9%AC%BC%E6%98%9F%E5%9B%A2">鬼星团</a></td><td>520</td></tr><tr><td>M 45</td><td></td><td>03 47.0</td><td>+24 07</td><td>110</td><td>1.6</td><td>金牛座</td><td><a href="https://baike.baidu.com/item/%E6%98%B4%E6%98%9F%E5%9B%A2">昴星团</a></td><td>410</td></tr><tr><td>M 46</td><td>2437</td><td>07 41.8</td><td>－14 49</td><td>27</td><td>6.0</td><td>船尾座</td><td><a href="https://baike.baidu.com/item/%E7%96%8F%E6%95%A3%E6%98%9F%E5%9B%A2">疏散星团</a></td><td>6000</td></tr><tr><td>M 47</td><td>2422</td><td>07 36.6</td><td>－14 30</td><td>30</td><td>5.2</td><td>船尾座</td><td>疏散星团</td><td>1800</td></tr><tr><td>M 48</td><td>2548</td><td>08 13.8</td><td>－05 48</td><td>54</td><td>5.5</td><td>长蛇座</td><td>疏散星团</td><td>1500</td></tr><tr><td>M 49</td><td>4472</td><td>12 29.8</td><td>+08 00</td><td>9×7</td><td>8.4</td><td>室女座</td><td>椭圆星系</td><td>5900</td></tr><tr><td>M 50</td><td>2323</td><td>07 03.2</td><td>+08 20</td><td>16</td><td>6.3</td><td>麒麟座</td><td>疏散星团</td><td>2600</td></tr><tr><td>M 51</td><td>5194</td><td>13 29.9</td><td>+47 12</td><td>11×7</td><td>8.4</td><td>猎犬座</td><td><a href="https://baike.baidu.com/item/%E6%BC%A9%E6%B6%A1%E6%98%9F%E7%B3%BB">漩涡星系</a></td><td>2100</td></tr><tr><td>M 52</td><td>7654</td><td>23 24.2</td><td>+61 35&#96;</td><td>13</td><td>7.3</td><td>仙后座</td><td>疏散星团</td><td>3800</td></tr><tr><td>M 53</td><td>5024</td><td>13 12.9</td><td>+18 10</td><td>13</td><td>7.6</td><td>后发座</td><td>球状星团</td><td>56400</td></tr><tr><td>M 54</td><td>6715</td><td>18 55.1</td><td>－30 29</td><td>9</td><td>7.6</td><td>人马座</td><td>球状星团</td><td>49000</td></tr><tr><td>M 55</td><td>6809</td><td>19 40.0</td><td>－30 58</td><td>19</td><td>6.3</td><td>人马座</td><td>球状星团</td><td>19000</td></tr><tr><td>M 56</td><td>6779</td><td>19 16.6</td><td>+30 11</td><td>7</td><td>8.3</td><td>天琴座</td><td>球状星团</td><td>33000</td></tr><tr><td>M 57</td><td>6720</td><td>18 53.6</td><td>+33 02</td><td>1.4×1.0</td><td>8.8</td><td>天琴座</td><td><a href="https://baike.baidu.com/item/%E7%8E%AF%E7%8A%B6%E6%98%9F%E4%BA%91">环状星云</a></td><td>2300</td></tr><tr><td>M 58</td><td>4579</td><td>12 37.7</td><td>+11 49</td><td>5×4</td><td>9.7</td><td>室女座</td><td>漩涡星系</td><td>41000000</td></tr><tr><td>M 59</td><td>4621</td><td>12 42.0</td><td>+11 39</td><td>5×3</td><td>9.6</td><td>室女座</td><td>椭圆星系</td><td>41000000</td></tr><tr><td>M 60</td><td>4649</td><td>12 43.7</td><td>+11 33</td><td>7×6</td><td>8.8</td><td>室女座</td><td>椭圆星系</td><td>59000000</td></tr><tr><td>M 61</td><td>4303</td><td>12 21.9</td><td>+4 28</td><td>6×6</td><td>9.7</td><td>室女座</td><td>漩涡星</td><td>41000000</td></tr><tr><td>M 62</td><td>6266</td><td>17 01.2</td><td>+30 07</td><td>14</td><td>6.5</td><td>蛇夫座</td><td>球状星团</td><td>20600</td></tr><tr><td>M 63</td><td>5055</td><td>13 15.8</td><td>+43 33</td><td>10×6</td><td>8.6</td><td>猎犬座</td><td>漩涡星系</td><td>24000000</td></tr><tr><td>M 64</td><td>4826</td><td>12 56.7</td><td>+21 41</td><td>9×5</td><td>8.5</td><td>后发座</td><td>睡美人（黑眼）星系</td><td>15000000</td></tr><tr><td>M 65</td><td>3623</td><td>11 18.9</td><td>+13 06</td><td>8×2</td><td>9.3</td><td>狮子座</td><td>漩涡星系</td><td>27000000</td></tr><tr><td>M 66</td><td>3627</td><td>11 20.2</td><td>+12 59</td><td>8×2.5</td><td>8.9</td><td>狮子座</td><td>漩涡星系</td><td>27000000</td></tr><tr><td>M 67</td><td>2628</td><td>08 51.3</td><td>+11 48</td><td>17</td><td>6.1</td><td>巨蟹座</td><td>疏散星团</td><td>2710</td></tr><tr><td>M 68</td><td>4590</td><td>12 39.5</td><td>-26 45</td><td>10</td><td>7.8</td><td>长蛇座</td><td>球状星团</td><td>31400</td></tr><tr><td>M 69</td><td>6637</td><td>18 31.4</td><td>-32 21</td><td>3</td><td>7.6</td><td>人马座</td><td>球状星团</td><td>24000</td></tr><tr><td>M 70</td><td>6681</td><td>18 43.2</td><td>-32 17</td><td>3</td><td>7.9</td><td>人马座</td><td>球状星团</td><td>65000</td></tr><tr><td>M 71</td><td>6838</td><td>19 53.8</td><td>+18 47</td><td>7.2</td><td>8.2</td><td>天箭座</td><td>球状星团</td><td>13300</td></tr><tr><td>M 72</td><td>6981</td><td>20 53.5</td><td>-12 32</td><td>6.6</td><td>9.3</td><td>宝瓶座</td><td>球状星团</td><td>59000</td></tr><tr><td>M 73</td><td>6994</td><td>20 59.8</td><td>-12 38</td><td>2.8</td><td>9.0</td><td>宝瓶座</td><td>疏散星团</td><td>&#x2F;</td></tr><tr><td>M 74</td><td>628</td><td>01 36.7</td><td>+15 47</td><td>10.2 ×9.5</td><td>9.4</td><td>双鱼座</td><td>旋涡星系</td><td>37000000</td></tr><tr><td>M 75</td><td>6864</td><td>20 06.1</td><td>-21 55</td><td>6.8</td><td>8.5</td><td>人马座</td><td>球状星团</td><td>78000</td></tr><tr><td>M 76</td><td>651</td><td>01 42.4</td><td>+53 34</td><td>2.6×1.5</td><td>10.1</td><td>英仙座</td><td>行星状星云</td><td>8000</td></tr><tr><td>M 77</td><td>1068</td><td>02 42.7</td><td>-00 01</td><td>7×6</td><td>8.9</td><td>鲸鱼座</td><td>塞佛特（棒旋）星系</td><td>47000000</td></tr><tr><td>M 78</td><td>2068</td><td>05 46.7</td><td>+00 04</td><td>8×6</td><td>8.3</td><td>猎户座</td><td>反射星团</td><td>1600</td></tr><tr><td>M 79</td><td>1904</td><td>05 24.2</td><td>+24 31</td><td>4</td><td>7.7</td><td>天兔座</td><td>球状星团</td><td>43000</td></tr><tr><td>M 80</td><td>6093</td><td>16 17.1</td><td>+22 59</td><td>4</td><td>7.3</td><td>天蝎座</td><td>球状星团</td><td>37000</td></tr><tr><td>M 81</td><td>3031</td><td>09 55.8</td><td>+60 04</td><td>26×14</td><td>6.9</td><td>大熊座</td><td>旋涡星云</td><td>14000000</td></tr><tr><td>M 82</td><td>3034</td><td>09 56.2</td><td>+69 24</td><td>11×5</td><td>8.4</td><td>大熊座</td><td>不规则星系</td><td>14000000</td></tr><tr><td>M 83</td><td>5236</td><td>13 37.7</td><td>-29 32</td><td>11×10</td><td>7.6</td><td>长蛇座</td><td>棒旋星系</td><td>16000000</td></tr><tr><td>M 84</td><td>4374</td><td>12 25.1</td><td>+12 53</td><td>5×5</td><td>9.1</td><td>室女座</td><td>椭圆星系</td><td>41000000</td></tr><tr><td>M 85</td><td>4382</td><td>12 25.4</td><td>+18 11</td><td>7×4</td><td>9.1</td><td>后发座</td><td>椭圆星系</td><td>41000000</td></tr><tr><td>M 86</td><td>4406</td><td>12 26.2</td><td>+12 57</td><td>8×7</td><td>8.9</td><td>室女座</td><td>椭圆星系</td><td>20000000</td></tr><tr><td>M 87</td><td>4486</td><td>12 30.8</td><td>+12 23</td><td>7×7</td><td>8.6</td><td>室女座</td><td>椭圆星系</td><td>59000000</td></tr><tr><td>M 88</td><td>4501</td><td>12 32.0</td><td>+14 25</td><td>8×4</td><td>9.6</td><td>后发座</td><td>旋涡星系</td><td>41000000</td></tr><tr><td>M 89</td><td>4552</td><td>12 35.7</td><td>+12 33</td><td>2×2</td><td>9.8</td><td>室女座</td><td>椭圆星系</td><td>41000000</td></tr><tr><td>M 90</td><td>4569</td><td>12 36.8</td><td>+13 10</td><td>8×2</td><td>9.5</td><td>室女座</td><td>旋涡星系</td><td>41000000</td></tr><tr><td>M 91</td><td>4584</td><td>12 35.4</td><td>+14 30</td><td>3×2</td><td>10.2</td><td>后发座</td><td>棒旋星系</td><td>41000000</td></tr><tr><td>M 92</td><td>6341</td><td>17 17.1</td><td>+43 08</td><td>12</td><td>6.4</td><td>武仙座</td><td>球状星团</td><td>25500</td></tr><tr><td>M 93</td><td>2447</td><td>07 44.6</td><td>-23 53</td><td>25</td><td>6.0</td><td>船尾座</td><td>疏散星团</td><td>3600</td></tr><tr><td>M 94</td><td>4736</td><td>12 50.9</td><td>+41 07</td><td>11×9</td><td>8.2</td><td>猎犬座</td><td>旋涡星系</td><td>16000000</td></tr><tr><td>M 95</td><td>3351</td><td>10 44.0</td><td>+11 42</td><td>6×6</td><td>9.7</td><td>狮子座</td><td>棒旋星系</td><td>29000000</td></tr><tr><td>M 96</td><td>3368</td><td>10 46.8</td><td>+11 49</td><td>7×4</td><td>9.2</td><td>狮子座</td><td>旋涡星系</td><td>29000000</td></tr><tr><td>M 97</td><td>3587</td><td>11 14.9</td><td>+55 01</td><td>3.4×3.3</td><td>9.9</td><td>大熊座</td><td>夜枭星云</td><td>1800</td></tr><tr><td>M 98</td><td>4192</td><td>12 13.8</td><td>+14 54</td><td>10×3</td><td>10.1</td><td>后发座</td><td>旋涡星系</td><td>36000000</td></tr><tr><td>M 99</td><td>4254</td><td>12 18.8</td><td>+14 25</td><td>5×5</td><td>9.9</td><td>后发座</td><td>旋涡星系</td><td>41000000</td></tr><tr><td>M 100</td><td>4321</td><td>12 22.9</td><td>+15 49</td><td>7×6</td><td>9.3</td><td>后发座</td><td>旋涡星系</td><td>41000000</td></tr><tr><td>M 101</td><td>5457</td><td>14 03.2</td><td>+54 21</td><td>27×26</td><td>7.9</td><td>大熊座</td><td>旋涡星系</td><td>19000000</td></tr><tr><td>M 102</td><td>5866</td><td>15 06.5</td><td>+55 46</td><td>5×2</td><td>10.0</td><td>天龙座</td><td>旋涡星系</td><td>&#x2F;</td></tr><tr><td>M 103</td><td>581</td><td>01 33.1</td><td>+60 42</td><td>7</td><td>7.4</td><td>仙后座</td><td>疏散星团</td><td>7990</td></tr><tr><td>M 104</td><td>4594</td><td>12 40.0</td><td>-11 37</td><td>9×4</td><td>8.0</td><td>室女座</td><td>旋涡星系</td><td>46000000</td></tr><tr><td>M 105</td><td>3379</td><td>10 47.9</td><td>+12 35</td><td>2×2</td><td>9.3</td><td>狮子座</td><td>椭圆星系</td><td>30000000</td></tr><tr><td>M 106</td><td>4258</td><td>12 19.0</td><td>+47 18</td><td>18×8</td><td>8.4</td><td>猎犬座</td><td>旋涡星系</td><td>21000000</td></tr><tr><td>M 107</td><td>6171</td><td>16 32.5</td><td>-13 03</td><td>3</td><td>7.9</td><td>蛇夫座</td><td>球状星团</td><td>19800</td></tr><tr><td>M 108</td><td>3556</td><td>11 11.6</td><td>+55 40</td><td>8×2</td><td>10.0</td><td>大熊座</td><td>旋涡星系</td><td>23000000</td></tr><tr><td>M 109</td><td>3992</td><td>11 57.6</td><td>+53 23</td><td>7×5</td><td>9.8</td><td>大熊座</td><td>棒旋星系</td><td>27000000</td></tr><tr><td>M 110</td><td>205</td><td>00 40.3</td><td>+41 41</td><td>17×10</td><td>8.5</td><td>仙女座</td><td>椭圆星系</td><td>2300000</td></tr></tbody></table><h2 id="科德维尔天体表（Caldwell-Catalogue，编号C）"><a href="#科德维尔天体表（Caldwell-Catalogue，编号C）" class="headerlink" title="科德维尔天体表（Caldwell Catalogue，编号C）"></a>科德维尔天体表（Caldwell Catalogue，编号C）</h2><p>科德维尔天体并不像梅西耶天体那样赫赫有名，它收录了南天和北天的109个较为明亮且未被梅西耶天体表收编的深空天体，包括25个星云（其中超新星遗迹2个、暗星云1个、行星状星云13个）、43个星团、35个星系，另有6个星团和星云的组合天体，由英国的业余爱好者兼科普作家<strong>帕特里克·科德维尔−穆尔</strong>爵士（Sir Patrick Caldwell-Moore）编录于1995年。其中比较著名的譬如北天英仙座的双星团（C 14）、金牛座的毕星团（C 41），以及我们也许不太熟悉的南天的船底座大星云（C 92）、球状星团杜鹃座47（C 106）。</p><p>科德韦尔深空天体表列出的都是已经被<a href="https://baike.baidu.com/item/%E5%A4%A9%E6%96%87%E5%AD%A6%E5%AE%B6">天文学家</a>所确认并被天文爱好者反复观测过的天体，因此它的编号并不像和梅西耶天体列表那样是按照天体发现时间的先后进行排序，而是按照天体所在的<a href="https://baike.baidu.com/item/%E8%B5%A4%E7%BA%AC">赤纬</a>进行排序，C1位于最北边，而C109位于最南边，其中只有[NGC 4244](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 4244)和毕宿星团没有严格按照赤纬进行排序。在星表原版中，穆尔错误地将矩尺座S星团（[NGC 6087](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 6087)）标记为[NGC 6067](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 6067)，而半人马座λ星团（[IC 2944](<a href="https://baike.baidu.com/item/IC">https://baike.baidu.com/item/IC</a> 2944)）被错误地写成<a href="https://baike.baidu.com/item/%E5%8D%8A%E4%BA%BA%E9%A9%AC%E5%BA%A7/9727642">半人马座</a>γ星团。</p><table><thead><tr><th>科德韦尔编号</th><th>NGC编号</th><th>常用名</th><th>照片</th><th>类型</th><th>距离（<a href="https://baike.baidu.com/item/%E5%85%89%E5%B9%B4">光年</a>）</th><th><a href="https://baike.baidu.com/item/%E6%98%9F%E5%BA%A7">星座</a></th><th><a href="https://baike.baidu.com/item/%E8%A7%86%E6%98%9F%E7%AD%89">视星等</a></th></tr></thead><tbody><tr><td>C1</td><td>[NGC 188](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 188)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E7%96%8F%E6%95%A3%E6%98%9F%E5%9B%A2">疏散星团</a></td><td>4,800</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E7%8E%8B%E5%BA%A7">仙王座</a></td><td>8.1</td></tr><tr><td>C2</td><td>[NGC 40](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 40)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E8%A1%8C%E6%98%9F%E7%8A%B6%E6%98%9F%E4%BA%91">行星状星云</a></td><td>3,500</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E7%8E%8B%E5%BA%A7">仙王座</a></td><td>11</td></tr><tr><td>C3</td><td>[NGC 4236](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 4236)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E6%98%9F%E7%B3%BB">星系</a></td><td>7,000,000</td><td><a href="https://baike.baidu.com/item/%E5%A4%A9%E9%BE%99%E5%BA%A7">天龙座</a></td><td>9.7</td></tr><tr><td>C4</td><td>[NGC 7023](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 7023)</td><td><em><a href="https://baike.baidu.com/item/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%98%9F%E4%BA%91">鸢尾花星云</a></em></td><td></td><td>疏散星团和星云</td><td>1,400</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E7%8E%8B%E5%BA%A7">仙王座</a></td><td>7</td></tr><tr><td>C5</td><td>[IC 342](<a href="https://baike.baidu.com/item/IC">https://baike.baidu.com/item/IC</a> 342)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E6%98%9F%E7%B3%BB">星系</a></td><td>13,000,000</td><td><a href="https://baike.baidu.com/item/%E9%B9%BF%E8%B1%B9%E5%BA%A7">鹿豹座</a></td><td>9</td></tr><tr><td>C6</td><td>[NGC 6543](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 6543)</td><td><em><a href="https://baike.baidu.com/item/%E7%8C%AB%E7%9C%BC%E6%98%9F%E4%BA%91">猫眼星云</a></em></td><td></td><td><a href="https://baike.baidu.com/item/%E8%A1%8C%E6%98%9F%E7%8A%B6%E6%98%9F%E4%BA%91">行星状星云</a></td><td>3,000</td><td><a href="https://baike.baidu.com/item/%E5%A4%A9%E9%BE%99%E5%BA%A7">天龙座</a></td><td>9</td></tr><tr><td>C7</td><td>[NGC 2403](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 2403)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E6%98%9F%E7%B3%BB">星系</a></td><td>14,000,000</td><td><a href="https://baike.baidu.com/item/%E9%B9%BF%E8%B1%B9%E5%BA%A7">鹿豹座</a></td><td>8.4</td></tr><tr><td>C8</td><td>[NGC 559](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 559)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E7%96%8F%E6%95%A3%E6%98%9F%E5%9B%A2">疏散星团</a></td><td>3,700</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E5%90%8E%E5%BA%A7">仙后座</a></td><td>9.5</td></tr><tr><td>C9</td><td>Sh2-155</td><td><em><a href="https://baike.baidu.com/item/%E6%B4%9E%E7%A9%B4%E6%98%9F%E4%BA%91">洞穴星云</a></em></td><td></td><td><a href="https://baike.baidu.com/item/%E6%98%9F%E4%BA%91">星云</a></td><td>2,800</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E7%8E%8B%E5%BA%A7">仙王座</a></td><td>-</td></tr><tr><td>C10</td><td>[NGC 663](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 663)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E7%96%8F%E6%95%A3%E6%98%9F%E5%9B%A2">疏散星团</a></td><td>7,200</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E5%90%8E%E5%BA%A7">仙后座</a></td><td>7.1</td></tr><tr><td>C11</td><td>[NGC 7635](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 7635)</td><td><em><a href="https://baike.baidu.com/item/%E6%B0%94%E6%B3%A1%E6%98%9F%E4%BA%91">气泡星云</a></em></td><td></td><td><a href="https://baike.baidu.com/item/%E6%98%9F%E4%BA%91">星云</a></td><td>7,100</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E5%90%8E%E5%BA%A7">仙后座</a></td><td>-</td></tr><tr><td>C12</td><td>[NGC 6946](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 6946)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E6%98%9F%E7%B3%BB">星系</a></td><td>18,000,000</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E7%8E%8B%E5%BA%A7">仙王座</a></td><td>8.9</td></tr><tr><td>C13</td><td>[NGC 457](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 457)</td><td><em>猫头鹰星团</em>*&#x2F;*<em>ET星团</em></td><td></td><td><a href="https://baike.baidu.com/item/%E7%96%8F%E6%95%A3%E6%98%9F%E5%9B%A2">疏散星团</a></td><td>-</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E5%90%8E%E5%BA%A7">仙后座</a></td><td>6.4</td></tr><tr><td>C14</td><td>[NGC 869](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 869)[NGC 884](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 884)</td><td><em><a href="https://baike.baidu.com/item/%E5%8F%8C%E6%98%9F%E5%9B%A2">双星团</a></em></td><td></td><td><a href="https://baike.baidu.com/item/%E7%96%8F%E6%95%A3%E6%98%9F%E5%9B%A2">疏散星团</a></td><td>7,300</td><td><a href="https://baike.baidu.com/item/%E8%8B%B1%E4%BB%99%E5%BA%A7">英仙座</a></td><td>4</td></tr><tr><td>C15</td><td>[NGC 6826](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 6826)</td><td><em><a href="https://baike.baidu.com/item/%E7%9C%A8%E7%9C%BC%E6%98%9F%E4%BA%91">眨眼星云</a></em></td><td></td><td><a href="https://baike.baidu.com/item/%E8%A1%8C%E6%98%9F%E7%8A%B6%E6%98%9F%E4%BA%91">行星状星云</a></td><td>2,200</td><td><a href="https://baike.baidu.com/item/%E5%A4%A9%E9%B9%85%E5%BA%A7">天鹅座</a></td><td>10</td></tr><tr><td>C16</td><td>[NGC 7243](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 7243)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E7%96%8F%E6%95%A3%E6%98%9F%E5%9B%A2">疏散星团</a></td><td>2,500</td><td><a href="https://baike.baidu.com/item/%E8%9D%8E%E8%99%8E%E5%BA%A7">蝎虎座</a></td><td>6.4</td></tr><tr><td>C17</td><td>[NGC 147](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 147)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E6%98%9F%E7%B3%BB">星系</a></td><td>2,300,000</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E5%90%8E%E5%BA%A7">仙后座</a></td><td>9.3</td></tr><tr><td>C18</td><td>[NGC 185](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 185)</td><td></td><td></td><td><a href="https://baike.baidu.com/item/%E6%98%9F%E7%B3%BB">星系</a></td><td>2,300,000</td><td><a href="https://baike.baidu.com/item/%E4%BB%99%E5%90%8E%E5%BA%A7">仙后座</a></td><td>9.2</td></tr><tr><td>C19</td><td>[IC 5146](<a href="https://baike.baidu.com/item/IC">https://baike.baidu.com/item/IC</a> 5146)</td><td><em><a href="https://baike.baidu.com/item/%E8%8C%A7%E6%98%9F%E4%BA%91">茧星云</a></em></td><td></td><td>疏散星团和星云</td><td>3,300</td><td><a href="https://baike.baidu.com/item/%E5%A4%A9%E9%B9%85%E5%BA%A7">天鹅座</a></td><td>7.2</td></tr><tr><td>C20</td><td>[NGC 7000](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 7000)</td><td><em><a href="https://baike.baidu.com/item/%E5%8C%97%E7%BE%8E%E6%B4%B2%E6%98%9F%E4%BA%91">北美洲星云</a></em></td><td></td><td><a href="https://baike.baidu.com/item/%E6%98%9F%E4%BA%91">星云</a></td><td>1,800</td><td><a href="https://baike.baidu.com/item/%E5%A4%A9%E9%B9%85%E5%BA%A7">天鹅座</a></td><td>-</td></tr><tr><td>C21</td><td>NGC 4449</td><td></td><td></td><td>星系</td><td>10,000,000</td><td><a href="https://www.baike.com/wikiid/1752310472472584038?from=wiki_content&prd=innerlink">猎犬座</a></td><td>9.4</td></tr><tr><td>C22</td><td>NGC 7662</td><td><a href="https://www.baike.com/wikiid/9074558033315784740?from=wiki_content&prd=innerlink">蓝雪</a><em>球星云</em></td><td></td><td>行星状星云</td><td>3,200</td><td><a href="https://www.baike.com/wikiid/5409407037017424842?from=wiki_content&prd=innerlink">仙女座</a></td><td>9</td></tr><tr><td>C23</td><td>NGC 891</td><td></td><td></td><td>星系</td><td>31,000,000</td><td>仙女座</td><td>10</td></tr><tr><td>C24</td><td>NGC 1275</td><td><em>英仙座A</em></td><td></td><td>星系</td><td>230,000,000</td><td>英仙座</td><td>11.6</td></tr><tr><td>C25</td><td>NGC 2419</td><td></td><td></td><td>球状星团</td><td>275,000</td><td><a href="https://www.baike.com/wikiid/9087905252553763521?from=wiki_content&prd=innerlink">天猫座</a></td><td>10.4</td></tr><tr><td>C26</td><td>NGC 4244</td><td></td><td></td><td>星系</td><td>10,000,000</td><td>猎犬座</td><td>10.2</td></tr><tr><td>C27</td><td>NGC 6888</td><td><em>眉月星云</em></td><td></td><td>Nebula</td><td>4,700</td><td>天鹅座</td><td>-</td></tr><tr><td>C28</td><td>NGC 752</td><td></td><td></td><td>疏散星团</td><td>1,200</td><td>仙女座</td><td>5.7</td></tr><tr><td>C29</td><td>NGC 5005</td><td></td><td></td><td>星系</td><td>69,000,000</td><td>猎犬座</td><td>9.8</td></tr><tr><td>C30</td><td>NGC 7331</td><td></td><td></td><td>星系</td><td>47,000,000</td><td>飞马座</td><td>9.5</td></tr><tr><td>C31</td><td>IC 405</td><td><em>火焰之星星云</em></td><td></td><td>星云</td><td>1,600</td><td>御夫座</td><td>-</td></tr><tr><td>C32</td><td>NGC 4631</td><td><em>鲸鱼星系</em></td><td></td><td>星系</td><td>22,000,000</td><td>猎犬座</td><td>9.3</td></tr><tr><td>C33</td><td>NGC 6992</td><td><em>面纱星云</em></td><td></td><td>超新星遗迹</td><td>2,500</td><td>天鹅座</td><td>-</td></tr><tr><td>C34</td><td><a href="https://www.baike.com/wikiid/2659464889995315633?from=wiki_content&prd=innerlink">NGC 6960</a></td><td><em>面纱星云</em></td><td></td><td>超新星遗迹</td><td>2,500</td><td>天鹅座</td><td>-</td></tr><tr><td>C35</td><td>NGC 4889</td><td></td><td></td><td>星系</td><td>300,000,000</td><td>后发座</td><td>11.4</td></tr><tr><td>C36</td><td>NGC 4559</td><td></td><td></td><td>星系</td><td>32,000,000</td><td>后发座</td><td>9.9</td></tr><tr><td>C37</td><td>NGC 6885</td><td></td><td></td><td>疏散星团</td><td>1,950</td><td><a href="https://www.baike.com/wikiid/8229553405100718786?from=wiki_content&prd=innerlink">狐狸座</a></td><td>6</td></tr><tr><td>C38</td><td>NGC 4565</td><td><em>细针星系</em></td><td></td><td>星系</td><td>32,000,000</td><td>后发座</td><td>9.6</td></tr><tr><td>C39</td><td>NGC 2392</td><td><a href="https://www.baike.com/wikiid/6024379999910855263?from=wiki_content&prd=innerlink">爱斯基摩星云</a></td><td></td><td>行星状星云</td><td>4,000</td><td><a href="https://www.baike.com/wikiid/6530764534941413935?from=wiki_content&prd=innerlink">双子座</a></td><td>10</td></tr><tr><td>C40</td><td>NGC 3626</td><td></td><td></td><td>星系</td><td>86,000,000</td><td><a href="https://www.baike.com/wikiid/7211894431845943678?from=wiki_content&prd=innerlink">狮子座</a></td><td>10.9</td></tr><tr><td>C41</td><td>Mel25</td><td><em>毕宿星团</em></td><td></td><td>疏散星团</td><td>151</td><td><a href="https://www.baike.com/wikiid/5608373236007056884?from=wiki_content&prd=innerlink">金牛座</a></td><td>0.5</td></tr><tr><td>C42</td><td>NGC 7006</td><td></td><td></td><td>球状星团</td><td>135,000</td><td><a href="https://www.baike.com/wikiid/5707381021914944859?from=wiki_content&prd=innerlink">海豚座</a></td><td>10.6</td></tr><tr><td>C43</td><td>NGC 7814</td><td></td><td></td><td>星系</td><td>49,000,000</td><td>飞马座</td><td>10.5</td></tr><tr><td>C44</td><td>NGC 7479</td><td></td><td></td><td>星系</td><td>106,000,000</td><td>飞马座</td><td>11</td></tr><tr><td>C45</td><td>NGC 5248</td><td></td><td></td><td>星系</td><td>74,000,000</td><td><a href="https://www.baike.com/wikiid/7014144831366141158?from=wiki_content&prd=innerlink">牧夫座</a></td><td>10.2</td></tr><tr><td>C46</td><td>NGC 2261</td><td><em>哈勃变光星云</em></td><td></td><td>星云</td><td>2,500</td><td><a href="https://www.baike.com/wikiid/1425148081226976279?from=wiki_content&prd=innerlink">麒麟座</a></td><td>-</td></tr><tr><td>C47</td><td>NGC 6934</td><td></td><td></td><td>球状星团</td><td>57,000</td><td>海豚座</td><td>8.9</td></tr><tr><td>C48</td><td>NGC 2775</td><td></td><td></td><td>星系</td><td>55,000,000</td><td>巨蟹座</td><td>10.3</td></tr><tr><td>C49</td><td>NGC 2237</td><td><em>玫瑰星云</em></td><td></td><td>星云</td><td>4,900</td><td>麒麟座</td><td>-</td></tr><tr><td>C50</td><td>NGC 2244</td><td></td><td></td><td>疏散星团</td><td>4,900</td><td>麒麟座</td><td>4.8</td></tr><tr><td>C51</td><td>IC 1613</td><td></td><td></td><td>星系</td><td>2,300,000</td><td><a href="https://www.baike.com/wikiid/6913557376496616510?from=wiki_content&prd=innerlink">鲸鱼座</a></td><td>9.3</td></tr><tr><td>C52</td><td>NGC 4697</td><td></td><td></td><td>星系</td><td>76,000,000</td><td><a href="https://www.baike.com/wikiid/4058949397868456824?from=wiki_content&prd=innerlink">室女座</a></td><td>9.3</td></tr><tr><td>C53</td><td>NGC 3115</td><td><em>纺锤星系</em></td><td></td><td>星系</td><td>22,000,000</td><td>六分仪座</td><td>9.2</td></tr><tr><td>C54</td><td>NGC 2506</td><td></td><td></td><td>疏散星团</td><td>10,000</td><td>麒麟座</td><td>7.6</td></tr><tr><td>C55</td><td>NGC 7009</td><td><em>土星星云</em></td><td></td><td>行星状星云</td><td>1,400</td><td><a href="https://www.baike.com/wikiid/7295718363629531368?from=wiki_content&prd=innerlink">宝瓶座</a></td><td>8</td></tr><tr><td>C56</td><td>NGC 246</td><td></td><td></td><td>行星状星云</td><td>1,600</td><td>鲸鱼座</td><td>10.9</td></tr><tr><td>C57</td><td>NGC 6822</td><td><em>巴纳德星系</em></td><td></td><td>星系</td><td>2,300,000</td><td>人马座</td><td>9</td></tr><tr><td>C58</td><td>NGC 2360</td><td></td><td></td><td>疏散星团</td><td>3,700</td><td><a href="https://www.baike.com/wikiid/8018161291290775533?from=wiki_content&prd=innerlink">大犬座</a></td><td>7.2</td></tr><tr><td>C59</td><td>NGC 3242</td><td><a href="https://www.baike.com/wikiid/818477319235346154?from=wiki_content&prd=innerlink">木星</a><em>鬼影</em></td><td></td><td>行星状星云</td><td>1,400</td><td>长蛇座</td><td>9</td></tr><tr><td>C60</td><td>NGC 4038</td><td><em>触须星系</em></td><td></td><td>星系</td><td>83,000,000</td><td><a href="https://www.baike.com/wikiid/4756051875836729485?from=wiki_content&prd=innerlink">乌鸦座</a></td><td>10.7</td></tr><tr><td>C61</td><td>NGC 4039</td><td><em>触须星系</em></td><td></td><td>星系</td><td>83,000,000</td><td>乌鸦座</td><td>13</td></tr><tr><td>C62</td><td>NGC 247</td><td></td><td></td><td>星系</td><td>6,800,000</td><td>鲸鱼座</td><td>8.9</td></tr><tr><td>C63</td><td>NGC 7293</td><td><a href="https://www.baike.com/wikiid/4652257140861242543?from=wiki_content&prd=innerlink">螺旋星云</a></td><td></td><td>行星状星云</td><td>522</td><td>宝瓶座</td><td>7.3</td></tr><tr><td>C64</td><td>NGC 2362</td><td></td><td></td><td>疏散星团和星云</td><td>5,100</td><td>大犬座</td><td>4.1</td></tr><tr><td>C65</td><td>NGC 253</td><td><em>银币星系</em></td><td></td><td>星系</td><td>9,800,000</td><td>玉夫座</td><td>7.1</td></tr><tr><td>C66</td><td>NGC 5694</td><td></td><td></td><td>球状星团</td><td>113,000</td><td><a href="https://www.baike.com/wikiid/856344986314033159?from=wiki_content&prd=innerlink">长蛇座</a></td><td>10.2</td></tr><tr><td>C67</td><td>NGC 1097</td><td></td><td></td><td>星系</td><td>47,000,000</td><td>天炉座</td><td>9.3</td></tr><tr><td>C68</td><td>NGC 6729</td><td></td><td></td><td>星云</td><td>424</td><td>南冕座</td><td>-</td></tr><tr><td>C69</td><td>NGC 6302</td><td><em>臭虫星云</em></td><td></td><td>行星状星云</td><td>5,200</td><td>天蝎座</td><td>13</td></tr><tr><td>C70</td><td>NGC 300</td><td></td><td></td><td>星系</td><td>3,900,000</td><td>玉夫座</td><td>9</td></tr><tr><td>C71</td><td>NGC 2477</td><td></td><td></td><td>疏散星团</td><td>3,700</td><td>船尾座</td><td>5.8</td></tr><tr><td>C72</td><td>NGC 55</td><td></td><td></td><td>星系</td><td>4,200,000</td><td>玉夫座</td><td>8</td></tr><tr><td>C73</td><td>NGC 1851</td><td></td><td></td><td>球状星团</td><td>39,400</td><td>天鸽座</td><td>7.3</td></tr><tr><td>C74</td><td>NGC 3132</td><td><em>八裂星云</em></td><td></td><td>行星状星云</td><td>2,000</td><td><a href="https://www.baike.com/wikiid/5264182273216981717?from=wiki_content&prd=innerlink">船帆座</a></td><td>8</td></tr><tr><td>C75</td><td>NGC 6124</td><td></td><td></td><td>疏散星团</td><td>1,500</td><td>天蝎座</td><td>5.8</td></tr><tr><td>C76</td><td>NGC 6231</td><td></td><td></td><td>疏散星团和星云</td><td>6,000</td><td>天蝎座</td><td>2.6</td></tr><tr><td>C77</td><td>NGC 5128</td><td><em>半人马座A</em></td><td></td><td>星系</td><td>16,000,000</td><td>半人马座</td><td>7</td></tr><tr><td>C78</td><td>NGC 6541</td><td></td><td></td><td>球状星团</td><td>22,300</td><td>南冕座</td><td>6.6</td></tr><tr><td>C79</td><td>NGC 3201</td><td></td><td></td><td>球状星团</td><td>17,000</td><td>船帆座</td><td>6.8</td></tr><tr><td>C80</td><td>NGC 5139</td><td><em>半人马座ω</em></td><td></td><td>球状星团</td><td>17,300</td><td>半人马座</td><td>3.7</td></tr><tr><td>C81</td><td>NGC 6352</td><td></td><td></td><td>球状星团</td><td>18,600</td><td>天坛座</td><td>8.2</td></tr><tr><td>C82</td><td>NGC 6193</td><td></td><td></td><td>疏散星团</td><td>4,300</td><td>天坛座</td><td>5.2</td></tr><tr><td>C83</td><td>NGC 4945</td><td></td><td></td><td>星系</td><td>17,000,000</td><td>半人马座</td><td>9</td></tr><tr><td>C84</td><td>NGC 5286</td><td></td><td></td><td>球状星团</td><td>36,000</td><td>半人马座</td><td>7.6</td></tr><tr><td>C85</td><td>IC 2391</td><td><em>船帆座ο星团</em></td><td></td><td>疏散星团</td><td>500</td><td>船帆座</td><td>2.5</td></tr><tr><td>C86</td><td>NGC 6397</td><td></td><td></td><td>球状星团</td><td>7,500</td><td><a href="https://www.baike.com/wikiid/7457062163311236102?from=wiki_content&prd=innerlink">天坛</a>座</td><td>5.7</td></tr><tr><td>C87</td><td>NGC 1261</td><td></td><td></td><td>球状星团</td><td>55,500</td><td>时钟座</td><td>8.4</td></tr><tr><td>C88</td><td>NGC 5823</td><td></td><td></td><td>疏散星团</td><td>3,400</td><td>圆规座</td><td>7.9</td></tr><tr><td>C89</td><td>NGC 6087</td><td><em>矩尺座S星团</em></td><td></td><td>疏散星团</td><td>3,300</td><td>矩尺座</td><td>5.4</td></tr><tr><td>C90</td><td>NGC 2867</td><td></td><td></td><td>行星状星云</td><td>5,500</td><td>船底座</td><td>10</td></tr><tr><td>C91</td><td>NGC 3532</td><td></td><td></td><td>疏散星团</td><td>1,600</td><td><a href="https://www.baike.com/wikiid/7364353826483859189?from=wiki_content&prd=innerlink">船底座</a></td><td>3</td></tr><tr><td>C92</td><td>NGC 3372</td><td><em>船底座η星云</em></td><td></td><td>星云</td><td>7,500</td><td>船底座</td><td>-</td></tr><tr><td>C93</td><td>NGC 6752</td><td></td><td></td><td>球状星团</td><td>13,000</td><td><a href="https://www.baike.com/wikiid/1696385291311751131?from=wiki_content&prd=innerlink">孔雀座</a></td><td>5.4</td></tr><tr><td>C94</td><td>NGC 4755</td><td><em>珠宝盒星团</em></td><td></td><td>疏散星团</td><td>4,900</td><td><a href="https://www.baike.com/wikiid/6593999232906214652?from=wiki_content&prd=innerlink">南十字座</a></td><td>4.2</td></tr><tr><td>C95</td><td>NGC 6025</td><td></td><td></td><td>疏散星团</td><td>2,500</td><td><a href="https://www.baike.com/wikiid/6888026636975057458?from=wiki_content&prd=innerlink">南三角座</a></td><td>5.1</td></tr><tr><td>C96</td><td>NGC 2516</td><td></td><td></td><td>疏散星团</td><td>1,300</td><td>船底座</td><td>3.8</td></tr><tr><td>C97</td><td>NGC 3766</td><td></td><td></td><td>疏散星团</td><td>5,800</td><td>半人马座</td><td>5.3</td></tr><tr><td>C98</td><td>NGC 4609</td><td></td><td></td><td>疏散星团</td><td>4,200</td><td>南十字座</td><td>6.9</td></tr><tr><td>C99</td><td>-</td><td><em>煤袋星云</em></td><td></td><td>暗星云</td><td>610</td><td>南十字座</td><td>-</td></tr><tr><td>C100</td><td>IC 2944</td><td><em>半人马座λ星团</em></td><td></td><td>疏散星团和星云</td><td>6,000</td><td>半人马座</td><td>4.5</td></tr><tr><td>C101</td><td>NGC 6744</td><td></td><td></td><td>星系</td><td>34,000,000</td><td>孔雀座</td><td>9</td></tr><tr><td>C102</td><td>IC 2602</td><td><em>船底座θ星团</em></td><td></td><td>疏散星团</td><td>492</td><td>船底座</td><td>1.9</td></tr><tr><td>C103</td><td>NGC 2070</td><td><a href="https://www.baike.com/wikiid/4569664701196407885?from=wiki_content&prd=innerlink">蜘蛛星云</a></td><td></td><td>疏散星团和星云</td><td>170,000</td><td><a href="https://www.baike.com/wikiid/5466129744061217206?from=wiki_content&prd=innerlink">剑鱼座</a></td><td>8.2</td></tr><tr><td>C104</td><td>NGC 362</td><td></td><td></td><td>球状星团</td><td>27,700</td><td>杜鹃座</td><td>6.6</td></tr><tr><td>C105</td><td>NGC 4833</td><td></td><td></td><td>球状星团</td><td>19,600</td><td><a href="https://www.baike.com/wikiid/2295889697531952744?from=wiki_content&prd=innerlink">苍蝇座</a></td><td>7.4</td></tr><tr><td>C106</td><td>NGC 104</td><td><em>杜鹃座47</em></td><td></td><td>球状星团</td><td>14,700</td><td>杜鹃座</td><td>4</td></tr><tr><td>C107</td><td>NGC 6101</td><td></td><td></td><td>球状星团</td><td>49,900</td><td>天燕座</td><td>9.3</td></tr><tr><td>C108</td><td>NGC 4372</td><td></td><td></td><td>球状星团</td><td>18,900</td><td>苍蝇座</td><td>7.8</td></tr><tr><td>C109</td><td>NGC 3195</td><td></td><td></td><td>行星状星云</td><td>5,400</td><td>蝘蜓座</td><td>-</td></tr></tbody></table><h2 id="赫歇尔目录-GC"><a href="#赫歇尔目录-GC" class="headerlink" title="赫歇尔目录 GC"></a>赫歇尔目录 GC</h2><p><a href="https://baike.baidu.com/item/%E5%BC%97%E9%87%8C%E5%BE%B7%E9%87%8C%E5%B8%8C%C2%B7%E5%A8%81%E5%BB%89%C2%B7%E8%B5%AB%E6%AD%87%E5%B0%94/10380981">弗里德里希·威廉·赫歇尔</a>（Friedrich Wilhelm Herschel，1738年（戊午年）11月15日—1822年8月25日），英国天文学家，古典作曲家，音乐家。<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F%E5%A4%A9%E6%96%87%E5%AD%A6/820981">恒星天文学</a>的创始人，被誉为恒星天文学之父。</p><p><a href="https://baike.baidu.com/item/%E8%8B%B1%E5%9B%BD%E7%9A%87%E5%AE%B6%E5%A4%A9%E6%96%87%E5%AD%A6%E4%BC%9A/6258760">英国皇家天文学会</a>第一任会长。<a href="https://baike.baidu.com/item/%E6%B3%95%E5%85%B0%E8%A5%BF/19826060">法兰西</a>科学院院士。用自己设计的大型<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%B0%84%E6%9C%9B%E8%BF%9C%E9%95%9C/4443870">反射望远镜</a>发现天王星及其两颗卫星、土星的两颗卫星、太阳的空间运动、<a href="https://baike.baidu.com/item/%E5%A4%AA%E9%98%B3%E5%85%89/10471684">太阳光</a>中的<a href="https://baike.baidu.com/item/%E7%BA%A2%E5%A4%96%E8%BE%90%E5%B0%84/817920">红外辐射</a>；编制成第一个双星和<a href="https://baike.baidu.com/item/%E8%81%9A%E6%98%9F/188790">聚星</a>表，出版<a href="https://baike.baidu.com/item/%E6%98%9F%E5%9B%A2/189201">星团</a>和<a href="https://baike.baidu.com/item/%E6%98%9F%E4%BA%91/7009370">星云</a>表；还研究了<a href="https://baike.baidu.com/item/%E9%93%B6%E6%B2%B3%E7%B3%BB%E7%BB%93%E6%9E%84/7938380">银河系结构</a>。</p><p>如果说梅西耶星表被广大天文爱好者所关注，那么NGC星表和IC星表则是天文学研究人员的重要参考了。NGC星表的全称是 New General Catalogue of Nebulae and Clustersof Stars，即《星云星团新总表》。它其实是《星云星团总表》GC星表的扩充。GC星表是由赫歇尔家族的威廉·赫歇尔、卡罗琳·赫歇尔和约翰·赫歇尔共同编制完成的。</p><h2 id="星表星云和星团新总表（New-General-Catalogue-of-Nebulae-and-Clusters-of-Stars，编号NGC）"><a href="#星表星云和星团新总表（New-General-Catalogue-of-Nebulae-and-Clusters-of-Stars，编号NGC）" class="headerlink" title="星表星云和星团新总表（New General Catalogue of Nebulae and Clusters of Stars，编号NGC）"></a>星表星云和星团新总表（New General Catalogue of Nebulae and Clusters of Stars，编号NGC）</h2><p><a href="https://github.com/ultrapre/DeepSkyCatalogs">ultrapre&#x2F;DeepSkyCatalogs: Catalogs for deep sky objects, NGC + Messier + More than 100. (github.com)</a></p><h2 id="星云星团新总表续编（Index-Catalogue-of-Nebulae-and-Clusters-of-Stars，编号IC）"><a href="#星云星团新总表续编（Index-Catalogue-of-Nebulae-and-Clusters-of-Stars，编号IC）" class="headerlink" title="星云星团新总表续编（Index Catalogue of Nebulae and Clusters of Stars，编号IC）"></a>星云星团新总表续编（Index Catalogue of Nebulae and Clusters of Stars，编号IC）</h2><p>又简称索引星表，是以NGC星表为基础的拓展和续编，增添了5386个天体，有IC和IC Ⅱ两份，分别由德雷尔完成于1895年和1905年。猎户座的马头星云（IC 434）就是我们熟悉的IC天体。同样的，一个天体不会同时具有NGC和IC编号</p><p><a href="https://github.com/ultrapre/DeepSkyCatalogs">ultrapre&#x2F;DeepSkyCatalogs: Catalogs for deep sky objects, NGC + Messier + More than 100. (github.com)</a></p><h2 id="其他星表"><a href="#其他星表" class="headerlink" title="其他星表"></a>其他星表</h2><p><strong>乌普萨拉总表（UGC）：12921个星系，且几乎全部是北天星系；</strong></p><p><strong>星系和星系团表（CGCG）；</strong></p><p><strong>星系形态表（MCG）；</strong></p><p><strong>主要星系表（PGC）：大、小麦哲伦星系均位于此天体表中；</strong></p><p><strong>特殊星系图集（Arp）：338个形态特殊的星系，譬如正在发生碰撞和融合的星系；</strong></p><p><strong>沙普利斯亮星云表（Sh2）：包括313个发射星云；</strong></p><p><strong>RCW星表：180个发射星云，主要位于南天；</strong></p><p><strong>古姆星表（Gum）：85个发射星云，主要位于南天；</strong></p><p><strong>林茨亮星云表（LBN）和林茨暗星云表（LDN）；</strong></p><p><strong>范登堡反射星云表（vdB）：158个反射星云；</strong></p><p><strong>巴纳德暗星云表（B）：350个暗星云；梅洛特星团表（Mel）：245个星团。</strong></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ol><li>目视书籍：</li></ol><p>链接：<a href="https://ultrapre.github.io/Astronomy/index.html">Deep Sky Story (ultrapre.github.io)</a></p><ol start="2"><li>天文博客系统</li></ol><p><a href="https://ultrapre.github.io/DeepSkyLog/">观测日志博客</a></p><p>格式化观测记录:<a href="https://ultrapre.github.io/DeepSkyLog/Format/">Deep Sky Log (ultrapre.github.io)</a></p><p>观测记录整理:<a href="https://ultrapre.github.io/DeepSkyLog/Observation/index.html">Astronomy Observations (ultrapre.github.io)</a></p><ol start="3"><li>深空天体目录大全</li></ol><p>不止是梅西耶、NGC，超过100个观测星表！</p><p><a href="https://github.com/ultrapre/DeepSkyCatalogs">ultrapre&#x2F;DeepSkyCatalogs: Catalogs for deep sky objects, NGC + Messier + More than 100. (github.com)</a></p><ol start="4"><li>深空目视大库</li></ol><p>深空草绘数据库：深空天体草绘网站</p><p>深空目视理论和实用方法：理论研究、量化计算深空天体的可见程度</p><p>深空星表数据库：深空天体的数据库星表收集</p><p>链接： 深空目视大库:<a href="https://github.com/ultrapre/DSO">ultrapre&#x2F;DSO: DSO (github.com)</a></p><ol start="5"><li>星跳工具</li></ol><p>链接：星跳训练软件（星桥法星图）：<a href="https://github.com/silas1037/Hopper">silas1037&#x2F;Hopper: A software which can help locate faint objects (Deep Sky Objects) by suggesting a starting point and direction for the star hop (star hopping) (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>天文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>星座</tag>
      
      <tag>天文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>巡天</title>
    <link href="/blog/post/Astronomy/SurveyTheNightSky/"/>
    <url>/blog/post/Astronomy/SurveyTheNightSky/</url>
    
    <content type="html"><![CDATA[<p>1928年，国际天文学联合会为了统一繁杂的星座划分，用精确的边界把天空分为八十八个星座，使天空每一颗恒星都属于某一特定星座。<br>对于天文爱好者来说，认识星座的意义在于快速识别方向与定位。先找到星座，进而才能进一步对该天区进行深入的观测与研究！</p><p>找星座往往是天文爱好者入门的第一步！</p><div align = center><p>  <font size = 10><a>“巡天”项目</a></font></p></div><p>从2019年第一次接触星空摄影开始到现在，我已经拍摄过好多次的星空，我将这些星空摄影照片发布到社交网络上，收到了许多不同的反馈，有“好美啊！”之类的夸赞，有“哇！这是怎么拍出来的？”之类的求知，有“原来的天空的最亮的那个星🌟原来是这个名字啊！”，“我是xx座的，我能看到自己的星座吗？”，“城市中为什么看不到这么多星星？”……当然也有“这个有什么意义”之类的质疑。</p><p>“我们都是阴沟里的虫子，但总还是得有人仰望星空。”</p><p>对于身处银河系荒凉偏僻的旋臂上，微小的太阳星系中，一颗渺小蓝色星球上，我们像尘埃一样微不足道，但我们可以仰望星空！仰望星空，我们从未停止幻想，探索星海中的未知与神秘，捕捉银河间的瑰丽与灵感，我们的征途是星辰大海。</p><p>在此，我发起“巡天”项目，如果你对星空和宇宙感兴趣，想把自己与星空的故事和拍摄的照片分享给大家，可以通过下面的邮箱与我联系。筛选整理后，我会更新到该网站页面中。</p><p>邮箱：<a href="mailto:&#x4d;&#117;&#114;&#112;&#x68;&#x79;&#x30;&#x39;&#x32;&#x38;&#x48;&#111;&#x75;&#64;&#x6f;&#x75;&#116;&#108;&#111;&#x6f;&#107;&#46;&#x63;&#x6f;&#x6d;">&#x4d;&#117;&#114;&#112;&#x68;&#x79;&#x30;&#x39;&#x32;&#x38;&#x48;&#111;&#x75;&#64;&#x6f;&#x75;&#116;&#108;&#111;&#x6f;&#107;&#46;&#x63;&#x6f;&#x6d;</a></p><hr><p>“我所见过的事物，你们人类绝对无法置信，我目睹了战舰在猎户星座的端沿起火燃烧，我看着C射线在唐怀瑟之门附近的黑暗中闪耀，所有这些时刻，终将随时间消逝，一如眼泪消失在雨中。” —— 《银翼杀手》</p><hr><h1 id="巡天（一）"><a href="#巡天（一）" class="headerlink" title="巡天（一）"></a>巡天（一）</h1><p>名称：巡天（一）<br>时间：2022.01.27 23:30-23:50。<br>作者：MurphyHou<br>设备：HUAWEI P30 Pro<br>软件：Adebe PhotoShop 2020<br>星图：<a href="https://stellarium.org/zh_CN/">stellarium</a><br>原图下载：<a href="https://pan.baidu.com/s/13vN8bPHv2mOGmlnlZIGVwQ">链接</a>  提取码：myad<br>注：手机仅能拍摄到恒星，深空天体贴图来自stellarium，黑洞照片来自网络！</p><p>全天88星座，由于季节和地理位置原因，本次巡天拍摄到31个星座。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/%E5%8D%97.jpg" alt="正南"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/%E4%B8%9C%E5%8D%97.jpg" alt="东南"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/%E6%AD%A3%E4%B8%9C.jpg" alt="正东"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/%E4%B8%9C%E5%8C%97.jpg" alt="东北"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/%E6%AD%A3%E5%8C%97.jpg" alt="正北"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/%E8%A5%BF%E5%8C%97.jpg" alt="西北"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/%E6%AD%A3%E8%A5%BF.jpg" alt="正西"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/%E8%A5%BF%E5%8D%97.jpg" alt="西南"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/%E5%A4%A9%E9%A1%B6.jpg" alt="天顶"></p><h1 id="巡天（二）"><a href="#巡天（二）" class="headerlink" title="巡天（二）"></a>巡天（二）</h1><p>名称：巡天（二）<br>时间：2022.01.29 21:30-22:00。<br>作者：MurphyHou<br>设备：HUAWEI P30 Pro<br>软件：Adebe PhotoShop 2020</p><p><em>咕咕~~~~</em>🕊🕊🕊</p><p>在01.27的基础上加了好几个星座，但是一直没做后期，暂时🕊了！🤣</p><h1 id="仰望星空，凝固时间"><a href="#仰望星空，凝固时间" class="headerlink" title="仰望星空，凝固时间"></a>仰望星空，凝固时间</h1><p>名称：仰望星空，凝固时间<br>作者：MurphyHou<br>设备：HUAWEI P30 Pro<br>参数：星轨模式，ISO-800，3703S，f&#x2F;1.6<br>地点：山东省潍坊市<br>时间：2021.08.02<br>简介：<br>抬头看到漫天繁星的那一瞬间，我彻底沉浸其中了！<br>在城市上学，城市的夜空中晚上抬头也看不到几颗星，趁着暑假回家，熬了好多个夜，拍了好多天星空！拍摄的星空是一样的，不一样的是每张照片后面的故事！<br>星空摄影需要长时间的曝光，拍摄过程中，会遇到太多不确定的事情了，一到突然来袭的光可能就毁掉了这张照片，但是乐观点看，这道光也给这张照片“添光加彩”了！</p><div align = center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/slide-7.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/slide-10.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/slide-9.jpg"/></div><h1 id="海大星空"><a href="#海大星空" class="headerlink" title="海大星空"></a>海大星空</h1><p>作者：MurphyHou<br>设备：HUAWEI P30 Pro<br>地点：中国海洋大学（六级光污染~~~）<br>时间：2022.01.17</p><div align = center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220117_235812PS.png"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220117_235839PS.png"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220118_000845PS.png"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220118_002015.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220118_002434.jpg"/></div><h1 id="星轨合集"><a href="#星轨合集" class="headerlink" title="星轨合集"></a>星轨合集</h1><p>作者：MurphyHou<br>设备：HUAWEI P30 Pro</p><div align = center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220129_214652.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220129_221955.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/IMG_20220129_225409.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/gallery_img-05.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/gallery-9.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/gallery-6.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/gallery-14.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/gallery-15.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/gallery-19.jpg"/>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/slide-1.jpg"/></div><h1 id="巡天（三）"><a href="#巡天（三）" class="headerlink" title="巡天（三）"></a>巡天（三）</h1>]]></content>
    
    
    <categories>
      
      <category>天文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>星座</tag>
      
      <tag>天文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模（一）</title>
    <link href="/blog/post/Mathematics/MathematicalModeling_1/"/>
    <url>/blog/post/Mathematics/MathematicalModeling_1/</url>
    
    <content type="html"><![CDATA[<p>美赛：建模+编程+写作</p><hr><h1 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h1><h2 id="层次分析法-AHP讲解"><a href="#层次分析法-AHP讲解" class="headerlink" title="层次分析法 AHP讲解"></a>层次分析法 AHP讲解</h2><ul><li>层次分析法主要解决<strong>评价类</strong>问题——评价类问题用<strong>打分</strong>解决</li></ul><p>权重——权重和为1</p><p>表格：指标和指标权重，方案n</p><p>关键词：评价指标，评价体系</p><p>问题：1. 评价的目标 2. 可选方案  3. 评价指标</p><p>问题解决</p><p> 背景材料搜集：知网，百度学术，谷歌学术，万方，<a href="https://search.chongbuluo.com/">虫部落-快搜（清风推荐）</a>；头脑风暴；</p><p> 分而治之思想：两个两个比较，排列组合问题</p><hr><p>矩阵<br>正互反矩阵（<a href="https://blog.csdn.net/courserli/article/details/106634890"><strong>判断矩阵</strong></a>)<br><strong>一致矩阵</strong>：各行（各列）之间成倍数关系的正互反矩阵</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220126145121.png"/><hr><p>一致性检验一致性检验的步骤（计算公式）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 一致性指标CI<br>2. 查找对应的平均随机一致性指标RI<br>3. 计算一致性比例CR<br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220126145655.png"/><p>权重</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 一致矩阵计算权重：归一化处理<br>2. 判断矩阵计算权重：(原理和程序)<br>方法一：算术平均法求权重；使用每一列的数据来计算权重，得到n组权重，然后算术平均，得到每个元素的权重<br>方法二：几何平均法求权重；<br>（重要）方法三：特征值法求求权重；求矩阵的最大特征值以及对应的特征向量；对求出的特征向量进行归一化即可得到权重<br></code></pre></td></tr></table></figure><hr><ul><li>层次分析法基本思路和实现</li></ul><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220126154324.png"/><ol><li>分析系统中各因素之间的关系，建立系统的递阶<strong>层次结构</strong>，目标层，准则层，方案层；<br> 清风推荐作图软件，亿图，Visio，processon</li><li>构造判断矩阵；<br> 判断矩阵的数据可以自己选择，但所要结合实际，有一定的准确性;<br> 构造判断矩阵的时候尽量<strong>不要构造一致矩阵</strong>，构造一个判断矩阵，进行一致性检验，若通不过，继续修改判断矩阵，直到能够通过一致性检验</li><li>由判断矩阵计算被比较元素对于该准则的相对权重，并进行一致性检验<br> 三种计算权重的方法：三种方法都要使用<br> 一致性检验：三步走<br> 一致性检验不通过，需要修改判断矩阵</li><li>计算各层元素对系统目标和合成权重，并进行排序<br> 使用excel计算</li></ol><hr><ul><li>层次分析法的局限性</li></ul><ol><li>决策层不能太多</li><li>决策层中指标的数值已知，层次分析法不具有客观性！</li></ol><hr><h2 id="模型拓展部分"><a href="#模型拓展部分" class="headerlink" title="模型拓展部分"></a>模型拓展部分</h2><ol><li>准则层可以有多个；</li><li>准则层的每个元素不一定是对应着方案层的所有元素，可能只是一般部分的元素；</li><li>准则层中的一个元素之对应着他自己的几个方案，反过来讲就是每个方案都只受一个决策层元素影1.响</li></ol><hr><h2 id="代码讲解部分"><a href="#代码讲解部分" class="headerlink" title="代码讲解部分"></a>代码讲解部分</h2><ul><li>matlab基本使用</li></ul><ol><li><p>分号</p></li><li><p>注释<br> 多行注释：Ctrl+R<br> 多行取消住宿：Ctrl+T</p></li><li><p>clear:清除工作区的变量</p></li><li><p>clc:清空命令行<br> clear;clc——“初始化”</p></li><li><p>disp()输出函数</p></li><li><p>向量或矩阵同一行元素用“,”或“ ”隔开<br> 向量或矩阵的不同行元素用“;”隔开</p></li><li><p>字符串合并<br> strcat(s1,s2,s3);<br> [‘hello’,’world’,’!’]<br> [‘hello’ ‘world’ ‘!’]</p></li><li><p>num2str():数字转换成字符串</p></li><li><p>input()输入函数<br> A&#x3D;input(‘请输入A的值’)：A可以是数，向量，矩阵，字符串</p></li><li><p>sum()函数</p></li></ol><ul><li>向量（行向量或在列向量）：直接求和</li><li>矩阵：根据行和列的方向作区分<ul><li>sum(A):按照列求和，得出每一列的和，结果为行向量；</li><li>sum(A,1):与sum(A)等价；</li><li>sum(A,2):按照行求和，得出每一行的和，结果为列向量；维度dim，dim&#x3D;1（默认），表示按照列；dim&#x3D;2，表示按照行；</li><li>sum(A(:))&#x3D;sum(sum(A)):对整个矩阵进行求和；</li><li>A:：将矩阵变成列向量；</li></ul></li></ul><ol start="11"><li>矩阵元素的提取</li></ol><ul><li>指定某一行某一列的一个元素：A(1,2)</li><li>指定某一行的全部元素：A(1,:)，“：”表示取所有元素</li><li>指定某一列的全部元素：A(:,1)</li><li>A([2,5],:)      % 只取第二行和第五行（一共2行）<br>A(2:5,:)        % 取第二行到第五行（一共4行）<br>A(2:2:5,:)     % 取第二行和第四行 （从2开始，每次递增2个单位，到5结束）<br>1:3:10<br>A(2:end,:)      % 取第二行到最后一行<br>A(2:end-1,:)    % 取第二行到倒数第二行</li><li>全部元素(按列拼接的，最终输出的是一个列向量):A(:)</li></ul><ol start="12"><li>size()，返回值为行向量，[矩阵的行数，矩阵的列数]</li></ol><ul><li>size(A,1),返回行数</li><li>size(A,2),返回列数</li><li>[r,c] &#x3D; size(A)</li></ul><ol start="13"><li><p>repmat()<br>B &#x3D; repmat(A,m,n):将矩阵A复制m×n块，即把A作为B的元素，B由m×n个A平铺而成。</p></li><li><p>矩阵运算</p></li></ol><ul><li><p>inv() 逆矩阵：<a href="https://blog.csdn.net/u010551600/article/details/81504909">参考链接1</a>,<a href="https://zhuanlan.zhihu.com/p/163748569">参考链接2</a></p></li><li><p>“<em>”号和“&#x2F;”号代表矩阵之间的乘法与除法(A&#x2F;B &#x3D; A</em>inv(B))</p></li><li><p>两个形状相同的矩阵对应元素之间的乘除法需要使用<code>“.*”和“./”</code></p></li><li><p>乘方：A.^2;<code>A.*A</code></p></li></ul><ol start="15"><li><p>eig(A),特征值和特征向量<br>[V,D]&#x3D;eig(A)<br>求矩阵A的全部特征值，构成对角阵D，并求A的特征向量构成V的列向量。（V的每一列都是D中与之相同列的特征值的特征向量）</p></li><li><p>find()<br><a href="https://www.cnblogs.com/anzhiwu815/p/5907033.html">https://www.cnblogs.com/anzhiwu815/p/5907033.html</a><br>ind &#x3D; find(A):返回向量或者矩阵中不为零的元素的位置索引</p></li><li><p>判断符号</p></li><li><p>if() 判断语句</p></li></ol><hr><ul><li>用程序实现层次分析法</li></ul><ol><li>矩阵的输入；</li><li>用三种方法求得权重；</li><li>对判断矩阵进行一致性检验；</li><li>在excel中，根据程序算出的权重列表，计算得出最优解。</li></ol><h2 id="不理解之处"><a href="#不理解之处" class="headerlink" title="不理解之处"></a>不理解之处</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ%E6%88%AA%E5%9B%BE20220126232841.png"></p><hr><h1 id="TOPSIS"><a href="#TOPSIS" class="headerlink" title="TOPSIS"></a>TOPSIS</h1><h2 id="TOPSIS-模型讲解"><a href="#TOPSIS-模型讲解" class="headerlink" title="TOPSIS 模型讲解"></a>TOPSIS 模型讲解</h2><p>逼近理想解排序法，优劣解距离法<br>构造计算评分（公式）</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220128220408464.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220128220421453.png"/><ol><li>比较对象要大于两个；</li><li>比较的指标是多方面的；</li><li>指标有没有最大值和最小值。</li></ol><p>极大型指标（效益型指标）<br>极小型指标（成本型指标）</p><p>统一指标类型：<br>将所有的指标转换成极大型称为指标正向化</p><p>标准化处理，消除量纲的影响</p><p>TOPSIS步骤</p><ol><li>将原始矩阵正向化；<br> 四种指标：极大型指标，极小型指标，中间型指标，区间型指标；<br> 极小型-&gt;极大型指标</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">- max-x<br>- 1/x,(所有的元素都是正数)  <br></code></pre></td></tr></table></figure><p>  中间型-&gt;极大型指标<br>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220128220137862.png"/></p><p>  区间型-&gt;极大型指标<br>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220128220230492.png"/></p><ol start="2"><li><p>正向化矩阵标准化</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220128220302378.png"/></li><li><p>计算得分并归一化</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220128220318691.png"/></li></ol><h2 id="模型拓展"><a href="#模型拓展" class="headerlink" title="模型拓展"></a>模型拓展</h2><p>评价指标的权重：带权重的TOPSIS<br>    用层次分析法给这m个评价指标确定权重<br>    层次分析法具有主观性，为了修正TOPSIS，我们使用熵权法；</p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><ol><li>load<br> 加载mat数据文件</li><li>判断是否需要正向化处理<br> 需要正向化则直接调用正向化的函数（自己声明的函数）<br> 函数的输出值就是已经正向化的矩阵<br> 自定义函数，需要放到一个m文件中 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> [输出变量] = 函数名称(输入变量)<br>end<br></code></pre></td></tr></table></figure></li><li>对正向化的矩阵进行标准化</li><li>计算与最大值的距离和最小值的距离，并算出得分<br> sort()函数<br> 向量：sort(A):按照升序排列，sort(A,’descend’):按照降序排列<br> 矩阵:sort(A)与sort(A,1)等价：按照列排序，sort(A,2)：按照行排序；<br> magic():幻方矩阵，矩阵的每一列和相等；</li></ol><p>数据可视化：excel作图：清风推荐条形图</p><h2 id="基于熵权法对TOPSIS模型的修正"><a href="#基于熵权法对TOPSIS模型的修正" class="headerlink" title="基于熵权法对TOPSIS模型的修正"></a>基于熵权法对TOPSIS模型的修正</h2><p>熵权法是一种客观赋权的方法<br>依据的原理：指标的变异程度（方差）越小，所反映的信息也就越少，其对应的权重也应该越低；</p><p>信息量的度量——概率<br>自信息<br>信息熵</p><p>熵权法计算步骤</p><ol><li>判断输入的矩阵中是否存在负数，如果有则要重新标准化到<strong>非负区间</strong><br> 矩阵正向化处理<br> 矩阵标准化</li><li>计算第j项指标下的第i个样本所占的比重，并将其看作相对熵计算中用到的概率</li><li>计算每个指标的信息熵，<br> 并计算信息效用值，<br> 并归一化得到每个指标的熵权</li></ol><p>熵权法的代码</p><hr><h1 id="灰色关联分析（美赛不用）"><a href="#灰色关联分析（美赛不用）" class="headerlink" title="灰色关联分析（美赛不用）"></a>灰色关联分析（美赛不用）</h1><h2 id="模型基本介绍"><a href="#模型基本介绍" class="headerlink" title="模型基本介绍"></a>模型基本介绍</h2><p>系统分析和综合评价</p><p>系统分析，分析自变量对结果影响大小</p><p>数理统计：回归分析，方差分析，主成分分析</p><p>灰色关联分析，对<strong>数据量的大小</strong>和样本的规律性没有要求</p><p>灰色关联分析的<strong>思想</strong>是根据序列曲线<strong>几何形状的相似程度</strong>来判断其联系是否紧密。曲线越接，相应序列之间的关联度就越大，反之就越小；</p><h2 id="应用一：进行系统分析"><a href="#应用一：进行系统分析" class="headerlink" title="应用一：进行系统分析"></a>应用一：进行系统分析</h2><ol><li><p>画统计图（用Excel），并根据图表做几条简单的分析</p></li><li><p>确定分析数列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">母序列（参考数列，母指标）：反映系统行为的数据序列-&gt;类似于因变量Y（只有一个）；<br>子序列（比较数列，子指标）：影响系统行为的因素所组成的数据序列-&gt;类似于自变量X（可以有多个）；<br></code></pre></td></tr></table></figure></li><li><p>对变量进行预处理（目的：去量纲，缩小变量范围简化计算）<br>对母序列和子序列中的每个指标进行预处理：先求出每个指标的均值，在用该指标中的每个元素都除以其均值；</p></li><li><p>计算子序列中各个指标与母系列的关联系数（小数点后四位数字）<br>两极最小差，两极最大差<img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/QQ%E6%88%AA%E5%9B%BE20220129204228.png"/></p></li></ol><p>​计算关联系数<img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/QQ%E6%88%AA%E5%9B%BE20220129204406.png"/></p><ol start="5"><li><p>灰色关联度<img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/QQ%E6%88%AA%E5%9B%BE20220129205232.png"/></p></li><li><p>通过比较三那个子序列和母序列的关联度可以得到结论：<br>找到灰色关联度最大的那个指标，该子指标对母指标的影响最大；</p></li></ol><p>讨论：</p><p><strong>美赛不要用灰色关联分析，美赛用传统的数理分析方法（回归分析，方差分析，主成分分析）</strong></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/QQ截图20220129210021.png"/><h2 id="应用二：用于综合评价"><a href="#应用二：用于综合评价" class="headerlink" title="应用二：用于综合评价"></a>应用二：用于综合评价</h2><p>（类似于TOPSIS联合熵权法）</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/QQ截图20220129210117.png"/><hr><h1 id="模糊综合评价"><a href="#模糊综合评价" class="headerlink" title="模糊综合评价"></a>模糊综合评价</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220129210959111.png"/></div><h2 id="模糊综合评价概述"><a href="#模糊综合评价概述" class="headerlink" title="模糊综合评价概述"></a>模糊综合评价概述</h2><ol><li><p>数学归纳法和秃子悖论<br>量变引起质变数学上就算模糊的概念</p></li><li><p>数学中研究的量的划分</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">量 <br>- 确定性<br>    - 经典数学（几何，代数）<br>- 不确定性<br>    - 随机性（概率论，随机过程）<br>    - 灰性（灰色系统）<br>    - 模糊性（模糊数学）<br></code></pre></td></tr></table></figure><ol start="3"><li><p>生活存在的模糊性<br> 确定性：性别，年龄，身高……<br> 模糊性：高，帅，白，年轻……</p></li><li><p>模糊数学</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220129221649.png"/></div></li></ol><h2 id="经典集合和模糊集合的基本概念"><a href="#经典集合和模糊集合的基本概念" class="headerlink" title="经典集合和模糊集合的基本概念"></a>经典集合和模糊集合的基本概念</h2><ol><li>经典集合与特征函数</li></ol><ul><li>论域：我们感兴趣的一些对象集合</li></ul><ol start="2"><li>模糊集合和隶属函数</li></ol><ul><li>隶属函数（分段函数），隶属函数不唯一</li><li>隶属度</li><li>模糊集合的三种表示方法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">论域U，模糊集合A，隶属度A(xi)<br><br>1. 扎德表示法 <br>2. 序偶表示法 <br>3. 向量表示法 <br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220131133052.png"/></div><ul><li>模糊集合的分类<br>偏小型——隶属函数递减<br>中间型——隶属函数先增大后减小<br>偏大型——隶属函数递增</li></ul><h2 id="隶属函数的三种确定方法"><a href="#隶属函数的三种确定方法" class="headerlink" title="隶属函数的三种确定方法"></a>隶属函数的三种确定方法</h2><ol><li><p>模糊统计法（比赛中用的少，因为需要发问卷，实际研究中应用更多）<br>原理：找到多个人对同一个模糊概念进行描述，用隶属频率去定义隶属度</p></li><li><p>借助已有的客观尺度（需要有合适的指标，并能收集到数据）</p></li></ol><ul><li>论域</li><li>模糊集</li><li>隶属度（指标介于0-1至今（归一化处理））</li></ul><ol start="3"><li>指派法（根据问题的性质直接套用某些分布作为隶属函数，主观性强）<br>博客网站链接：<a href="https://blog.csdn.net/qq_29831163/article/details/89892822">(1条消息) 模糊数学模型（一）： 隶属函数、模糊集合的表示方法、模糊关系、模糊矩阵_冷月无声的博客-CSDN博客_常用的模糊函数分布表</a><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/20190506222358274.png"/></div></li></ol><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/20190506222421707.png"/></div>## 模糊综合评价应用<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ%E6%88%AA%E5%9B%BE20220131135021.png"/></div><ol><li>概述</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">把论域中的对象对应评语集中一个指定的评语<br>将方案作为评语集并选择一个最优的方案<br><br>模糊综合评价中的三个集合：因素集合（评价指标集）；评语集合（评价的结果）；权重集（指标的权重）<br><br></code></pre></td></tr></table></figure><ol start="2"><li><p>一级模糊综合评价模型<br> 在指标个数较少的考核中，运用一级模糊综合评判，而在问题较为复杂，指标较多时，运用多层次模糊综合评价<br> 步骤：</p></li><li><p>确定因素集。评价角度</p></li><li><p>确定评语集。评价值 评价等级</p></li><li><p>确定各因素的权重。使用Delphi法（专家调查法）：征求专意见后，再反馈给专家，再次征求意见，直到意见的统一；其他方法：无数据：层次分析法；有数据：熵权法。</p></li><li><p>确定<strong>模糊综合判断矩阵</strong>（关键）。</p>  <div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220131140039.png"/>  </div></li><li><p>综合评判。模糊变换。</p></li><li><p>多级模糊综合评价模型<br> 因素中元素较多，我们可以对其进行归类归类后，可以简化我们的计算。<br> 确定权重的时候，指标越少，越容易判断权重</p></li></ol><h1 id="Excel绘制统计图"><a href="#Excel绘制统计图" class="headerlink" title="Excel绘制统计图"></a>Excel绘制统计图</h1><p>美赛：英文写作和作图比建模更重要<br>一般不直接在图中加标题，把图的标题放在论文中</p><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><ol><li>边框无线条</li><li>类别太多：不用饼图而是柱状图</li><li>类别太少：不画饼图</li><li>划分的类别不是全集：加一个“其他”类别</li><li>先排序后画饼图</li><li>复合饼图</li></ol><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220131151824.png"/></div><h2 id="柱状图和条形图"><a href="#柱状图和条形图" class="headerlink" title="柱状图和条形图"></a>柱状图和条形图</h2><ol><li>只有一列数据：柱状图</li><li>有两列数据：柱状图</li><li>三类柱状图：普通柱状图，堆积柱状图，百分比柱状图</li><li>换一个角度画图——切换行和列，先排序后作图</li><li>条形图（横折的柱状图）：类别特别多的时候，如果要加入数据标签，则应该使用条形图</li><li>双向条形图</li><li>用柱状图可视化回归结果</li></ol><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><ol><li><p>频数分布直方图</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220131155134.png"/></div></li><li><p>组距对直方图的影响</p></li><li><p>频率分布直方图：先用excel计算出频率</p></li></ol><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><ol><li>超长时间序列图</li><li>双坐标轴在折线图</li><li>柱型图顶端的折线图</li></ol><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><ol><li>普通散点图</li><li>带标示的散点图</li></ol><h2 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220131160716.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220131160814.png"/></div><h1 id="插值算法"><a href="#插值算法" class="headerlink" title="插值算法"></a>插值算法</h1><p>数据很少的时候，不足以支撑分析的进行，这时候就需要使用数学的方法，模拟产生一些新的但又比较靠谱的值来满足需求。</p><h2 id="一维插值问题"><a href="#一维插值问题" class="headerlink" title="一维插值问题"></a>一维插值问题</h2><ol><li><p>多相式插值：<br>拉格朗日插值法<br>龙格现象：高次插值会产生龙格现象，即在两端处波动极大，产生明显的震荡。</p></li><li><p>分段插值：<br>分段线性插值法<br>分段二次插值法（分段抛物插值）</p></li><li><p>牛顿插值法<br> 差商<br> 也存在龙格现象</p></li><li><p>埃尔米特插值原理<br> <strong>分段三次埃尔米特插值</strong><br> matab函数：p&#x3D;pchip(x,y,new_x)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">x：已知的样本点的横坐标；<br>y：已知的样本点的纵坐标；<br>new_x:要插入处对应的横坐标；<br></code></pre></td></tr></table></figure></li><li><p>plot()函数</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220205195807.png"/></div></li><li><p>三次样条插值<br> spline(x,y.new_x)</p></li></ol><h2 id="n维数据的插值"><a href="#n维数据的插值" class="headerlink" title="n维数据的插值"></a>n维数据的插值</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ%E6%88%AA%E5%9B%BE20220205201238.png"  /></div><h2 id="插值算法可以用于预测"><a href="#插值算法可以用于预测" class="headerlink" title="插值算法可以用于预测"></a>插值算法可以用于预测</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220205201722.png"/></div><h2 id="建模实例"><a href="#建模实例" class="headerlink" title="建模实例"></a>建模实例</h2><p>两组数据，第一组数据的时间是：第一周，第二周，第三周……<br>第二组的数据的时间是：第一周，第三周，第五周……<br>因此，需要先把第二组的数据使用插值算法扩展到第一周，第二周，第三周……</p><p>subplot()函数</p><h1 id="拟合算法"><a href="#拟合算法" class="headerlink" title="拟合算法"></a>拟合算法</h1><p>拟合算法与插值算法的区别：与插值问题不同，在拟合问题中不需要曲线一定经过给定的点。拟合问题的目标是寻找一个函数（曲线），使得该曲线在某种准则下与所有的数据点最为接近，即曲线拟合的最好（最小化损失函数）。</p><p>插值算法：找到的函数经过所有的样本点<br>拟合算法：误差尽量小</p><h2 id="拟合算法讲解"><a href="#拟合算法讲解" class="headerlink" title="拟合算法讲解"></a>拟合算法讲解</h2><ol><li>确定拟合曲线<br> 最小二乘法  <div align=center>   <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220205204255.png"/>  </div></li></ol><p>  使用matlab求解最小二乘法</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hold on 继续在之前的图形上面来画图形<br>gird on  显示网格线<br>  <br>% 匿名函数的基本用法。<br>% handle = @(arglist) anonymous_function<br>% 其中handle为调用匿名函数时使用的名字。<br>% arglist为匿名函数的输入参数，可以是一个，也可以是多个，用逗号分隔。<br>% anonymous_function为匿名函数的表达式。<br></code></pre></td></tr></table></figure><ol start="2"><li>评判拟合的好坏<br> 拟合优度（可决系数）<br> 量纲会影响SSE  <div align=center> <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220205205434.png"/>  </div></li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">拟合函数要简单<br>R^2只能用于拟合函数是线性函数的时，拟合结果的评价；<br>如果有一个线性函数和一个其他函数（例如复杂指数函数），二者比较拟合的好坏时候，直接看SSE即可<br></code></pre></td></tr></table></figure><ol start="3"><li><p>线性函数<br> 在函数中，参数仅以一次方出现，且不能乘以或除以其他任何参数，并且不能出现参数的复合函数形式</p>  <div align=center> <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220205211638.png"/>  </div></li><li><p>matlab计算拟合优度</p></li></ol><h2 id="曲线拟合工具箱"><a href="#曲线拟合工具箱" class="headerlink" title="曲线拟合工具箱"></a>曲线拟合工具箱</h2><p>Curve Fitting Tool</p><h1 id="相关性分析"><a href="#相关性分析" class="headerlink" title="相关性分析"></a>相关性分析</h1><h2 id="相关系数"><a href="#相关系数" class="headerlink" title="相关系数"></a>相关系数</h2><p>皮尔逊相关系数<br>斯皮尔曼等级相关系数<br>相关系数可以用来衡量两个变量之间的相关性的大小，根据数据满足的不同条件，我们要选择不同的相关系数进行计算和分析。</p><p>总体：所要考察对象的全部的个体叫做总体<br>样本：从总体中所抽取的一部分个体叫做总体的一个样本。</p><p>使用样本均值，样本标准差来估计总体的均值和总体的标准差</p><ol><li>总体皮尔逊相关系数<br>总体均值与协方差<div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206171930.png"/></div></li></ol><p>皮尔逊相关系数可以看成是剔除了两个变量量纲影响，即将x和y标准化后的协方差</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206172426.png"/></div><ol start="2"><li><p>样本皮尔逊相关系数</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206172718.png"/></div></li><li><p>皮尔逊相关系数的理解误区<br>相关系数只是用来衡量两个便利线性相程度的指标；<br>也就是说，你必须确定这两个变量是线性相关的，然后这个相关系数才能告诉你他两个相关程度如何</p></li><li><p>需要注意的点</p></li></ol><ul><li>非线性相关也会导致线性相关系数很大</li><li>离群点对相关系数的影响很大</li><li>如果两个变量的相关系数很大，也不能说明二者相关，可能是受到异常值的影响</li><li>相关系数计算结果为0，只能说不是线性相关，不能说不相关</li></ul><ol start="5"><li>总结</li></ol><ul><li>如果两个变量本身就是<strong>线性的关系</strong>，那么皮尔逊相关系数绝对值大的就是相关性强，小的就是相关性弱</li><li>在不确定两个变量是什么关系的情况下，即使算出皮尔逊相关系数，发现很大，也不能说明两个变量线性相关，甚至不能说明他们相关，我们一定要画出<strong>散点图</strong>来看才行</li></ul><ol start="6"><li><p>相关性大小</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206174137.png"/></div></li><li><p>例题</p></li></ol><ul><li>计算基本统计量，进行描述性统计</li></ul><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206174406.png"/></div><ul><li>法一：使用matlab</li></ul><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206174703.png"/></div><p>法二：使用excel</p><p>法三：使用spss<br>分析-描述统计-描述</p><ul><li><p>画出散点图<br>使用excel或SPSS，推荐使用SPSS（图形 - 旧对话框 - 散点图&#x2F;点图 - 矩阵散点图）</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206181424.png"/></div></li><li><p>计算皮尔逊相关系数<br>matlab：corrcoef()函数</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206212244.png"/></div></li></ul><p>在excel中对相关系数表格进行美化</p><ul><li>设置好基本格式</li><li>开始-条件格式-色阶</li><li>开始-条件格式-色阶-管理规则，梗概最小值，中间值，最大值</li></ul><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图202202062130071.png"/></div><h2 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h2><p>原假设<br>置信水平：相信原假设成立的概论Beta<br>临界值<br>显著性水平：我们有多大的可能拒绝原假设（Alpha&#x3D;1-Beta）（犯第一类错误的概率：原假设是正确的我们却认为它错了）</p><p>假设检验的步骤</p><ol><li>确定原假设（H_0）和备择假设</li><li>在原假设成立的条件下，根据要检验的量构造一个分布<br> 标准正态分布，t分布，F分布，卡方分布</li><li>画出这个分布的概率密度图</li><li>给一个置信水平Beta（相信H_0成立的概率）</li></ol><p>概率密度函数pdf-f(x)<br>离散型随机变量<br>连续型随机变量</p><p>累计密度函数cdf-F(x)</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206222914.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206223225.png"/></div><h2 id="皮尔逊相关系数假设检验"><a href="#皮尔逊相关系数假设检验" class="headerlink" title="皮尔逊相关系数假设检验"></a>皮尔逊相关系数假设检验</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206223537.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206223704.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206223820.png"/></div><p>p值判断法</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206224143.png"/></div><p>皮尔逊相关系数假设检验的条件</p><ol><li>实验数据通常假设是成对的来自于正态分布的总体。</li><li>实验数据之间的差距不能太大。（皮尔逊相关性系数受异常值的影响比较大）</li><li>每组样本之间是独立抽样的。</li></ol><h2 id="对数据进行正态分布检验"><a href="#对数据进行正态分布检验" class="headerlink" title="对数据进行正态分布检验"></a>对数据进行正态分布检验</h2><ol><li>正态分布JB检验（大样本，n&gt;30）<br>偏度和峰度<div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206231724.png"/></div></li></ol><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206225957.png"/></div><p>matlab:jbtest(x,alpha)<br>x:不能是矩阵，只能是列向量</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206230137.png"/></div><ol start="2"><li>Shapiro-wilk检验（小样本，3&lt;&#x3D;n&lt;&#x3D;50）<br>夏皮洛-威尔克检验<br>matlab没有提供相应函数，只能使用SPSS</li></ol><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206230905.png"/></div><p>matlab没有提供相应函数，只能使用SPSS</p><ol start="3"><li>Q-Q图（数要求据量超级大）——不推荐使用<div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206231116.png"/></div></li></ol><p>matlab：qqplot(x)</p><h2 id="斯皮尔曼相关系数"><a href="#斯皮尔曼相关系数" class="headerlink" title="斯皮尔曼相关系数"></a>斯皮尔曼相关系数</h2><p>两组数的等级差<br>一个数的等级</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206231836.png"/></div><p>斯皮尔曼相关系数使用matlab计算</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220206232338.png"/></div><p>小样本：<br>斯皮尔曼等级的相关系数的临界值<br>样本相关系数r必须大于等于表格中的临界值，才能得出显著的结论</p><p>大样本：</p><h2 id="两种相关系数的比较"><a href="#两种相关系数的比较" class="headerlink" title="两种相关系数的比较"></a>两种相关系数的比较</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ%E6%88%AA%E5%9B%BE20220206233149.png"/></div><h2 id="正态分布均值的假设检验"><a href="#正态分布均值的假设检验" class="headerlink" title="正态分布均值的假设检验"></a>正态分布均值的假设检验</h2><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="图的概念"><a href="#图的概念" class="headerlink" title="图的概念"></a>图的概念</h2><p>图（Graph）<br>图的顶点集V<br>图的边集E</p><p>图的绘制<br>法一：<a href="https://csacademy.com/app/graph_editor/">https://csacademy.com/app/graph_editor/</a></p><p>法二：matlab<br>无权重</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">s1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>t1 = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>];<br>G1 = graph(s1, t1);<br><span class="hljs-built_in">plot</span>(G1)<br></code></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 下面的命令是在画图后不显示坐标</span><br>set( gca, <span class="hljs-string">&#x27;XTick&#x27;</span>, [], <span class="hljs-string">&#x27;YTick&#x27;</span>, [] );  <br></code></pre></td></tr></table></figure><p>有权重</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">s = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>t = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>];<br>w = [<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>];<br>G = graph(s, t, w);<br><span class="hljs-built_in">plot</span>(G)<br></code></pre></td></tr></table></figure><p>有向图：digraph()</p><p>无向图的权重邻接矩阵</p><p>有向图的权重邻接矩阵</p><h2 id="迪杰斯特拉算法"><a href="#迪杰斯特拉算法" class="headerlink" title="迪杰斯特拉算法"></a>迪杰斯特拉算法</h2><p><a href="https://www.bilibili.com/video/BV1q4411M7r9">https://www.bilibili.com/video/BV1q4411M7r9</a></p><p>迪杰斯特拉算法不能处理带有的权重是负数</p><h2 id="贝尔曼-福特算法"><a href="#贝尔曼-福特算法" class="headerlink" title="贝尔曼-福特算法"></a>贝尔曼-福特算法</h2><p>改进迪杰斯特拉算法</p><h2 id="matlab常用函数"><a href="#matlab常用函数" class="headerlink" title="matlab常用函数"></a>matlab常用函数</h2><h3 id="shortpath"><a href="#shortpath" class="headerlink" title="shortpath()"></a>shortpath()</h3><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220207165812.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220207165903.png"/></div><p>高亮最短路径</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">myplot = <span class="hljs-built_in">plot</span>(G, <span class="hljs-string">&#x27;EdgeLabel&#x27;</span>, G.Edges.Weight, <span class="hljs-string">&#x27;linewidth&#x27;</span>, <span class="hljs-number">2</span>);  <span class="hljs-comment">%首先将图赋给一个变量</span><br>highlight(myplot, P, <span class="hljs-string">&#x27;EdgeColor&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)   <span class="hljs-comment">%对这个变量即我们刚刚绘制的图形进行高亮处理（给边加上r红色）</span><br></code></pre></td></tr></table></figure><h3 id="distances"><a href="#distances" class="headerlink" title="distances()"></a>distances()</h3><p>返回任意两点的距离矩阵</p><h3 id="nearest"><a href="#nearest" class="headerlink" title="nearest"></a>nearest</h3><p>找出给定范围内的所有的点</p><h2 id="弗洛伊德算法"><a href="#弗洛伊德算法" class="headerlink" title="弗洛伊德算法"></a>弗洛伊德算法</h2><p>弗洛伊德算法与迪杰斯特算法或贝尔曼福特算法相比，能够一次性求出任意两点之间的最短路径，后两种算法运行一次只能计算出给定的起点和终点之间的最短路径。<br><a href="https://www.bilibili.com/video/BV1q4411M7r9">https://www.bilibili.com/video/BV1q4411M7r9</a><br>三个循环</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 下面开始三个循环</span><br><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:n    <span class="hljs-comment">% 中间节点k从1- n 循环</span><br>   <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n     <span class="hljs-comment">% 起始节点i从1- n 循环</span><br>      <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n    <span class="hljs-comment">% 终点节点j从1-n 循环</span><br>          <span class="hljs-keyword">if</span> dist(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)&gt;dist(<span class="hljs-built_in">i</span>,k)+dist(k,<span class="hljs-built_in">j</span>)  <span class="hljs-comment">% 如果i,j两个节点间的最短距离大于i和k的最短距离+k和j的最短距离</span><br>             dist(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=dist(<span class="hljs-built_in">i</span>,k)+dist(k,<span class="hljs-built_in">j</span>);  <span class="hljs-comment">% 那么我们就令这两个较短的距离之和取代i,j两点之间的最短距离</span><br>             path(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=path(<span class="hljs-built_in">i</span>,k);   <span class="hljs-comment">% 起点为i，终点为j的两个节点之间的最短路径要经过的节点更新为path(i,k)</span><br>             <span class="hljs-comment">% 注意，上面一行语句不能写成path(i,j) = k; 这是网上很多地方都容易犯的错误，在PPT11页中会告诉大家为什么不能这么写</span><br>          <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h1 id="线性回归分析（没看懂）"><a href="#线性回归分析（没看懂）" class="headerlink" title="线性回归分析（没看懂）"></a>线性回归分析（没看懂）</h1><p>常见的回归：线性回归，0-1回归，定序回归，计数回归，生存回归</p><h2 id="回归概论"><a href="#回归概论" class="headerlink" title="回归概论"></a>回归概论</h2><p>回归的三个关键词<br>相关性，X，Y</p><ul><li><p>相关性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">区分相关性和因果性<br>通过回归分析，判断相关性<br></code></pre></td></tr></table></figure></li><li><p>Y</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Y，因变量<br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220207181822.png"/></div></li><li><p>X</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">X，自变量<br></code></pre></td></tr></table></figure></li></ul><p>回归分析的使命</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 回归分析要去识别并判断：哪些变量是同Y真的相关，哪些不是。<br>2. 这些有用的X变量同Y的相关关系是正的还是负的；<br>3. 赋予不同X不同的权重，也就是不同的回归系数，进而我们可以知道不同变量之间的相对重要性。<br><br>简单来说就是<br>识别重要变量，判断相关性的方向，估计权重（回归系数）<br></code></pre></td></tr></table></figure><p>回归分析的分类</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220207200023.png"/></div><h2 id="数据的分类以及数据的来源"><a href="#数据的分类以及数据的来源" class="headerlink" title="数据的分类以及数据的来源"></a>数据的分类以及数据的来源</h2><ol><li>横截面数据：在某一时间点收集的不同对象的数据</li><li>时间序列数据：对同一对象在不同时间连续观察所取得的数据</li><li>面板数据：横截面数据与时间序列数据综合起来的一种数据资源</li></ol><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220207200443.png"/></div><p>资料的获取</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220207201843.png"/></div><h2 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h2><p>一元线性函数拟合</p><p>一元线性回归模型</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220207204639.png"/></div><p>遗漏变量导致的内生性<br>如果满足误差项u和所有的自变量x均不相关，则称该回归模型具有外生性</p><p>扰动性：包含了所有与y相关，但未添加到回归模型中的变量<br>如果这些变量和我们已经添加的自变量相关，则存在内生性</p><p>内生性的蒙特卡洛模拟</p><p>核心解释变量：我们最感兴趣的变量，因此我们特别希望得到对其系数的一致估计。（当样本容量无限增大时，收敛于待估计参数的真值）<br>控制变量：我们可能对与这些变量本身并无太大兴趣；而之所以把他们放入到回归方程中，只要是为了“控制住”那些被解释变量有影响的遗漏因素</p><h2 id="四种模型的解释"><a href="#四种模型的解释" class="headerlink" title="四种模型的解释"></a>四种模型的解释</h2><p>取对数：取对数意味着原被解释变量对解释变量的弹性，即百分比的变化而不是数值的变化</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220207212737.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220207213024.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ%E6%88%AA%E5%9B%BE20220207213054.png"/></div><p>特殊的自变量：虚拟变量X<br>自变量中的定性变量：性别，地域等</p><p>交互效应</p><h2 id="回归的应用"><a href="#回归的应用" class="headerlink" title="回归的应用"></a>回归的应用</h2><!-- 看不懂 --><p>使用软件Stata</p><blockquote><p>stata中的计算结果不要直接截图，而是复制到excel表格中，并在excel中调整为三线表，然后粘贴到论文中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">- 定量数据<br>summarize 变量1 变量2……<br><br>- 定性数据<br>tabulate 变量名<br>tabulate 变量名,gen(A):gen(A)表示虚拟变量<br><br>- 回归<br>regress y x1 x2 ……<br>（默认使用的OLS：普通最小二乘估计法）<br></code></pre></td></tr></table></figure><p>excel数据透视表：对数据进行交互分析</p><h2 id="论文中的问题"><a href="#论文中的问题" class="headerlink" title="论文中的问题"></a>论文中的问题</h2><ul><li>数据不要归一化</li></ul><h2 id="异方差，多重共线性，逐步回归"><a href="#异方差，多重共线性，逐步回归" class="headerlink" title="异方差，多重共线性，逐步回归"></a>异方差，多重共线性，逐步回归</h2><h1 id="分类模型"><a href="#分类模型" class="headerlink" title="分类模型"></a>分类模型</h1><p>二分类模型和多分类模型<br>逻辑回归，Fisher线性判别分析</p><h2 id="二元逻辑分类"><a href="#二元逻辑分类" class="headerlink" title="二元逻辑分类"></a>二元逻辑分类</h2><ol><li><p>使用SPSS对数据进行预处理<br>转换-创建虚变量</p></li><li><p>建模<br>线性概率模型——LPM<br>直接用原来的回归模型进行回归。<br>内生性问题：看扰动项是否与自变量相关</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 内生性问题归导致回归系数估计出来不一致且有偏<br>2. 预测值y_hat是一个概率，出现y_hat大于1或者y_hat小于0的时候，应该做出合理的处理方法。<br></code></pre></td></tr></table></figure><p>连接函数，将解释变量x和被解释变量y连接起来，我们只要保证连接函数是定义在[0,1]上的函数，就能保证y_hat符合概率的要求。</p><p>连接函数的取法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 连接函数取为标准正态分布的累计密度函数cdf——problt回归<br>2. 连接函数取sigmoid函数——logistic回归(使用的更多)<br></code></pre></td></tr></table></figure><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220208190016.png"/></div><p>求解方法——因为是非线性模型，使用极大似然估计</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/QQ截图20220208190259.png"/></div><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220208190403.png"/><ol start="3"><li>使用SPSS求解逻辑回归<br>分析-回归-二元Logistic</li></ol><p>因变量：虚变量<br>协变量：自变量x</p><p>分类：协变量-&gt;分类协变量，定性变量<br>保存：概论，组成员<br>选项：步进概率</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211142009.png"/></div><ol start="4"><li><p>逐步回归的设置<br>分析-回归-二元Logistic<br>方法：向前，向后<br>选项：步进，除去</p></li><li><p>假如自变量有分类变量怎么办</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">两种解决方法<br>- 先创建虚拟变量，然后任意删除一列以排除完全多重共线性的影响；<br>- 直接点击分类，然后定义分类协变量，SPSS会自动帮我们生成；（推荐方法）<br></code></pre></td></tr></table></figure></li><li><p>解决回归准确率低的问题<br>可在logistic回归模型中加入平方项，交互项。<br>回归结果：<br>虽然预测能力提高了，但容易出现过拟合的现象。</p></li><li><p>如何确定合适的模型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">把数据分为分为训练组和测试组，用训练组的世界来估计出模型，在用测试在的数据进行测试。（训练组和测试组为2:8）<br>然后比较设置的不同自变量后的模型对于测试组的预测效果。<br><br>（注意：为了消除偶然性的影响，可以对上述步骤多重复几次，最终对每个模型求一个平均的准确率，这个步骤称为交叉验证）<br></code></pre></td></tr></table></figure></li></ol><h2 id="Fisher线性判别分析（LDA）"><a href="#Fisher线性判别分析（LDA）" class="headerlink" title="Fisher线性判别分析（LDA）"></a>Fisher线性判别分析（LDA）</h2><ol><li><p>超平面<br>用超平面将两类样本点分割开</p></li><li><p>SPSS操作<br>分析-分类-判别式</p></li></ol><p>定义范围：0-1<br>统计：费希尔，未标准化<br>分类：摘要表<br>保存：预测组成员，组成员概率</p><h2 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h2><ol><li>Fisher线性判别分析解决多分类问题</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">分析-分类-判别式<br><br>定义范围：1-多<br>统计：费希尔，未标准化<br>分类：摘要表<br>保存：预测组成员，组成员概率<br></code></pre></td></tr></table></figure><ol start="2"><li>逻辑回归解决多分类问题<br> 将Sigmoid函数推广为Softmax函数就可以将逻辑回归应用到多分类问题</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">分析-回归-多元逻辑回归<br><br>保存：估算响应概论，预测类别<br><br>过拟合问题——使用交叉验证解决，测试组和训练组<br><br></code></pre></td></tr></table></figure><h1 id="聚类模型"><a href="#聚类模型" class="headerlink" title="聚类模型"></a>聚类模型</h1><p>聚类是将样本划分为由类似的对象组成的多个类的过程。<br>分类是已知类别的，聚类是未知的。</p><h2 id="K-means聚类算法"><a href="#K-means聚类算法" class="headerlink" title="K-means聚类算法"></a>K-means聚类算法</h2><p>算法流程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 指定需划分的簇的个数K值（类的个数）；<br>2. 随机地选择K个数据对象作为初始的聚类中心（不一定是我们的样本点）；<br>3. 计算其余的各个数据对象到这K个初始聚类中心的距离，把数据对象规划为到距离它最近的那个中心所处的簇类中；<br>4. 调整新类并且重新计算出新类的中心；<br>5. 循环步骤3和步骤4，看中心是否收敛（不变），如果收敛或达到迭代次数则停止循环；<br>6. 结束。<br></code></pre></td></tr></table></figure><p><code>聚类的结果与聚类中心有关</code></p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211220147.png"/></div><p><code>用流程图代替算法的文字描述能有效避免查重</code></p><p><strong>K-means算法的评价</strong></p><ul><li>优点</li></ul><ol><li>算法简单，快速；</li><li>对处理大数据集，该算法三相对高效的。</li></ol><ul><li>缺点</li></ul><ol><li>要求用户必须实现给出要生生成的簇的数目K；</li><li>对初值敏感（初始聚类中心）；</li><li>对于孤立点数据敏感</li></ol><h2 id="K-means-算法"><a href="#K-means-算法" class="headerlink" title="K-means++算法"></a>K-means++算法</h2><p>选择初始聚类中心的基本原则是：初始的聚类中心之间互相距离要尽可能的远<br>K-means++可以解决K-means算法的缺点2和3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 随机选择一个样本作为数据中心；<br>2. 计算每个样本与当前已有聚类中心的最短距离（即与最近一个聚类中心的距离），这个值越大，表示被选取作为聚类中心的概率较大；最后用轮盘法（依据概率大小进行抽选）选出下一个聚类中心；<br>3. 重复步骤2，直到选出K个聚类中心。选出初始点后，就继续使用标准额K-means算法了。<br></code></pre></td></tr></table></figure><h2 id="SPSS操作"><a href="#SPSS操作" class="headerlink" title="SPSS操作"></a>SPSS操作</h2><p>分析-分类-K均值聚类</p><p><strong>K-means算法的讨论</strong></p><ol><li><p>聚类的个数怎么选择？——根据个人经验与感觉</p></li><li><p>数据的量纲不一致怎么解决？——标准化（将每个数据先减去其均值再除以标准差）</p></li></ol><ul><li>SPSS软件能自动计算<br>分析-描述统计-描述，将标准化值另存为变量</li></ul><h2 id="系统（层次）聚类"><a href="#系统（层次）聚类" class="headerlink" title="系统（层次）聚类"></a>系统（层次）聚类</h2><p>系统聚类的合并算法通过两类数据点间的距离，对最为接近的两类数据点进行合并，并反复迭代这一过程，直到将所有数据点合并成一类，并生成聚类谱系图。</p><p>样品与样品之间的常用距离</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211223702.png"/></div><p>绝对值距离：网状道路<br>欧式距离：不使用绝对值距离则一般就使用欧式距离。</p><p> 类与类之间的距离<br> <div align=center><br>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211224324.png"/></p></div><p>聚类方法</p><ol><li><p>最短距离法</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211224335.png"/></div></li><li><p>组间平均连接法（使用得更多）</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/image-20220212003236046.png"/></div></li><li><p>组内平均连接法（使用得更多）</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211224432.png"/></div></li><li><p>重心法</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211224500.png"/></div></li></ol><p><strong>系统聚类的过程</strong></p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211224622.png"/></div><p><strong>聚类分析需要注意的问题</strong></p><ol><li>对于一个实际问题根据分类的目的来选取指标，指标选取的不同分类结果一般也不同；</li><li>样品间距离定义的方式不同，聚类结果一般也不同；</li><li>聚类方法的不同，聚类结果一般也不同（尤其是样品特别多的时候）。最好能通过各种方法找出其中的公性。</li><li>要注意指标的量纲，量纲差别太大会导致聚类结果不合理；</li><li>聚类分析的结果可能不令人满意，因为i我们所作的是一个数学的处理，对于结果我们要找到一个合理的解释。</li></ol><p><strong>系统（层次）聚类算法流程</strong></p><ol><li>将每个对象看作一类，计算两两之间的最小距离；</li><li>将距离最小的两个类合并成一个新类；</li><li>重新计算新类与所有类之间的距离；</li><li>重复2和3，直到所有类最后合成一类；</li><li>结束<br>（自己绘制出流程图——避免查重）</li></ol><p>SPSS操作步骤<br>分析-分类-系统聚类</p><p>图：谱系图</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211233754.png"/></div><p>肘部法则——确定最优的K值</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211234007.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211235147.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220211235755.png"/></div><p>确定K之后保存聚类结果并画图<br><code>只能有两个或三个变量，绘制二维或三维图</code></p><h2 id="DBSCAN算法"><a href="#DBSCAN算法" class="headerlink" title="DBSCAN算法"></a>DBSCAN算法</h2><p>具有噪声的基于密度的聚类算法<br>聚类前不需要预先指定聚类的个数，生成的簇的个数不定</p><p>DBCAN算法将数据点分为三类<br>核心点<br>边界点<br>噪声点</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212001552.png"/></div><p>使用matlab对算法进行实现</p><p>只有两个指标，且做出的散点图有明显的密度差距，这时候用DBSCAN算法，否则使用另外的聚类算法。</p><h1 id="时间序列分析"><a href="#时间序列分析" class="headerlink" title="时间序列分析"></a>时间序列分析</h1><p>时间序列也称为动态序列，是指将某种现象的指标数值按照时间顺序排列而成的数值序列。<br>时间序列大致可以分为三大部分：描述过去，分析规律，预测未来<br>三种模型：季节分解，指数平滑，ARIMA模型<br>主要使用SPSS软件</p><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>时间序列数据：对同一对象在不同时间连续观察所得到的数据。<br>时间序列的组成要素：时间要素，数值要素</p><p>时间序列的分类：时期时间序列，时点时间序列<br>时期序列：数值要素反映现象在一定时期内发展的结果；<br>时点序列：数值要素反映现象在一定时点上的瞬间水平；</p><p>时期序列可加，时点序列不可加</p><h2 id="时间序列分解"><a href="#时间序列分解" class="headerlink" title="时间序列分解"></a>时间序列分解</h2><p>一般情况下，时间序列的数值变化规律有四种：长期变动趋势，季节变动规律，周期变动规律，不规则变动（随机扰动项）。</p><ul><li>长期趋势T：人均收入，新生儿的死亡率；</li><li>季节趋势S：周期性：以月份，季度，周为单位<br>清风推荐网站：百度指数<a href="https://index.baidu.com/v2/index.html#/">https://index.baidu.com/v2/index.html#/</a></li><li>循环变动C：以若干年为单位：商业周期，经济周期</li><li>不规则变动I：扰动项</li></ul><p>时间序列分解的结果可能是四种变化规律都有，也可能是只有其中几个；<br>四种变动与指标数值变动的关系可能是叠加关系，也可能三乘积关系</p><p><strong>叠加模型和乘积模型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">如果四种变动之间是相互独立的关系，那么叠加模型表示为：Y=T+S+C+I,<br>如果四种变动之间存在相互影响关系，那么使用乘积模型：Y=T*S*C*I<br></code></pre></td></tr></table></figure><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212181012.png"/></div><p>SPSS软件使用步骤</p><ol><li><strong>SPSS处理时间序列中的缺失值</strong></li></ol><ul><li>缺失值发生在时间序列的开头或者结尾，可采用直接删除的方法；</li><li>缺失值发生在序列的中间位置，则不能删除，可采用替换缺失值的方法。</li></ul><p>替换缺失值的五种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">- 序列平均值法：用整个序列的平均数代替缺失值；<br>- 邻近点的平均值：用邻近若干个点的平均数来代替缺失值（默认为两个点）<br>- 邻近点的中位数：<br>- 线性插值：用邻近两个点的平均数来代替缺失值<br>- 邻近点的线性趋势：将时期数作为x，时间序列值作为y进行回归，求缺失点的预测值。 <br></code></pre></td></tr></table></figure><p>SPSS：转换-替换缺失值</p><ol start="2"><li><p><strong>SPSS软件定义时间变量</strong><br>数据-定义日期和时间</p></li><li><p><strong>时间序列图</strong><br>分析-时间序列预测-序列图</p></li><li><p>季节性分解<br> 分析-时间序列预测-季节性分解</p></li></ol><p>SPSS statastic 25 没有这个选项？？</p><h2 id="时间序列分析的步骤"><a href="#时间序列分析的步骤" class="headerlink" title="时间序列分析的步骤"></a>时间序列分析的步骤</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212184121.png"/></div><h2 id="值数平滑方法"><a href="#值数平滑方法" class="headerlink" title="值数平滑方法"></a>值数平滑方法</h2><p>专家建模器</p><h3 id="Simple模型"><a href="#Simple模型" class="headerlink" title="Simple模型"></a>Simple模型</h3><p>名称：简单指数平滑法<br>适用条件：不含趋势和季节成分<br>与之类似的ARIMA模型：ARIMA(0,1,1)</p><p>只能预测一期的值，这是由于公式所决定的</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212185432.png"/></div><h3 id="线性趋势模型"><a href="#线性趋势模型" class="headerlink" title="线性趋势模型"></a>线性趋势模型</h3><p>名称：霍特线性趋势模型<br>使用条件：线性趋势，不含季节成分<br>与之类似的ARIMA模型：ARIMA(0,2,2)</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212185658.png"/></div><h3 id="阻尼趋势模型"><a href="#阻尼趋势模型" class="headerlink" title="阻尼趋势模型"></a>阻尼趋势模型</h3><p>名称：阻尼趋势模型<br>使用条件：线性趋势逐渐减弱且不含季节成分<br>与之类似的ARIMA模型：ARIMA(1,1,2)</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212190008.png"/></div><h3 id="简单季节性模型"><a href="#简单季节性模型" class="headerlink" title="简单季节性模型"></a>简单季节性模型</h3><p>名称：简单季节性<br>适用条件：还有稳定的季节成分，不含趋势<br>与之类似的ARIMA模型：SARIMA(0,1,1)*(0,1,1)_s</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212190211.png"/></div><h3 id="温特加法模型"><a href="#温特加法模型" class="headerlink" title="温特加法模型"></a>温特加法模型</h3><p>名称：温特加法模型<br>适用条件：含有线性趋势和稳定的季节成分<br>与之类似的ARIMA模型：SARIMA(0,1,0)*(0,1,1)_s</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212190513.png"/></div><h3 id="温特乘法模型"><a href="#温特乘法模型" class="headerlink" title="温特乘法模型"></a>温特乘法模型</h3><p>名称：温特加法模型<br>适用条件：含有线性趋势和不稳定的季节成分<br>与之类似的ARIMA模型：不存在</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212190522.png"/></div><h2 id="ARIMA模型"><a href="#ARIMA模型" class="headerlink" title="ARIMA模型"></a>ARIMA模型</h2><p>差分自回归移动评价模型<br>ARIMA(p,d,q)</p><h2 id="SARIMA模型"><a href="#SARIMA模型" class="headerlink" title="SARIMA模型"></a>SARIMA模型</h2><p>季节性ARIMA模型</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>建模思路</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212191750.png"/></div><h1 id="预测模型"><a href="#预测模型" class="headerlink" title="预测模型"></a>预测模型</h1><p>灰色预测模型<br>神经网络在数据预测中的应用</p><h2 id="灰色预测模型"><a href="#灰色预测模型" class="headerlink" title="灰色预测模型"></a>灰色预测模型</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">白色系统：系统的信息是完全明确的<br>灰色系统：系统的部分信息已知，部分信息未知<br>黑色系统：系统的内部信息是未知的<br></code></pre></td></tr></table></figure><ol><li>GM(1,1)模型：Grey Model<br>GM(1,1)是使用原始的离散非负数据列，通过一次累加生成削弱随机性的较有规律新的离散数据列，然后通过建立微分方程，得到在离散点处的解经过累计生成的原始数据的近似估计值，从而预测原始数据的后续发展<br>GM(1,1)，前一个1表示1阶微分方程，后一个1表示只有一个变量</li></ol><p><strong>准指数规律检验</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">- 数据具有准指数规律是使用灰色系统建模的理论基础<br></code></pre></td></tr></table></figure><p><strong>GM(1,1)模型的评价</strong><br>检验模型对原始数据的拟合程度（对原始数据还原的效果）。一般有两种检验方法：</p><ol><li><p>残差检验</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212200652.png"/></div></li><li><p>级比偏差检验</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212200743.png"/></div></li></ol><p><strong>什么时候使用灰色预测</strong></p><ol><li>数据是以年份度量的非负数据（如果是月份或者季度数据，则用时间序列模型）</li><li>数据能经过准指数规律的检验（除了前两期外，后面至少90%的期数的光滑比要低于0.5）</li><li>数据的期数较短且和其他数据之间的关联性不强（小与10期，但也不能太短），要是数据期数较长，一般使用传统的时间序列模型比较合适。<div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212201246.png"/></div></li></ol><h2 id="GM-1-1-模型代码讲解"><a href="#GM-1-1-模型代码讲解" class="headerlink" title="GM(1,1)模型代码讲解"></a>GM(1,1)模型代码讲解</h2><p>大概的步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 画出原始数据的时间序列图，并判断原始数据中是否有负数或者其数是否低于4期，如果是的话则报错，否则执行下一步；<br>2. 对一次累加后的数据进行准指数规律检验，返回两个指标<br>  指标1：光滑比小于0.5的数据占比(一般要大于60%)<br>  指标2：除去前两个时期外，光滑比小于0.5的数据占比（一般大于90%）<br>  并让用户决定输入是否满足准指数规律，满足则输入1，不满足则输入0<br>3. 如果上一步输入0，则程序停止，输入1则继续下面的步骤<br>4. 让用户输入需要预测的后续期数，并判断原始数据的期数<br>  4.1 数据期数为4：<br>    分别计算出传统的GM(1,1)、新信息GM(1,1)模型和新陈代谢GM(1,1)模型对于未来期数的预测结果，为了保证结果的稳健性，对三个结果求平均值作为预测值<br>  4.2 数据期数为5，6，7：<br>    取最后两期作为实验组，前面n-2期为训练组；用训练组的数据分别训练三种GM(1,1)模型，并将训练出来的模型分别用于预测实验组的两期数据；利用实验组两期数据的真实数据和预测出来的两期数据，分别计算出三个模型的SSE；选择最小的模型作为我们建模的模型；<br>  4.3 数据期数大于7：<br>    取最后三组作为试验组，其他的过程和4.2相同<br>5. 输出并绘制图形显示预测结果，并进行残差检验和级比残差检验<br></code></pre></td></tr></table></figure><h2 id="BP神经网络预测"><a href="#BP神经网络预测" class="headerlink" title="BP神经网络预测"></a>BP神经网络预测</h2><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212205911.png"/></div><p>基本概念：<br>训练集（Training Set）:用于模型拟合的数据样本<br>验证集（Validation Set）:是模型训练过程中单独留出的样本集，它可以用于调整模型的超参数和用于对模型的能力进学校初步评估。在神经网络中，我们用验证数据集取寻找最优的网络深度，或者反向传播算法的停止点或者在神经网络中选择隐藏层神经元的数量；<br>测试集（Testing Set）:用来评估模型的泛化能力。不能作为调参、选择特征等算法相关的选择的依据。</p><p>使用matlab的BP神经网络</p><p>APP-Neural Net Fitting</p><p>三种训练网络</p><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212212207.png"/></div><div align=center>  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220212212246.png"/></div><h1 id="Matlab三维图形绘制"><a href="#Matlab三维图形绘制" class="headerlink" title="Matlab三维图形绘制"></a>Matlab三维图形绘制</h1><h2 id="matlab绘制三维图形"><a href="#matlab绘制三维图形" class="headerlink" title="matlab绘制三维图形"></a>matlab绘制三维图形</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">mesh函数:绘制出某一区间内完整的网格图<br>1. mesh(X,Y,Z):X是n维向量，Y是n维向量，Z是m*n矩阵<br>2. mesh(Z):Z是m*n矩阵<br>3. mesh(X,Y,Z):X,Y,Z是m*n矩阵<br><br>meshgrid函数：快速生成网格所需要的数据<br><br>meshc函数：绘制曲面的等高线<br><br>meshz函数：绘制曲面的底座<br><br>alpha函数：设置透明度<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">surf函数：绘制出在某一区间内完整的曲面图<br>mesh是绘制出彩色的线，surf是绘制出彩色的面<br><br>subplot：在同一个figure中绘制不同的图<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">contour函数：绘制等高线<br><br>contourf函数：画出来等高线有颜色填充<br><br>contour3函数：三维等高线，等高线不再投影到x-y屏幕<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">符号函数的三维图形绘制<br><br>plot3函数：三维空间下的折线图<br><br>fplot3函数：<br><br>fmesh函数：绘制三维网格线图<br><br>fsurf函数：绘制三维网格面图<br><br>fcontour函数：绘制等高线图<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">三维隐函数图形绘制<br>fimplicit<br>fimplicit3<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">新建实时脚本：方便复习代码和命令<br></code></pre></td></tr></table></figure><h1 id="Matlab-符号运算"><a href="#Matlab-符号运算" class="headerlink" title="Matlab 符号运算"></a>Matlab 符号运算</h1><h2 id="Matlab定义符号变量和简单的运算"><a href="#Matlab定义符号变量和简单的运算" class="headerlink" title="Matlab定义符号变量和简单的运算"></a>Matlab定义符号变量和简单的运算</h2><ol><li><p>简单符号变量的创建</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms x<br>syms a b c<br></code></pre></td></tr></table></figure></li><li><p>符号方程的创建</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 法1</span><br>syms a x<br>y=a*x+x^<span class="hljs-number">2</span><br><span class="hljs-comment">% 法2</span><br>y=str2sym(<span class="hljs-string">&#x27;a*x+x^2&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>符号矩阵</p></li><li><p>简单运算</p></li><li><p>符号表达式的整理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">化简：simplify(y)<br>因式分解：<span class="hljs-built_in">factor</span>(y)<br>多项式展开：<span class="hljs-built_in">expand</span>(y)<br>多项式合并：collect()<br>计算分子与分母：numden(符号变量)<br>把double类型的变量转化为符号变量：sym(double类型的变量)<br>让结果显示的更加自然：mupad:2020版本不能用了，可以建立一个实时脚本，然后把要看的内容复制到实时脚本，然后运行就行了<br></code></pre></td></tr></table></figure></li></ol><h2 id="符号函数求导和差分的计算"><a href="#符号函数求导和差分的计算" class="headerlink" title="符号函数求导和差分的计算"></a>符号函数求导和差分的计算</h2><ol><li><p>一元函数求导</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">syms x<br>y=x^4+5*x+2<br>diff(y)  一阶导数<br>diff(y,2)  二阶导数<br></code></pre></td></tr></table></figure></li><li><p>多元函数求导</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">diff(y,x,2)<br>diff(y,x)<br>diff(y,z)<br>diff(y,x,z)<br>diff(y,z,x)<br></code></pre></td></tr></table></figure></li><li><p>差分<br>如果diff函数的作用对象不是符号函数，而是矩阵的时候，那么对应的功能是求差分</p></li></ol><h2 id="不定积分和定积分的计算"><a href="#不定积分和定积分的计算" class="headerlink" title="不定积分和定积分的计算"></a>不定积分和定积分的计算</h2><ol><li><p>不定积分<br>int(y,x)<br>计算结果不会给我们加上常数C<br>计算1&#x2F;x的不定积分，结果不会加上绝对值</p></li><li><p>定积分<br>int(y,x,下限，上限)</p></li><li><p>数值积分——近似积分<br>数值积分，用于求定积分的近似值。在数值分析中，数值积分是计算定积分数值的方法和理论。在数学分析中，给定函数的定积分的计算不总是可行的。许多定积分不能用已知的积分公式得到精确值。<br>数值积分是利用黎曼积分等数学定义，用数值逼近的方法近似计算给定的定积分值。借助于电子计算设备，数值积分可以快速而有效地计算复杂的积分<br>函数y需要写成函数句柄的形式，使用点乘和点除</p></li></ol><p>integral(y,下限，上限)</p><h2 id="求解方程和方程组"><a href="#求解方程和方程组" class="headerlink" title="求解方程和方程组"></a>求解方程和方程组</h2><ol><li><p>solve函数<br>注意周期函数求解的时候需要加上条件，才能得到所有的解</p></li><li><p>vpasolve函数<br>求指定区间上的解<br>vpasolve(y,x,[0 1])</p></li><li><p>fsolve函数</p></li></ol><h1 id="微分方程模型"><a href="#微分方程模型" class="headerlink" title="微分方程模型"></a>微分方程模型</h1><p>常微分方程+偏微分方程</p><p>对常微分方程进行建模</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/微分方程建模.png"/></div><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/mcm/QQ截图20220213000350.png"/></div><p>微分方程的建立：利用专业知识+套用现有的模型（改进）</p><h2 id="使用Matlab求微分方程的解析解"><a href="#使用Matlab求微分方程的解析解" class="headerlink" title="使用Matlab求微分方程的解析解"></a>使用Matlab求微分方程的解析解</h2><p>解析解：给出解的具体表达式<br>matlab函数：dsolve(‘方程1’,’方程2’,……,’方程n’,’初始条件’,’自变量’)<br>注意</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 英文引号，单引号<br>2. 在表达方程时候，用字母D表示微分，D2,D3表示二阶和三阶微分，后面跟的是要求的解的因变量。eg：y-Dy-D2y=x<br>3. 自变量可以自己指定，不写则默认以t为自变量<br>4. 初始值可以不给，不给则求出来的是通解<br>5. 如果有多个微分方程，那么计算的实际上是微分方程组<br>6. 如果微分方程形式比较复杂，往往是得不到解析解的<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">latex(x)<br>转换成latex代码，复制到Axmath能转换成数学公式<br></code></pre></td></tr></table></figure><h2 id="使用Matlab求微分方程的数值解"><a href="#使用Matlab求微分方程的数值解" class="headerlink" title="使用Matlab求微分方程的数值解"></a>使用Matlab求微分方程的数值解</h2><p>更新15第5部分</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>MATLAB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows端个人常用软件清单</title>
    <link href="/blog/post/Tools/SoftwareOnWindows/"/>
    <url>/blog/post/Tools/SoftwareOnWindows/</url>
    
    <content type="html"><![CDATA[<p>该文章将介绍我日常所使用的这些软件，如果你对此感兴趣，可下载安装，尝试一下该软件是否适合你；如果有更好的推荐，可在文章底部评论区评论哦！</p><blockquote><p>这篇文章有待更新了！！！！</p></blockquote><h1 id="软件清单"><a href="#软件清单" class="headerlink" title="软件清单"></a>软件清单</h1><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/Windows%20%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%951.png"/><h1 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h1><p>使用电脑一般都会外接一个大屏的显示器，组成左右两个双屏，桌面一般仅有计算机和回收站两个应用图片，极简！</p><p>桌面是自己照一张喜欢的图片作为桌面！</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/desktop2.jpg"/><h1 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125144916942.png"/></div><h2 id="QQ-微信"><a href="#QQ-微信" class="headerlink" title="QQ&amp;微信"></a>QQ&amp;微信</h2><ul><li>腾讯家的软件和极简沾不上边，但是这是不得不用的社交软件；</li><li>除了腾讯的一系列花里胡哨的没用的功能，QQ的整体上还是很好用的，特别是群文件功能，方便文件的传输和暂存；</li><li>微信很不好用，感觉像个半成品，但是不得不用；</li><li>设置开机不自启动，每次电脑开机第一件事就是登陆QQ和微信（微信支持不需要手机确认登陆了，谢天谢地！）。</li></ul><h2 id="网易邮箱大师"><a href="#网易邮箱大师" class="headerlink" title="网易邮箱大师"></a>网易邮箱大师</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125145654753.png"/><ul><li>可以满足在一个平台上查看所有的邮件；</li><li>新邮件具有提示音，也有气泡通知栏，高效率；</li><li>设置开机自启动。</li></ul><h1 id="笔记软件"><a href="#笔记软件" class="headerlink" title="笔记软件"></a>笔记软件</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125150603585.png"/></div><h2 id="Drawboard-PDF"><a href="#Drawboard-PDF" class="headerlink" title="Drawboard PDF"></a>Drawboard PDF</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/draw.jpg"/><ul><li>UWP软件</li><li>阅读与修改PDF文件；</li><li>在surface上面使用该软件进行PDF的手写输入，制作电子PDF笔记；</li></ul><h2 id="Xodo"><a href="#Xodo" class="headerlink" title="Xodo"></a>Xodo</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/xodo.jpg"/><ul><li>UWP软件</li><li>PDF文件的阅读；</li><li>docx，pptx，xlsx类型阅读时使用该软件，需要对这些类型进行修改时在使用office套件；</li></ul><h2 id="Adobe-Acrobat-DC"><a href="#Adobe-Acrobat-DC" class="headerlink" title="Adobe Acrobat DC"></a>Adobe Acrobat DC</h2><ul><li>PDF文件的高阶修改；</li></ul><h2 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h2><ul><li>txt，c，py，html，css，md等各种文件的阅读和修改，响应速度极快；</li><li>深色主题体验很棒！</li></ul><p>🚩Sublime Text显示当前文件编码格式</p><p><code>Preferences</code> -&gt; <code>Setting</code></p><blockquote><p><code>C:\Users\NPU481\AppData\Roaming\Sublime Text\Packages\User\Preferences.sublime-settings</code></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;font_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;show_encoding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;show_line_endings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Tpyora"><a href="#Tpyora" class="headerlink" title="Tpyora"></a>Tpyora</h2><ul><li>md文件的编辑；</li><li>1.0 版本之后的typora需要付费使用了。</li></ul><h2 id="Obsidian"><a href="#Obsidian" class="headerlink" title="Obsidian"></a>Obsidian</h2><ul><li>md文件归档，管理工具；</li><li>插件丰富，使用体验好；</li><li>但是有点复杂，需要一定的时间去学习使用；</li></ul><h2 id="Zotero"><a href="#Zotero" class="headerlink" title="Zotero"></a>Zotero</h2><ul><li>文献管理软件，科研必备</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105145253192.png" alt="image-20240105145253192"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105145215928.png" alt="image-20240105145215928"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20240105145159799.png" alt="image-20240105145159799"></p><ul><li>插件<ul><li><a href="https://github.com/tefkah/zotero-night">https://github.com/tefkah/zotero-night</a></li><li><a href="https://github.com/MuiseDestiny/zotero-style">https://github.com/MuiseDestiny/zotero-style</a>  （<a href="https://github.com/MuiseDestiny/zotero-style/releases/tag/2.6.7%EF%BC%89">https://github.com/MuiseDestiny/zotero-style/releases/tag/2.6.7）</a></li><li><a href="https://github.com/jlegewie/zotfile">https://github.com/jlegewie/zotfile</a></li><li><a href="https://github.com/l0o0/jasminum">https://github.com/l0o0/jasminum</a></li><li><a href="https://github.com/eschnett/zotero-citationcounts">https://github.com/eschnett/zotero-citationcounts</a></li><li><a href="https://github.com/qnscholar/zotero-if">https://github.com/qnscholar/zotero-if</a></li></ul></li></ul><h2 id="OneNote"><a href="#OneNote" class="headerlink" title="OneNote"></a>OneNote</h2><ul><li>UWP软件</li><li>笔记的速记；</li><li>前surface笔记软件，但是微软对自己家的软件优化都不好，特别是文件大了时，使用体验不好！</li><li>还有就是OneNote的笔记都是以云文件的形式存储在OneDrive中，同步慢，且不是通用文件格式，分享给别人不便；</li></ul><h2 id="Xmind"><a href="#Xmind" class="headerlink" title="Xmind"></a>Xmind</h2><ul><li>思维导图软件</li></ul><h1 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125150807799.png"/></div><h2 id="腾讯会议"><a href="#腾讯会议" class="headerlink" title="腾讯会议"></a>腾讯会议</h2><ul><li>学生开户用腾讯会议较多</li></ul><h2 id="Office套件"><a href="#Office套件" class="headerlink" title="Office套件"></a>Office套件</h2><ul><li>办公需要，但日常不喜欢用；</li></ul><h2 id="Visio-Draw-io"><a href="#Visio-Draw-io" class="headerlink" title="Visio Draw.io"></a><del>Visio</del> Draw.io</h2><ul><li>流程图</li><li>Draw.io是免费软件，体验比Visio要好</li></ul><h2 id="PPT模板大全"><a href="#PPT模板大全" class="headerlink" title="PPT模板大全"></a>PPT模板大全</h2><ul><li>UWP软件</li><li>下载一些PPT模板，无广告，模板较多，使用体验好</li></ul><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125150911320.png"/></div><h2 id="Microsoft-Edge"><a href="#Microsoft-Edge" class="headerlink" title="Microsoft Edge"></a>Microsoft Edge</h2><ul><li>主力浏览器；</li><li>插件市场丰富；</li><li>bing作为主力搜素引擎，yandex辅助搜索引擎；</li></ul><h2 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h2><ul><li>辅助浏览器；</li><li>Google作为搜素引擎；</li></ul><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125150959294.png"/></div><h2 id="Visual-Studio-2019"><a href="#Visual-Studio-2019" class="headerlink" title="Visual Studio 2019"></a>Visual Studio 2019</h2><ul><li>C与C++工程；</li><li>C与C++小文件的编写使用VSCode+GCC</li></ul><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><ul><li>编写任何文档，与Sublime Text用途一样，只是VSCode启动速度不然SubimeText；</li><li>软件的快速打开使用SublimeText，对文件夹下的大量文件的长时间修改时，使用VSCode；</li><li>插件市场丰富，nice；</li></ul><h2 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h2><ul><li>代码文件对比。</li><li>只有30天的试用期。</li></ul><blockquote><p>按照这个操作(只运行没注释的语句就行。)，可以重新刷新30天的试用期。<a href="https://gist.github.com/rise-worlds/5a5917780663aada8028f96b15057a67">https://gist.github.com/rise-worlds/5a5917780663aada8028f96b15057a67</a></p></blockquote><p>for 4.4.7 or higher, 4.2.5,4.2.6,4.3.7,4.4.7, it’s works, this is the way which makes Always in evaluation mode.</p><p>run the following script on PowerShell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Remove-Item &quot;$env:appdata\Scooter Software\Beyond Compare 4\*.*&quot; -Force -Confirm:$false</span><br>Remove-Item <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:appdata\Scooter Software\Beyond Compare 4\BCState.xml&quot;</span> -Force -Confirm:<span class="hljs-variable">$false</span><br>Remove-Item <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:appdata\Scooter Software\Beyond Compare 4\BCState.xml.bak&quot;</span> -Force -Confirm:<span class="hljs-variable">$false</span><br><span class="hljs-comment">#Remove-Item &quot;$env:appdata\Scooter Software\Beyond Compare 4\BCSessions.xml&quot; -Force -Confirm:$false</span><br><span class="hljs-comment">#Remove-Item &quot;$env:appdata\Scooter Software\Beyond Compare 4\BCSessions.xml.bak&quot; -Force -Confirm:$false</span><br>reg delete <span class="hljs-string">&quot;HKCU\Software\Scooter Software\Beyond Compare 4&quot;</span> /v <span class="hljs-string">&quot;CacheID&quot;</span> /f<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Windows PowerShell<br>版权所有 (C) Microsoft Corporation。保留所有权利。<br><br>尝试新的跨平台 PowerShell https://aka.ms/pscore6<br><br>加载个人及系统配置文件用了 578 毫秒。<br>(base) PS C:\Users\NPU481&gt; Remove-Item <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:appdata\Scooter Software\Beyond Compare 4\BCState.xml&quot;</span> -Force -Confirm:<span class="hljs-variable">$false</span><br>(base) PS C:\Users\NPU481&gt; Remove-Item <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:appdata\Scooter Software\Beyond Compare 4\BCState.xml.bak&quot;</span> -Force -Confirm:<span class="hljs-variable">$false</span><br>(base) PS C:\Users\NPU481&gt; reg delete <span class="hljs-string">&quot;HKCU\Software\Scooter Software\Beyond Compare 4&quot;</span> /v <span class="hljs-string">&quot;CacheID&quot;</span> /f<br>操作成功完成。<br>(base) PS C:\Users\NPU481&gt;<br></code></pre></td></tr></table></figure><h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h2><ul><li>Python工程；</li><li>python小程序使用Sublime Text编写，使用Terminal命令行直接运行；</li></ul><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><ul><li>HTML前端项目；</li><li>Java项目；</li></ul><h2 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h2><ul><li>Matlab程序的编写与运行；</li><li>因为外观不好看，因此有时候会使用VSCode编写程序，Matlab运行程序；</li></ul><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><ul><li>Android 项目；</li></ul><h1 id="电子设计"><a href="#电子设计" class="headerlink" title="电子设计"></a>电子设计</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151123997.png"/></div><h2 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h2><ul><li>Arduino系列开发板；</li><li>ESP系列开发板；</li></ul><h2 id="Altium-Designer"><a href="#Altium-Designer" class="headerlink" title="Altium Designer"></a>Altium Designer</h2><ul><li>画板子</li></ul><h2 id="Proteus-8-Professional"><a href="#Proteus-8-Professional" class="headerlink" title="Proteus 8 Professional"></a>Proteus 8 Professional</h2><ul><li>单片机仿真</li></ul><h2 id="Multisim"><a href="#Multisim" class="headerlink" title="Multisim"></a>Multisim</h2><ul><li>电路仿真</li></ul><h2 id="emu8086"><a href="#emu8086" class="headerlink" title="emu8086"></a>emu8086</h2><ul><li>8086芯片仿真</li></ul><h2 id="Keil"><a href="#Keil" class="headerlink" title="Keil"></a>Keil</h2><ul><li>单片机程序编写</li></ul><h2 id="Fritizing"><a href="#Fritizing" class="headerlink" title="Fritizing"></a>Fritizing</h2><ul><li>电路连接示意图；</li><li>示意图主要是当作文章的插图使用；</li></ul><h1 id="网盘"><a href="#网盘" class="headerlink" title="网盘"></a>网盘</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151234024.png"/></div><h2 id="百度云"><a href="#百度云" class="headerlink" title="百度云"></a>百度云</h2><ul><li>文件的分享与下载；</li><li>文件的定期备份；</li></ul><h2 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125163846651.png"/><ul><li>个人版5GB</li><li>学生版1TB</li><li>存储OneNote笔记本；</li><li>存储Snipaste的截图；</li><li>因为OneDrive的速度太慢了，不是主力同步网盘，主要是文件的存储，且为不经常使用的文件；</li></ul><h2 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/nut.jpg"/><ul><li>超级好用！！！！</li><li>重度使用者建议订阅专业版；</li><li>轻度使用免费版够用，每月1GB上传流量限制；</li></ul><h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151300879.png"/></div><h2 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125164805926.png"></p><ul><li>相比于cmd和power shell，Terminal是是真的好看！</li><li>具有超高的自定义选择，nice！重度使用！</li></ul><h1 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151333739.png"/></div><h2 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h2><ul><li>也许是Windows客户端最好用的截图工具！</li><li>所有的截图我都设置为自动保存到本地，然后再把本地的截图利用OneDrive同步。</li></ul><h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151354668.png"/></div><h2 id="网易有道词典"><a href="#网易有道词典" class="headerlink" title="网易有道词典"></a>网易有道词典</h2><h2 id="copytranslator"><a href="#copytranslator" class="headerlink" title="copytranslator"></a>copytranslator</h2><h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151432561.png"/></div><h2 id="向日葵"><a href="#向日葵" class="headerlink" title="向日葵"></a>向日葵</h2><ul><li>三台Windows主机，一台Linux主机，一部手机，我所有设备中均有安装了向日葵；</li><li>远程控制，好用！</li></ul><h2 id="Xftp"><a href="#Xftp" class="headerlink" title="Xftp"></a>Xftp</h2><ul><li>服务器文件传输；</li></ul><h2 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h2><ul><li>服务器远程调用；</li></ul><h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151503532.png"/></div><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><ul><li>配置了gitee图床，写markdown文件的好帮手！</li></ul><h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151528669.png"/></div><h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/ubuntu.jpg"/><ul><li>WSL比VM速度快太多了，虽然只提供了部分Linux的功能，简单使用足够；</li><li>真的使用完整版的Linux时，我会使用向日葵远程调用家里的Linux物理机；</li></ul><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151625790.png"/></div><h2 id="CCleaner"><a href="#CCleaner" class="headerlink" title="CCleaner"></a>CCleaner</h2><ul><li>定期清理系统</li></ul><h2 id="Sandboxie-Plus"><a href="#Sandboxie-Plus" class="headerlink" title="Sandboxie-Plus"></a>Sandboxie-Plus</h2><ul><li>来路不明的文件，在沙盒中打开</li></ul><h2 id="火绒安全"><a href="#火绒安全" class="headerlink" title="火绒安全"></a>火绒安全</h2><ul><li>清理垃圾；</li><li>拦截弹窗；</li><li>与Windows Defender联合使用，防病毒；</li></ul><h1 id="音视频播放"><a href="#音视频播放" class="headerlink" title="音视频播放"></a>音视频播放</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151813461.png"/></div><h2 id="哔哩哔哩动画UWP"><a href="#哔哩哔哩动画UWP" class="headerlink" title="哔哩哔哩动画UWP"></a>哔哩哔哩动画UWP</h2><h2 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h2><h2 id="QQ音乐"><a href="#QQ音乐" class="headerlink" title="QQ音乐"></a>QQ音乐</h2><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><h2 id="Groove-音乐"><a href="#Groove-音乐" class="headerlink" title="Groove 音乐"></a><del>Groove 音乐</del></h2><h1 id="音视频制作"><a href="#音视频制作" class="headerlink" title="音视频制作"></a>音视频制作</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125151852498.png"/></div><h2 id="Adobe-Premiere"><a href="#Adobe-Premiere" class="headerlink" title="Adobe Premiere"></a>Adobe Premiere</h2><h2 id="Adobe-Photoshop"><a href="#Adobe-Photoshop" class="headerlink" title="Adobe Photoshop"></a>Adobe Photoshop</h2><h2 id="Adobe-Lightroom"><a href="#Adobe-Lightroom" class="headerlink" title="Adobe Lightroom"></a>Adobe Lightroom</h2><h1 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125163441564.png"/></div><h2 id="微软拼音"><a href="#微软拼音" class="headerlink" title="微软拼音"></a>微软拼音</h2><ul><li>简洁；</li><li>功能很多，但是学习成本高，需要花费一点时间</li></ul><h1 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125152040706.png"/></div><h2 id="Xbox-Game-Bar"><a href="#Xbox-Game-Bar" class="headerlink" title="Xbox Game Bar"></a>Xbox Game Bar</h2><h2 id="OBS"><a href="#OBS" class="headerlink" title="OBS"></a>OBS</h2><h1 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125152100207.png"/></div><h2 id="Bandizip"><a href="#Bandizip" class="headerlink" title="Bandizip"></a>Bandizip</h2><h1 id="高效率工具"><a href="#高效率工具" class="headerlink" title="高效率工具"></a>高效率工具</h1><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125152319130.png"/></div><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h2><ul><li>快速搜索系统文件</li></ul><h2 id="Wox"><a href="#Wox" class="headerlink" title="Wox"></a>Wox</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/wox.jpg"/><ul><li>快截搜索；</li><li>插件丰富；</li><li>联合everything实现文件的快速搜素；</li></ul><h2 id="DeskPins"><a href="#DeskPins" class="headerlink" title="DeskPins"></a>DeskPins</h2><ul><li>小工具，将窗口固定在桌面最前端；</li></ul><h2 id="EarTrumper"><a href="#EarTrumper" class="headerlink" title="EarTrumper"></a>EarTrumper</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/image-20220125163244334.png"/><ul><li>UWP软件</li><li>独立调节各个软件的音量</li></ul><h2 id="QuickLook"><a href="#QuickLook" class="headerlink" title="QuickLook"></a>QuickLook</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/ql.jpg"/><ul><li>UWP软件</li><li>按‘空格’键快速预览文件；</li></ul><h2 id="Microsoft-To-Do-Todoist"><a href="#Microsoft-To-Do-Todoist" class="headerlink" title="Microsoft To Do Todoist"></a><del>Microsoft To Do</del> Todoist</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/todo14651.jpg"/><ul><li>重度使用软件；</li><li>制定计划必备软件；</li></ul><p>由于微软的同步速度太慢了，Microsoft To Do仅仅适合在一个设备的本地时候，如果是在电脑是写下任务，手机上很长时间不能同步任务，多端体验不好！</p><p>现在使用Todoist 作为替代软件，同步体验非常棒！</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220305104231987.png"/></div><h2 id="ManicTime"><a href="#ManicTime" class="headerlink" title="ManicTime"></a>ManicTime</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/applist/manic.jpg"/><ul><li>记录电脑使用时间，记录时间都花费在了什么地方，便于自省；</li></ul><h1 id="如何屏蔽csdn"><a href="#如何屏蔽csdn" class="headerlink" title="如何屏蔽csdn"></a>如何屏蔽csdn</h1><blockquote><p>在谷歌应用商店搜索  uBlacklist </p><p><em>:&#x2F;&#x2F;</em>.csdn.net&#x2F;&#x2F;*</p><p><em>:&#x2F;&#x2F;<a href="http://www.csdn.net/">www.csdn.net/</a></em> </p></blockquote><p>作者：c语言基础入门 <a href="https://www.bilibili.com/read/cv13780071">https://www.bilibili.com/read/cv13780071</a> 出处：bilibili</p>]]></content>
    
    
    <categories>
      
      <category>高效工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022读书记录</title>
    <link href="/blog/post/MyLife/Reading2022/"/>
    <url>/blog/post/MyLife/Reading2022/</url>
    
    <content type="html"><![CDATA[<h1 id="《诗意的宇宙》"><a href="#《诗意的宇宙》" class="headerlink" title="《诗意的宇宙》"></a>《诗意的宇宙》</h1><p>副标题：蔷薇、时空与21时间物理学<br>时间：2022.11<br>关键词：【奥】 斯特凡·克莱因&#x2F;科普&#x2F;科学&#x2F;物理&#x2F;宇宙（电子书）</p><p><font size = 6 color = pink>1 真实的诗意 宇宙大爆炸</font></p><div align=center><p>通过一枝蔷薇，我们能够意识到，</p><p>世间万物均不是孤立存在的。</p><p>我们愈了解宇宙万物的联系，</p><p>就愈能感受到这个世界的神秘莫测。</p></div><p>那么，地球最初就是一个干燥的荒漠星球。没有人确凿地知道它是如何成为海洋星球的。在众多推测中，最天马行空的一种情形恰恰可能性最大：水分从宇宙中来。那些在太阳系较寒冷地带形成的彗星和小行星，带着水分，像巨大的雪球一般砸在地球这个荒漠星球上。上面的冰融化成湖泊、河流、海洋。因此，<strong>濡湿蔷薇花瓣的，是来自浩瀚宇宙的露珠</strong>。</p><p>而作为燃料的氢元素是所有物质中最古老的，自宇宙大爆炸的第一分钟，它就已然在宇宙间游荡。在恒星的烈焰中，再通过强相互作用力，所有其他元素以氢为基础生成了。所以，<strong>地球上围绕在我们周围的一切物质，都曾是恒星的星尘。</strong>幼苗的组成成分碳元素也是从它而来的，因此，<strong>蔷薇可以说是变幻后的星尘。</strong></p><p>如今我们知道，恒星的诞生需要借助外界力量。也就是说，宇宙中的氢仅凭自身引力不足以团聚为氢云。如果没有外界力量，氢就只会均匀分布在宇宙之中，如同糖分融入水中，气体也不可能浓缩，亦不会有任何恒星当空闪耀。宇宙将保持混沌。必定有一些更重的物质，一些我们不了解的物质开了头，将氢聚拢成氢云。这些物质不发光、不可见，因此被称为<strong>“暗物质”</strong>。没有人了解它们由什么组成、有什么性状。</p><p><strong>因为，一朵蔷薇绝非像看起来的那么简单，它见证了世界的形成。</strong></p><p><font size = 6 color = pink> 2 宇宙万有中的石球 宇宙微波背景辐射</font></p><div align=center><p>地球从月亮后头升起，<p>宇宙初生的景象展现在我们眼前。<p>在可见的世界万象背后，<p>藏着多少更广阔的空间。<p>真实，与我们感知到的大不相同。<p>……因一切知识与惊奇皆是纯粹喜悦之表达。<p>——弗朗西斯·培根（Francis Bacon）</div><p>这便是我们宇宙中的家园——浩瀚无垠的夜空里一颗孤独而微小、脆弱而美丽的星球。仔细观察可以发现，大气层这薄如蝉翼的光晕在阳光下闪烁着。这是已知的唯一的生命住所，亦是我们唯一的栖居之处。</p><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-27_19-07-38.png'><p>恰恰是这个陌生的视角让这些图像充满力量。看过它们的人们不再理所当然地看待自身的存在。或许，当我们感到自己深陷于日常的千篇一律之中，生命会显得索然无味。<strong>但当我们认识到自身是寒冷宇宙间一颗尘埃之上的孤独旅人，远近皆无朋伴，那么还有什么能比生命更不可思议呢？要想获得对自身处境更深层次的洞见，就必须放下惯常的视角。</strong></p><p>恰恰是这个陌生的视角让这些图像充满力量。看过它们的人们不再理所当然地看待自身的存在。或许，当我们感到自己深陷于日常的千篇一律之中，生命会显得索然无味。但当我们认识到自身是寒冷宇宙间一颗尘埃之上的孤独旅人，远近皆无朋伴，那么还有什么能比生命更不可思议呢？要想获得对自身处境更深层次的洞见，就必须放下惯常的视角。</p><div align = center>    <img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/v2-3885f574d6d0eab26ebc512590109bf8_b.jpg'>    <p>宇宙微波背景辐射图:由欧洲普朗克（Planck）卫星发回并于2013年公开</p></div><p>图中可以看到的是诞生—— <strong>宇宙的诞生</strong>。各种色点代表着130多亿年前宇宙大爆炸后不久释放的光线——<strong>宇宙最初的光</strong>。它无所不往，充斥整个宇宙。随着时间的推移，这些光转化为热辐射。<strong>宇宙微波背景辐射图中不同的颜色代表着不同的温度，它们是宇宙大爆炸的余温。</strong>这余温让我们知道，宇宙空间不可能曾经完全冷却。这种余温甚至也存在于星系间的虚空之中。虽然我们的肉眼无法察觉，但通过普通的圆盘式电视卫星天线就能接收到这种背景辐射。</p><p>我们如今见到的这个宇宙，曾经的体量一定非常微小。假如时间倒流，这个宇宙的体量只会越来越小：小过月球，小过足球，小过原子。但这一切终归有个开始的原点，我们称之为宇宙大爆炸。<strong>大爆炸时产生的那个宇宙虽然微小，但已包含一切。此后，宇宙只是在膨胀、在变幻。</strong></p><p>从宇宙诞生之初就注定没有足够的时间来到我们眼前，以后也不太可能抵达地球：因为宇宙膨胀的速度太快，如今的宇宙膨胀的实际速度是超光速的。宇宙中遥遥相望的两个区域正急速远离彼此，光速亦追不上它们。因此，普朗克卫星发回的宇宙微波背景辐射图告诉我们，在可见世界之外存在一种真实，它虽无法触及却真实存在：那便是它界（Otherworld）。</p><p><a href="https://zhuanlan.zhihu.com/p/29741465">宇宙膨胀速度可以超光速？扫盲！5个问题让你了解宇宙膨胀！ - 知乎 (zhihu.com)</a></p><p>在这幅宇宙微波背景辐射图的结构背后，似乎隐藏着完美的机缘：整个宇宙浩大而稳定，它内含的暗物质在使恒星熠熠生辉的同时，又有足够的能量确保那些正在形成的星系和行星系统在宇宙本身膨胀的过程中不会解体。因此，远在138亿年前，当宇宙发出第一道光芒时，就有了孕育生命的可能——孕育我们的可能。</p><p>曾经，在电视机里，蓝色的地球从月球后面升起，向人类展示了我们自己的行星：宇宙浩瀚荒芜间的一片绿洲。而今，宇宙微波背景辐射图的魅力在于，它展示了一个更加友善的、为生命而生的宇宙，仿佛这个宇宙早就知道我们有一天会来似的。</p><p><font size = 6 color = pink> 驰骋于光线之上 相对论</font></p><div align = center><p>一个年轻人自问，什么是光。<p>他通过对光的思考了解世界。<p>空间与时间向他袒露真心。<p>可直到他，爱因斯坦，去世，<p>这光的谜题仍未解开。</div><p>这就是光子的痕迹，它使我们得以存在，赠予我们日与夜，带来潋滟水光、皑皑白雪、皎皎月光，以及缤纷的肥皂泡和彩虹、冬夜里摇曳的烛光。</p><p>量子理论阐释了世界最小单元的运作机理、所有的事物由何组成；相对论则阐释了我们生活在一个怎样的宇宙之中。</p><p>“想象力比知识更重要，因为知识有限，但想象可以包罗万象。”</p><p>正因为光以有限的高速度传播，所以我们永远都只能看到这个世界的一个片段。故而，是光决定了我们对于世界的认识。</p><p>爱因斯坦的理论带来了一个似乎最玄妙的想法：宇宙在膨胀。星际云汇聚在一起，恒星被点燃，在这种高温下产生了各种元素。熄灭的恒星坍缩成黑洞，继而吞噬光与物质，引力波则使宇宙荡起涟漪。</p><p>真知的道路是一架螺旋梯，而非康庄大道。有的人在这条路上走了很久，转了一圈又一圈，看似一次又一次地回到起点。但是显然，他已经登上了新高。</p><p><font size = 6 color = pink> 拉普拉斯妖落败 不可预测性</font></p><div align = center><p>飓风横扫德国，<p>却无人预知这场风暴的来临。<p>其中蕴含着世界诡谲难测的原因<p>以及对宇宙这个创造者的赞颂。</div><p>这个世界正在被扫描、采集、转译成机器可以读取的信息：我们以令人惊异的方式接近了皮埃尔·西蒙·拉普拉斯（Pierre Simon Laplace）侯爵的幻想。1814年，这位法国天文学家提出了关于完美智慧生命的假说：“它足够广博，能够解析一切数据。”在这样的世界精神——人称<strong>拉普拉斯妖</strong>——的面前，任何事物都无处遁形。</p><p>拉普拉斯妖的落败使我感到高兴，还因为另外一点：这提醒了我自然构造的美妙。我们周围的一切都由原子组成，它们微小但数量甚繁。这些海量的简单材料能够构建出无比复杂的形体，组成云、风暴旋涡、大脑的也不过都是些原子。它们根据简单的法则组合在一起，产生了新的现象——天气、思维和爱。正是由于宇宙的无限创造力，人类的预测才常常遭遇失败。</p><p><font size = 6 color = pink> 一则侦探故事 量子纠缠</font></p><div align = center><p>一个猖獗的犯罪团体席卷伦敦和纽约。<p>尽管这些入室抢劫者事前没有串通，<p>但他们的行动步调全然一致。<p>探员格洛克试图查出这其中的秘密计划，<p>可一无所获。他的结论是：<p>在真实世界里，各处均为一处。<p>“当然，我们都在那里。”老Qfwfq说，“要不还能在哪里？那时还没人知道太空的存在。至于时间，也同样如此。我们都在那里挤得像罐头里的沙丁鱼，又能对时间做什么呢？”<p>——伊塔洛·卡尔维诺《宇宙奇趣》（Cosmicomiche）</div><p>我敢肯定，没人真正了解量子力学。——理查德·费曼</p><p>爱因斯坦原本的目的是驳倒量子力学。但恰恰是因为他认识到了光是光子的涌流，才产生了这一理论发展的道路。凭借量子力学，人类第一次知道了，最微小粒子的世界里在发生着什么；除去相对论，爱因斯坦对量子力学理论的促进作用可以算是他最重要的贡献。不过，爱因斯坦和他的这一精神成果斗争了一辈子。他曾写道：“内心有一个声音告诉我，这还不完备。”为了证实量子力学的这一不完备性，他于1935年设想了一个实验，也就是那个过了近半个世纪才由阿兰·阿斯派克特完成的实验。</p><p>量子纠缠的本质在于，携带着两个粒子历史的信息是不可摧毁的。无论两个粒子距离多远，这种信息都不会丢失。</p><p>空间，跟时间和意识一样，是我们人生体验的锚。因此，我们会试着将三者归入不可说明的行列。但就像第8章将会讲到的，时间的流逝只是秩序的崩塌。许多证据显示，意识是几十亿神经元共同作用的结果。那么，为什么唯独空间不可说明呢？我们体会到的空间，可能只是对事物关系的粗略说明。左和右，上和下，前和后，只有当事物相互纠缠时才会产生：那么，“近”这个字就像人际关系一样，描述的是一种强烈的联结。所以空间或许不是盒子，而是一张网？一张由我们周围的一切共同编织而成的网。那么格洛克说的没错，世界上的各处在真实世界里只是一处。</p><p><font size = 6 color = pink> 这个世界是真实的吗 希格斯场</font></p><div align=center><p>一把锤子砸到大拇指，<p>但锤子和其他所有物质一样，是由虚空组成的。<p>为什么这虚空的东西能带来如此强烈的疼痛？<p>以及：真的有这种虚空吗？</p> &nbsp </br><p>当我说“无”的时候，我在无中生有。——维斯瓦娃·辛波丝卡（Wisława Szymborska）</div><p>粒子物理学家发现的理论是，所谓的真空之中并不是绝对的虚空。这种虚空中其实存在着一种叫作希格斯（Higgs）场的东西，这是以苏格兰物理学家希格斯的名字命名的。希格斯场中粒子的性质与一切我们熟知的事物都不相同，它能完全被光穿透，没有形状，无法直接被证明，但又无处不在。</p><p>由此可知，物质粒子的内部虽然充满了虚空，但这些粒子还是能从希格斯场中获得它们的质量。因为只要夸克或电子要运动，就都得穿过雪原，而整个希格斯场会对运动的粒子产生阻力，放慢它们的速度，这种阻力会让我们以为，粒子是有质量的，但事实上，我们感受到的是真空中希格斯玻色子的黏滞作用。</p><p>此外，希格斯玻色子还解释了为什么所有粒子的重量并不完全一致：希格斯场对一些粒子的阻力大，而对另一些粒子的阻力小。这就好比滑雪者可以快速地滑过雪原，穿靴子的徒步者却只能在过膝的雪地里深一脚浅一脚地缓行，而飞行的鸟儿则可以在雪原上空倏忽而过，根本不受任何牵绊。电子就像滑雪者，夸克就像徒步者，而光子就像天空中的鸟儿。电子在希格斯场中速度飞快，夸克比较慢，而光子在希格斯场中完全可以畅通无阻地穿行。故而，电子的质量小，夸克的质量大，光子则完全没有质量。但正是得益于希格斯场的这种性质，世界上才可能产生稳定的物质。不过，希格斯玻色子本身并非物质，而是真空的产物。</p><p>无并不是绝对真空的状态，而是一种无形的状态。无，是一个还未开演的舞台，是一个一切都有可能出现的空间。我们所经历的一切都是这个舞台上的一出戏——无中有序，一闪而过。这些有序的事物，我们称之为铁锤、大拇指、地球、天空、男人和女人。</p><p><font size = 6 color = pink> “这到底是是恶干的好事？” 暗物质和暗能量</font></p><div align = center><p>我们生活在一个暗影重重的世界里。<p>无论往哪儿看，存在的东西都比实际看到的多20倍。<p>多了些什么？我们毫无头绪。<p>但要是没有暗能量，没有暗物质，<p>我们可能就不会存在。</div><p>当我仰望夜空的时候，我能体会那些航海家当时面对新世界的海岸时内心的澎湃。目光游走于无垠天空之中，那广袤的宇宙是多么摄人心魄啊，而当我知道在可见世界的背后还隐藏着那么多未知时，内心的震动也毫不亚于此。对探险家来说，那些海岸只是美洲大陆浮出海洋的边界，而夜空只是一个闪烁着的前哨站，背后不可见的世界要广阔得多。</p><p>这一切通过四种基本力的作用凝聚在一起。第一种力叫作“强”相互作用力，因为它能将夸克凝聚成原子核，所以也被称作强核力。第二种力叫作“弱”相互作用力或弱核力，它能够引发特定粒子的放射性衰变，这两种力只有在粒子间距离非常近的时候才会表现出来。第三种力叫作电磁力，它使得原子核和电子联结成原子，也是它造就了光波和其他电磁波，比如微波和无线电波。第四种力是万有引力，如同电磁力一样，引力的作用距离也可以达到很远。</p><p>这些宇宙中难以解释的物质和能量或许会使科学家陷入绝望，但对人类来说，它们的存在无疑是一种幸运。因为可见的物质不足以打造能够成为人类家园的世界。没有暗物质，整个宇宙中就不可能存在适宜生命栖居的天体；没有暗物质，天空中就不可能有闪烁的繁星，那么在宇宙无垠的永夜之中，就只会有气体游荡其间了。</p><p>暗能量拥有撕裂一切的能力，可以随着时间的流逝毁灭一切有形之物。但宇宙中的一切又处于如此精妙的平衡之中，星系、恒星、行星乃至我们人类都因此而创生。这种力量间的完美平衡是让人类得以生存的又一奥妙之处。</p><p><font size = 6 color = pink> 时间如何消逝 熵增定律</font></p><div align = center><p>长白胡子是件令人郁闷的事情，<p>为何过去不能再从头？<p>之所以会经历时间的流逝，是因为我们并非无所不知。<p>宇宙也会变老。</div><p>存在概率低的状态消失后，存在概率高的状态就会出现。一种状态存在的概率越低，它的稳定性就越低；一种状态存在的概率越高，它就越稳定，回到原来状态的可能性就越小。当这种变化只能不断向前而无法逆转的时候，我们就会感受到时间的流逝。</p><p>在漫长的时间轴上胜出的永远都是大概率事件，是混沌。</p><p><font size = 6 color = pink> 视界之外 无限的宇宙</font></p><div align = center><p>夜之所以是黑暗的，<p>是因为宇宙有一个开端。<p>自那以后宇宙不断膨胀。<p>宇宙很大，<p>大得超过我们所能想象的极限。<p>这种惊异引人遐思。</div><p>“人类能够体验的最美好的事物是神秘。这种感受孕育着真正的艺术和科学。那些不了解这一点的人，那些不会再感到惊奇、讶异的人就像行尸走肉，他们眼眸中的光芒已经熄灭。”</p><p><font size = 6 color = pink> 我们为何存在 生命的诞生和暴胀理论</font></p><div align=center><p>我们每一个人体内都蕴含着<p>宇宙最惊人的特性之一：<p>智慧生命的出现并非偶然事件，<p>而是大概率事件，<p>因此谁能断言，我们无足轻重？</div><p>如今夜空中的每一点星光，都曾是同一个微观世界的一部分。</p><hr><h1 id="《刘慈欣科幻小说》"><a href="#《刘慈欣科幻小说》" class="headerlink" title="《刘慈欣科幻小说》"></a>《刘慈欣科幻小说》</h1><p>时间：2022.11<br>关键词：【中国】 刘慈欣&#x2F;科幻&#x2F;短篇小说（电子书）</p><p>利用空闲的零散时间来读一读这种篇幅很小的书籍，需要思考记录的较长的书籍就用比较完整的时间。<br>这28册中的好多其实都已经读过了，不过还是可以再读一下的。</p><h2 id="《流浪地球》"><a href="#《流浪地球》" class="headerlink" title="《流浪地球》"></a>《流浪地球》</h2><h2 id="《2018年4月1日》"><a href="#《2018年4月1日》" class="headerlink" title="《2018年4月1日》"></a>《2018年4月1日》</h2><h2 id="《白垩纪往事》"><a href="#《白垩纪往事》" class="headerlink" title="《白垩纪往事》"></a>《白垩纪往事》</h2><p>蚂蚁与恐龙的故事，这个脑洞真的太大啦，大刘怎么想出来的啊！</p><h2 id="《创世纪》（短篇版本）"><a href="#《创世纪》（短篇版本）" class="headerlink" title="《创世纪》（短篇版本）"></a>《创世纪》（短篇版本）</h2><h2 id="《地火》"><a href="#《地火》" class="headerlink" title="《地火》"></a>《地火》</h2><h2 id="《地球大炮》"><a href="#《地球大炮》" class="headerlink" title="《地球大炮》"></a>《地球大炮》</h2><h2 id="《光荣与梦想》"><a href="#《光荣与梦想》" class="headerlink" title="《光荣与梦想》"></a>《光荣与梦想》</h2><h2 id="《海水高山》"><a href="#《海水高山》" class="headerlink" title="《海水高山》"></a>《海水高山》</h2><h2 id="《欢乐颂》"><a href="#《欢乐颂》" class="headerlink" title="《欢乐颂》"></a>《欢乐颂》</h2><h2 id="《混沌蝴蝶》"><a href="#《混沌蝴蝶》" class="headerlink" title="《混沌蝴蝶》"></a>《混沌蝴蝶》</h2><h2 id="《鲸歌》"><a href="#《鲸歌》" class="headerlink" title="《鲸歌》"></a>《鲸歌》</h2><h2 id="《镜子》"><a href="#《镜子》" class="headerlink" title="《镜子》"></a>《镜子》</h2><h2 id="《梦之海》"><a href="#《梦之海》" class="headerlink" title="《梦之海》"></a>《梦之海》</h2><h2 id="《命运》"><a href="#《命运》" class="headerlink" title="《命运》"></a>《命运》</h2><h2 id="《山》"><a href="#《山》" class="headerlink" title="《山》"></a>《山》</h2><hr><h1 id="《谁动了我的奶酪？（2）》"><a href="#《谁动了我的奶酪？（2）》" class="headerlink" title="《谁动了我的奶酪？（2）》"></a>《谁动了我的奶酪？（2）》</h1><p>时间：2022.11<br>关键词：【美国】 斯宾塞·约翰逊&#x2F;人生经验&#x2F;鸡汤文（电子书）</p><p>鸡汤味更浓，感觉不如第一部。</p><hr><h1 id="《谁动了我的奶酪？》"><a href="#《谁动了我的奶酪？》" class="headerlink" title="《谁动了我的奶酪？》"></a>《谁动了我的奶酪？》</h1><p>时间：2022.11<br>关键词：【美国】 斯宾塞·约翰逊&#x2F;人生经验&#x2F;鸡汤文（电子书）</p><hr><p>这是一本很短的书，一会儿就能看完了，感觉没有说的那么的好，就是鸡汤文，且有点啰嗦（配图很可爱。</p><p>我感觉对我触动最大的一点是，“无所畏惧，放手去做！”</p><blockquote><p><strong>嗅嗅：</strong>及早嗅出变化的端倪 ；<br><strong>匆匆：</strong>立即采取行动；<br><strong>哼哼：</strong>担心事态变得更加糟糕而否认、抵制变化；<br><strong>唧唧：</strong>发现变化可以带来更好的生活后学会及时调整！</p></blockquote><blockquote><ol><li>Having Cheese Makes You Happy 拥有奶酪，就拥有幸福 </li><li>The More Important Your Cheese Is To You The More You Want To Hold Onto It 奶酪对你越重要，你就越想抓住它 </li><li>If You Do Not Change, You Can Become Extinct 如果你不改变，你就会被淘汰 </li><li>What would you do if you weren’t afraid? 如果你无所畏惧，你会怎样呢？ </li><li>Smell Your Cheese Often So You Know When It Is Getting Old 经常闻一闻你的奶酪，你好知道它什么时候开始变质 </li><li>Movement In A New Direction Helps You Find A New Cheese. 朝新的方向前进，你会发现新的奶酪 </li><li>When You Move Beyond You Fear, You Feel Free 当你超越了自己的恐惧时，你就会感到轻松自在 </li><li>Imagining Myself Enjoying The Cheese, Even Before I Find It, Lead Me To It 在我发现奶酪之前，想象我正在享受奶酪，这会帮我找到新的奶酪 </li><li>The quick you let go of old cheese, the sooner you find new cheese 越早放弃旧的奶酪，你就会越早发现新的奶酪 </li><li>It Is Safer To Search In The Maze Than Remain In A Cheseless Station 在迷宫中搜寻比停留在没有奶酪的地方更安全 </li><li>Old Beliefs Do Not Lead You To The New Cheese 陈旧的信念不会帮助你找到新的奶酪 </li><li>When You See That You Can Find New Cheese, You Change Course 当你发现你会找到新的奶酪并且能够享用它时，你就会改变你的路线 </li><li>Noticing Small Change Early Helps Adapt To Bigger Change That Are To Come 尽早注意细小的变化，这将有助于你适应即将来临的更大的变化<br>14：变化总是在发生，他们总是不断地拿走你的奶酪，预见变化，随时做好奶酪会被拿走的准备；追踪变化，经常闻一闻你的奶酪你就会知道，它什么时候开始变质。<br>15：改变，随奶酪的变化而变化。<br>16：享受变化！尝试去冒险，去享受新奶酪的美味。做好迅速变化的准备，不断的去享受变化。<br>17：随着奶酪的变化而变化，并享受变化！<br>18.Beffer late than never. 迟做总比不做好。<br>19.He realized his fears were making things worse. 他的畏惧只会使事情变得更糟糕。</li></ol></blockquote><hr><h1 id="《科学之路：人，机器与未来》"><a href="#《科学之路：人，机器与未来》" class="headerlink" title="《科学之路：人，机器与未来》"></a>《科学之路：人，机器与未来》</h1><p>时间：2022.11<br>关键词：【法国】杨立昆（Yann LeCun）&#x2F;深度学习&#x2F;科学科普（电子书）<br><strong>信息的自由流动就是进步的动力。——杨立昆</strong></p><p><a href="https://zhuanlan.zhihu.com/p/397978083">独家专访“CNN之父”Yann LeCun：从未有国家像中国这样，让深度学习成为国家级优先项目 - 知乎 (zhihu.com)</a></p><hr><p><font face="黑体" size=6 color=MediumPurple>序</font></p><p>这个推荐阵容太强大了！！</p><p><font face="黑体" size=4 color=yellow>人工智能的崛起时刻 - 特伦斯·谢诺夫斯基</font></p><p><a href="https://www.thepaper.cn/newsDetail_forward_3234690">专访｜“深度学习”奠基人特伦斯：人工智能和大脑正走向一起_文化课_澎湃新闻-The Paper</a></p><p><a href="https://www.douban.com/note/730996393/?_i=8342817iVF0O7q">世界十大AI科学家之一特伦斯·谢诺夫斯基：有了深度学习和数据，未来人人都会“读心术” (douban.com)</a></p><p><a href="https://www.bilibili.com/video/BV1v441197r3/">【演讲】特伦斯·谢诺夫斯基：有了深度学习和数据，未来人人都会“读心术” | 造就Talk_哔哩哔哩_bilibili</a></p><blockquote><p>特伦斯·谢诺夫斯基（Terrence Sejnowski），<strong>世界十大AI科学家之一</strong>，美国四大国家学院（国家科学院、国家医学院、国家工程院、国家艺术与科学学院）在世仅3位的“四院院士”之一，全球AI专业会议NIPS基金会主席。</p></blockquote><p><font face="黑体" size=4 color=yellow>所有努力都是为了提升概率 - 张宏江</font></p><p><a href="https://air.tsinghua.edu.cn/info/1047/1208.htm">张宏江-清华大学智能产业研究院 (tsinghua.edu.cn)</a></p><p>国际象棋大师加里·卡斯帕罗夫（Garry Kasparov）曾这样总结自己的常胜秘诀，“我并非根据棋局结果考虑如何调整落子，而是从系统角度，思索怎样改进自己思考的方式”。</p><p>常规的同行评审往往“过于合理”，以至颠覆性的研究很难找到真正的同行。</p><p>ICML（国际机器学习大会）、NeurIPS、CVPR、ICCV（国际计算机视觉大会）</p><p>今天的“创新生态系统”主体由以下这些部分组成：学术界擅长产生新想法，初创企业擅长将高潜力产品推向新市场，企业研发在改善现有产品方面无与伦比。但组成这个系统的机构差异很大，每个机构的体制都有限制因素。杨立昆也描述了他在脸书挑战这些限制所做的努力。</p><p><font face="黑体" size=4 color=yellow>在无人区创新 - 贾扬清</font></p><blockquote><p>贾扬清  ，浙江绍兴人，本科和研究生阶段就读于清华大学自动化专业，后赴加州大学伯克利分校攻读计算机科学博士。他在博士期间创立并开源了如今业内耳熟能详的<strong>深度学习框架Caffe</strong>，被微软、雅虎、英伟达、Adobe 等公司采用。</p><p>在进入Facebook之前，贾扬清曾在谷歌实习并工作过两年，担任Google Brain的研究科学家，主要从事计算机视觉、深度学习和TensorFlow框架等研究工作。</p><p>2016年，他离开谷歌转投Facebook的消息就曾在知乎引起热议。当时，贾扬清本人在知乎问题“如何评价caffe作者贾扬清加入Facebook”下回答称，换到Facebook的原因是为了在个人发展上能学到一些不同的东西，为将来的职业发展继续做准备。另外一个原因是好多以前伯克利同实验室的朋友也在Facebook，比如Ross Girshick和Bharath Hariharan，所以也增加了一份亲切感。</p></blockquote><p>30年前，神经网络走过了非常崎岖的道路。最初的成功过后，神经网络因为本身训练的复杂性、结构的不确定性、对数据量的依赖性、理论的不清晰性等，在2000年年初的一段时间之内逐渐被更加有理论依据的凸优化、核方法、概率图模型等取代。杨立昆和其他两位同获图灵奖的大师约书亚·本吉奥和杰弗里·辛顿回忆起自己在这段时间的坚持的时候，笑称这是“deep learning conspiracy”（“深度学习的阴谋”），而他们自己是Canadian Mafia（“加拿大黑手党”），在各自所在的学校中，他们坚持自己所相信的神经网络研究。</p><p>但是从ImageNet的成功开始，神经网络，或者说“深度学习”，开始以摧枯拉朽之势在各个领域展示出它的优势。</p><p>从2013年加入脸书开始，杨立昆就一直领导着它的研究部门FAIR在人工智能的前沿无人区创新。FAIR集聚了大量人工智能的优秀学者，其中不乏华人的面孔，例如计算机视觉专家何恺明、增强学习和理论研究专家田渊栋等。</p><p>一方面也参与和见证了Facebook AI给社区带来的各种成果，例如ResNeXT、Detectron、FAISS等算法，以及PyTorch通用人工智能框架、ONNX业界模型标准等。Facebook AI多年的成就，和杨立昆一直以来对于人工智能的孜孜追求是分不开的。</p><p><font face="黑体" size=4 color=yellow>从科学思考到科学思维 - 吴军</font></p><p><a href="https://baike.baidu.com/item/%E5%90%B4%E5%86%9B/8125425">吴军（原腾讯副总裁）_百度百科 (baidu.com)</a></p><blockquote><p>吴军，清华附中高81级校友，1967年4月出生，毕业于清华大学计算机系（本科）和清华大学电子工程系（硕士），博士毕业于约翰霍普金斯大学[1]，原腾讯副总裁。吴军博士是当前Google中日韩文搜索算法的主要设计者。著有《数学之美》、《浪潮之巅》和《文明之光》。</p><p>个人经历</p><p>毕业于清华大学计算机系（本科）和清华大学电子工程系（硕士），并于1993-1996年在清华任讲师。</p><p>1996年起在美国约翰霍普金斯大学攻读博士，并于2002年获得计算机科学博士学位。</p><p>在清华和约翰霍普金斯大学期间，吴军博士致力于语音识别、自然语言处理，特别是统计语言模型的研究。</p><p>2002年加入Google公司，任Google研究院资深研究员。到Google不久，他和三个同事们开创了网络搜索反作弊的研究领域，并因此获得工程奖。</p><p>2003年，他和两个同事共同成立了中日韩文搜索部门。吴军博士是当前Google中日韩文搜索算法的主要设计者。在Google期间，他领导了许多研发项目，包括许多与中文相关的产品和自然语言处理的项目，并得到了公司首席执行官埃里克·施密特的高度评价。</p><p>吴军博士在国内外发表过数十篇论文并获得和申请了近十项美国和国际专利，于2005年起，当选为约翰霍普金斯大学计算机系董事会董事。</p><p>2010年，吴军博士离开Google，加盟腾讯公司，担任负责搜索业务的副总裁。并担任国家重大专项“新一代搜索引擎和浏览器”项目的总负责人。</p><p>2012年6月15日，腾讯负责搜搜的副总裁吴军发出微博，暗示已经从腾讯离职[2]。</p><p>个人作品</p><p>著有《数学之美》、《浪潮之巅》、《态度》 、《见识》、《智能时代》 、《全球科技通史》 、《文明之光》。</p><p>《浪潮之巅》是一本介绍互联网及IT行业（或者更广义地说，是TMT行业）兴衰变化的书，书中的内容最早由吴军博士发表在Google黑板报上，经过几年的积累，由电子工业出版社整理成书。</p><p>所获荣誉</p><p>他曾获得1995年的全国人机语音智能接口会议的最佳论文奖和2000年Eurospeech的最佳论文奖。</p></blockquote><p>但是杨立昆却走了一条与众不同的求学道路，他高中毕业后就直接进入一所名气不算太大的大学——巴黎高等电子与电工技术工程师学院（ESIEE）学习。杨立昆做出这样的决定有两个原因：其一，这所大学不需要参加预科课程的学习和考试就能直接申请；其二，在这所学校，他可以获得更多的学习自主权。杨立昆讲，他用自己的经历证明了通过激烈的考试竞争进入名校，不是科学成功的唯一路径。</p><p>杨立昆用自己的经历告诉我们，接受教育重要的是获得知识本身，而不是获得名校的光环。</p><p>如果要总结杨立昆的成功经验，我们可以用4句话来概括：</p><p>• 求学是为了知识本身，而不是文凭；</p><p>• 广泛地阅读高水平的专业著作，培养科学的品位；</p><p>• 特立独行，做自己感兴趣的事情，即便那件事在短时间内不被人看好；</p><p>• 长期的坚持。</p><p>杨立昆博士用几个例子讲述了今天人工智能的本质，就是数学公式+大量的数据+计算能力。</p><p><font face="黑体" size=4 color=yellow>以批判性思维持续学习 - 韦青</font></p><p><a href="https://baike.baidu.com/item/%E9%9F%A6%E9%9D%92/22343459">韦青（微软中国首席技术官）_百度百科 (baidu.com)</a></p><p>“人工智能作为一门科学在研究领域的进步”与“人工智能作为一种工程实践在现实社会中的应用落地”之间的矛盾。</p><p>这些科学家的技术与工程理念可以综合地解释为，“任何一种强大的技术，有其正面就必定有其负面，不理解它的负面，就不能更好地发挥它的正面；不能够关闭某种神奇的工具，就不能轻易地把它打开”。这种思想方式始终贯穿本书。</p><p>深度学习的探索之旅并不容易，我们不得不与各个方面的怀疑论者做斗争……深度神经网络，即我们提出的深度学习，就是突破局限性的方法。深度神经网络十分有效，但是运作也非常复杂，并且难以进行数学分析，但我们还是如同炼金术士般不懈追求着。</p><p><font face="黑体" size=4 color=yellow>杨立昆的科学之路 - 马毅</font></p><p><a href="https://people.eecs.berkeley.edu/~yima/">Homepage of Professor Yi Ma (berkeley.edu)</a></p><p><a href="https://zhuanlan.zhihu.com/p/583053780">ACM Fellow、伯克利教授马毅宣布：明年起加入香港大学，出任数据科学研究院院长 - 知乎 (zhihu.com)</a></p><p>我讲述与杨立昆交流合作的故事，是希望年轻学者充分认识到理论与实践联系的重要性，以及在科研中不断拓宽视野、兼容并蓄、与多个交叉领域的同事交流合作的重要性！</p><p><font face="黑体" size=4 color=yellow>让历史告诉未来 - 黄铁军</font></p><p><a href="http://idm.pku.edu.cn/info/1017/1040.htm">黄铁军-视频与视觉技术国家工程研究中心 (pku.edu.cn)</a></p><p>先谈一下对智能的看法。智能是系统通过获取和加工信息而获得的能力。智能系统的重要特征是能够从无序到有序（熵减）、从简单到复杂演化（进化）的。生命系统是智能系统，也是物理系统；既具有熵减的智能特征，也遵守熵增在内的物理规律。人工智能是智能系统，也是通过获取和加工信息而获得智能，只是智能载体从有机体扩展到一般性的机器。</p><p>符号主义</p><p>连接主义</p><p>行为主义</p><p>学习就是逐步减少系统误差的过程，机器学习就是机器进行尝试、犯错以及自我调整等操作。机器学习对人工智能最重要的贡献是把研究重心从人工赋予机器智能转移到机器自行习得智能。近年来，最成功的机器学习方法是深度学习和强化学习。</p><p>深度学习是连接主义和机器学习相结合的产物，最大的贡献是找到了一种在多层神经网络上进行机器学习的方法，</p><p>强化学习的思想和行为主义一脉相承，可追溯到1911年行为心理学的效用法则：给定情境下，得到奖励的行为会被强化，而受到惩罚的行为会被弱化，这就是强化学习的核心机制——试错。1989年，沃特金斯提出Q学习（Q-learning），证明了强化学习的收敛性。2013年，谷歌子公司DeepMind将Q学习和深度神经网络相结合，取得AlphaGo、AlphaZero（阿尔法元）和AlphaStar等重大突破。最近，DeepMind更是强调，只需要强化学习，就能实现通用人工智能。</p><p>智能比飞行要复杂得多，深度学习成功实现了智能，但是能够解释这种成功的理论还没出现，我们并不能因此否定深度学习的伟大意义。</p><p>人们往往把今天人工智能系统的成功归结为三个要素：大数据+大算力+强算法，其中数据是根本，另外两个要素主要影响效率。</p><p>行文至此，我们已经从人工智能发展史中小心翼翼地挑出三根靠得住的基本支柱：一是神经网络，二是强化学习，三是环境模型。在这三根支柱中，杨立昆最突出的贡献是对神经网络的贡献，特别是卷积神经网络。</p><p>总而言之，人工智能经典学派有三个：符号主义、连接主义和行为主义。符号描述和逻辑推理不是智能的基础，而是一种表现，读写都不会的文盲就拥有的“低级”智能才更基础。因此，连接主义和行为主义虽然困难重重，但有着更强的生命力，从中发展出的深度学习和强化学习两套方法，成为当今支撑人工智能的两大主要方法。</p><p>展望未来，人工智能的发展途径有三条。一是继续推进“大数据+大算力+强算法”的信息技术方法，收集尽可能多的数据，采用深度学习、注意力模型等算法，将大数据中蕴藏的规律转换为人工神经网络的参数，这实际上是凝练了大数据精华的“隐式知识库”，可以为各类文本、图像等信息处理应用提供共性智能模型。二是推进“结构仿脑、功能类脑、性能超脑”的类脑途径，把大自然亿万年进化训练出的生物神经网络作为新一代人工神经网络的蓝本，构造逼近生物神经网络的神经形态芯片和系统，站在人类智能肩膀上发展机器智能。第三条技术路线的核心是建立自然环境的物理模型，通过强化学习训练自主智能模型。比如，构造地球物理模型，训练出的人工智能系统能够适应地球环境，与人类共处共融；构造高精度物理模型（例如基于量子力学模型构造出粒子、原子、分子和材料模型），可以训练出能够从事物理学和材料学研究的人工智能；构造出宇宙及其他星球的物理模型，可以训练出的人工智能则有望走出地球，适应宇宙中更复杂的环境。</p><p>人类智能是地球环境培育出的最美丽的花朵，我们在为自己骄傲的同时，也要警惕人类中心主义。地球不是宇宙的中心，人类智能也没有类似的独特地位，把人类智能视为人工智能的造物主，曾经禁锢了人工智能的发展。沉迷于寻求通用智能理论，将是阻碍人工智能发展的最大障碍。破除人类中心主义的傲慢和对通用智能理论的迷思，构建更好的人工神经网络（包括逼近生物神经网络），坚持和发展强化学习基本思想，不断提高环境模型的精度和广度，人工智能将稳步前行，前景无限。</p><p><font face="黑体" size=4 color=yellow>探求未知的科学精神 - 郭毅可</font></p><p><a href="https://www.hkbu.edu.hk/zh_cn/about/university-officers/professor-yike-guo.html">郭毅可教授 (hkbu.edu.hk)</a></p><p><a href="https://www.imperial.ac.uk/people/y.guo">Home - Professor Yi-Ke Guo (imperial.ac.uk)</a></p><p><font face="黑体" size=4 color=yellow>杨强</font></p><p><font face="黑体" size=4 color=yellow>彭志辉</font></p><p><font face="黑体" size=4 color=yellow>吴甘沙</font></p><hr><p><font face="黑体" size=6 color=MediumPurple>前言</font></p><p>在深入了解机器的旅程中，本书提供了两个层次的阅读目标：第一个层次较为基础，即叙述、描写和分析；第二个层次针对对此感兴趣的读者，本书提供了更加深入的数学和信息技术推理。</p><p>人脑由860亿个神经元构成，神经元细胞之间相互连接。人工神经网络也是由大量单元和数学函数构成的，与简化后的神经元类似。在学习时，人脑神经元之间的连接会被改变，人工神经网络在学习时也是如此。因为这些单元的组织通常是多层的，所以它们被称为神经网络，而人工神经网络学习的过程则被称为深度学习。</p><p><strong>深度神经网络十分有效，但是运作也非常复杂，并且难以进行数学分析，但我们还是如同炼金术士般不懈追求着。</strong></p><hr><p><font face="黑体" size=6 color=MediumPurple>第一章 人工智能呼啸而来</font></p><p>人工智能正在逐步占领经济、通信、健康和自动驾驶汽车等领域。很多观察家不再将其视为一次技术演变，而视其为一场革命。</p><ul><li>人工智能无处不在<ul><li>FLOPS 处理器每秒操作浮点运算次数的度量单位</li></ul></li><li>人工智能艺术家<ul><li>人工智能是一名精于<strong>模仿</strong>的艺术家。</li><li><a href="https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix">GitHub - junyanz&#x2F;pytorch-CycleGAN-and-pix2pix: Image-to-Image Translation in PyTorch</a></li><li><a href="https://research.google/teams/brain/magenta/">Magenta – Google Research</a></li></ul></li><li>索菲亚：类人生物还是虚张声势<ul><li>我上高中的时候，看到索菲亚被授予沙特阿拉伯国籍的事件，当时我觉得很不可思议，觉得人工智能居然已经发展到了这个地步了，但在这一节中，Yann说，向我一样的局外人并不懂其内在，我们被索菲亚给欺骗了。</li></ul></li><li>飞速迭代的人工智能<ul><li>人工智能的世界日新月异，不断地挑战新的极限。当一个关键问题被攻破后，便会进军新的领域，旧的领域便不再属于人工智能的范畴，而是会作为惯用工具存在。</li><li>迪杰斯特拉算法：<a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra’s algorithm - Wikipedia</a></li><li>A*算法：<a href="https://en.wikipedia.org/wiki/A*_search_algorithm">A* search algorithm - Wikipedia</a></li><li>专家系统<ul><li><strong>专家系统</strong>是早期<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD" title="人工智能">人工智能</a>的一个重要分支，它可以看作是一类具有专门知识和经验的计算机智能程序系统，一般采用人工智能中的<a href="https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA" title="知识表示">知识表示</a>和<a href="https://zh.wikipedia.org/w/index.php?title=%E7%9F%A5%E8%AF%86%E6%8E%A8%E7%90%86&action=edit&redlink=1" title="知识推理（页面不存在）">知识推理</a>技术来模拟通常由领域专家才能解决的复杂问题。</li><li>一般来说，专家系统&#x3D;<a href="https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E5%BA%93" title="知识库">知识库</a>+<a href="https://zh.wikipedia.org/wiki/%E6%8E%A8%E7%90%86%E6%9C%BA" title="推理机">推理机</a>，因此专家系统也被称为基于知识的系统。一个专家系统必须具备三要素：<ol><li>领域专家级知识</li><li>模拟专家思维</li><li>达到专家级的水准</li></ol></li></ul></li></ul></li><li>让机器学会学习<ul><li>人脑是由860亿个相互连接的神经元编织的网络组成的，其中约160亿个神经元活跃在大脑皮层中。每个神经元与平均约2000个其他神经元通过一种被称为突触的结构连接。神经元通过创建突触、删除突触或修改其有效性而进行学习。因此，目前最流行的机器学习方法便是建立人工神经网络，并通过修改它们之间的连接达到学习的目的。</li><li>机器学习的第一阶段可以被叫作学习或者训练，在此阶段，机器“学习”如何完成一项任务。第二阶段是实施阶段，此时机器不再学习。</li><li>电子的效率是生物的一百万分之一。</li></ul></li><li>技术混搭<ul><li>如今的应用程序通常是机器学习、GOFAI与传统计算机成果混搭的结晶，比如自动驾驶。</li><li>车载视觉识别系统使用的是一种被称为“卷积网络”的十分特别的神经网络结构，通过不断训练，它可以探测、定位和识别物体以及道路上出现的提示信息。</li></ul></li><li>我们应该如何定义人工智能<ul><li>我认为，所谓人工智能就是用机器执行通常由人类或动物完成的任务，即机器要有感知、推理和行动的能力。</li><li>恩尼格玛密码机：<a href="https://zh.wikipedia.org/wiki/%E6%81%A9%E5%B0%BC%E6%A0%BC%E7%8E%9B%E5%AF%86%E7%A0%81%E6%9C%BA">恩尼格玛密码机 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li>图灵早已预见了机器学习的重要性，他曾在文章中写道：“与其编写程序模拟成人的思维，倒不如模拟孩童的思维，此后再给予它适当的培训，它就会拥有成人的思维。”</li><li>艾伦·图灵的名字与著名的图灵测试息息相关，该测试的内容是让一个人与他看不见的两个测试者（一台计算机和一个人）进行书面对话，由第三者（一个人）在不知情的情况下进行辨识。如果这个人在规定时间内没有辨别出哪一方是机器，那么表明这台计算机通过了测试。</li></ul></li><li>人工智能的未来<ul><li>深度学习就是人工智能的未来，我对此深信不疑。然而目前的深度学习系统仍无法进行逻辑推理，因为当前的逻辑与学习能力并不匹配，这是未来几年的主要挑战。</li></ul></li><li>算法的广阔天地</li></ul><hr><h2 id="第二章-人工智能和我的学术生涯-永恒的追求：让机器拥有智能-达特茅斯会议：诞生了“人工智能”这一术语-两位人工智能领域的先驱马文·明斯基（Marvin-Minsky）和约翰·麦卡锡（John-McCarthy）-传统智能难以复制-这一篇文章是讲，在1970年之前，人们有各种人工智能发展的思路，对人工智能寄予了厚望，但是随着政府预算的消减，人工智能进入了寒冬，人工智能是成功不是那么容易的。-树搜索研究取得的巨大成功离不开传统智能，然而这种传统智能却难以复制。-人类与人工智能的“战争”-1997年，世界国际象棋冠军加里·卡斯帕罗夫与IBM开发的超级计算机“深蓝”（Deep-Blue）在纽约展开了6场复仇赛。-IBM的沃森计算机-李世石以1∶4负于AlphaGo。后者是由谷歌子公司DeepMind设计的大型系统，它整合了几种已知相对成熟的技术——卷积网络、强化学习和蒙特卡洛树搜索（一种随机树搜索方法）。-与“深蓝”不同，AlphaGo受过专门“训练”，它通过与自己对战积累经验，提升能力。但是，人类与人工智能的“战争”刚刚开始而已……-神经流派的崛起-加拿大心理学家和神经生物学家唐纳德·赫布（Donald-Hebb）-心理学家弗兰克·罗森布拉特（Frank-Rosenblatt）在康奈尔大学开发出了感知器-20世纪70年代，两位美国人，时任加利福尼亚圣何塞州立大学的电气工程学教授理查德·杜达（Richard-Duda）和位于加利福尼亚州门洛帕克的斯坦福研究所（SRI）的计算机科学家彼得·哈特（Peter-Hart），评估了所有被称为“统计形式的识别”的方法，并撰写了一本评估手册，感知器就是其中一个例子。手册一经推出，立刻成为模式识别领域的参考标杆。-遭遇寒冬-大多数科学家不再谈论制造具有学习能力的智能机器之事，转而把目光转向了更容易落地的项目。比如，运用一些原本用来研究神经网络的方法创建了“自适应滤波”，这是许多现代通信技术的起源。-狂热的疯子-芬兰人戴沃·科霍宁（Teuvo-Kohonen），他研究的是一个与神经网络比较接近的课题——联想记忆-数学家甘利俊一（Shun-Ichi-Amari）和一位名为福岛邦彦（Kunihiko-Fukushima）的业内人士-心理学家杰伊·麦克莱兰德（Jay-McClelland）和戴夫·鲁梅尔哈特（David-Rumelhart），还有生物物理学家约翰·霍普菲尔德（John-Hopfield）和特伦斯·谢诺夫斯基（Terry-Sejnowski），以及计算机科学家杰弗里·辛顿。-被兴趣激发的人-《2001太空漫游》。影片里出现了我所热爱的一切：太空旅行、人类的未来以及超级计算机哈尔的起义。-巴黎高等电子与电工技术工程师学院-卓有成效的阅读-以逻辑的方式无法建构真正的智能机器，我们必须赋予机器学习的能力，让它们能以经验为基础进行自我建构。-HLM算法-我的偶像-施乐帕克研究中心-我十分渴望见到两位大人物：一位是来自巴尔的摩约翰斯·霍普金斯大学的生物物理学家和神经生物学家特伦斯·谢诺夫斯基（《深度学习》作者），另一位是来自卡内基·梅隆大学的杰弗里·辛顿，后者与约书亚·本吉奥（《深度学习（花书）》作者）和我共同分享了2018年度的图灵奖。-辛顿和谢诺夫斯基于1983年发表了一篇有关玻尔兹曼机（Boltzmann-Machines）的文章，并在其中描述了一个带有“隐藏单元”的神经网络的学习过程，这个隐藏单元是位于输入和输出之间的中间层的神经元。-“你认识一个叫杨立昆的人吗？”-一个法国的孩子，被辛顿和谢诺夫斯基给盯上了-doge-梯度反向传播的运用-发明无法一蹴而就，它们是经历反复实验、失败、进入低谷和讨论的结果，通常要走很长的路才能实现。-神圣之地-入职贝尔实验室-曾有人告诉我：“在贝尔实验室，靠节省开支是无法混出名堂的！”这真是一句发人深省的话。-贝尔实验室的岁月-他将我的网络命名为LeNet（源自我的名字Le-Cun）-LeNet-5是一个用于识别手写字符的商业化卷积网络-职业与信念-1995年，新的“寒冬”开始。神经网络基本上成了没人愿意谈及的话题，卷积网络更是成了大家口中的笑话。他们说这项技术太复杂了，除了杨立昆没人能让它发挥作用。这简直就是胡说八道。-核方法是由我们实验室内部的同事伊莎贝尔·居永（Isabelle-Guyon）、弗拉基米尔·瓦普尼克和伯恩哈德·伯泽尔（Bernhard-Boser）于1992—1995年发明的，其核心内容在1995—2010年成为研究机器学习的主要方法。-1998年，我们在著名杂志《电气与电子工程协会会刊》（Proceedings-of-the-IEEE）上发表了一篇后来广为人知的论文，题目为《基于梯度学习的文档识别》，作者为杨立昆、莱昂·博图、约书亚·本吉奥和帕特里克·哈夫纳。-插图-这是一次全新的、教学性的、全面性的尝试。-1998—2008年，这篇论文的影响力还十分有限，每年仅有几十次引用量。但从2013年开始，引用量开始以指数级增长。仅2018年一年，就有5400次引用。现在许多人都把它视为卷积网络的开山之作，尽管在此前10年，我们已经发表了多篇文章。2019年，它成为我的主要代表作，引用数量超过了20000次。-深度学习的阴谋-卷积网络的春天-说回2005年，这是我在纽约大学出成果的一年。我们证明了可以将卷积网络用于语义分割，即用像素所属的物体类别标记图像的每个像素。-2012年是具有决定性意义的一年，-插图-它是一个新时代的开端，人们不再质疑卷积网络的有效性，这也是后文一些章节的主题"><a href="#第二章-人工智能和我的学术生涯-永恒的追求：让机器拥有智能-达特茅斯会议：诞生了“人工智能”这一术语-两位人工智能领域的先驱马文·明斯基（Marvin-Minsky）和约翰·麦卡锡（John-McCarthy）-传统智能难以复制-这一篇文章是讲，在1970年之前，人们有各种人工智能发展的思路，对人工智能寄予了厚望，但是随着政府预算的消减，人工智能进入了寒冬，人工智能是成功不是那么容易的。-树搜索研究取得的巨大成功离不开传统智能，然而这种传统智能却难以复制。-人类与人工智能的“战争”-1997年，世界国际象棋冠军加里·卡斯帕罗夫与IBM开发的超级计算机“深蓝”（Deep-Blue）在纽约展开了6场复仇赛。-IBM的沃森计算机-李世石以1∶4负于AlphaGo。后者是由谷歌子公司DeepMind设计的大型系统，它整合了几种已知相对成熟的技术——卷积网络、强化学习和蒙特卡洛树搜索（一种随机树搜索方法）。-与“深蓝”不同，AlphaGo受过专门“训练”，它通过与自己对战积累经验，提升能力。但是，人类与人工智能的“战争”刚刚开始而已……-神经流派的崛起-加拿大心理学家和神经生物学家唐纳德·赫布（Donald-Hebb）-心理学家弗兰克·罗森布拉特（Frank-Rosenblatt）在康奈尔大学开发出了感知器-20世纪70年代，两位美国人，时任加利福尼亚圣何塞州立大学的电气工程学教授理查德·杜达（Richard-Duda）和位于加利福尼亚州门洛帕克的斯坦福研究所（SRI）的计算机科学家彼得·哈特（Peter-Hart），评估了所有被称为“统计形式的识别”的方法，并撰写了一本评估手册，感知器就是其中一个例子。手册一经推出，立刻成为模式识别领域的参考标杆。-遭遇寒冬-大多数科学家不再谈论制造具有学习能力的智能机器之事，转而把目光转向了更容易落地的项目。比如，运用一些原本用来研究神经网络的方法创建了“自适应滤波”，这是许多现代通信技术的起源。-狂热的疯子-芬兰人戴沃·科霍宁（Teuvo-Kohonen），他研究的是一个与神经网络比较接近的课题——联想记忆-数学家甘利俊一（Shun-Ichi-Amari）和一位名为福岛邦彦（Kunihiko-Fukushima）的业内人士-心理学家杰伊·麦克莱兰德（Jay-McClelland）和戴夫·鲁梅尔哈特（David-Rumelhart），还有生物物理学家约翰·霍普菲尔德（John-Hopfield）和特伦斯·谢诺夫斯基（Terry-Sejnowski），以及计算机科学家杰弗里·辛顿。-被兴趣激发的人-《2001太空漫游》。影片里出现了我所热爱的一切：太空旅行、人类的未来以及超级计算机哈尔的起义。-巴黎高等电子与电工技术工程师学院-卓有成效的阅读-以逻辑的方式无法建构真正的智能机器，我们必须赋予机器学习的能力，让它们能以经验为基础进行自我建构。-HLM算法-我的偶像-施乐帕克研究中心-我十分渴望见到两位大人物：一位是来自巴尔的摩约翰斯·霍普金斯大学的生物物理学家和神经生物学家特伦斯·谢诺夫斯基（《深度学习》作者），另一位是来自卡内基·梅隆大学的杰弗里·辛顿，后者与约书亚·本吉奥（《深度学习（花书）》作者）和我共同分享了2018年度的图灵奖。-辛顿和谢诺夫斯基于1983年发表了一篇有关玻尔兹曼机（Boltzmann-Machines）的文章，并在其中描述了一个带有“隐藏单元”的神经网络的学习过程，这个隐藏单元是位于输入和输出之间的中间层的神经元。-“你认识一个叫杨立昆的人吗？”-一个法国的孩子，被辛顿和谢诺夫斯基给盯上了-doge-梯度反向传播的运用-发明无法一蹴而就，它们是经历反复实验、失败、进入低谷和讨论的结果，通常要走很长的路才能实现。-神圣之地-入职贝尔实验室-曾有人告诉我：“在贝尔实验室，靠节省开支是无法混出名堂的！”这真是一句发人深省的话。-贝尔实验室的岁月-他将我的网络命名为LeNet（源自我的名字Le-Cun）-LeNet-5是一个用于识别手写字符的商业化卷积网络-职业与信念-1995年，新的“寒冬”开始。神经网络基本上成了没人愿意谈及的话题，卷积网络更是成了大家口中的笑话。他们说这项技术太复杂了，除了杨立昆没人能让它发挥作用。这简直就是胡说八道。-核方法是由我们实验室内部的同事伊莎贝尔·居永（Isabelle-Guyon）、弗拉基米尔·瓦普尼克和伯恩哈德·伯泽尔（Bernhard-Boser）于1992—1995年发明的，其核心内容在1995—2010年成为研究机器学习的主要方法。-1998年，我们在著名杂志《电气与电子工程协会会刊》（Proceedings-of-the-IEEE）上发表了一篇后来广为人知的论文，题目为《基于梯度学习的文档识别》，作者为杨立昆、莱昂·博图、约书亚·本吉奥和帕特里克·哈夫纳。-插图-这是一次全新的、教学性的、全面性的尝试。-1998—2008年，这篇论文的影响力还十分有限，每年仅有几十次引用量。但从2013年开始，引用量开始以指数级增长。仅2018年一年，就有5400次引用。现在许多人都把它视为卷积网络的开山之作，尽管在此前10年，我们已经发表了多篇文章。2019年，它成为我的主要代表作，引用数量超过了20000次。-深度学习的阴谋-卷积网络的春天-说回2005年，这是我在纽约大学出成果的一年。我们证明了可以将卷积网络用于语义分割，即用像素所属的物体类别标记图像的每个像素。-2012年是具有决定性意义的一年，-插图-它是一个新时代的开端，人们不再质疑卷积网络的有效性，这也是后文一些章节的主题" class="headerlink" title="第二章 人工智能和我的学术生涯- 永恒的追求：让机器拥有智能    - 达特茅斯会议：诞生了“人工智能”这一术语    - 两位人工智能领域的先驱马文·明斯基（Marvin Minsky）和约翰·麦卡锡（John McCarthy）- 传统智能难以复制    - 这一篇文章是讲，在1970年之前，人们有各种人工智能发展的思路，对人工智能寄予了厚望，但是随着政府预算的消减，人工智能进入了寒冬，人工智能是成功不是那么容易的。    - 树搜索研究取得的巨大成功离不开传统智能，然而这种传统智能却难以复制。- 人类与人工智能的“战争”    - 1997年，世界国际象棋冠军加里·卡斯帕罗夫与IBM开发的超级计算机“深蓝”（Deep Blue）在纽约展开了6场复仇赛。    - IBM的沃森计算机    - 李世石以1∶4负于AlphaGo。后者是由谷歌子公司DeepMind设计的大型系统，它整合了几种已知相对成熟的技术——卷积网络、强化学习和蒙特卡洛树搜索（一种随机树搜索方法）。    - 与“深蓝”不同，AlphaGo受过专门“训练”，它通过与自己对战积累经验，提升能力。但是，人类与人工智能的“战争”刚刚开始而已……- 神经流派的崛起    - 加拿大心理学家和神经生物学家唐纳德·赫布（Donald Hebb）    - 心理学家弗兰克·罗森布拉特（Frank Rosenblatt）在康奈尔大学开发出了感知器    - 20世纪70年代，两位美国人，时任加利福尼亚圣何塞州立大学的电气工程学教授理查德·杜达（Richard Duda）和位于加利福尼亚州门洛帕克的斯坦福研究所（SRI）的计算机科学家彼得·哈特（Peter Hart），评估了所有被称为“统计形式的识别”的方法，并撰写了一本评估手册，感知器就是其中一个例子。手册一经推出，立刻成为模式识别领域的参考标杆。- 遭遇寒冬    - 大多数科学家不再谈论制造具有学习能力的智能机器之事，转而把目光转向了更容易落地的项目。比如，运用一些原本用来研究神经网络的方法创建了“自适应滤波”，这是许多现代通信技术的起源。- 狂热的疯子    - 芬兰人戴沃·科霍宁（Teuvo Kohonen），他研究的是一个与神经网络比较接近的课题——联想记忆    - 数学家甘利俊一（Shun-Ichi Amari）和一位名为福岛邦彦（Kunihiko Fukushima）的业内人士    - 心理学家杰伊·麦克莱兰德（Jay McClelland）和戴夫·鲁梅尔哈特（David Rumelhart），还有生物物理学家约翰·霍普菲尔德（John Hopfield）和特伦斯·谢诺夫斯基（Terry Sejnowski），以及计算机科学家杰弗里·辛顿。- 被兴趣激发的人    - 《2001太空漫游》。影片里出现了我所热爱的一切：太空旅行、人类的未来以及超级计算机哈尔的起义。    - 巴黎高等电子与电工技术工程师学院- 卓有成效的阅读    - 以逻辑的方式无法建构真正的智能机器，我们必须赋予机器学习的能力，让它们能以经验为基础进行自我建构。    - HLM算法- 我的偶像    - 施乐帕克研究中心    - 我十分渴望见到两位大人物：一位是来自巴尔的摩约翰斯·霍普金斯大学的生物物理学家和神经生物学家特伦斯·谢诺夫斯基（《深度学习》作者），另一位是来自卡内基·梅隆大学的杰弗里·辛顿，后者与约书亚·本吉奥（《深度学习（花书）》作者）和我共同分享了2018年度的图灵奖。    - 辛顿和谢诺夫斯基于1983年发表了一篇有关玻尔兹曼机（Boltzmann Machines）的文章，并在其中描述了一个带有“隐藏单元”的神经网络的学习过程，这个隐藏单元是位于输入和输出之间的中间层的神经元。- “你认识一个叫杨立昆的人吗？”    -  一个法国的孩子，被辛顿和谢诺夫斯基给盯上了*&#x2F;doge- 梯度反向传播的运用    - 发明无法一蹴而就，它们是经历反复实验、失败、进入低谷和讨论的结果，通常要走很长的路才能实现。- 神圣之地    - 入职贝尔实验室    - 曾有人告诉我：“在贝尔实验室，靠节省开支是无法混出名堂的！”这真是一句发人深省的话。- 贝尔实验室的岁月    - 他将我的网络命名为LeNet（源自我的名字Le Cun）    - LeNet 5是一个用于识别手写字符的商业化卷积网络- 职业与信念    - 1995年，新的“寒冬”开始。神经网络基本上成了没人愿意谈及的话题，卷积网络更是成了大家口中的笑话。他们说这项技术太复杂了，除了杨立昆没人能让它发挥作用。这简直就是胡说八道。    - 核方法是由我们实验室内部的同事伊莎贝尔·居永（Isabelle Guyon）、弗拉基米尔·瓦普尼克和伯恩哈德·伯泽尔（Bernhard Boser）于1992—1995年发明的，其核心内容在1995—2010年成为研究机器学习的主要方法。    - 1998年，我们在著名杂志《电气与电子工程协会会刊》（Proceedings of the IEEE）上发表了一篇后来广为人知的论文，题目为《基于梯度学习的文档识别》，作者为杨立昆、莱昂·博图、约书亚·本吉奥和帕特里克·哈夫纳。[插图]这是一次全新的、教学性的、全面性的尝试。    - 1998—2008年，这篇论文的影响力还十分有限，每年仅有几十次引用量。但从2013年开始，引用量开始以指数级增长。仅2018年一年，就有5400次引用。现在许多人都把它视为卷积网络的开山之作，尽管在此前10年，我们已经发表了多篇文章。2019年，它成为我的主要代表作，引用数量超过了20000次。- 深度学习的阴谋- 卷积网络的春天    - 说回2005年，这是我在纽约大学出成果的一年。我们证明了可以将卷积网络用于语义分割，即用像素所属的物体类别标记图像的每个像素。    - 2012年是具有决定性意义的一年，[插图]它是一个新时代的开端，人们不再质疑卷积网络的有效性，这也是后文一些章节的主题"></a><font face="黑体" size=6 color=MediumPurple>第二章 人工智能和我的学术生涯</font><br>- 永恒的追求：让机器拥有智能<br>    - 达特茅斯会议：诞生了“人工智能”这一术语<br>    - 两位人工智能领域的先驱马文·明斯基（Marvin Minsky）和约翰·麦卡锡（John McCarthy）<br>- 传统智能难以复制<br>    - 这一篇文章是讲，在1970年之前，人们有各种人工智能发展的思路，对人工智能寄予了厚望，但是随着政府预算的消减，人工智能进入了寒冬，人工智能是成功不是那么容易的。<br>    - 树搜索研究取得的巨大成功离不开传统智能，然而这种传统智能却难以复制。<br>- 人类与人工智能的“战争”<br>    - 1997年，世界国际象棋冠军加里·卡斯帕罗夫与IBM开发的超级计算机“深蓝”（Deep Blue）在纽约展开了6场复仇赛。<br>    - IBM的沃森计算机<br>    - 李世石以1∶4负于AlphaGo。后者是由谷歌子公司DeepMind设计的大型系统，它整合了几种已知相对成熟的技术——卷积网络、强化学习和蒙特卡洛树搜索（一种随机树搜索方法）。<br>    - 与“深蓝”不同，AlphaGo受过专门“训练”，它通过与自己对战积累经验，提升能力。但是，人类与人工智能的“战争”刚刚开始而已……<br>- 神经流派的崛起<br>    - 加拿大心理学家和神经生物学家唐纳德·赫布（Donald Hebb）<br>    - 心理学家弗兰克·罗森布拉特（Frank Rosenblatt）在康奈尔大学开发出了感知器<br>    - 20世纪70年代，两位美国人，时任加利福尼亚圣何塞州立大学的电气工程学教授理查德·杜达（Richard Duda）和位于加利福尼亚州门洛帕克的斯坦福研究所（SRI）的计算机科学家彼得·哈特（Peter Hart），评估了所有被称为<strong>“统计形式的识别”</strong>的方法，并撰写了一本评估手册，感知器就是其中一个例子。手册一经推出，立刻成为模式识别领域的参考标杆。<br>- 遭遇寒冬<br>    - 大多数科学家不再谈论制造具有学习能力的智能机器之事，转而把目光转向了更容易落地的项目。比如，运用一些原本用来研究神经网络的方法创建了“自适应滤波”，这是许多现代通信技术的起源。<br>- 狂热的疯子<br>    - 芬兰人戴沃·科霍宁（Teuvo Kohonen），他研究的是一个与神经网络比较接近的课题——联想记忆<br>    - 数学家甘利俊一（Shun-Ichi Amari）和一位名为福岛邦彦（Kunihiko Fukushima）的业内人士<br>    - 心理学家杰伊·麦克莱兰德（Jay McClelland）和戴夫·鲁梅尔哈特（David Rumelhart），还有生物物理学家约翰·霍普菲尔德（John Hopfield）和特伦斯·谢诺夫斯基（Terry Sejnowski），以及计算机科学家杰弗里·辛顿。<br>- 被兴趣激发的人<br>    - 《2001太空漫游》。影片里出现了我所热爱的一切：太空旅行、人类的未来以及超级计算机哈尔的起义。<br>    - 巴黎高等电子与电工技术工程师学院<br>- 卓有成效的阅读<br>    - <strong>以逻辑的方式无法建构真正的智能机器，我们必须赋予机器学习的能力，让它们能以经验为基础进行自我建构。</strong><br>    - HLM算法<br>- 我的偶像<br>    - 施乐帕克研究中心<br>    - 我十分渴望见到两位大人物：一位是来自巴尔的摩约翰斯·霍普金斯大学的生物物理学家和神经生物学家<strong>特伦斯·谢诺夫斯基</strong>（《深度学习》作者），另一位是来自卡内基·梅隆大学的<strong>杰弗里·辛顿</strong>，后者与<strong>约书亚·本吉奥</strong>（《深度学习（花书）》作者）和我共同分享了2018年度的图灵奖。<br>    - <strong>辛顿</strong>和<strong>谢诺夫斯基</strong><em>于1983年发表了一篇有关玻尔兹曼机（Boltzmann Machines）的文章，并在其中描述了一个带有“隐藏单元”的神经网络的学习过程，这个隐藏单元是位于输入和输出之间的中间层的神经元。<br>- “你认识一个叫杨立昆的人吗？”<br>    -  一个法国的孩子，被辛顿和谢诺夫斯基给</em>盯上了*&#x2F;doge<br>- 梯度反向传播的运用<br>    - 发明无法一蹴而就，它们是经历反复实验、失败、进入低谷和讨论的结果，通常要走很长的路才能实现。<br>- 神圣之地<br>    - 入职贝尔实验室<br>    - 曾有人告诉我：“在贝尔实验室，靠节省开支是无法混出名堂的！”这真是一句发人深省的话。<br>- 贝尔实验室的岁月<br>    - 他将我的网络命名为LeNet（源自我的名字Le Cun）<br>    - LeNet 5是一个用于识别手写字符的商业化卷积网络<br>- 职业与信念<br>    - 1995年，新的“寒冬”开始。神经网络基本上成了没人愿意谈及的话题，卷积网络更是成了大家口中的笑话。他们说这项技术太复杂了，除了杨立昆没人能让它发挥作用。这简直就是胡说八道。<br>    - 核方法是由我们实验室内部的同事伊莎贝尔·居永（Isabelle Guyon）、弗拉基米尔·瓦普尼克和伯恩哈德·伯泽尔（Bernhard Boser）于1992—1995年发明的，其核心内容在1995—2010年成为研究机器学习的主要方法。<br>    - 1998年，我们在著名杂志《电气与电子工程协会会刊》（Proceedings of the IEEE）上发表了一篇后来广为人知的论文，题目为《基于梯度学习的文档识别》，作者为杨立昆、莱昂·博图、约书亚·本吉奥和帕特里克·哈夫纳。[插图]这是一次全新的、教学性的、全面性的尝试。<br>    - 1998—2008年，这篇论文的影响力还十分有限，每年仅有几十次引用量。但从2013年开始，引用量开始以指数级增长。仅2018年一年，就有5400次引用。现在许多人都把它视为卷积网络的开山之作，尽管在此前10年，我们已经发表了多篇文章。2019年，它成为我的主要代表作，引用数量超过了20000次。<br>- 深度学习的阴谋<br>- 卷积网络的春天<br>    - 说回2005年，这是我在纽约大学出成果的一年。我们证明了可以将卷积网络用于语义分割，即用像素所属的物体类别标记图像的每个像素。<br>    - 2012年是具有决定性意义的一年，[插图]它是一个新时代的开端，人们不再质疑卷积网络的有效性，这也是后文一些章节的主题</h2><p><font face="黑体" size=6 color=MediumPurple>第三章 机器的初级训练</font></p><p>机器可以被训练用来完成一些简单的任务，比如旋转方向盘或识别字母。训练的内容包括在机器中建立一个函数f（x），以便输出对应输入信号（图像、声音、文本）的预期答案（识别图像、声音或文本）。</p><ul><li>从海兔得到的启发<ul><li>通过修改由非常简单的单元构成的网络中的连接，就能产生智能行为。</li><li>机器学习研究的目标就是以人工神经网络为基础，在机器内重现这种现象。这种通过调整突触效应而进行的学习，是20世纪中叶以来被统计学家称为“模型参数识别”的一个例证。</li></ul></li><li>监督学习</li><li>随机近似</li><li>数学家的题外话</li><li>伽利略和比萨斜塔</li><li>图像识别</li><li>感知器的创新<ul><li>感知器的创新就是一个学习过程：每识别一次输入的图像并输出相应结果后，它都会自动调整权重。从概念的角度讲，根据数据调整模型参数的想法已经在统计学中存在了几个世纪。弗兰克的高明之处在于，他将这种想法应用到了模式识别上。</li></ul></li><li>25像素的网格</li><li>区分字母C和D</li><li>泛化原理</li><li>感知器的局限性<ul><li>不存在一条可以分开黑点与灰点的直线，或者说线性分类器（例如感知器）不能计算这个异或函数。</li><li>西摩尔·帕普特和马文·明斯基在1969年出版的著作《感知器：计算几何学概论》葬送了感知器的未来，这使相关的研究人员更加沮丧。这次机器学习研究的停顿在人工智能的历史中扮演了重要的角色，它导致我们走入了上文提到的人工智能的几个寒冬期（低谷）里的一个，使研究受阻的科学界转变了研究方向。</li></ul></li><li>特征提取器<ul><li>在输入图像和神经层之间放置一个中间模块，也就是所谓的“特征提取器”。它能够检测输入图像中是否存在一些特殊的区域，然后构造一个向量来描述这些区域是否存在、强度如何，并最后将这个向量交由感知器层处理。</li><li>在系统的第一阶段提取出非常简单的特征；在下一层尝试检测这些特征组合的轮廓或是直接连接特征，以形成诸如圆形或角的基本形状；再在下一层，检测这些组合构成的物体局部；等等。</li><li>在感知器的学习过程中，只有最后一层经过训练，特征提取器的第一层是无法训练的，必须手动确定。</li><li>对于输入到机器中的每个图像的数千或者数百万个权重，如何才能手动调整呢？正是由于这个阻碍，20世纪60年代末的学术界放弃了训练端到端智能机器的想法，而侧重于研究构成统计模式识别领域的应用。受感知器启发的体系结构虽然不完善，但直到21世纪10年代初，这个体系一直在相关领域内占据主导地位。接收信号，然后通过手动设计的特征提取器处理信号，再通过由感知器或任何其他统计学习方法构成的分类子系统接收信号：这就是模式识别的惯用方法。</li></ul></li></ul><p><font face="黑体" size=6 color=MediumPurple>第四章 机器学习的方法</font></p><blockquote><p>监督学习的基本原理从始至终都没有变过，即通过调整系统参数来降低成本函数，也就是降低在一个学习示例集中测量到的实际输出与期望输出之间的平均误差。实际上，<strong>最小化成本函数</strong>和<strong>训练系统</strong>是一回事。<br>这个原理不仅适用于像感知器这样仅对最后一层进行训练的简单模型，还适用于几乎所有的监督学习方法，特别适用于端到端训练的多层神经网络，这一点我们将在下一章进行讲解。<br>总之，基于成本函数最小化的学习是人工智能运作的关键要素。因此，理解其局限性同样有利于我们反思人类自身的学习。</p></blockquote><ul><li>成本函数<ul><li>提示：训练机器的过程就是调整参数的过程。</li><li>再强调一遍：学习就是逐步减少系统误差的过程。所谓的机器学习，就是机器进行尝试、犯错和自我调整的操作。每次针对参数的调整都会删除参数原来的值。</li></ul></li><li>找到谷底</li><li>实践中的梯度下降<ul><li>综上所述，存在两种计算梯度的方法，分别是扰动法和偏导数法。</li></ul></li><li>随机梯度<ul><li>SGD</li></ul></li><li>多个谷底的困扰</li><li>机器学习的原理<ul><li>在学习期间，网络会调整参数，使得学习集中的所有x都能给出期待的结果y。</li><li>学习后，可以通过内插或外推的方式，为学习集中不存在的新x赋值y。</li><li>当新的x在学习示例范围内时，我们称它为插值；</li><li>当新的x在学习示例所覆盖的区域之外时，则被称为外推。</li></ul></li><li>模型的选择<ul><li>关于选择模型，有一部分是由工程师决定的，比如系统的结构及其参数化，即函数f（x，w）的形式。这个过程需要依据经验决定，但总的来说，它依赖于瓦普尼克的统计学习理论。<ul><li>V. Vapnik and A. Chervonenkis</li><li><a href="https://zhuanlan.zhihu.com/p/41109051">解读机器学习基础概念：VC维的来龙去脉 - 知乎 (zhihu.com)</a></li></ul></li></ul></li><li>奶牛和三名科学家<ul><li>使用先验知识做出预测是必要的。</li><li>一定存在几个可以解释数据的基础模型。</li></ul></li><li>奥卡姆剃刀原理<ul><li>奥卡姆剃刀原理阐明了精简的原则：“Pluralitas non est ponenda sine necessitate”。</li><li>这句话可以翻译为：“若无必要，勿增实体。”</li><li>对一系列观察的解释应尽可能简单，而不应该使用不必要的概念。</li></ul></li><li>机器训练方案<ul><li>在一套标准的方案中，机器训练分为三个阶段，目的是为给定任务确定一个最有效的模型。</li><li>想要选择一个模型，即一类尽可能最小化的函数，需要事先衡量其预测能力，也就是使用它在训练过程中没有出现的示例评估它的成本函数。这些示例构成了验证集。</li><li>在训练过程中，函数必须调整其参数以使得到的输出近似于期望的输出，并同时使成本函数最小化。在该集合中出现的误差叫作学习误差（也称为？<strong>训练误差</strong>）。</li><li>为了评估经过训练的系统的性能，同时为了验证机器不仅记住了示例，还能够处理未曾见过的示例，我们利用另外2500个学习对（x，y）测量训练后的误差，即<strong>验证误差</strong>。</li><li>最后，我们用剩下的2500个示例在被保留的模型上测试，得出的误差就是<strong>测试误差</strong>。</li><li>为什么要计算测试误差呢？仅仅使用验证误差不足以说明问题吗？<ul><li>这是因为<strong>验证误差偏向乐观</strong>：<strong>我们选择该模型是因为它的验证误差最低</strong>，跟在验证集中训练一样。</li><li>为了在开展应用之前正确地评估系统的质量，最好的办法就是将其置于真实的情况下，用<strong>完全没有见过</strong>的示例测试其性能。</li></ul></li></ul></li><li>最佳折中方案<ul><li>瓦普尼克公式<ul><li>过于简单的模型是无法对大量学习数据进行建模的.</li><li>如果模型足够复杂（例如1000次幂的多项式或大型神经网络），它便能“学习”整个学习集，只不过如此一来，其泛化能力必然不够良好。这样的函数非常灵活，换句话说，它在各点之间的振荡幅度很大，我们需要更多的学习示例使其停止精确通过所有的点，从而减少震荡，并能够对新的数据点做出良好的预测。也就是说，让它<strong>停止记录学习数据</strong>，开始<strong>学习发现数据蕴含的基本规律</strong>。</li><li>我们需要在数据数量和模型复杂性之间找到一个平衡点。</li><li>当示例的数量超过一个阈值时，曲线无法再通过所有点，并且开始泛化。也就是说，对于给定数量的示例，我们必须寻求最佳的折中方案，并以此来选择合适的模型。*(学习能力越强大的函数，越无法正确地泛化，除非我们能够提供足够多的训练示例。)*</li><li>换句话说，为了让系统发现数据背后的规律，我们必须输入足够数量的示例使其开始犯错，这样系统就能突破“死记硬背”但不“理解”的束缚。</li><li>瓦普尼克的公式<ul><li>1.学习误差或经验误差。它体现了系统在训练数据集中的性能。</li><li>2.测试误差，即系统在训练期间没有见过的其他数据点上的性能。如果有无穷多个点，我们便可以精准地估计系统在实际应用时产生的误差。</li><li>3.模型容量。当所有可调整参数均发生变化时，模型容量度量的是模型可以实现的函数数量。该容量又被称为瓦普尼克维度。</li><li>Etest&lt;Etrain+k*h&#x2F;（p**alpha）</li></ul></li></ul></li><li>布尔函数的眩晕<ul><li>当我们只有适当数量的示例时，该机器就需要有一定的约束条件，能够专用于学习输入输出关系（我们称之为“概念”）。</li><li>此外，约束条件主要来自模型的体系结构。</li></ul></li><li>正则化：调节模型的容量<ul><li>为了保证学习的有效性，我们必须在学习误差和用于获取该误差的函数的复杂性（或其函数族的容量）之间找到一个最佳的折中方案。</li></ul></li></ul></li><li>人类的教训</li></ul><p><font face="黑体" size=6 color=MediumPurple>第五章 完成更复杂的任务</font></p><blockquote><p>为了解决感知器及其同类机器的局限性，科学界选择了最有效的解决方案，即堆叠多层神经元层，以使系统可以执行更复杂的任务。<br>我们还要找到一种从头到尾训练这些系统的方法——梯度反向传播<br>神经网络也可以用来学习复杂的任务，并且可以在数百万的数据上进行训练。我们把这样的训练称为深度学习，因为此时使用了（网络）层的堆叠。</p></blockquote><ul><li>贡献度分配<ul><li>如今，反向传播已成为深度学习的基础，几乎所有的人工智能系统都在使用这种方法。</li><li>我们将这种每层都从前一层或前几层获取输入的网络称为前馈多层网络（feed-forward）。</li><li>如果从高层（在出口附近）向低层（在入口附近）的方向也存在连接性，则称为循环网络。</li><li>传统的多层神经网络存在<strong>两种类型的层</strong>，它们<strong>相互交替</strong><ul><li>每个<strong>单元</strong>计算其输入的加权和，将结果传递给<strong>激活函数</strong>*，并将其计算的输出发送到下一层作为其他单元的输入。</li><li>网络就是这样由两种类型的层交替形成的，即<strong>执行加权和的线性层</strong>和<strong>应用激活函数的非线性层</strong>。</li><li><strong>线性层</strong>：每个输出都是输入的加权和，且输入和输出的数量可能并不相同。之所以称它们为线性的，是当我们把两个信号的总和作为输入时，该层输出的结果等于分别处理这两个信号而产生的输出之和。</li><li><strong>非线性层</strong>：通过将非线性函数应用于相应的输入来获得相应的输出。此非线性函数可以是平方函数、绝对值函数、S形函数或其他函数。非线性层的输入与输出的数量是相同的。这些非线性操作是多层网络强大功能的关键所在。</li><li>为什么要交替进行线性和非线性运算呢？因为如果所有的层级都进行线性操作，那么整个过程都是由线性操作组成，换句话说，它等效于一个线性操作。这将使神经元层的堆叠变得毫无意义，因为线性网络只能计算线性函数。</li></ul></li></ul></li><li>连续神经元<br>  - 对于我们所讲的“更好的”神经元，即便是其中某一个输入的某个参数的最细微变化（例如加权和的变化），都会使神经元的输出发生变化。当我们逐步增大或减小此参数时，无论变化多么小，系统的最终输出都会自动发生变化，从而导致成本函数的变化。这种变化的连续性使得我们可以使用梯度下降方法来训练多层网络。</li><li>我的分层学习机<ul><li>HLM</li></ul></li><li>赛跑</li><li>数学的美妙之处<ul><li>梯度反向传播:其原理是在网络中颠倒信号传播的方向，但不像HLM那样传播目标，而是传播梯度，即偏导数。</li><li>反向传播基于的数学概念是复合函数的链式法则。</li></ul></li><li>多层结构的益处<ul><li>学习的原理并没有改变：调整网络的参数，使系统尽可能地少犯错误。</li><li>多层网络<strong>端到端</strong>的训练构成了<strong>深度学习</strong>。这一类系统不仅学习分类，而且连续的各层也会设法将获得的输入转换为有意义的表达，类似于<strong>特征提取器</strong>在增强型感知器中的行为。</li><li>实际上我们可以说，连续的各层就是某种经过训练的特征提取器。</li><li>这是多层网络的决定性优势：它们会<strong>自动学习如何适当地表示信号</strong>。</li></ul></li><li>打破异议<ul><li>局部极小值</li></ul></li><li>多层网络的魅力<ul><li>在多层网络中，我们可以将前面各层视为特征提取器。但与常规方法不同，这种特征提取器不是“手动”设计的，而是通过学习自动生成的。这就是使用反向传播训练的多层网络的魅力所在。</li><li>深度学习<ul><li>1.通过配置和连接模块来构建多层网络的体系结构；</li><li>2.利用反向传播计算梯度之后再通过梯度下降法训练该结构。</li><li>形容词“深度”仅仅是为了表达网络结构是多层的这个事实，别无他意。<br>  <font face="黑体" size=6 color=MediumPurple>第六章 人工智能的支柱</font><br>  LeNet</li></ul></li></ul></li><li>2012年的重磅炸弹<ul><li><strong>ImageNet</strong>是计算机视觉研究领域中用于识别图像中的物体的一个数据库，是由斯坦福大学、普林斯顿大学和其他一些美国机构的学者联合开发的。</li><li>自2010年以来，ImageNet每年都会组织一次“<strong>ImageNet大规模视觉识别挑战赛”（ILSVRC）</strong>，不过所有人都习惯将其简单地称为ImageNet。这是一个供研究人员就他们的图像识别方法一较高下的赛事。</li><li>在2011年以前，即便是最好的系统也会有25 %的识别错误率。但在2012年，一支来自多伦多大学的由<strong>杰弗里·辛顿</strong>和他的学生组成的团队打破了这一纪录，将错误率降至16 %！</li><li>卷积神经网络和GPU</li></ul></li><li>视觉系统的信息处理<ul><li>哺乳动物的初级视觉皮层V 1的区域包含<strong>简单细胞</strong>和<strong>复杂细胞</strong>。每个简单细胞都会在被称为“<strong>感受野</strong>”的输入中的一个小窗口中检测到模式。这些细胞排列在被称为“<strong>特征图</strong>”的平面上。相同特征图的所有细胞在输入图像的不同位置检测同样的模式。每个特征图检测的模式与其他特征图检测的模式不同。具有相同感受野的所有特征图的细胞检测不同的模式，例如第一个检测45度的一个边缘，第二个检测水平边缘，第三个检测到另一个角度，等等。复杂细胞会聚集来自一个小窗口的简单细胞的响应。当模式在输入端稍微移动时，复杂单元的响应几乎没有变化或根本没有变化。</li><li>在V 1中，复杂细胞（另一类神经元）会整合来自相同类型的相邻简单细胞的响应：一个复杂细胞整合一个小邻近区域的所有1号神经元，另一个整合所有的2号神经元，依次类推。这个<strong>聚合操作</strong>可以计算简单细胞输出的平均值，或者简单地计算出它们中的最大值。</li><li>复杂单元可以在一定的位置偏差内检测出模式。这种关键的聚集机制（又称为<strong>池化</strong>）解释了不变性。由此可以得知，一个V 1复杂细胞的感受野大于一个V 1简单细胞的感受野。</li><li>休伯尔和威泽尔在视觉皮层上的发现为人工智能领域的研究提供了两个思路。<ul><li>1.局部连接。视觉系统第一层中的神经元仅连接到图像中的一个小区域，即一小块像素——感受野。</li><li>2.在视野上（也就是在整个图像上）进行重复操作。具有不同感受野的几个神经元在不同的位置检测相同的模式。</li></ul></li></ul></li><li>有远见的东京科学家<ul><li>福岛邦彦：20世纪70年代的认知机和80年代初的神经认知机。</li></ul></li><li>科学界方法之争<ul><li>出于从休伯尔、威泽尔和福岛邦彦工作中得到的收获，以及对哺乳动物视觉皮层研究的迷恋，我设想了一个多层网络架构，能够将简单细胞和复杂细胞的交替以及反向传播训练结合在一起。在我看来，这种类型的网络非常适合用于图像识别。后来，我将其命名为卷积网络，即<strong>卷积神经网络（convolutional neural network）</strong>，有些人将其缩写为CNN，但我更喜欢把它叫作ConvNet。</li></ul></li><li>卷积网络全貌<ul><li>什么是卷积网络<ul><li>卷积是此体系结构的一个组成部分，是一种数学运算，它被广泛应用于信号处理，与视觉皮层简单细胞执行的计算相似。</li><li>池化可以产生输入图像模式的一个不变性表征（相对于小的位移而言）。最大池化的作用是在输入中找到最大值，即感受场中最强的模式。如果此模式移动一个或两个像素，但仍旧停留在池化神经元的同一窗口中，则该神经元的输出保持不变。</li><li>一个卷积网络是由卷积层、ReLU层和池化层堆栈组成，典型的架构为：卷积→ReLU →池化→卷积→ ReLU →池化→卷积→ ReLU→卷积。</li><li>ResNet，何恺明</li><li>神经网络的连接体系结构，即各层神经元的组织以及神经元之间的<strong>连接是确定</strong>的。但是<strong>权重</strong>，即加权和的参数是<strong>不确定</strong>的，它们可以<strong>通过学习来确定</strong>。</li><li>在卷积网络中，<strong>梯度反向传播</strong>会调整权重，使不同层中的神经元能够检测出对识别输入图像至关重要的内容。</li><li>当我们训练卷积网络用来识别自然图像中的物体时，第一层的一些神经元学会了检测定向轮廓，这与神经科学领域的研究人员在视觉皮层中观察到的结果非常相似。</li><li>池化层输出的分辨率低于其输入的分辨率，这使得输入图像的特征模式在发生微小变化的情况下具有鲁棒性。</li></ul></li><li>目标检测、定位、分割和识别</li><li>基于卷积网络的语义分割<ul><li>语义分割旨在对图像中<strong>每个像素所属的对象类别</strong>进行标记。它与目标检测不同，后者是在输入窗口中心检测到相关目标时，网络输出就会被激活。如果不想检测到外部目标，而仅仅想检测图像中的某个区域（例如草、树叶或道路上的沥青），那么就适合使用语义分割。</li><li>在短短几年时间内，视觉研究界在目标检测和定位方面就取得了长足的进步。其中最先进的当数FAIR的Mask R-CNN（一个通用对象实例分割框架）和RetinaNet，它们的代码都是开源的。</li></ul></li></ul></li></ul><p><font face="黑体" size=6 color=MediumPurple>第七章 深度学习的应用</font></p><ul><li>图像辨识</li><li>内容嵌入和相似度测量<ul><li>在执行比较功能时，我们通常会用到“嵌入”（embedding）和“度量学习”。</li><li>嵌入使用的是由神经网络计算得到的向量表示图像、视频或文本。如果两者内容相似，经过训练的神经网络会输出两个彼此靠近的向量，否则输出两个相互远离的向量。</li></ul></li><li>语音识别</li><li>语音克隆<ul><li>近年来，人们一直在利用一种被称为“反卷积”的特殊类型的卷积网络进行声音和语音的合成。</li><li>在某些系统中，输入数据中带有一个说话者的嵌入向量。使用经过训练的卷积网络，只需一个人几秒钟的语音即可计算出他的语音嵌入向量，把这个向量作为输入提供给语音合成器，机器就可以使用这个人的声音读取任何一个文本。我们把这项技术称为语音克隆。</li></ul></li><li>语言的理解和翻译</li><li>智能预测</li><li>人工智能与科学<ul><li>DeepMind公司的AlphaFold系统。</li></ul></li><li>自动驾驶汽车<ul><li>我认为自动驾驶系统将经历三个阶段：<ul><li>在第一个阶段，系统的很大一部分功能由人工编程，深度学习仅被用于感知；</li><li>第二个阶段，深度学习的重要性逐步提升，并占据重要地位；</li><li>第三个阶段，机器具备足够的常识，驾驶技术比人类更可靠。</li></ul></li></ul></li><li>大型应用程序的架构：虚拟助手</li><li>医学影像与医学</li><li>从传统搜索算法到强化学习<ul><li>lphaZero通过自己和自己进行数百万局比赛的方式来训练网络，加强了可以获胜的策略，削弱了可能导致失败的策略。这便是强化学习：我们没有给机器正确的答案，只是告诉它输出的答案是好还是不好，就好像是在给它奖赏或惩罚。只需结合少量树形图的探索，该方法便可拥有非凡的性能。</li></ul></li></ul><p><font face="黑体" size=6 color=MediumPurple>第八章 我在脸书的岁月</font></p><ul><li>与脸书结缘</li><li>脸书的人工智能研究实验室</li><li>用技术实现信息过滤</li><li>技术、平台与媒体</li><li>对带标签数据的渴求</li><li>图灵奖与我的新身份</li></ul><p><font face="黑体" size=6 color=MediumPurple>第九章 前景与挑战</font></p><ul><li>探究智能和学习的基础<ul><li>一方面，不被世人所知的实验是没有未来的。研究以交流为基础，它应该是共享的、开放的，我在贝尔实验室领悟到了这一理念，并将它带到了FAIR。</li><li>另一方面，我们尝试复制生物学机制的前提是理解自然机制的本质，因为在不了解生物学原理的情况下进行复制必然导致惨败。</li><li>人工智能研究的未来不能仅仅复制大自然。</li><li>我认为，我们必须探究智能和学习的基础原理，不管这些原理是以生物学的形式还是以电子的形式存在。正如空气动力学解释了飞机、鸟类、蝙蝠和昆虫的飞行原理，热力学解释了热机和生化过程中的能量转换一样，智能理论也必须考虑到各种形式的智能。</li></ul></li><li>机器学习的局限性<ul><li>在人工智能领域中最常使用的监督学习只是人类或动物学习的一种平淡的反映，它的原理是逐步调整一个架构的参数，从而接近要完成的任务。但是如果要这样训练一个系统来识别物体，我们需要为它提供成千上万甚至数百万个物体的图像。</li><li>而且这些示例必须事先进行人工识别和标记。为了生成获得训练系统所需的数据，公司需要雇用大量零工来标记图像，或将一种语言的文本翻译成另一种语言。</li><li>为什么网络会如此轻易地上当呢？以监督学习的方法训练出的机器可以在学习示例的范围内产生良好的输出，但学习示例的范围毕竟有限，它仅仅能够覆盖输入空间的一小部分。在示例之外，函数并不知道该做些什么。</li><li>监督学习不能构建真正的智能机器，它只是解决方案的一部分。如果我们把构建智能机器比喻成拼图，那么现在这块拼图上还缺少很多零件。</li></ul></li><li>强化学习的局限性<ul><li>强化学习可以在对机器进行训练时，无须给出预期答案，而只需告诉它产生的结果是否正确。当我们无法为系统提供正确答案，只能够评估系统答案的质量时，强化学习就是一个很好的选择。</li><li>机器人会尝试一种策略，观察它是否有效，如果不成功，则尝试下一种策略，并重复该过程，直到找到一种可靠的策略为止。</li><li>强化学习的优势在于，它可以训练系统且无须提供正确答案便可评估其性能，主要适用于系统必须采取行动的情况，例如控制机器人或玩游戏。我们已经通过<strong>DeepMind的AlphaGo、AlphaZero</strong>和<strong>脸书的Elf OpenGo</strong>看到了强化学习在竞技领域所取得的惊人成就。</li><li>该机器与自己进行了数百万次，甚至数十亿次游戏对决。有了足够多新型计算机并行运行的支撑，系统可在数小时内进行几百万次游戏。它之所以能获得超凡的表现，是因为它见过绝大部分棋局。</li></ul></li><li>有待开发的学习新范式<ul><li>模拟真实世界问题的sim2rel（simulation to real world）是目前一个非常活跃的研究领域。</li></ul></li><li>有限的预测能力<ul><li>目前的人工智能没有常识，但常识至关重要，它制约着我们与世界的联系，它能填补空白，弥补隐含的信息。</li><li>人类常识的特征之一就是这种推断能力，它让我们能够自我定位并采取行动。我认为这是另一种学习形式的结果，我称为“自监督学习”。</li></ul></li><li>人是如何学习的<ul><li>婴儿在生命的最初几个月中学习了大量有关世界运作方式的基础知识。这种学习主要是通过观察来完成的。</li><li>我们能在脑海中设想数千种情形及结果，我们还掌握着上千种人类行为的预测模型，它们丰富了我们的社会智能，使我们能够想象周围人会对我们的行为做出何种反应，或更笼统地说，我们的行为可能对世界造成什么后果。</li><li>如果我们破解了人类和大部分动物通过观察来获得关于世界的大量知识的奥秘，那么我们就可以改进人工智能系统。</li></ul></li><li>如何训练预测系统<ul><li>自监督学习的基本思想是：<strong>获取一个输入后，隐藏该输入的一部分，以此来训练机器从可见部分预测被隐藏部分。</strong>以视频预测为例，我们给机器看一个视频短片，并要求它预测短片接下来的内容。然后我们将接下来的内容作为期望输出提供给机器，让机器据此进行调整，以完善其预测能力。这看起来非常像监督学习，但不同之处在于期望输出是先前被隐藏的输入的一部分。</li><li>自监督学习旨在获取输入（例如视频片段）后，隐藏输入的一部分，并训练一个模型以根据可见部分预测被隐藏部分的内容。</li><li>如果让我在阻碍人工智能发展的所有问题中指出最重要的一个，那就是：当信息无法完全预测、连续且高维时，该如何进行自监督学习。</li></ul></li><li>多重预测和潜在变量<ul><li>自监督模型是一个参数化函数（例如神经网络）yp&#x3D;g（x，w），其中x是观察到的输入部分，yp是预测值。</li><li>关键思想是在f中添加一个参数z，我们称之为潜在变量：yp&#x3D;g（x，z，w）.通过改变给定集合中的z值，输出yp本身也将在某个集合中变化。当z在给定集合中变化时，产生的所有输出的集合构成模型的预测集合.</li><li>现在有几种方法可以训练潜在变量模型，最流行的GAN（generative adversarial networks，生成对抗网络）是2014年由约书亚·本吉奥的学生伊恩·古德费洛（Ian Goodfellow）提出的。</li><li>给定一个示例（x，y），我们从可能值的集合中随机取出一个z值，这将产生一个预测值yp。由于z是随机选取的，因此预测值yp等于所期待的y值的可能性很小。GAN的想法是引入第二个网络，它被称为“判别网络”，以判断预测值yp是否在合理的输出集合中。我们可以将判别网络视为一个可训练的成本函数。对判别网络进行训练是为了使与示例相关的输出（x，y）的成本降低，使其他所有观察结果的成本增高。</li><li>一个GAN由两个同时训练的网络组成，一个是生成器，另一个是判别器。</li><li>生成器获取观测值x（例如视频短片的原始片段），从潜在变量z（一个向量）中随机抽取一个值，并产生预测值yp。该预测由判别网络进行评估。判别网络是一种可训练的成本函数。</li><li>GAN和更广泛的现代生成模型在创意辅助方面有许多应用，比如旧电影着色、图像分辨率的提高、图像处理和合成工具。有些人也将它们用于声音合成和音乐创作。</li><li>由于GAN的训练是无监督的，因此有希望在有监督学习阶段之前使用对抗的方式对系统进行预训练，我们希望能够借此减少此过程中所需示例的数量。但到目前为止，这些方法尚不能提升视觉系统的性能。</li><li>此外，还没有人找到利用它们生成文本的方法。GAN更偏向于像图像一样的连续数据，而不是像文本一样的离散数据。</li></ul></li><li>赋予机器预测能力<ul><li>我们必须依靠现象学模型，根据观察到的数据来预测我们感兴趣的变量，而不能求助于变量之间因果关系的简化模型。</li><li>计划一个动作序列的学习模型是很多实验室深入研究的一个课题，例如FAIR、加州大学伯克利分校、谷歌及其子公司DeepMind以及其他一些实验室。但是，我们所有人都面临着相同的障碍：预测很困难，因为世界不是完全可预测的。</li></ul></li><li>系统智能接近人类智能任重而道远<ul><li>自主智能体的体系结构<ul><li>到目前为止，我们描述的系统都是围绕着自然信号的感知和解释进行的。</li><li>强化学习试图将感知和行动整合到一个单一学习范式中。</li><li>人类的行为有两种机制驱动，第一种机制是刺激——响应类型的反应机制，该机制主导我们完成不经过思考即可执行的动作。第二种机制是仔细思考类的，涉及我们的世界模型和计划能力。</li><li>这两种思维和行动方式就是著名心理学家、诺贝尔经济学奖获得者丹尼尔·卡尼曼（Daniel Kahneman）所称的“系统1”和“系统2”。系统1的某些行为是与生俱来的，例如，当物体快速接近我们的面部时，我们会不由自主地闭上眼睛；但大多数行为是习得的。第二种机制引发的行为涉及意识和反思性推理过程。</li><li>智能体通过对环境采取行动，学会最大限度地减少痛苦，获得最大的快乐来满足自己的冲动。</li></ul></li><li>深度学习和推理：动态网络</li></ul></li><li>集成电路创新的爆炸式增长</li><li>人工智能的未来</li></ul><p><font face="黑体" size=6 color=MediumPurple>第十章 隐忧与未来</font></p><ul><li>人工智能将改变社会和经济<ul><li>人工智能也是如此，受到威胁的职业数量增加得越快，技术在经济中的传播速度就越慢。</li></ul></li><li>人工智能创新的生态系统</li><li>谁将从革命中受益</li><li>军事失控的风险</li><li>危险警报：人工智能的滥用</li><li>如何解释人工智能<ul><li>一些悲观主义者认为深度学习系统是“黑匣子”，但他们错了。工程师可以深入检查神经网络的功能，包括所有的细节。诚然，当神经网络具有数百万个单位和数十亿个连接时，似乎很难完全理解它的一个决策，但这不正是所有智能决策的特点吗？</li></ul></li><li>理解人类智能</li><li>大脑只是一部机器吗<ul><li>“所有重大的科学革命都有一个共同点，那就是它们都把人类的傲慢从一个又一个先前坚信我们是宇宙中心的信念基座上拉下来。”西格蒙德·弗洛伊德（Sigmund Freud）</li></ul></li><li>所有模型都是错的</li><li>担忧的声音</li><li>人工智能并不万能</li><li>大脑的学习机制<ul><li>数学家弗拉基米尔·瓦普尼克规范了机器学习的统计理论，该理论规定了系统可以从数据中学习概念的条件，认为要使一个实体具备学习能力，就必须让其专攻一个有限的任务领域。</li></ul></li><li>机器能否产生意识</li><li>语言在思维中的作用</li><li>机器人想要获得权力吗<ul><li>我们对机器人想要获得权力的恐惧主要来自人性特质在机器上的投射。</li><li>除了对统治的渴望，为了人类物种（或基因）的生存，我们的许多冲动和情感已通过进化建立了起来，其中包括好奇心，对探索的渴望，竞争力，屈服，渴望与我们的同类接触，爱，仇恨，掠食，以及我们对家庭成员、我们的部族、我们的文化、我们的国家的偏爱，没有这些冲动和情感的人、动物或机器也都可以是有智慧的。</li></ul></li><li>价值观的统一<ul><li>艾萨克·阿西莫夫（Isaac Asimov）机器人的三大法则：</li><li>• 机器人不得伤害人类，也不得因其不作为而使人类受到伤害。</li><li>• 除非违背第一法则，否则机器人必须服从人类的命令。</li><li>• 在不违背第一或第二法则的情况下，机器人必须保护自己。</li></ul></li><li>新的疆界</li><li>智力科学<ul><li>人工智能研究仍处于创新阶段，它还算不上是一门科学，我们尚未总结出一般性智力理论。目前仅有一种学习理论，但这个理论仅限于监督学习，它为我们设定了可能性的极限，但并没有告诉我们大脑运作机制的细节，也没有告诉我们如何进行正确的自监督学习的方法，尽管自监督学习正是它自己的本质特征。</li></ul></li></ul><p><font face="黑体" size=6 color=MediumPurple> 结语 </font></p><p>不要害怕被机器超越。几个世纪以来，人类已经习惯自己的生理和心理能力被其他工具超越了：打磨过的石头和刀具比牙齿更坚硬；耕畜、拖拉机和挖掘机比我们的体力更强；马、汽车、飞机比我们的双脚移动得更快；计算机的计算速度比人脑更快。技术发现提升了我们自身的能力，机器智能也将延展人类智能。</p><hr><h1 id="《宇宙》"><a href="#《宇宙》" class="headerlink" title="《宇宙》"></a>《宇宙》</h1><p>时间：2022.10<br>关键词：【美国】卡尔·萨根&#x2F;宇宙&#x2F;天文&#x2F;科学科普（电子书）</p><p>简介:《宇宙》由知名天文学家卡尔·萨根所著，是影响深远的一本天文科普名著，是豆瓣9.5分同名传奇纪录片的姊妹篇。《宇宙》一书将科学思辨和人文精神结合，从我们身边的锁事追溯到万物的开端，从浩渺的宇宙视角审视人类自身。作者在天文、生物、化学和地理学之间进行“异花授粉”，将科学与历史、艺术、人类学和哲学交织，向我们描述了宇宙了前生今世，帮助读者拥抱科学，了解人在宇宙中的位置。</p><hr><p>卡尔·萨根</p><p>卡尔·萨根曾担任康奈尔大学天文学和空间科学大卫·邓肯教授一职，也是行星研究实验室主任。他在水手号、海盗号、旅行者号和伽利略号系列太空航天器的深空探索中发挥了领导作用，并因此两次获得美国国家航空航天局（NASA）颁发的杰出科学成就奖章和一次杰出公共服务奖章。</p><p>他的系列电视纪录片《宇宙》获得了艾美奖和皮博迪奖，创下了美国公共电视收看纪录，伴随纪录片出版的书籍《宇宙》，成为了英语出版界最畅销的科普图书之一。由于他在科学、文学、教育和环境保护上的突出贡献，萨根博士获得了普利策奖、奥斯特奖和其他许多奖项，还有美国各所高校大学颁发的二十个荣誉学位。萨根博士去世后，美国国家科学基金会追授他最高荣誉奖，称“他的研究改变了行星科学……他给予人类的礼物价值无可估量。”</p><p>萨根博士于1996年12月20日逝世。</p><hr><p>之前见过的非常美的关于天文学的句子都是卡尔·萨根所写的，我也买了《暗淡蓝点》和《布罗卡的脑》纸质书，都在家里吃灰呢，一直也没有读。这段时间在读科学科普类的书，并且在微信读书中《我们为什么要睡觉？》一书是需要付费会员才能读的，于是我买了微信读书的会员，趁着这个月的会员，读几本会员专享书。</p><p>这个月的学习和生活的任务比较多，《睡觉？》一书也读了好久才读完的，不知道还能拿出多少时间来读《宇宙》。</p><hr><p>拖拖拉拉地《宇宙》一书读完了，这段时间确实是太忙了，没有很多空闲时间，都是吃饭的零碎时间读的这本书，感觉有点浪费了这本书！！</p><p><font face="黑体" size=6 color=MediumPurple>前言</font></p><p>终有一日，今天的未知之谜会得到解开，但那需要漫长的勤勉研究。人类寿命有限，一个人穷尽毕生之力也不足以攻克天空这如此巨大的课题。……因此，唯有经过岁月和持续数代的研究，此等知识才能逐渐显现。终有一日，我们的子孙会惊讶于他们的先人竟不了解那些无比浅薄的常识……待到谜团揭开之时，我们早已被遗忘。如果宇宙无法为人类世代提供无穷无尽的谜题，那它就实在太渺小，太可悲了……大自然不会一下子彰显它的全部奥秘。                       ——塞涅卡，《自然问题》卷七，1世纪</p><blockquote><ul><li>科学揭示出的宇宙如此古老，如此浩瀚，以至于人类在其中的戏份乍看之下无足轻重，我们和宇宙的距离反倒显得更远，甚至变得遥不可及，星空不再与日常事务有什么相干。</li><li>我们身处的时代处于决定人类文明走向，甚至物种存亡的十字路口。不论去向何方，我们的命运都与科学密不可分。</li><li>科学不断发展，永无终结，不存在什么终极真理能让所有科学家解甲归田。</li><li>技术的发展既能帮人类进一步探索宇宙的奇迹，也能让地球陷入混乱无序。我们有幸生于史上最重要的时代之一，甚至有幸决定历史的走向。</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>第一章 星海之滨</font></p><p>最初创造成形的人被唤作“笑巫”“夜巫”“不洁者”和“黑巫”……他们有智慧，通晓天地间的一切。他们睁开眼，便洞悉万物。他们依次望向天堂的穹顶、大地的圆脸……（然后造物主说：）“他们无所不知……该拿他们怎么办呢？让他们的眼睛只能顾及近旁；让他们只看得到大地之脸的片段吧！……我们所造的，不该是简单的自然生物吗？难道要让他们也成神吗？”——《波波尔·乌》[1]，基切玛雅人</p><p>已知有涯，而未知无涯；我们如同立于荒岛之上，被苍茫大海所困。每一代人的任务，都是填出一小块新的陆地。——T.H.赫胥黎，1887年[1]《波波尔·乌》：古代基切玛雅人的圣书，成书于16世纪。</p><blockquote><ul><li>宇宙即一切。过去是，将来亦如是。对宇宙的遐思即便再卑微渺小，也能撼动人心——那是脊柱上传来的刺痛、嗓子里的哽咽，或者某种模模糊糊、从高处坠落的久远记忆。如此，我们知道，那最伟大的谜团近了。</li><li><strong>地球位于星海边缘。</strong>人类的绝大部分知识都在这里学得。如今，我们刚向海洋探出一小步，被海水濡湿了脚趾——至多到脚踝。怡人的水温，宛如海洋的呼唤。内心深处有个声音说，那里是起源，是游子渴望回归的故乡。这渴望可能会触犯某些神明，但我相信它并无不敬之意。</li><li>人类已经进化到了以学习为乐，并以获取知识为生存先决条件的地步。我相信，人类的未来取决于对宇宙的了解程度。毕竟苍穹浩瀚，我们不过是晨空中一粒飞扬的尘埃。</li><li>太初时，没有星系、恒星和行星，没有生命和文明，只有一个充满所有空间的火球。从大爆炸的混沌到宇宙的秩序，我们有幸瞥见了质能之间最叹为观止的转换。在找到其他智慧生物前，人类就是这转换最不可思议的产物。作为大爆炸的子嗣，人类也正在理解，并逐步改造这个孕育了他们的世界。</li></ul></blockquote><p>从宇宙的角度看地球，我们只是很小，很微不足道的一点。但是人类这个人物种年轻、好奇、勇敢，而且充满希望，人类正在从地球出发，向外探索，向未知进发。宇宙中的星系各不一样，有超大体积但却脆弱如肥皂泡，有小如城镇但密度极大，有谢恒星茕茕孑立，有的有自己的伴星、三星甚至几十颗恒星系团，有照亮整个星系的超新星爆发，有不可见的黑洞，年轻的恒星发蓝光，高热量；中年的恒星发黄光，光源稳定；红色的恒星往往年事已高；还有挣扎在死亡边缘的白矮星、黑矮星。</p><p>地中海文明，亚历山大城</p><p><font face="黑体" size=6 color=MediumPurple>第二章 宇宙的复调</font></p><p>地球上所有存在或曾经存在的生物，可能都从某种原始形态演化而来。那是生命的第一次呼吸……这是种动人的生命观……当这颗星球按照万有引力的法则循环往复时，生命从最最简单的形式演化而成，而且将继续演化出数之不尽、美轮美奂，又无比奇妙的形式。——查尔斯·达尔文，《物种起源》，1859年</p><blockquote><ul><li>演化是通过变异和自然选择进行的。</li><li>迄今为止，我们听见的生命之音只回荡在这个小小的世界里。但我们终于开始侧耳倾听宇宙赋格曲的其他声音了。</li></ul></blockquote><p>自然选择，人类选择</p><p>“平家蟹”的故事</p><p>这一章主要是讲的自然选择，为什么人类会但是在地球上，为什么地球孕育了生命，其他星系中会孕育生命吗？</p><p><font face="黑体" size=6 color=MediumPurple>第三章 和谐世界</font></p><p>我们不该问鸟儿为什么歌唱，因为那是它们与生俱来的欢快天性。同理，我们不该问为什么人类要费尽心思探寻天空的奥秘……自然的参差多态之美，天空无穷无尽的奥妙，都是为了使人类的大脑永远不会缺少新鲜的营养。——约翰内斯·开普勒，《宇宙的奥秘》</p><blockquote><ul><li>如果我们生活在一个什么都不会改变的星球上，那就没多少事情可做。少了需要解决的新问题，科学会失去发展动力。如果我们生活在一个无法预测的世界里，所见的一切都在以完全随机，或者太过复杂的方式变化，抓不住事物背后的规律，科学同样会停滞不前。但我们生活的宇宙介于两者之间。这里没有一成不变之事，万物的变化又有迹可循。抛向天空的棍子总会落下，西沉的太阳第二天黎明总在东方升起。我们可以从这些叫作自然规律的东西里窥出些门道，进而发展科学，再用科学来改善生活。</li><li>牛顿：“我不知道世人怎么看我；但我就像个在海边玩耍的儿童，为不时找到些漂亮卵石和贝壳而高兴不已，却对浩瀚的真理之海浑然不觉。”</li></ul></blockquote><p>这一章讲的是自然规律，环境不是一成不变的也不是无规则的变化的，人们一直在演讲这些变化的规律，这就是自然规律，这就是自然科学。</p><p>占星术</p><p>托勒密的“地心说”，哥白尼的“日心说”，开普勒的“行星运动的三大定律”，牛顿的万有引力，</p><p><font face="黑体" size=6 color=MediumPurple>第四章 天堂和地域</font></p><p>天堂之门毗连地狱之门，且完全相同。——尼可斯·卡赞扎基斯，《基督的最后诱惑》</p><blockquote><ul><li>地球是个可爱的，至少还算比较平静的地方。这里万事万物都在变化，但速度缓慢。我们可以平静地度过一生，其间遭遇的最大灾难也不过一场风暴。正因如此，我们变得自大、怠惰，忘了居安思危。但大自然的历史记录清晰地显示，世界曾经遭到过毁灭。其实，就算没有自然灾难，新发展出的技术可能也会让人类有意无意地迈向自我毁灭。而那些更古老的过去，都完好地记录在其他星球饱经摧残的地貌里。灾难只是个时间问题，这并非危言耸听。百年难得一见的劫难，放在千年里可能难以避免。实际上，哪怕只看地球，哪怕只看这个世纪，我们也能观察到一些非常独特的自然事件。</li><li>地球是颗可爱的蓝星，也是我们唯一的家。金星太热，火星太冷，只有地球堪称天堂。毕竟，这是我们诞生和演化的地方。但地球的气候可能并不稳定。这颗可怜的星球未必经得起人类反复折腾。我们会不会把地球变成金星似的炼狱，或火星般的冰球？答案很简单：没人知道。对全球气候的研究，以及对地球和其他行星的比较研究都还处在起步阶段，而且资金匮乏，维持艰难。与此同时，我们还在一边污染大气，一边增亮大地，完全没意识到长此以往会带来无法预料的后果。</li><li>人类诞生于几百万年前，那时地球已步入中年多时。这颗46亿岁的行星已经告别了它躁动不安、多灾多难的青春岁月。但人类的出现代表了一种全新的，也许是决定性的因素。智力和科技发展赋予了人类改变环境的力量。然而这份力量应该如何使用？在影响整个人类大家庭的事情上，我们真的应该放任自己的无知和狂妄吗？我们是否将短期的利益，置于地球的福祉之上？我们要不要学着把目光放长远一点，为了我们的子孙后代，去学习、去了解这颗星球复杂的生态系统？地球是个渺小又脆弱的世界，它值得我们珍惜。</li></ul></blockquote><p>通古斯事件</p><p>彗星</p><p>金星</p><p>对我们来说，地球就是天堂，地球之外就是地狱，但人类却正在肆无忌惮的破坏天堂，天堂会变成地域吗？</p><p><font face="黑体" size=6 color=MediumPurple>第五章 红星蓝调</font></p><p>他在众神的果园里注视着运河……——《埃努玛·埃利什》，苏美尔文明，约公元前2500年</p><p>同意哥白尼观点的人认为地球是颗行星，和其他行星一样绕着太阳转动，被阳光照亮。他们难免会偶尔陷入幻想……其他行星上是否也存在居民，且有自己的服装、家具……但我们总是倾向于认为，研究大自然在别处的创造注定徒劳无功，因为人类的猜想永远无法被证实……不过前段时间我又对这个问题仔细思考了一番（我并不自认比伟大的前人更优秀，只是有幸出生在他们之后），感到它并非完全不切实际，困难也不是绝对无法克服，只不过可供我们推测的余地实在太大了。——克里斯蒂安·惠更斯，《关于行星世界及其居民和产物的新猜想》，约1690年</p><blockquote><ul><li>我是水、碳和其他有机分子的合成体，名叫卡尔·萨根。你也由几乎完全相同的物质组成，只是名字不一样。但这就是全部了？我们只是分子的聚合，仅此而已？有些人觉得这种说法有损人类自尊。然而在我看来，如果宇宙允许分子机器演化成你我这样复杂而精妙的生物，其实是莫大的荣光。</li><li>罗威尔认为火星人开凿了运河，这种幻想也许，只是也许，是一种预言。也许有一天，火星会完成地球化。人类会建立永久居住点，与那颗红星和谐相处，把罗威尔的幻想化为现实。到那一天，火星人，就是我们。</li></ul></blockquote><p>火星上有没有生命，地球外有没有外星人？这一切都是未知，但我们人类对外星人一直津津乐道。</p><p><font face="黑体" size=6 color=MediumPurple>第六章 旅行者的故事</font></p><p>世界多重，抑或唯一？此乃自然研究最深奥问题之一。——阿尔伯特·马格努斯，13世纪</p><p>我们可以离开沉闷的大地，从高处下望，想一想大自然是否为这片小小的尘埃耗尽了她所有的力量与美感。就像旅人去往遥远异国，这种方式能让我们更好地审视家园，为万事万物的价值做出准确的判断。当我们意识到还有许许多多的世界与地球类似，同样有人居住时，就不会再对那些号称“伟大”的事物如此顶礼膜拜，也会懂得许多庸庸碌碌之人关注的只是鸡毛蒜皮之事。——克里斯蒂安·惠更斯，《已发现的天体世界》，约1690年</p><p><font face="黑体" size=6 color=MediumPurple>第七章 夜空之脊</font></p><p>多明了件事理，胜过当波斯人的王。——阿夫季拉的德谟克利特</p><p>如果一个人能坦诚看待“神性”这个词，就不得不承认“神”，很大程度上是用来描述那些他亲眼看见，却不理解、不明白的遥远事物的；当事物的原委模糊不清，当已知无法解释未知时，他就用起了这个词来。事物的起因结果总是环环相扣，一旦他丢失了线索，或者跟不上事态的发展，就把一切都归因于他的神。这是不必费心思考就解决困难的好办法……他认为是他的神引发了某种现象……除了闭目塞听，虔敬于内心早已熟识的神明之外，他还做过别的努力吗？——保罗·海因里希·迪特里希，冯·霍尔巴赫男爵，《自然的体系》，伦敦，1770年</p><img src = "https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-13_20-06-25.png"><p><font face="黑体" size=6 color=MediumPurple>第八章 时空之旅</font></p><p>我们深爱星辰，乃至不惧夜的黑。——两位天文爱好者的墓志铭</p><blockquote><ul><li>演化的最终结果取决于初始条件，特别是密度与分布。但只要初始条件合理，就会生成包含约十个行星的星系，其中类地行星接近太阳，类木行星则处于更远的地方，看起来与太阳系类似。而在初始条件变更后，我们还能见到各种不同的情形：有些情形中不存在行星——只有零碎的小行星带；或者恒星附近存在巨大的类木行星；要不就是类木行星吸收了足够多的气体和尘埃，成为另一颗恒星，于是该星系就变成了双星系统。虽然下结论为时过早，不过看起来银河系内恒星系存在行星系统的概率很高，而且种类五花八门。我们认为，所有的恒星都由这样的气体和尘埃云生成。银河系里等待探索的行星系统大概数以千亿计。</li><li>放眼宇宙，每一颗行星的未来都由它们当下的变化决定。而我们的小小星球，恰好处在历史的重要分岔口。这个岔口的重要性不亚于2500年前爱奥尼亚科学家和神秘主义者之间的那场对决。无论我们在这个时代做出什么抉择，都将深深影响一代又一代子孙，以及他们通往群星的命运。</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>第九章 恒星的一生</font></p><p>苍穹在上，繁星点点。我们常躺在地上眺望群星，讨论它们到底是被造出来的，还是自己冒出来的。——马克·吐温，《哈克贝利·费恩历险记》</p><p>我有……一种渴望……我可以这么说吗？……像是宗教。然后我会走出门，去看星夜。——文森特·凡·高</p><blockquote><ul><li>恒星是宇宙厨房，氢原子在那里被烹饪成更重的原子。恒星由星际气体和尘埃云凝成。氢是那些云团的主要组成部分，起源于大爆炸。</li><li>所以如果你真的想从头开始做一个苹果派，首先得创造宇宙。</li><li>答案在那些电子云上。我胳膊肘原子的外部带着负电荷，桌子也一样。负电荷会彼此排斥。我的手没办法穿过桌子，就是因为原子核周围有电子，而且它们力量很强。</li><li>太阳核心的氢氦反应不只表现在可见光的光子亮度上，它还产生了更神秘、更鬼魅的中微子辐射。和光子一样，中微子没有质量，以光速传播。但中微子不是光子。它不算任何一种光。和质子、电子还有中子一样，中微子有它的固有角动量或者说自旋，光子则完全没有自旋。对中微子来说，物质是透明的。它可以毫不费力地穿过地球和太阳，只有很小一部分会遭到阻截。</li><li>银河是未经探索的神奇大陆，充满了以星辰为尺度的奇异事物。</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>第十章 永恒的尽头</font></p><p>晴朗的夜空中，高悬着光辉灿烂的大道，叫作银河。它通往雷电之主的寓所与宫殿……那些声名显赫、威力无比的诸神也定居于此。我斗胆称之为天庭的官道。——奥维德，《变形记》，罗马，1世纪</p><p>有些愚人认为造物主创造了世界。这种神创之论缺乏智识，应当被摈弃。如果世界真为神明所造，那世界得到创造之前，他在哪儿呢？……没有原材料，造物主如何创造世界？如果认为他先创造了原材料，然后再创造了世界，那这个问题就会无穷无尽地重复……要明白这个世界不是被神创造的。它就像时间一样，既没有开始，也不会终结。它基于这些原理……——摩诃婆罗那（意为“伟大的传说”），耆那，印度，9世纪</p><blockquote><ul><li>当某个物体以极高的速度接近时，光谱线会发生蓝移，高速远离时会发生红移。我们在遥远星系中观察到的光谱线红移现象得到了多普勒效应的解释，而这种现象是宇宙学的关键。</li><li>引力红移就是其中一例。当光在逃离强引力场时，会损失一部分能量，在遥远的观测者看来，那束成功逃离的光线波长会变得比之前更长，颜色更红。</li><li>微弱的静态无线电波从宇宙的各个方向均匀地辐射而来，如果大爆炸是真的，那么它的辐射冷却至今，就该是这个强度。</li><li>这两种现代宇宙论都谈不上令人欢欣鼓舞。第一种里，宇宙一二百亿年前诞生，然后开始永无止境地膨胀，星系彼此不断远离，直到完全从视野中消失。星系天文学就此关张。很久很久以后，群星逐渐冷却熄灭。随着物质本身不断衰变，宇宙的最终命运是变成由基本粒子组成薄雾，再无他物。另一种假说里，宇宙不断振荡，无始无终。我们被困在它死亡与重生的无限循环中，没有任何信息能够翻越周期间的藩篱。无论上一个宇宙周期演化出了什么星系、恒星、行星、生命或者文明，有关它们的任何信息都无法通过大爆炸流入宇宙的这个周期。在这两种宇宙观里，宇宙的命运看起来都令人沮丧，但它涉及的时空尺度巨大。我们也许可以从中获得些安慰。宇宙的最终命运远在几百亿年后，甚至更遥远的未来。我们人类，还有我们的继承者——无论他们是谁——都可以在宇宙消亡前的几百亿年里，完成各种各样的伟业。</li><li>我们的宇宙，到底在无限地膨胀，还是无限地重置，其实有几种办法查清答案：计算宇宙中物质的总量，或者观察宇宙的边缘。</li><li>当代的射电望远镜非常灵敏，甚至能探测到遥远类星体微弱到只有千万亿分之一瓦的辐射量。地球上所有射电望远镜接收到的来自太阳系外的能量，还没有一片雪花落地产生的多。无论是探测宇宙背景辐射、分析类星体，还是寻找外太空智慧生物信号等其他方面，射电天文学家处理的能量几乎称得上虚无缥缈。</li><li>三维物体的二维投射，无法完美还原出它的本来相貌。这就是几何物体降低维度的代价。</li><li>一个在第三维度卷曲的二维宇宙，不存在中心点——至少不在球体表面。它位于无法进入的球体内部，位于三维空间。球体表面积有限，但并没有边界。边界之外是什么，这个问题对平面生物而言没有意义。他们无法独立逃离二维宇宙。</li><li>20世纪20年代，人们在M31相反的方向发现了一对遥远的螺旋星系。他们想，那会不会其实是银河系和M31？就像从宇宙的另一个方向上看到了自己的后脑勺？</li><li>之前提过，只要能在虫洞中穿行，我们就可能出现在宇宙的另一个地方而无须长途跋涉。你可以把这些虫洞想象成贯穿第四维度的管道。虫洞存在与否还是个未知数，但如果存在，它们的出入口位置会永远固定吗？它们会不会通往其他宇宙，去那些我们原本不可能到达的地方？据目前所知，可能有许许多多的宇宙。也许它们在某种意义上彼此嵌套。</li><li>有一种观点怪异而迷人，它是科学和宗教里最精妙的猜想之一，但完全没有得到证明——可能永远也不会得到证明。这个猜想认为，宇宙有无限的嵌套结构。如果我们能窥视基本粒子，比如电子的内部，会发现那里也存在完全封闭的宇宙，大量更小的基本粒子组成了微观星系和其他更小的结构。而这个小宇宙的内部，同样包含了更更小的宇宙，就这样无穷无尽地嵌套下去，无限向下递归。向上也是同样。我们熟悉的星系、恒星、行星和人类，也不过是上一个宇宙的基本粒子，是另一个无限递归中的一环。</li><li>要进入那些宇宙，我们必须以某种方式穿透第四个物理维度——这当然不是件容易的事，但黑洞给了我们一条可能的道路。太阳系附近也许就存在小型黑洞。站在永恒的边缘，我们就要投身其中……</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>第十一章 记忆挥之不去</font></p><p>天空和大地的命运已然注定，沟渠与运河亦各行其道，底格里斯与幼发拉底的河堤也已经建立；我们还能做什么？我们还能建什么？阿奴纳奇，伟大的天神啊，我们还能做什么？——亚述人关于创造人类的记载，约公元前800年</p><p>无论到底是哪位神祇，他因此决定把秩序赋予世界，并削改混沌，使之成为宇宙的部分。他先把地球塑造成了巨大的球体，让它从各个方向看起来都形似……如此，没有一处地方缺乏特有的生命形式。群星和圣灵占据了天堂的基底，闪亮的游鱼以大海为家，大地接纳了野兽，流动的空气迎来了鸟儿……随后人类诞生……尽管其他动物都面朝大地，神祇却赐给了人类一张仰起的面孔，叫他挺直身子，望向天空。——奥维德，《变形记》，1世纪</p><blockquote><ul><li>银河系数百万颗存在智慧文明的星球中，有这样一个世界。它是整个恒星系中唯一一颗地表富含大量液态水的行星。这颗星球演化出的生物，自然而然地适应了它们的生存环境：他们有的长着八条可以抓取物体的柔软附肢；有的通过改变身上明暗斑驳的图案交流；陆地上一种聪明的小动物，还会乘木制或者金属质地的载具在海洋中短暂停留。不过我们要谈论的，是这颗星球上最伟大的生物之一。它们是优雅又敏感的深海之主：鲸鱼。</li><li>大脑皮层的右半球主要负责图形识别、直觉、感知和创造力。左半球主管理智、分析和批判性思维。两个半球分工明确，这就是人类思维的本质。它们协同合作，一边产生各种各样的想法，另一边测试其有效性。左右脑交流的通道是胼胝体，这巨大的神经束如同桥梁，连接了创造力和分析力，而这两者都是理解世界所不可或缺的。</li><li>如今，地球上有大量的跨国无线电、电视和雷达电波，如果用一些特定频段来观察地球，你甚至会发现它已经成了太阳系中最强大的射电源，比木星、比太阳更加耀眼。如果有外星文明在监视地球的无线电波并接收到了这些信号，他们一定能得出结论：那颗行星最近发生了一些有趣的事情。</li><li>携带金唱片的“旅行者”系列速度慢得令人揪心。它们是人类有史以来最快的飞行器，然而要数万年后才能飞得比最近的恒星系更远。与此同时，任何刚刚播完的电视节目只要几个小时就能在土星附近追上已经先行好多年的“旅行者”。只要4年多一点，它们就可以抵达半人马阿尔法。如果几十或者几百年后宇宙中有人收到了我们的电视广播，希望他们能对人类做出个好评价。这个物种是宇宙在经历150亿年的演化后局部物质转化成意识的结果。智能赋予了人类可畏的力量，然而我们究竟有没有智能到可以避免自我毁灭，目前来看还是个问题。但至少我们中的一些人正为此竭尽全力。希望从宇宙的尺度来看，地球很快就能和平统一，让所有生灵都得到尊重。唯有这样，它才能准备好迈出新的一步，成为银河文明社会中的一员。</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>第十二章 银河百科全书</font></p><p>“你是谁？从哪儿来？我从未见过你这样的东西。”造物者渡鸦看着人类……惊讶地发现这个新生物居然和他如此相似。——爱斯基摩创世神话</p><p>自然的主宰……使我们目前无法在地球上与宇宙中的其他神圣天体建立起联系，很可能他也切断了那些行星和星系彼此间的联系……我们的好奇心被观察激起，却无法得到满足……彰显在整个自然界中的智慧，应该不愿只让我们彼此遥望，吊足胃口……却以失望而告终……因此，认为现状只是我们的起点，它正在为将来的进一步发展做准备和测试，实在是自然而然的事情……——科林·麦克劳林，1748年</p><blockquote><ul><li>我们已经向群星发射了4台航天器，分别是“先驱者”10号和11号，“旅行者”1号和2号。它们落后原始，在浩瀚星海间速度形同梦游。不过将来我们会做得更好。我们的航天器会飞得更快，探索目标更明确，而且迟早会载上人类船员。银河系里一定存在许许多多比地球早诞生数百万乃至数十亿年的行星，所以地球会不会已经被外星人拜访过了？我们星球生命诞生后的这几十亿年间，难道就没有一艘来自遥远文明的古怪飞船自天空俯瞰，然后缓缓降落，让五彩斑斓的蜻蜓、好奇的爬行动物、尖叫的灵长类，或者惊叹不已的人类目睹一下技术奇观？这是个自然而然的想法。任何考虑过外星智慧文明的人，不管考虑得多么粗浅，都会想到这个问题。不过，这种事真的发生过吗？解答这个问题的关键在于证据。</li><li>我们需要经得起怀疑论者仔细检查的证据，而不是道听途说的流言，或者一两个人的信誓旦旦。按照这一标准，我们到目前为止还没有见到令人信服的案例证明外星人曾经造访过地球。UFO和古代宇航员之类的传言常常闹得满城风雨，简直让人怀疑地球上到处都是异星来客。我宁愿事情有另一种发展：哪怕只是找到了外星人留下的标记——比如复杂的铭文之类——也会无可辩驳地证明他们存在。更重要的是，那些东西还会成为理解外星人和外星文明的基石。这种渴望，我们古已有之。</li><li>门外汉的胡说八道吓得许多专业人士不敢继续从事这个行当。</li><li>为了和其他文明交流，我们需要超越行星间距，达到恒星系间距的沟通手段。理想情况下，这种交流手段应该具备几个特点。其一是廉价，这样才能收发大量信息；其二是高速，这样才能使跨恒星系的对话成为可能；其三是显眼，这样任何技术文明，无论它们的演化路径为何，都能很快发现信息。有意思的是，这种沟通手段确实存在。那就是射电天文学。</li><li>天上真的有人能和我们对话吗？仅银河系就有3000多亿或者5000亿恒星系，地球真的是唯一一颗有生物存在的星球吗？更可能的情况是宇宙中技术文明并不鲜见，银河系里到处都是熙熙攘攘的发达社会，人类距离最近的外星文明并不遥远——没准我们将来某天接收到的广播，源头就在某颗肉眼可见的恒星系里，从星际尺度来看这几乎就在隔壁。也许当我们仰望星空时，某个微弱的光点附近，有个与我们截然不同的生物，也正悠闲地望着那颗被我们叫作太阳的恒星。</li><li>如果每个文明都在进入技术时代后倾向于自我毁灭，那么放眼银河，我们也许找不到一个可以交流的对象。而且说实话，我们自己做得也不怎么样。</li><li><strong>文明需要经过几十亿年曲折的演化才能出现，毁灭却只要一瞬间的愚蠢。</strong></li><li>雷克方程<ul><li>为了进一步探索这个重大问题，我们可以把银河系中技术文明的大致数量设定为N。这里的技术，指具备射电天文学能力。当然，这个定义有些狭隘。可能有无数的世界诞生了才华横溢的语言学家和诗人，但对射电天文学漠不关心，所以我们收不到他们的消息。</li><li>N是一系列参数相加或者相乘得出的结论，每个参数的基数都必须非常庞大，才能保证大量的文明社会存在。</li><li>N<em>代表银河系的恒星数量；</em></li><li><em>fp代表拥有行星的恒星系比例；</em></li><li><em>ne代表宜居行星的比例；</em></li><li><em>fl代表存在生命的星球比例；</em></li><li><em>fi代表演化出智慧生物的星球比例；</em></li><li><em>fc代表不但存在智慧生物，还诞生了技术文明的星球比例；</em></li><li><em>fL代表了能让技术文明存续的星球比例。</em></li><li><em>现在，让我们写下方程N &#x3D; N</em>fpneflfifcfL。所有的f都是分数，取值在0和1之间，它们会减少N*的最大值。</li></ul></li></ul><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-13_20-23-10.png'><ul><li>什么他们没有出现？有很多可能的答案。其中一个听起来有点和阿利斯塔克还有哥白尼的遗产相悖，但我们可能才是银河的长子。</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>第十三章 谁为地球代言</font></p><p>死亡与奴役正发生在眼前，我为何要费心去探索星辰的奥秘？——阿那克西美尼问毕达哥拉斯，约前600</p><p>与这些宏伟的天体相比，地球只是个小小的舞台。人类所有伟大的工程、史诗般的航海和战争都微不足道。那些王侯将相为了他们的野心，不惜牺牲众人的生命，不过是想成为一个小角落的主人。这真值得他们反思。——克里斯蒂安·惠更斯，《关于行星世界及其居民和产物的新猜想》，约1690年</p><p>让我们回望过去。数不清的年月前，潮起潮落的滩涂里，生命逐渐成形。他挣扎着变成一个又一个不同的形状，攫取了一种又一种不同的力量，终于自信地爬上陆地。经过一代又一代的变化，他控制了天空，也潜入了黑暗的深渊；我们看着他在愤怒和饥饿中重塑自身，看着他越来越像我们。他不断伸展，不断优化，向着难以置信的目标一刻不停地前进。然后，他变成了我们，生命的韵律至今在我们的大脑和动脉中搏动……可以认为过去的一切，不过是序章的开篇，黎明的第一抹曙光。我们可以认为人类思想成就的一切，只是苏醒前的迷梦……从我们的……血脉中，思想将获得解放，他对他人类童年时光的理解，胜过我们今日对自我的认知。未来时间无限，终有一日，那些栖居在我们思想里、藏在肉身中的生物将傲然立于地球之上，仿若那只是小小的脚凳。他会向着群星伸出手，朗声欢笑。——H. G.威尔斯，“发现未来”，《自然》，1902年</p><blockquote><ul><li>我发现宇宙，宛如昨日之事。百万年来，人们的认知都局限于地球。直到我们这个物种历史最近的千分之一，也就是从阿利斯塔克时代至今的短短日子里，我们才不情不愿地意识到，人类居住的并不是宇宙中心，而是一个渺小脆弱的角落。地球漂流在永恒无垠的宇宙之海中，地球之外竟然还有上千亿星系，数十万亿的恒星系。我们鼓起勇气去星海之滨试了试水，发现海水与我们如此相契。我们身上的某种东西，认出宇宙就是家。<strong>我们由星尘所铸。</strong>我们的起源和演化与遥远的天体事件相关。探索宇宙的过程也是发现自我之旅。</li><li>从太空望向地球时，国境线并不明显。</li><li>一个理性的社会，难道不该把更多资金用在分析和预防战争上，而不是为下一场战争做准备么？</li><li>婴儿总是渴望爱抚，年轻人总是有强烈的性冲动。如果这些愿望可以顺遂地实现，成年人组成的社会也许会对侵略、领地意识、仪式行为和社会等级制度嗤之以鼻（虽然儿童在成长过程中很可能需要经历这些爬行动物阶段）。</li><li>我们每个人都可以通过温柔地抱一抱婴儿，为世界做出自己的贡献。</li></ul><img src = 'https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-11-13_20-26-35.png'><ul><li>太初之时，宇宙大爆炸。物质和能量四溢横流，一切混沌无形。没有星系，没有星球，也没有生命。到处是浓稠到无法穿透的黑暗，空间里密布氢原子。随后，气体逐渐凝聚成团，它们是体积比恒星还要大的氢云团。随着最初的核子火焰在气态云团中点燃，第一代恒星诞生，它们点亮了宇宙。不过那时候还没有任何行星受到阳光的照耀，也没有任何生物欣赏天空的光辉。恒星熔炉深处，核聚变炼金术使氢元素化作更重的元素，它们燃烧后的灰烬成了未来行星和生命的原材料。那些大质量的恒星很快就把储存的核燃料挥霍殆尽，在天崩地裂的爆炸中把大部分物质抛回曾经凝结出它们的虚空。恒星间稠密的暗云里，多种元素汇成新云团，成为后几代恒星的温床。它们附近还有更小的云团，这些团块的体积不足以点燃核子火焰，于是逐渐变成了行星。一个由石头和铁组成的不起眼世界也在其中，那就是原始的地球。</li><li>这一切，都是氢原子历经150亿年演化的产物。</li><li>不过我们已经能够清楚地看到，地球上所有的生灵都是银河氢工业的最新产物，都是宇宙漫长演化的成果，它们全都弥足珍贵。宇宙的其他地方可能也存在同样惊人的物质变化，所以聆听天空是明智之举。</li><li>关于叛国与不忠的论调。富裕的民族国家，将不得不接济那些穷国。但就像H.G.威尔斯曾经在一篇文章里说的，我们要么拥抱宇宙，要么一无所有。</li><li>如果人类生存了下去，那么这个时代会因为两个原因而得到铭记：在技术青春期，我们设法避免了自毁；也是在这个时期，我们探索起了星空。</li><li>我们会意识到，要深入太空探索，我们必须代表全地球的人类。我们不应致力于自我毁灭，而是要为生存奋斗：我们需要增加对地球及其居民的了解，同时寻找来自其他地方的生命。太空探索——无论载人还是不载人——需要用上多种技术、强大的组织能力和过人的勇气与胆识，这些也是战争所需的。如果我们在核战爆发前真正实现了裁军，超级大国的军事机构就可以转而从事起这项纯洁的事业来。我们为战争所做的准备，可以相对容易地转化为对宇宙奥秘的追寻。</li><li>大约360万年前，今天坦桑尼亚北部的一座火山喷发，飘飘扬扬的火山灰覆盖了周围的大草原。1979年，古人类学家玛丽·利基在那里发现了灰烬中的足印，她相信那些足迹属于原始的人类，甚至可能是今天所有人类的老祖宗。而在3.8万千米之外，另一颗星球的“静海”地区，人类在欢呼声中留下了又一个足印。我们已经走过了360万年、46亿年、150亿年。</li><li>我们是产生了自我意识的局部宇宙。我们已经开始思忖起了自己源于何方：我们由星辰所铸，如今眺望群星；我们由100亿亿亿亿个原子组合而来，而今考虑起了这些原子的悠久演化；我们回溯着意识（至少在地球上）诞生的漫漫长路。我们忠于地球及其物种。我们为地球代言。我们要生存下去。因为这责任不仅属于我们，也属于那古老而浩瀚的宇宙，属于我们的起源之地。</li></ul></blockquote><hr><h1 id="《我们为什么要睡觉？》"><a href="#《我们为什么要睡觉？》" class="headerlink" title="《我们为什么要睡觉？》"></a>《我们为什么要睡觉？》</h1><p>时间：2022.10<br>关键词：【英国】马修·沃克&#x2F;睡眠&#x2F;实验&#x2F;理论&#x2F;科学科普（电子书）</p><p>简介：你认为自己最近睡眠充足吗？你还记得上一次自然醒后神清气爽的感觉吗？不用怀疑，我们正在进入一个失眠已经成为流行病的时代。作为一名杰出的神经科学家，沃克对生物的睡眠行为充满好奇，这促使他成了睡眠研究方面的专家。本书中，他总结了人类有史以来的睡眠研究成果，以及前沿的科学突破，告诉我们睡眠的运行机制、睡眠不足的坏处、睡眠与做梦的有益功能，以及睡眠对专业人士个人能力提升的惊人影响。我们的身体健康、心理健康、情商智商、记忆力、运动力、学习力、生产力、创造力、吸引力，甚至食欲，这些让日间生活丰富多彩的能力，原来都与夜间那场睡眠有着密不可分的关系。现在，你知道我们为什么需要充足的睡眠了吧。打开这本书，看平凡的睡眠如何带来非凡的生命能量，顶尖科学对于睡眠的所有了解及如何睡好觉的诀窍都将在这部关于睡眠的“百科全书”中逐一揭晓。</p><hr><p>这段时间读了太多小说了，感觉有些疲惫了。又打算拾起已经被放下很久的“科学科普”类书籍了！</p><p>“睡眠”对每个人来说都是一件非常重要的事情，饮食、运动和睡眠是健康的三大要素，睡眠已经被我忽视了很久了。从电子产品侵入了我的生活开始，睡眠的时间就在不断地被压缩了。从高中以来，学习以及被我放在第一位太久了。大学以来，睡眠的时间更是被不断地压缩，每天的睡觉几乎不会超过7小时！推免之后的时间，对我来说也许是个很不错的时期。这段时间，健康是第一位的，也希望我在这段时间能养成一个非常好的习惯！</p><p>读完这本书，我也在做出我的行动，重视睡眠，晚间睡眠以7小时为红线，整日睡眠争取达到8小时！！</p><p><font face="黑体" size=5 color=MediumPurple>导言</font></p><blockquote><ul><li>健康是1，家庭、事业、财富都是0；没有前面的1，后面有再多0也毫无意义，这道理浅显易懂，可知易行难。</li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>01 睡吧……</font></p><blockquote><ul><li><p>人类实际上是唯一一种会在没有合理益处的情况下故意剥夺自己睡眠的物种。</p></li><li><p>睡眠是健康三要素（睡眠、饮食、运动）中最重要的。</p></li><li><p>答案不过是通往下一个问题的跳板。</p></li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>02 咖啡因、时差和褪黑激素 怎样控制你的睡眠节奏</font></p><blockquote><ul><li><p>第一个因素，是你大脑深处的24小时生物钟发射出的信号。</p></li><li><p>第二个因素，是一种在你的大脑中积聚的化学物质，会制造出“睡眠压力”。</p></li><li><p>褪黑激素通过系统地向整个机体发出“天黑了”的信号来帮助调节睡眠发生的时间安排。但是褪黑激素对睡眠本身的形成几乎不产生影响</p></li><li><p>当比赛（即睡眠）开始，计时员（褪黑激素）会控制比赛何时开始，但不会参与进去。</p></li><li><p>当向东旅行时，要适应新的时区比向西旅行要困难得多。</p></li><li><p>第二个因素就是睡眠压力。此时此刻，一种叫作腺苷的化学物质正在你的大脑中逐渐积累。它会随着每一分钟的流逝而不断增加。</p></li><li><p>让你感觉更加警觉和清醒的化学物质来人为地降低腺苷的睡眠信号：咖啡因。咖啡因不是一种保健品。相反，它是世界上使用最广泛的（被滥用的）精神兴奋剂。</p></li><li><p>通过胁迫和占据这些受体，咖啡因阻断了腺苷向大脑正常传递的困觉信号。结果是：尽管腺苷水平高到正常情况下足以让你入睡，咖啡因还是会诱使你感觉十分清醒。</p></li><li><p>咖啡因的平均半衰期为5~7小时。</p></li><li><p>年龄越大，大脑和身体清除咖啡因需要的时间也就越长，因此随着年龄增长，咖啡因对睡眠的干扰也会变得越明显。</p></li><li><p>咖啡因是一种兴奋剂，也是唯一一种我们很容易给予孩子和青少年的致瘾物质</p></li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>03 睡眠的定义和形成 时间膨胀与1952年一个关于婴儿的发现</font></p><blockquote><ul><li><p>通常情况下，梦中的时间比真实的时间更长。</p></li><li><p>快速眼动（REM）睡眠，这是人类主要的做梦阶段。</p></li><li><p>人类睡眠不仅是睡觉，而是两种完全不同的睡眠模式在交替循环。他们根据典型的眼部特征来命名这两种睡眠阶段：非快速眼动（NREM）睡眠和快速眼动（REM）睡眠。</p></li><li><p>非快速眼动睡眠得到了进一步的剖析，它被划分为四个独立的阶段，并且被缺乏想象力地命名为非快速眼动睡眠阶段1到阶段4（我们睡眠研究者可是一群创意“爆棚”的人），睡眠深度随数字递增。</p></li><li><p>前半夜占据主导地位的深度非快速眼动睡眠的一个关键功能是淘汰和去除不必要的神经连接。相比之下，在晚些时候开始占上风的快速眼动睡眠的做梦阶段，则在加强这些连接方面起着重要作用。</p></li><li><p>在这种先由非快速眼动睡眠在前半夜占主导，紧接着快速眼动睡眠在凌晨占主导的模式中存在一个风险，这是大多数普通人都不知道的。</p></li><li><p>一个人的睡眠纺锤波越强、越频繁，就越能适应外界的噪声，否则沉睡的人就会被吵醒。</p></li><li><p>每天晚上，深度睡眠的远程脑电波将把记忆数据包（最近的经历）从一个短期储存位置转移到一个更持久、更安全的长期储存位置。</p></li><li><p>在做梦状态下，大脑是高度活跃的，但身体不能动，这种惊人的分裂状态使得睡眠科学家能够很容易识别出——因此可以区分——快速眼动睡眠的脑电波和清醒状态的脑电波。</p></li><li><p>大脑麻痹了身体，这样才可以安全地做梦。</p></li><li><p>在快速眼动睡眠期间，你眼球的运动会表现出一些急速左右移动的阶段。</p></li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>04 猿类的床、恐龙与半脑睡眠 哪些物种会睡觉，我们怎样睡觉及睡多少</font></p><blockquote><ul><li><p>以鲸类（比如海豚和鲸鱼）为例，它们只有非快速眼动睡眠，而且可以是单个脑半球睡眠，这意味着它们可以一次只用半个大脑来睡觉！在水环境中，有一半的大脑必须保持清醒，以维持生命必需的运动。但是，另一半的大脑会不时地进入最美妙的非快速眼动睡眠状态中。深沉、有力、有节奏且缓慢的脑电波会覆盖一个大脑半球，而另一个大脑半球会充满着狂热、快速的脑电波活动，是完全清醒的——尽管这两个脑半球都被一层厚厚的纵横交错的连合纤维连接在一起，并且像人类的大脑一样，间距仅有几毫米。</p></li><li><p>我们所说的情商的关键——取决于能否在夜间获得充足的快速眼动睡眠。</p></li><li><p>复杂的情感过程所赋予的适应性优势，是一种真正意义上的丰碑，</p></li><li><p>我认为，快速眼动睡眠乍看之下为个体带来的这种较小的优势，实际上是一种最宝贵的资产，它确保了人类作为一个集体的生存和统治地位。</p></li><li><p>非快速眼动睡眠会帮助将新信息安全地转移到大脑的长期储存处。</p></li><li><p>针鼹鼠和鸭嘴兽。</p></li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>05 一生中的睡眠变化</font></p><blockquote><ul><li><p>一个人类婴儿在出生之前，几乎所有的时间都处在一种类似于睡眠的状态中，大部分时间类似于快速眼动睡眠。</p></li><li><p>24小时的周期中，包含了大约6个小时的非快速眼动睡眠、6个小时的快速眼动睡眠，以及12个小时的中间睡眠状态（我们不能确定究竟是快速眼动睡眠还是非快速眼动睡眠，但肯定不是完全清醒的）。</p></li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>06 你的母亲和莎士比亚都知道 睡眠对大脑的益处</font></p><blockquote><ul><li><p>睡眠能够提供一个更有辨识能力的辅助方法来改善记忆：优先挑出哪些信息需要或不需要最终加强。</p></li><li><p>运动记忆被转移到了在意识层面以下运作的大脑回路中，而不是像保存事实信息所需的那样从短期储存处到长期储存处的记忆转移。</p></li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>07 比《吉尼斯世界纪录》更夸张 睡眠剥夺与大脑</font></p><blockquote><ul><li><p>微睡眠仅仅持续几秒钟，在此期间眼睑会部分或全部闭合。这通常发生在长期睡眠不足（定义为每晚睡眠时间少于7小时）的个体中。</p></li><li><p>绝望和希望之间的最佳桥梁是一场良好的睡眠。</p></li><li><p>阿尔茨海默病与一种叫作β-淀粉样蛋白的毒性蛋白质的积聚有关，它们会在脑中聚集成黏性团块或斑块。淀粉样斑块对神经元具有毒性，会杀死周围的脑细胞。然而，奇怪的是，淀粉样蛋白斑块只影响大脑的某些部分而不影响其他部分，其原因尚不清楚。</p></li><li><p>淀粉样蛋白本身不影响大脑的记忆区域，那么它又是如何导致阿尔茨海默病患者记忆丧失的呢？</p></li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>08 癌症、心脏病和更短的寿命 睡眠剥夺与身体</font></p><blockquote><ul><li><p>交感神经系统是个具有强烈活性化、刺激性，甚至煽动性的系统。必要的话，它会在几秒钟内在全身发动原始的战斗或逃跑压力反应。就像一个有实力的大将军指挥千军万马一样，交感神经系统可以在身体的各种生理分工——从呼吸、免疫功能、应激化学物质到血压和心率——中激发活动。</p></li><li><p>大脑和心脏一样，对于非常小的睡眠波动十分敏感</p></li><li><p>事实证明，睡眠对于大脑和身体来说，是一个强烈的代谢活跃状态。出于这个原因，那些认为我们睡觉是为了保存大量能量的理论不再被接纳。微不足道的卡路里储备并不足以抵消睡眠带来的生存危险和不利因素。</p></li><li><p>当你睡眠不足时，身体对于舍弃脂肪会变得特别吝啬。取而代之，肌肉质量会减少，而脂肪会被保留下来</p></li><li><p>如果你希望成功繁育后代、身强体壮、具有威力，那么每天晚上你都应该好好睡一觉。</p></li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>09 日常精神错乱 快速眼动睡眠时的梦</font></p><blockquote><ul><li>实上，当人们开始在快速眼动睡眠中做梦时，大脑中有四个主要模块的活动会加剧：（1）大脑后部的视觉空间区域，主导复杂的视觉感知；（2）发起运动的运动皮层；（3）我们之前讲过的海马体及其周边区域，它们支持着你的自传体记忆；（4）大脑的深层情绪中心——杏仁核，和位于它上方并排列在大脑内层表面的带状组织扣带皮层——这两者都有助于产生和处理情绪。</li><li>快速眼动睡眠可以被看作具有以下特征：视觉、运动、情绪和自传体记忆相关的大脑区域的活动非常活跃，而控制理性思维的区域的活动相对减弱。</li><li>因此，梦并不是我们清醒生活的大规模重播。我们不会简单地倒带当天记录的体验，晚上在大脑皮层的大屏幕上将其投影重温一遍。</li><li>35%~55%的情绪主题及参与者在白天清醒时所担心的问题，强有力且毫无疑义地重现在了他们晚上产生的梦境中。</li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>10 作为夜间疗法的梦</font></p><blockquote><ul><li>第一个功能涉及对我们的情绪和心理健康的护理，这是本章的重点。第二个功能在解决问题和创造力方面，一些人可以通过控制他们的梦来更充分地利用它的力量，我们将在下一章中讨论。</li><li>你进入有梦睡眠状态时，一种叫作去甲肾上腺素的与压力有关的关键化学物质，会在你的大脑中完全停止释放。事实上，在一天的24小时中，快速眼动睡眠是唯一一次你的大脑中完全不存在这种引发焦虑的分子的时候。</li><li>这是夜间治疗的理论。它假定快速眼动睡眠做梦的过程实现了两个关键目标：（1）睡眠会记住那些有价值的、突出的经历中的细节，将它们与现有的知识结合起来，置入自传景观中；（2）睡眠会忘记或去除先前萦绕在这些记忆周围的内心深处的痛苦情绪负荷。</li><li>当需要解决我们情绪上的历史包袱时，仅有快速眼动睡眠，甚至做普通的梦，都是不够的。她的患者需要快速眼动睡眠的梦，而且需要是非常特殊的梦：明确梦见清醒时创伤的情绪主题和感受。只有做这种特定内容的梦才能完成临床上的情绪缓解，并为这些患者提供情感封闭，使他们在情感上能够进入一个新的未来，而不会受到过去创伤的奴役。</li><li>缺乏快速眼动睡眠和重置大脑情感指南针的能力，会使同一个人无法准确地对周围社会和情感进行理解，从而导致不恰当的决定和行为，这可能会产生严重的后果。</li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>11 梦的创造性和对梦的控制</font></p><blockquote><ul><li>当我们进入快速眼动睡眠，梦境成为主宰时，一种启发式的记忆调和术就开始进行了。我们不再拘泥于看到记忆单元之间最典型、平凡的明显联系。取而代之的是，大脑偏重于积极寻找信息集合之间最遥远、最不明显的联系。</li><li>睡眠正是关系较远的信息元素之间建立联系的桥梁，而这些信息元素之间的关系在清醒的时间里并不明显。</li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>12 夜间作怪的事物 睡眠障碍和睡眠缺失导致的死亡</font></p><blockquote><ul><li>大鼠在快速眼动睡眠剥夺后的死亡速度几乎与完全睡眠剥夺后的死亡速度一样快。完全没有非快速眼动睡眠也是致命的，只是需要花费更长的时间才能造成同样的死亡后果</li></ul></blockquote><p><font face="黑体" size=5 color=MediumPurple>13 iPad、工厂的汽笛与睡前饮酒 是什么让你睡不着？</font></p><blockquote><ul><li>视交叉上核——脑中的24小时生物钟</li></ul></blockquote><p><font face="黑体" size=7 color=MediumPurple>12条健康睡眠小贴士</font></p><blockquote><ol><li>坚持固定的睡眠时间。每天在同一时间上床睡觉，在同一时间醒来。作为习惯性的生物，人类很难适应睡眠模式的变化。等到周末再补觉，并不能完全弥补一周内睡眠不足的情况，并且会导致周一早上很难醒来。可以为就寝时间设置闹钟。我们通常只会为起床时间设置闹钟，却不会为睡觉时间这么做。如果你只能从这12条建议中记住一条，那么记住这一条吧。</li><li>锻炼很有益，但不要在一天中太晚的时间进行。尽量每天尝试锻炼至少30分钟，但要在睡前2~3小时结束锻炼。</li><li>避免咖啡因和尼古丁的摄入。咖啡、可乐、某些茶和巧克力都含有兴奋剂咖啡因，其效果可能需要8小时才能完全清除。因此，在下午晚些时候喝杯咖啡，会让你晚上很难入睡。尼古丁也是一种兴奋剂，通常会使吸烟者睡得很轻。此外，戒烟者通常会因为尼古丁戒断反应而在早晨过早醒来。</li><li>睡前避免喝酒精饮料。睡前喝一杯酒或含酒精的饮料可以帮助你放松，但大量摄入酒精会让你失去快速眼动睡眠，使你处于睡眠较轻的阶段。大量摄入酒精也可能导致夜间呼吸问题。当酒精的影响消失时，你也会在半夜醒来。</li><li>深夜避免大量进食和喝饮料。简单的零食可以，但大量进食会导致消化不良，干扰睡眠。晚上喝太多液体会导致频繁醒来上厕所。</li><li>尽量避免使用会延迟或破坏睡眠的药物。一些常用的心脏、血压或哮喘药物，以及一些治疗咳嗽、感冒或过敏的非处方药和草药都可以破坏睡眠模式。如果你有睡眠问题，请咨询你的医疗保健机构或药剂师，看看你是否服用了任何会导致失眠的药物，并询问是否可以改为白天或晚上的其他时间服用。</li><li>下午3点以后不要午睡。午睡可以帮助弥补缺失的睡眠，但是午后的午睡可能会造成夜间更难入睡。</li><li>睡前放松。不要把白天安排得太满，以至于没有时间放松。你的睡前习惯应该包含一项轻松的活动，如阅读或听音乐。</li><li>睡前洗个热水澡。洗过澡后，体温的下降可能会使你感到困倦，洗澡也可以帮助你放松和缓解紧张，让你更容易入睡。</li><li>保持卧室幽暗凉爽，并且不要放置任何电子产品。摆脱卧室里任何可能让你分心的东西，比如噪声、明亮的灯光、不舒服的床或过高的室温。如果房间里的温度保持凉爽，你会睡得更好。卧室里的电视、手机或电脑可能会让你分心，无法入睡。拥有舒适的床垫和枕头，可以帮助促进良好的睡眠。失眠的人会经常看钟表，因此请将时钟的表盘转到看不见的方向，这样你就不会在尝试入睡时担心时间了。</li><li>适当晒晒太阳。日光是调节日常睡眠模式的关键。尽量每天在自然阳光下晒30分钟以上。如果可能的话，早晨随着阳光醒来，或者使用非常明亮的灯光。睡眠专家建议，如果你有睡眠问题，那么你应该在早晨接受阳光照射1小时，并在睡前调暗室内灯光。</li><li>醒着时不要躺在床上。如果你躺在床上20分钟后仍然很清醒，或者开始感到焦虑或担心，那么就起床进行一些轻松的活动，直到感到困倦。不能入睡的焦虑会使你更难入睡。</li></ol></blockquote><p>荐书：</p><p>《我们为什么要睡觉？》一书是英国神经科学家马修·沃克所著的一本关于睡眠的科普书，该书总结了对睡眠研究的成果和前沿的科学突破，介绍了睡眠的运行机制、睡眠不足的坏处、睡眠与做梦的有益功能。本书大量篇幅是作者针对日常生活中出现的情况设计的对比实验，用实验数据与结果向读者展示睡眠不足带来的问题以及充足的睡眠将给我们带来什么样的提升。睡眠是一件非常重要的事情，睡眠对我们的身体健康、心理健康、记忆力、创造力等多方面有全方位的影响。“要使大脑和身体健康恢复到最佳状态，我们唯一能做的也是最有效的事，就是睡觉，它是大自然赐予我们的最佳对抗死亡方法。”在亿万年的进化中，睡眠仍然占据了动物也包括我们人类一生中的多数时间。但现代生活中，学习与生活的压力、娱乐与电子产品的入侵，留给睡眠的时间被一再压缩，在很长的时间里，我每天睡眠时间都只有六个多小时，在读完这本书之后，我了解了睡眠的机理，认识到了睡眠的意义，对睡眠给予足够的重视。</p><p><em>本书读完于2022.10.23，共花费12个小时14分钟</em></p><hr><h1 id="《借命而生》"><a href="#《借命而生》" class="headerlink" title="《借命而生》"></a>《借命而生》</h1><p>时间：2022.10<br>关键词：【中国】石一枫&#x2F;犯罪&#x2F;悬疑&#x2F;小说（电子书）</p><p>短短几天，很快啊，就把这本书读完了~<br>这本书的情节还是非常不错的，读到最后才知道为什么以《借命而生》为书名！<br>但这本书也存在缺点，感觉有点啰嗦了！<br>我感觉这本书非常适合改编成电视剧，有点《无证之罪》的感觉！</p><hr><h1 id="《人民的名义》"><a href="#《人民的名义》" class="headerlink" title="《人民的名义》"></a>《人民的名义》</h1><p>时间：2022.09<br>关键词：【中国】周梅森&#x2F;犯罪&#x2F;政治&#x2F;社会小说（电子书）</p><p>《人民的名义》是一部大火的影视剧，虽然我没有看过全片，但是很多名场面也是信手拈来，朋友之前谈起了，大家也都是津津乐道，因此，在九月末，我选择了读一下影视剧的原著，这是一本挺长的小说的。</p><hr><blockquote><p><a href="https://www.douban.com/group/topic/99835603/?_i=43360733jm4uzE">《人民的名义》人物形象分析（剧透慎入） (douban.com)</a></p><p>赵德汉：小官巨贪、表里不一<br>李达康：应该叫李大胆，笃信“法无禁止即自由”，满心扑到工作上，私生活毫无情趣的改革闯将<br>沙瑞金：刚正不阿的一把手，邻省干过三年纪委书记，空降汉东侧面说明**对当地干部不是充分信任<br>高育良：学者型官员，本应该充满理想主义情怀才对，结果被磨平磨滑了，成了太极高手。关键一步上不去，是个伏笔，可能已被中纪委盯上了<br>赵立春：副国级大老虎，剧中级别最高的反派<br>赵公子：打着父亲旗号横征暴敛、颐指气使的二世祖<br>陈岩石夫妇：忠诚、耿直的老革命<br>祁同伟：苦孩子出身，穷怕了，心术不正又一心想出人头地<br>丁义珍：外逃贪官<br>季昌明：谨小慎微，处事圆滑<br>程度：一把手都敢监听了，还能说啥<br>孙连成：懒政怠政的庸官，宇宙之大，书记算个屁。。。<br>易学习：有政绩的基层干部，没有人脉资源，原地打转几十年<br>王大路：深谙官场规则的前下海官员<br>蔡成功：向官员行贿的企业家、不良政商关系的受害者<br>赵东来：刑警出身，干练有魄力的公安局长，关注人物走向会不会黑化<br>欧阳靖：不知餍足的官太太<br>高小琴：情妇、美女蛇<br>梁璐：高干子女，野心家丈夫的垫脚石，怪可怜的<br>杏枝：上访群众、老实本分的劳动妇女<br>郑西坡：老实巴交的国企干部，身为工会主席能与下岗工人在一起，很不错了<br>林处长：表哥、高校基建处长，说明象牙塔也不干净<br>陆亦可：心气儿高的机关超大龄剩女<br>郑乾：在这个角色的处理上，编剧和导演欠年轻观众一个交待，猴子家的学生妹不错（口水）</p></blockquote><blockquote><p><a href="https://baike.baidu.com/item/%E4%BA%BA%E6%B0%91%E7%9A%84%E5%90%8D%E4%B9%89/20603387">人民的名义（周梅森创作的长篇小说）_百度百科 (baidu.com)</a></p><p><strong>侯亮平</strong></p><p>H省检反贪局长，为人公正、公平、正义，为调查丁义珍的腐败贪污案而被派到汉东省担任检察院反贪局局长，是个一身正气的男子。身为检查官的他在对待嫌疑犯方面有着独树一格的方法，擅长与嫌疑犯“打太极”，以周旋的方式让嫌疑犯放松警惕，使对方摸不清他的底牌。在工作过程中，他要深入各阶层展开抽丝剥茧的调查工作，还要以身涉险，与位高权重的贪腐分子展开斗智斗勇的抉择。</p><p><strong>高小琴</strong></p><p>山水集团的老总，出身贫寒、美丽聪明。在传统观念看来，作为祁同伟与梁璐夫妻的第三者，高小琴是破坏家庭美满的“狐狸精”；对于公安厅长祁同伟一路贪腐的催化和参与，高小琴是误政毁权的红颜祸水；对于检察机关与侯亮平来说，高小琴的山水集团是显而易见又难以攻克的犯罪的堡垒。</p><p><strong>祁同伟</strong></p><p>H省省公安厅厅长，出身贫寒，为了爬上高位不惜向省委副书记的女儿梁璐下跪，从而成为了省委副书记的女婿。后来遇到高小琴，两个人产生了感情，并生下了一个儿子。祁同伟在人生最后反思的时刻，想到了高小琴但并没有归罪于高小琴，祁同伟本人并不认为她是“红颜祸水”，他能客观地思考与高小琴的关系，意识到造成悲剧的不是遇到了高小琴，而是同她一起空手套白狼地建立了山水集团和永无止境的贪欲使他们联起手来各种巧取豪夺，聚敛财富，无视人民，草菅人命。 </p><p><strong>李达康</strong></p><p>H省省委常委、京州市委书记。他是事业上有魄力的政治家，但也是一个远远不及格的丈夫和父亲。他对妻子和女儿不管不问，没有给妻子过过生日，晚上从不在十二点前回家，女儿出国留学的学费情况都不了解，生活中很无趣，工作上“绝对”不近人情。 </p><p><strong>吴慧芬</strong></p><p>明史专家、H省大学的教授，被双规的高育良的前妻。西蒙娜·德·波伏娃说，婚姻是传统社会指派给女人的命运。吴慧芬正是此种夫权命运全身心的顺从者，作为妻子她自居第二性的附属地位，投身家庭扶持丈夫不惜毁灭自我。先是鼓励丈夫高育良去攀援政界大腕梁群峰，并利用她与梁群峰女儿梁璐的私人关系为丈夫铺路，最终在梁群峰的提拔下，高育良成了H省副书记。 </p><p><strong>欧阳菁</strong></p><p>京州城市银行副行长，李达康的前妻。从政治的和男性的眼光来看，她是清官李达康家里的贪妻恶妇，如果不是李达康心如铁石般意志坚定，说不定就会被妻子欧阳菁连累成贪官污吏。欧阳菁的性格如众人所评，女强人的外表下裹着一颗小女人的心。阴差阳错，拥有小女人心的欧阳菁遇到了无趣刚硬的李达康，无论在爱情上，还是事业上他们两个人之间都充满了矛盾。</p></blockquote><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/%E4%BA%BA%E6%B0%91%E7%9A%84%E5%90%8D%E4%B9%89.png" alt="人民的名义"></p><hr><h1 id="《信》"><a href="#《信》" class="headerlink" title="《信》"></a>《信》</h1><p>时间：2022.09<br>关键词：【日本】东野圭吾&#x2F;犯罪&#x2F;成长&#x2F;言情&#x2F;社会问题小说（电子书）</p><p>不算特别长的一本书，花了两天左右的时间就读完了，和之前读的东野圭吾的书的风格很不一样，读下来还是不错的。<br>书中探讨的“株连九族”这个话题是非常难的一个话题，成见如山，每个人遇到这样的事情，大概都难以解决。</p><hr><h1 id="《绝叫》"><a href="#《绝叫》" class="headerlink" title="《绝叫》"></a>《绝叫》</h1><p>时间：2022.08<br>关键词：【日本】叶真中显&#x2F;悬疑推理小说（电子书）</p><p>非常典型的推理型小说，基本脉络在读的过程中很容易就梳理出来，但是很多自己觉得的没有什么用的小细节，最后确实整件事结局非常重要的一环！！推理爱好者值得一读！</p><p>缺点就是感觉没有很明显的特色，确实是一部很不错的悬疑推理小说，但读完了也不会记得这本书的作者是谁，也没有想去读作者其他书的冲动！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220925204527738.png" alt="image-20220925204527738"></p><p>书的前半部分做了记录，后半部分就没怎么记录了。</p><hr><h1 id="《沉默的大多数》"><a href="#《沉默的大多数》" class="headerlink" title="《沉默的大多数》"></a>《沉默的大多数》</h1><p>时间：2022.08<br>关键词：【中国】王小波&#x2F;杂文随笔&#x2F;思想文化（电子书）</p><p>之前也从来没有读过王小波的书，第一次尝试！——完蛋，尝试失败，散文很难用零散时间去读，更适合有大段时间在安静环境下去读。</p><p><a href="https://baike.baidu.com/item/%E7%8E%8B%E5%B0%8F%E6%B3%A2/6673">王小波（中国当代学者、作家）_百度百科 (baidu.com)</a></p><p><a href="https://www.zhihu.com/question/19597675"> 如果现在开始读王小波的书，推荐看哪些，按什么顺序？ - 知乎 (zhihu.com)</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/v2-6f31235f707f991c4cf6d3e1ed93a42b_720w.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/v2-9a72159b3d8a9050ef6b02968cd66222_720w.jpg"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">第一序列：《沉默的大多数》《一只特立独行的猪》《爱你就像爱生命》<br>第二序列：《黄金时代》《白银时代》《革命时期的爱情》《我的阴阳两界》<br>第三序列：《我的精神家园》《红拂夜奔》《寻找无双》《万寿寺》<br>第四序列:《夜行记》《绿毛水怪》《似水柔情》<br><br>《黑铁时代》收录的一部分是未竟稿，一部分是弃稿，推荐在阅读上面的书籍时，可以找一下《黑铁时代》里有没有相关的内容，也许会是一个很奇妙的体验。<br><br>作者：牧豕Zzz<br>链接：https://www.zhihu.com/question/19597675/answer/931931868<br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br><br></code></pre></td></tr></table></figure><p>没读完，挖坑。</p><hr><h1 id="《华丽人生》"><a href="#《华丽人生》" class="headerlink" title="《华丽人生》"></a>《华丽人生》</h1><p>时间：2022.07<br>关键词：【日本】伊坂幸太郎&#x2F;悬疑&#x2F;非线性叙事（电子书）</p><p>读这本书的体验就像拼拼图一样，边读边猜测，读到后面发现之前的猜测是错的，等读完就会发现，哦!原来是这么一个故事啊!<br>这本书还是非常值得一读的，特别是悬疑作品爱好者！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/MD_2022-08-01_14-09-05.png" alt="MD_2022-08-01_14-09-05"></p><hr><h1 id="《东方快撤谋杀案》"><a href="#《东方快撤谋杀案》" class="headerlink" title="《东方快撤谋杀案》"></a>《东方快撤谋杀案》</h1><p>时间：2022.07<br>关键词：【英国】阿加莎·克里斯蒂&#x2F;悬疑（电子书）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs markdown">阿加莎·克里斯蒂被称为&quot;侦探小说女王&quot;，她的作品我之前并没有看过，我只是知道有好几部被改编成了电影，电影我也没怎么看过，都是看的电影的解说，就像我第一次看刘慈欣的科幻和东野圭吾的悬疑作品一样，我也可能入了阿加莎·克里斯蒂的“坑”，从此不愁没书可看了。<br><br>阿加莎·克里斯蒂侦探作品年表<br><br>波洛系列<br>1920 The Mysterious Affair at Styles 《斯泰尔斯庄园奇案》<br>1923 Murder on the Links《高尔夫球场命案》<br>1924 Poirot Investigates《首相绑架案》<br>1926 The Murder of Roger Ackroyd《罗杰疑案》<br>1927 The Big Four《四魔头》<br>1928 The Mystery of the Blue Train《蓝色列车之谜》<br>1932 Peril at End House《悬崖山庄奇案》<br>1933 Lord Edgware Dies《人性记录》<br>1934 Murder on the Orient Express《东方快车谋杀案》<br>1935 Three-Act Tragedy《三幕悲剧》<br>1935 Death in the Clouds《云中命案》<br>1936 The ABC Murders《ABC谋杀案》<br>1936 Murder in Mesopotamia《古墓之谜》<br>1936 Cards on the Table《底牌》<br>1937 Dumb Witness《沉默的证人》<br>1937 Death on the Nile《尼罗河上的惨案》<br>1937 Murder in the Mews《幽巷谋杀案》<br>1938 Appointment with Death《死亡约会》<br>1938 Hercule Poirot&#x27; s Christmas《波洛圣诞探案记》<br>1940 Sad Cypress《H庄园的午餐》<br>1940 One, Two, Buckle My Shoe《牙医谋杀案》<br>1941 Evil Under the Sun《阳光下的罪恶》<br>1943 Five Little Pigs《五只小猪》<br>1946 The Hollow《空幻之屋》<br>1947 The Labours of Hercules《赫尔克里·波洛的丰功伟绩》<br>1948 Taken at the Flood《致命遗产》<br>1952 Mrs. McGinty&#x27; s Dead《清洁女工之死》<br>1953 After the Funeral《葬礼之后》<br>1955 Hickory Dickory Dock《山核桃大街谋杀案》<br>1956 Dead Man&#x27; s Folly《弄假成真》<br>1959 Cat Among the Pigeons《鸽群中的猫》<br>1960 The Adventure of the Christmas Pudding《雪地上的女尸》<br>1963 The Clocks《怪钟疑案》1966 Third Girl《第三个女郎》<br>1969 Hallowe&#x27; en Party《万圣节前夜的谋杀》<br>1972 Elephants Can Remember《大象的证词》<br>1974 Poirot&#x27; s Early Stories《蒙面女人》<br>1975 Curtain-Poirot&#x27; s Last Case《帷幕》<br><br>马普尔小姐系列<br>1930 The Murder at the Vicarage《寓所谜案》<br>1932 The Thirteen Problems《死亡草》<br>1942 The Body in the Library《藏书室女尸之谜》<br>1943 The Moving Finger《魔手》<br>1950 A Murder Is Announced《谋杀启事》<br>1952 They Do It with Mirrors《借镜杀人》<br>1953 A Pocket Full of Rye《黑麦奇案》<br>1957 4.50 from Paddington《命案目睹记》<br>1962 The Mirror Crack&#x27; d from Side to side《破镜谋杀案》<br>1964 A Caribbean Mystery《加勒比海之谜》<br>1965 At Bertram&#x27; s Hotel《伯特伦旅馆》<br>1971 Nemesis《复仇女神》<br>1976 Sleeping Murder《沉睡谋杀案》<br>1979 Miss Marple&#x27; s Final Cases 《马普尔小姐最后的案件》<br><br>其他系列及非系列<br>1922 The Secret Adversary《暗藏杀机》<br>1924 The Man in the Brown Suit《褐衣男子》<br>1925 The Secret of Chimneys《烟囱别墅之谜》<br>1929 Partners in Crime《犯罪团伙》<br>1929 The Seven Dials Mystery《七面钟之谜》<br>1930 The Mysterious Mr. Quin《神秘的奎因先生》<br>1931 The Sittaford Mystery《斯塔福特疑案》<br>1933 The Witness for the Prosecution and Other Stories《控方证人》<br>1934 Why Didn&#x27; t They Ask Evans? 《悬崖上的谋杀》<br>1934 The Listerdale Mystery《金色的机遇》<br>1934 Parker Pyne Investigates《惊险的浪漫》<br>1939 Murder Is Easy《逆我者亡》<br>1939 And Then There Were None《无人生还》<br>1941 N or M? 《桑苏西来客》<br>1944 Towards Zero《零点》<br>1945 Sparkling Cyanide《死亡的怀念》<br>1945 Death Comes as the End《死亡终局》<br>1949 Crooked House《怪屋》<br>1950 Three Blind Mice and Other Stories《三只瞎老鼠》<br>1951 They Came to Baghdad《他们来到巴格达》<br>1954 Destination Unknown《地狱之旅》1958 Ordeal by Innocence《奉命谋杀》<br>1961 The Pale Horse《灰马酒店》<br>1967 Endless Night《长夜》<br>1968 By the Pricking of My Thumbs《煦阳岭的疑云》<br>1970 Passenger to Frankfurt《天涯过客》<br>1973 Postern of Fate《命运之门》<br>1991 Problem at Pollensa Bay《神秘的第三者》<br>1997 While the Light Lasts《灯火阑珊》<br></code></pre></td></tr></table></figure><p>因为这本书所改编的电影我已经了解过了，所以再读这本数的时候已经知道结局了，读的体验不算很好。</p><p>非常需要吐槽的是，这本书的翻译真的太差了，导致我现在出了中文和日本翻译书籍之外，其他的完全不想再读了，之前读过的好多英文书的翻译都太烂了，读都读不通顺，读着太别扭了！美国人写的书的翻译还可以，但是欧洲作家特别是英国作家的书，太绅士范了，翻译的也太绅士范了，读起来太别扭了。</p><p>我的英文水平还不允许的直接读英文原著，但迟早有一天我需要去读英文原著的。</p><hr><h1 id="《恶意》"><a href="#《恶意》" class="headerlink" title="《恶意》"></a>《恶意》</h1><p>时间：2022.06<br>关键词：【日本】东野圭吾&#x2F;悬疑&#x2F;嫉妒心（电子书）</p><p>这个无限反转的感觉太爽了，读着的感觉是这样的：当你感觉“就这？”的时候，下一秒你就被“打脸”了。</p><p>另外，本书对人心的刻画也比较有深度，你会去思考“我是不是这样的一个人?”，“我身边有没有这样的人？”</p><hr><h1 id="《永久记录》"><a href="#《永久记录》" class="headerlink" title="《永久记录》"></a>《永久记录》</h1><p>时间：2022.05&#x2F;2022.08<br>关键词：【美国】爱德华·斯诺登&#x2F;棱镜门&#x2F;政治（电子书）</p><p>该书一共分为上中下三个部分，上半部分写的是斯诺登的童年，家庭，亲情等；中段是写的斯诺登的工作；下半部分是斯诺登的爆料与流亡。</p><p>拖拖拉拉，22年9月1号终于读完了，对这本书的评价一般般吧，只是了解了棱镜门事件是怎么发生的。对于斯诺登这个人，我感觉他虽然揭露了这个事件，他其实也并没有接触到很多这件事的核心部分，斯诺登也并不懂政治，只是因为侵犯了所谓的自由和人权就揭发这件事。真正的政府监控事件可能远比斯诺登所了解的要复杂的多。</p><p><a href="https://viflythink.com/Permanent_Record/">永恒才是你的敌人——《永久记录》读后感 (viflythink.com)</a></p><p><a href="https://a.temporaryrecord.com/Permanent_Record_-_CN_edition_with_underlined_redactions.pdf">Edward Snowden - Permanent Record (temporaryrecord.com)</a></p><hr><h1 id="《十问：霍金沉思录》"><a href="#《十问：霍金沉思录》" class="headerlink" title="《十问：霍金沉思录》"></a>《十问：霍金沉思录》</h1><p>时间：2022.02<br>关键词：【英国】斯蒂芬•霍金&#x2F;科普&#x2F;物理（电子书）<br><font face="黑体" size=6 color=MediumPurple>序&amp;导言</font></p><blockquote><ul><li>电磁波由以光速传播的振荡电力和磁力组成。它们撞击带电粒子，例如无线电或电视天线中的电子，它们来回摇动粒子，在粒子中卸下波携带的信息。然后该信息可被放大并馈送到扬声器或电视屏幕以供人们理解，</li><li>根据爱因斯坦的说法，引力波由振荡的空间弯曲组成：空间的振荡拉伸和挤压。</li><li>只有两种类型的波可以穿越宇宙，为我们提供有关遥远事物的信息：电磁波（包括光线、X射线、伽马射线、微波、射电波……）和引力波。</li><li>因为引力波是空间弯曲的一种形式，能最强烈产生引力波的物体本身应该完全或部分由弯曲的时空引起——这尤其意味着应由黑洞引起。我们得出结论，引力波是探索和检验史蒂芬对黑洞洞见的理想工具。</li><li>2015年9月14日，LIGO引力波探测器（由莱纳和我还有罗纳德·德雷弗共同建立的1 000人项目建造，由巴里·巴里什组织、组装和领导）记录了它们的第一次引力波。</li><li>在史蒂芬骨灰入葬西敏寺时，在我对他的悼词中，我用这些话来纪念这种奋斗：“牛顿给了我们答案。霍金给了我们问题。而霍金的问题本身将继续在几十年间产生突破。当我们最终掌握量子引力定律并完全理解宇宙的诞生时，这可能主要归功于站在霍金的肩膀上。”</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>我们为什么必须问大问题</font></p><blockquote><ul><li>罗杰·彭罗斯证明过，一旦垂死的恒星收缩到一定的半径，就不可避免地会出现奇点，这就是空间和时间结束之处。</li><li>作为父亲，我总尝试告诉孩子提问题的重要性。</li><li>如果广义相对论是正确的，并且能量密度是正的，那么黑洞的边界——事件视界的面积具有这样的性质，当额外的物质或辐射落入黑洞时，它总是增加。此外，如果两个黑洞碰撞并合并形成单个黑洞，则围绕所产生的黑洞的事件视界的面积大于围绕原始黑洞的事件视界的面积之和。</li><li>我和彭罗斯的研究工作证明了广义相对论在奇点处崩溃，所以很明显下一步是将非常大的理论（广义相对论）和非常小的理论（量子论）结合起来。</li><li>在缩小的黑洞遗留下的辐射里怎么能携带形成它的东西的所有信息？我发现信息没有丢失，但它没有以有用的方式返回——就像燃烧百科全书后，只有烟雾和灰烬留下。</li><li>我在这个星球上过着一种非凡的生活，我利用奇思异想和物理定律穿越宇宙。我到过银河系最远处，旅行进入过黑洞，还返回过时间的起点。</li><li>在这个地球上，我经历了高潮和低谷、动荡与安宁、成功和痛苦。我遭遇贫穷，享用富裕，曾经矫健，又身患残疾。我既受到赞扬，也受到批评，但从未被忽视过。通过我的研究，我非常荣幸地能够为人类对宇宙的理解做出贡献。但如果宇宙中不存在我所爱且爱我的人，那的确会是一个空虚的宇宙。没有他们，它的一切奇迹都对我毫无意义。</li><li>我希望科学技术能够回答这些问题，但需要人，有知识和理解力的人，去实施这些解决方案。让我们为每个女人和男人奋斗，为了让他们都能过上健康、安全，并充满了机会和爱的生活。我们都是时间旅行者，让我们一起踏入未来。让我们共同努力，使这个未来成为我们想去访问的地方。</li><li>勇敢、好奇、坚定、战胜困难。我们一定能够做到。</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>上帝存在吗？</font></p><blockquote><ul><li>“我想成为一名伟大的科学家。然而，当我在学校时，我不是一个非常好的学生，并且难得优于班级半数的同学。我的作业不整洁，我的书写不太好。但我在学校有好朋友。我们谈论所有的话题，特别是宇宙的起源。这就是我的梦想开始的地方，我很幸运它已经成真。”</li><li>大约公元前300年，一位名叫阿利斯塔克的哲学家被日食、月食迷住了，特别是月食。他很勇敢地质疑它们是否真的是由神造成的。</li><li>他小心翼翼地研究了天穹并获得一个大胆的结论：他意识到月食其实是地球的阴影越过月球，而不是一个神圣的事件。这一发现使他心灵解放，他能够弄清他的上空真正发生的事情，并绘制显示太阳、地球和月球的真实关系的图。从那里他得出了更为非凡的结论。他推断出地球不像众人以为的那样是宇宙的中心，而是围绕着太阳运行的。</li><li>爱因斯坦意识到某种极其非凡的东西：制造宇宙所需的两种主要成分，质量和能量，基本上是一个东西，如果你愿意的话，可以说两者是同一枚硬币的两面。他著名的等式E&#x3D;mc2只是意味着质量可以被认为是一种能量，反之亦然。</li><li>我们现在可以说，宇宙并没有三种成分，它仅有两种成分：能量和空间。</li><li>空间和能量是在我们现在称为大爆炸的事件中自发产生的。</li><li>宇宙大爆炸核心的巨大神秘之处在于，解释不可思议的巨大的、拥有空间和能量的整个宇宙如何能无中生有。其秘密在于我们的宇宙最奇怪的一个事实。物理定律要求存在某种叫作“负能量”的东西。</li><li>为了帮助你理解这个奇怪的但很关键的概念，让我借鉴一个简单的比喻。想象一下，一个人想在平地上建造一座小山。那座山将代表宇宙。为了造这座小山，他在地上挖了一个洞并用土来堆他的山。当然他不只是在建一座小山，他还挖了一个洞，实际上是山的一个负版本。那个洞里面的东西现在已经变成山丘，所以这一切都完美地平衡。这就是宇宙开端背后的原理。</li><li>大爆炸产生了大量的正能量，它同时也产生同样多的负能量。</li><li>根据引力和运动的自然定律——科学中最古老的那些定律——空间本身就是一个巨大的负能量仓库，足以确保一切加起来为零。</li><li>这意味着，如果宇宙叠加起来是无，那么你就不需要上帝来创造它。</li><li>我们的日常经验让我们认为，发生的一切必须由某些发生在较早时期的事情引起，所以自然认为一定是某种事物——也许是上帝——导致了宇宙的产生。</li><li>自然本身的定律告诉我们，宇宙不仅像质子，不需任何辅助就突然涌现，宇宙还不需要任何能量，而且大爆炸由无产生是可能的，就是无。</li><li>对此进行解释的依据是回到爱因斯坦的理论，以及他对宇宙中的空间和时间如何在根本上交织在一起的见解。大爆炸瞬间发生了一件对时间非常关键的事情，时间本身开始了。</li><li>随着时钟越来越接近黑洞，它开始变得越来越慢。时间本身开始减速。现在想象一台进入黑洞的时钟——嗯，当然假设它可以承受极端的引力——它实际上停止了。它之所以停止，不是因为它被毁坏了，而是因为在黑洞内部时间本身并不存在。而这正是宇宙开始时发生的事情。</li><li>我相信，时间在宇宙开始时所扮演的角色是消除对大设计师的需求，时间是揭示宇宙如何创生自己的最终关键。</li><li>大爆炸之前不存在时间，所以没有时间让上帝在其中创造宇宙</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>宇宙中存在其他智慧生命吗？</font></p><blockquote><ul><li>我想采取更开阔的观点，将外部传播的信息和DNA一起包括在人类的进化内是合理的。</li><li>这意味着个人最多只能掌握人类知识的一小部分。人们必须专注于越来越狭窄的领域。</li></ul></blockquote><p><font face="黑体" size=6 color=MediumPurple>我们能预测未来吗？</font></p><blockquote><ul><li>实际上，他所说的是，如果我们知道宇宙中的所有粒子在某一时刻的位置和速度，那么我们就能够计算出它们在过去或将来任何其他时刻的行为。</li><li>直到1927年，另一位德国物理学家沃纳·海森伯才指出，你无法同时准确地测量粒子的位置和速度。要看到粒子的位置，人们就必须把光线照射在它上面。</li><li>你越准确地测量粒子的位置，你就越不能准确地知道速度，反之亦然。这被概括为海森伯制定的不确定性原理：粒子位置的不确定性与速度的不确定性的乘积，总是大于普朗克常数与2倍粒子质量的商。</li><li>如果你知道某一时刻的波函数，那么根据所谓的薛定谔方程就知道它在其他时刻的值。</li><li>当我们试图预测位置和速度时，虽然量子力学导致了不确定性，它仍然允许我们确切地预测位置和速度的一种组合。但是，即使是这个程度的确定性似乎还受到更新近的科学发展的威胁。问题的出现是因为引力可以把时空弯曲到某种程度，以至存在我们观察不到的空间区域。</li><li>总结一下，拉普拉斯提出的经典观点，如果人们知道某一时刻粒子的位置和速度，那么它的未来运动是完全确定的。当海森伯提出了他的不确定性原理之后，这种观点必须加以修改。该原理说，人们无法同时准确知道位置和速度。然而，仍有可能预测一个位置和速度的结合。但是如果考虑到黑洞，甚至这种有限的可预测性也可能消失。</li></ul></blockquote><p>没读完。</p><hr><h1 id="《被讨厌的勇气》"><a href="#《被讨厌的勇气》" class="headerlink" title="《被讨厌的勇气》"></a>《被讨厌的勇气》</h1><p>副标题: “自我启发之父”阿德勒的哲学课</p><p>时间：2021.08（读了一点）&#x2F;2022.02（读了一点）</p><p>关键词：【日本】岸见一郎&amp;古贺史健&#x2F;日常琐碎&#x2F;人际关系&#x2F;心理学&#x2F;哲学（电子书）</p><p>本书采取了一种很有趣的写作风格，一位青年不赞同哲人的观点，与哲人进行辩论，哲人认为“人可以改变、世界极其简单、人人能获得幸福。”，而年青人不这样认为，于是双方以对话的形式进行了对问题的探讨!</p><p><font face="黑体" size=6 color=MediumPurple>第一夜 我们的不幸是谁的错</font></p><blockquote><p>佛洛依德 荣格 阿德勒<br>他为什么会如此激烈地反对哲人的主张呢？原因已经不言而喻。青年自幼就缺乏自信，他对自己的出身、学历甚至容貌都抱有强烈的自卑感。也许是因为这样，他往往过于在意他人的目光；而且，他无法衷心地去祝福别人的幸福，从而常常陷入自我嫌恶的痛苦境地。对青年而言，哲人的主张只不过是乌托邦式的空想而已。<br>阿德勒心理学考虑的不是过去的“原因”，而是现在的“目的”。<br>阿德勒在否定心理创伤学说的时候说了下面这段话：“任何经历本身并不是成功或者失败的原因。我们并非因为自身经历中的刺激——所谓的心理创伤——而痛苦，事实上我们会从经历中发现符合自己目的的因素。决定我们自身的不是过去的经历，而是我们自己赋予经历的意义。”<br>阿德勒说，决定我们自己的不是“经验本身”而是“赋予经验的意义”。<br> 我们给过去的经历“赋予了什么样的意义”，这直接决定了我们的生活。人生不是由别人赋予的，而是由自己选择的，是自己选择自己如何生活。<br>如果闭门不出一直憋在自己房间里的话，父母会非常担心。这就可以把父母的关注集于一身，而且还可以得到父母小心翼翼的照顾。另一方面，哪怕踏出家门一步，都会沦为无人关注的“大多数”，都会成为茫茫人海中非常平凡的一员，甚至成为逊色于人的平庸之辈；而且，没人会重视自己。这些都是闭居者常有的心理。<br>人并不受过去的原因所左右，而是朝着自己定下的目标前进，这就是哲人的主张。</p></blockquote><p>目前还是没读完，读不下去了。</p><hr><h1 id="《沙丘》"><a href="#《沙丘》" class="headerlink" title="《沙丘》"></a>《沙丘》</h1><p>时间：2021.11（读了一点）&#x2F;2022.02（读了一点）</p><p>关键词：【美国】弗兰克·赫伯特&#x2F;科幻&#x2F;长篇连载小说（电子书）</p><blockquote><ul><li>我绝不能恐惧。恐惧是思维杀手。恐惧是带来彻底毁灭的小小死神。我将正视恐惧，任它通过我的躯体。当恐惧逝去，我会打开心眼，看清它的轨迹。恐惧所过之处，不留一物，唯我独存。</li><li>“你有没有听过动物为了逃脱陷阱而咬断一条腿的事？这是一种兽类的伎俩。但人类会留在陷阱里，忍痛装死，以便伺机杀掉设置陷阱的人，解除对同类的威胁。”</li><li>很久以前，人们想要获得自由，便将思考的事交给机器去干。然而这只会导致其他人凭借机器奴役他们。”</li><li>很久以前，人们想要获得自由，便将思考的事交给机器去干。然而这只会导致其他人凭借机器奴役他们。”</li><li>“汝等不得创造像人一样思维的机器。”保罗引述了一句话。</li><li>“这是芭特勒圣战和《奥兰治天主圣经》里的原话，”她说，“但《奥天圣经》其实应该这么说：‘汝等不得造出机器，假冒人的思维。’你有没有研究过<strong>门泰特人</strong>？”</li><li>“芭特勒圣战，这场大骚乱夺去了人类的一根拐杖，”她说，“这迫使人类的思维进一步成长。于是人们创立了学校，以训练人的才能。”</li><li>老太婆点点头。“那种古老的学校只有两所幸存于世：<strong>贝尼·杰瑟里特和宇航公会</strong>。在我们看来，公会侧重的差不多是纯数学。而贝尼·杰瑟里特发挥着另一种作用。”“政治。”保罗说。</li><li>从传宗接代的目的来看，如果不将真人群体和凡人群体区分开来，那么这种延续性就无从谈起。</li><li>从传宗接代的目的来看，如果不将真人群体和凡人群体区分开来，那么这种延续性就无从谈起。</li><li>想要了解穆阿迪布而不了解他的宿敌哈克南人，就像要明白真理而不懂得谬误一样。像是不懂得黑暗而去寻找光明，那是不可能的事。</li><li>明显的嫌疑人选是岳医生，他的确是我们的间谍。但哈瓦特已做过调查，知道我们的医生是一位苏克学校的毕业生，经受了帝国预处理——据称是绝对安全，甚至可以直接伺候皇帝本人。</li><li>萨多卡！”菲德-罗萨抽了一口冷气。他的脑中现在全是这些可怕的帝国士兵的样子，一群毫无慈悲的杀手，帕迪沙皇帝的盲目信徒。</li><li>财富是重中之重。宇联商会是取得财富的关键，每个显贵家族都通过占有董事席位，从公司的金库中分一杯羹。</li><li>男爵挪步离开厄拉科斯星球仪，当他从阴影中现身的时候，映入人眼帘的是一个极为庞大的身形——不管是质量还是体积上——那是一身肥肉。他穿着黑色长袍，衣服的皱褶下有一些细微的隆起，可以看出他身上装着便携式浮空器，托着那身肥肉。他的体重可能达两百公斤，但他那双腿却只能承受五十公斤的重量。</li><li><strong>哥尼·哈莱克</strong>，一位吟游诗人兼战士，你将在本书中读到他的一些诗；<strong>杜菲·哈瓦特</strong>，一位老迈的门泰特刺杀大师，就连帕迪沙皇帝也惧他三分；<strong>邓肯·艾达荷</strong>，来自吉奈斯的剑术大师；<strong>威灵顿·岳医生</strong>，虽然他顶着一项背叛的污名，但他本人却闪烁着智慧的光芒；<strong>杰西卡夫人</strong>，以贝尼·杰瑟里特的方式引导爱子。当然，还有<strong>雷托公爵</strong>本人，他作为父亲的优秀品质一直没有得到挖掘。</li><li>‘想通过中止一个过程来理解它，那是不可能的事。理解必须与过程的发展同步，必须融入其中，与其一同发展。’</li><li>一个世界是许多东西的集合——人、土壤、生物、月亮、潮汐、太阳——这些未知的集合名为自然，这是一个没有现在概念的模糊集合。</li><li>“在屏蔽场战斗中，防守应迅速，攻击应缓慢，”保罗说，“进攻的唯一目的是欺骗对手，让他脚步混乱，通过空当一击中的。屏蔽场能瓦解快速攻击，但却挡不住双刃刀的缓慢刺入！”</li><li>他看着哈莱克下巴上那条甜菜色的伤疤，想起了它的来历，那是在杰第主星的哈克南奴隶场中被野兽拉班砍伤的。</li><li>“愿望不是鱼，否则世人都会去撒网。”</li></ul></blockquote><p>没读完，挖了一个大坑。</p><hr>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天文学合集笔记（一）</title>
    <link href="/blog/post/Astronomy/LearnAstronomy_1/"/>
    <url>/blog/post/Astronomy/LearnAstronomy_1/</url>
    
    <content type="html"><![CDATA[<p>天文学与其他自然科学的一个显著不同之处在于，天文学的实验方法是观测，通过观测来收集天体的各种信息。因而对观测方法和观测手段的研究，是天文学家努力研究的一个方向。在古代，天文学还与历法的制定有不可分割的关系。现代天文学已经发展成为观测全电磁波段的科学。<br>“天文”一词最早见于我国古老著作《易经》。《易传·彖·贲》说：“刚柔交错，天文也。文明以止，人文也。”还要求君子“观乎天文，以察时变。观乎人文，以化成天下。”</p><p><font face="黑体" size=6 color=MediumPurple><a href="https://www.ixigua.com/6758709082317668871?id=6684175083805606414">妈咪说MommyTalk天文合集（西瓜视频）</a></font></p><p><font face="黑体" size=6 color=MediumPurple><a href="https://www.bilibili.com/video/BV1zE411t7Uf?spm_id_from=333.999.0.0">妈咪说MommyTalk天文合集（哔哩哔哩）</a></font></p><p>妈咪说天文学视频合集观看记录第一期</p><p>第1期到第20期</p><h1 id="第一期-日心说与地心说"><a href="#第一期-日心说与地心说" class="headerlink" title="第一期 日心说与地心说"></a>第一期 日心说与地心说</h1><p>尼罗河河水泛滥——索普代特偕日出</p><p>年：索普代特偕日出的周期</p><p>索普代特：天狼星（夜空中最亮的星）</p><p>老人星：第二亮</p><p>天文学家，占星术</p><p>古希腊：感性思维到理性思维</p><p>旋转中心：北天极</p><p>北天极附近的亮星：北极星</p><p>相对位置不动的星：恒心</p><p>动的星:行星</p><p>公元140年：托勒密：地心说</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211227183842916.png" style="zoom:50%;" /></div><p>地球外围的七个轮子:均轮</p><p>七个均轮上面分别都有一个小轮子：本轮，本轮的大小也不一样</p><p>均轮和本轮的提出是为了符合观测的数据</p><p>正圆</p><p>匀速圆周运动</p><p>恒星天：所有的恒星均固定在恒星天上，恒星天整体在转动</p><p>最高天</p><p>为什么不是地球在自转？</p><ul><li>人类感受不到地球的转动</li><li>在原地跳起，落下的时候难道不是在原地吗?</li></ul><p>毕达哥拉斯：地球是球</p><p>托勒密也认同地球是球</p><p>亚里士多德：有船从远处过来和月食证明地球是球</p><p>为了更符合观测的数据，托勒密认为，地球不是中心，而是稍稍偏离中心；但是地球是宇宙的中心，且是静止不动的</p><p>古希腊：公元前三世纪就以及提出了日心说</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211227184812553.png" style="zoom:80%;" /></div><p>日心说推翻了”以我为中心的观念“而不是地心说是错的</p><hr><h1 id="第二期-星座与黄道"><a href="#第二期-星座与黄道" class="headerlink" title="第二期 星座与黄道"></a>第二期 星座与黄道</h1><p>托勒密《天文学大成》</p><p>喜帕恰斯：方位天文学之父，三角函数</p><p>喜帕恰斯：星等，六个等级，最亮的是一等星，勉强看得到的是六等星</p><p>普森（英国）：星等之间差2.512倍</p><p>视星等的延伸：数字越小，亮度越大</p><p>绝对星等：恒星本身的亮度</p><p>常见视星等</p><p>天狼星：-1.46</p><p>老人星：-0.72</p><p>满月：-12.92</p><p>太阳：-26.74</p><p>现代天文学:88星座</p><p>用希腊字母表示星座中亮度等级</p><p>12星座，黄道12宫</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211227190406194.png" style="zoom:50%;" /></div><p>由自转而观察到的现象：周日视运动</p><p>黄道：日——阳历</p><p>白道：月——阴历</p><p>出生时，太阳在恒星天对应的星座，就是星座</p><p>（蛇夫座：现代新加的黄道星座）</p><p>白道：三垣二十八宿</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211227190342692.png" style="zoom:50%;" /></div><p>黄道：节气</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211227190559603.png" style="zoom:50%;" /></div><p>农历不是阴历，而是阴阳历，使用啦黄道和白道</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211227190726152.png" style="zoom:67%;" /></div><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211227191052324.png" style="zoom:67%;" /></div><p>描述天体的位置</p><p>仰角：</p><p>方位角：正北0 正东90 </p><p>几乎所有肉眼课件的星星都在银河系内，且占银河系很小的一部分</p><hr><h1 id="第三期-哥白尼-日心说"><a href="#第三期-哥白尼-日心说" class="headerlink" title="第三期 哥白尼 日心说"></a>第三期 哥白尼 日心说</h1><p>简化的地心说</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211228171448406.png" style="zoom:67%;" /></div><p>毕达哥拉斯中心火理论</p><p>阿里斯塔克斯 日心说</p><p>哥白尼：计算得到日心说《天体运行论》</p><ul><li>地球在自转</li></ul><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211228171835102.png" style="zoom:67%;" /></div><p><strong>哥白尼《天体运行论》</strong>发表后的同年，他与世长辞，书的出版并没有引起什么轰动</p><p>50年后的布鲁诺，将日心说推广开，公开宣扬日心说，反对教会的权威</p><p>布鲁诺被教会处以火刑</p><p>第谷：<a href="https://zhuanlan.zhihu.com/p/67560148">科学家中的土豪之一：没鼻子的第谷 - 知乎 (zhihu.com)</a></p><p>炼金，占卜，占星</p><p>1572年，超新星爆炸——第谷超新星</p><p>1577年，大彗星事件</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211228172936242.png" style="zoom:50%;" /></div><p>第谷的模型</p><p>第谷计算能力差，不知道怎么利用数据验证自己的模型</p><p>第谷与开普勒认识，开普勒成为第谷的助手</p><p>开普勒认为，日心说模型正确</p><p>第谷去世后，其所有的数据都给了开普勒</p><hr><h1 id="第四期-开普勒三大定律"><a href="#第四期-开普勒三大定律" class="headerlink" title="第四期 开普勒三大定律"></a>第四期 开普勒三大定律</h1><p>开普勒：《宇宙的神秘》</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211228173742788.png" style="zoom:50%;" /></div><p>最先发现的是开普勒第二定律</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211228174118152.png" style="zoom:67%;" /></div><p>之后发现开普勒第一定律</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211228174139572.png" style="zoom:67%;" /></div><p><strong>《新天文学》</strong></p><p>开普勒第三定律</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211228174354415.png" style="zoom:67%;" /></div><p>开普勒之后，天文学与占卜正式分道扬镳</p><hr><h1 id="第五期-伽利略"><a href="#第五期-伽利略" class="headerlink" title="第五期 伽利略"></a>第五期 伽利略</h1><p>单摆</p><p>比萨斜塔，落球实验（伽利略没做过这个实验），但伽利略做过斜面实验</p><p>伽利略否认亚里士多德，赞同日心说</p><p>改良<strong>望远镜</strong>-观测月亮</p><p>用望远镜观测木星，发现了<strong>木星的卫星</strong>，四颗卫星（现在被称为伽利略卫星）——证明地心说不对</p><p>观测银河，银河是众多星体重叠起来的效果</p><p>观测金星：金星也有相位</p><p>观测太阳，太阳黑子</p><p><strong>《星界信使》</strong></p><p>《论太阳黑子》</p><p>《试金者》：抨击亚里士多德，<strong>惯性定律</strong>，崇尚数学</p><p>《过于托勒密和哥白尼两大世家体系的对话》：探讨日心说为什么的对的，地心说为什么是错的</p><p>被罗马宗教裁判，终身软禁</p><p>《两门新科学》——实验科学，揭开近代科学的序幕</p><p>之后，双目失明，然后与世长辞</p><h1 id="第六期-牛顿"><a href="#第六期-牛顿" class="headerlink" title="第六期 牛顿"></a>第六期 牛顿</h1><p>剑桥大学，三一学院</p><p>二项式定理的拓展（帕斯卡，杨辉（杨辉三角））</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129103633236.png" alt="image-20220129103633236"  /></div><p>伦敦大瘟疫</p><p>伦敦大火灾</p><p>伦敦大瘟疫期间，牛顿研究：万有引力，微积分，光的色散</p><p>牛顿，第二任卢卡斯数学教授</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129104251042.png"/></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">历任卢卡斯教授：<br>1664-1669<br>巴罗（Isaac Barrow） 数学<br>1669-1702<br>牛顿（Sir Isaac Newton） 数学及物理学<br>1702-1710<br>惠斯顿（William Whiston） 数学<br>1711-1739<br>桑达生（Nicolas Saunderson） 数学<br>1739-1760<br>柯尔生（John Colson） 数学<br>1760-1798<br>爱德华·华林（Edward Waring） 数学<br>1798-1820<br>米尔纳（Isaac Milner） 数学及化学<br>1820-1822<br>伍德侯斯（Robert Woodhouse） 数学<br>1822-1826<br>脱尔顿（Thomas Turton） 数学<br>1826-1828<br>乔治·比德尔·艾里（Sir George Airy） 天文学<br>1828-1839<br>查尔斯·巴贝奇（Charles Babbage） 数学及计算学<br>1839-1849<br>金（Joshua King） 数学<br>1849-1903<br>斯托克斯（Sir George Stokes） 物理学及流体力学<br>1903-1932<br>约瑟夫·拉莫尔（Sir Joseph Larmor） 物理学<br>1932-1969<br>保罗·狄拉克（Paul Dirac） 物理学<br>1969-1980<br>詹姆士·拉莫（Sir M. James Lighthill） 流体力学<br>1980- 2009<br>霍金（Stephen Hawking） 理论物理学<br>2009-2015<br>迈克尔·格林（Michael Green） 理论物理学<br>2015-<br>迈克尔.盖茨（Michael Cates）凝聚态物理<br></code></pre></td></tr></table></figure><p>牛顿改良望远镜，伽利略的望远镜会有色差现象，因为光的色散，牛顿发明反射望远镜</p><p><a href="https://zhuanlan.zhihu.com/p/428306021">反射式望远镜的出现 - 知乎 (zhihu.com)</a></p><p>罗伯特·胡克支持波动说，牛顿支持粒子性</p><p>《流数法》：微积分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">牛顿：流数<br><br>莱布尼茨：微积分<br></code></pre></td></tr></table></figure><p>《自然哲学的数学原理》：万有引力和牛顿三大运动定律</p><p>《光学》：光学</p><p>英国皇家造币厂：研究炼金术</p><p>自然与自然的法则，都隐藏在黑暗之中；上帝说“让牛顿去吧！”于是，一切变为光明</p><h1 id="第七期-万有引力定律"><a href="#第七期-万有引力定律" class="headerlink" title="第七期 万有引力定律"></a>第七期 万有引力定律</h1><p>伽利略的相对性原理，参考系</p><p>笛卡尔:”我思故我在”</p><p>笛卡尔，机械运动理论</p><p>惠更斯：离心力，离心的趋势</p><p>胡克：向心力（开普勒定律），影响牛顿</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129110742360.png" alt="image-20220129110742360"  /></div><p>牛顿三大定律</p><ol><li>惯性定律</li><li>F&#x3D;ma</li><li>作用力和反作用力</li></ol><p>牛顿和另一个科学家胡克争辩。两人相互写信争辩，一个月之后牛顿给胡克回信道：“笛卡尔踏出了很好的一步（指光学研究），而你则推进了许多方面的发展……如果我看得更远一点的话，是因为我站在巨人的肩膀上。”看是自谦，恭维胡克，意思是说自己的成就是建立在前人的基础上。而实际上胡克身材矮小，而且有驼背的毛病，明褒暗讽，我借鉴的是笛卡尔这个巨人而不是胡克你这个矮子。<br>牛顿的话一语双关。现代学者为了科学家等名人正面的形象，一般都只会突出一面人格。同样的事例还有爱因斯坦辱华。华盛顿戴着“黑奴”的假牙。马丁路德金获诺贝尔奖前夜仍然招嫖。齐白石和郭沫若好色好财。汪精卫其实并不怕死。曾国潘和李元章一生清贫鞠躬尽瘁。孔融口无遮拦喜欢喷人。历史上的李绅并不像其诗《悯农》那样同情百姓。凿壁偷光主人公…</p><h1 id="第八期-哈雷彗星的预言"><a href="#第八期-哈雷彗星的预言" class="headerlink" title="第八期 哈雷彗星的预言"></a>第八期 哈雷彗星的预言</h1><p>英国皇家学会：约翰·威尔金斯，罗伯特·胡克，波义耳，克里斯多佛·雷恩等十二人</p><p>罗伯特·胡克:用显微镜发现了细胞，cell</p><p>列文虎克：用显微镜发现了细菌真菌等，微生物之父</p><p>格林尼治皇家天文台，约翰·佛兰斯蒂德</p><p><a href="https://www.zhihu.com/question/64899196">天体如何命名？ - 知乎 (zhihu.com)</a></p><p>佛兰斯蒂德：《大不列颠星表》，恒星命名法，第一任英国皇家天文台台长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">佛兰斯蒂德命名法<br><br>恒星的佛兰斯蒂德命名法与拜耳命名法类似，除了以数字取代希腊字母外，每颗恒星还是以数字和拉丁文所有格的星座名称结合在一起。<br><br>在每一个星座中，数字起初是随著赤经的增加而增加，但是因为岁差影响，现在有些地方已经不合规定了。这种命名法最早出现在约翰·佛兰斯蒂德的Historia coelestis Britannica，是哈雷与牛顿未经约翰·佛兰斯蒂德同意就在1712年出版的。在约翰·佛兰斯蒂德过世後，1725年的最後一版，包含了约3,000颗恒星，比过去的星表都要巨大，准确度也更高。<br>这种命名法在18世纪获得普遍的认同，没有拜耳名称的恒星几乎都会以这种数字来标记，但有拜耳名称的恒星全部依然继续沿用旧名，而佛氏编号就几乎完全被舍弃不用。有些著名的恒星都是使用佛氏编号标示的，例如，人马座 51(参见太阳系外行星)、天鹅座 61(参见视差)，都是采用佛氏编号命名的。<br>当现代的星座界限在草拟时，有些已经有佛氏编号的恒星被分割到没有被编号过的星座内，或是因为已经有了拜耳的名称，而省略了编号。但需要特别注意的是佛氏编号只涵盖到在大不列颠可以看见的星星，因此偏向南天的星座都没有佛氏编号。(两个例外是球状星团杜鹃座 47和邻近的波江座 82。)<br>在佛兰斯蒂德的目录上有些错误的记载，例如，佛兰斯蒂德在1690年记录了天王星，但他没有认出那是颗行星，而将他登录为金牛座 34。<br></code></pre></td></tr></table></figure><p>德国天文学家，约翰·拜尔（1603年）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">拜尔命名法<br><br>拜耳恒星命名法（Bayer designation）是由约翰·拜耳（Johann Bayer）在其《测天图》（Uranometria，1603年）中所提出的恒星系统命名法。根据这命名法，一颗恒星的名字由两部份所组成：前半部为一希腊字母，后半部则是恒星所处星座的属格。原则上一个星座之中亮度最大的那一颗星就会被称为α，第二大的就会是β，接着就是γ、δ……如此类推。但实际上在很多星座中，α星未必就是亮度最大的那一颗星，次序倒转并不罕见；甚至有些星所处的星座跟其名字所显示的并不符合。虽然如此，这些名字还有一定用处，所以它们仍被广泛使用。<br><br>巴耶恒星名一般有两种写法。第一种是全写，如Alpha Canis Majoris（天狼星）及Beta Persei（大陵五）；另一种是简写，即小阶希腊字母加星座的三字母标准简写，如α CMa及β Per。<br>希腊字母只有24个，要命名同一星座中更多的星时，巴耶就利用小阶拉丁字母，然后就是大阶拉丁字母。但是这些名字很少被用到，h Persei（实为一个星团）及P Cygni为当中少数的例子。值得注意的是巴耶命名恒星时只去到Q这个字母，以后的字母都没有使用。如W Virginis这样的名字其实是变星命名。<br><br>有些星共同拥有一个巴耶名字，如一些双星、聚星。这些时候就会在名字中的字母后上方加上一个数字去分辨它们，如猎户座的π1、π2、π3、π4、π5与π6 Orionis。<br></code></pre></td></tr></table></figure><p>哈雷，牛津大学，第二任英国皇家天文台台长</p><p>去南半球看星星，绘制南天星表</p><p>彗星，扫把星，脏雪球</p><p>哈雷计算彗星轨道，《彗星天文学》，预言彗星的回归</p><p>2061年，哈雷彗星回归</p><p>哈雷彗星是太阳系彗星，周期彗星</p><p>非周期彗星</p><p>金星凌日，测日地距离</p><p>哈雷发现<strong>恒星的自行</strong></p><h1 id="第九期-岁差"><a href="#第九期-岁差" class="headerlink" title="第九期 岁差"></a>第九期 岁差</h1><p>日心说成为主流思想</p><p>周日视运动</p><p>周年视运动</p><h2 id="岁差"><a href="#岁差" class="headerlink" title="岁差"></a>岁差</h2><p>年的定义</p><ul><li>太阳在恒星天上行走一圈的周期——地球的公转——恒星年：365.25636天</li><li>正午太阳高度，影子长度，夏至和冬至——太阳直射回归线的周期——回归年：365.2422天</li></ul><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129114305726.png"/></div><p>回归年比恒星年短：20分24秒，<strong>岁差</strong></p><p>最早发现岁差的人是喜帕恰斯</p><p>中国古人：<strong>恒星年：年；回归年：岁</strong></p><h2 id="进动"><a href="#进动" class="headerlink" title="进动"></a>进动</h2><p>岁差的原因：地球的赤道面在转动（地轴在旋转）——旋转周期，25786年——<strong>进动</strong></p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129115051359.png" style="zoom:50%;"/></div>岁差影响了天极的位置<div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129115457627.png"/></div><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129115515021.png"/></div>进动的原因：自转轴和对称轴之间存在夹角；<p>地球公转轴的也有进动</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129115711927.png"/></div><h2 id="章动"><a href="#章动" class="headerlink" title="章动"></a>章动</h2><p>地球自转轴的章动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">章动（nutation），是天文学术语。当陀螺的自转角速度不够大时，则除了自转和进动外，陀螺的对称轴还会在铅垂面内上下摆动，称为章动。<br>章动数值通常可以分为平行和垂直于黄道的两个分量，在黄道上的分量称为黄经章动，垂直黄道的分量称为斜章动。<br>岁差和章动的共同影响，使得真天极绕着黄极在天球上描绘出一条波状曲线。另外影响火箭弹锥形运动稳定性的主要因素是弹体的章动和进动的耦合运动。<br></code></pre></td></tr></table></figure><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129121223407.png"/></div>日地距离的测量<p>开普勒第三定律牛顿的修正</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220129120005859.png"/></div><p><strong>地球质量</strong>的测量</p><p>马斯基林的榭赫伦山实验：<a href="https://www.bilibili.com/video/BV1Ht411X7r4?spm_id_from=333.999.0.0">如何测量地球的质量？最美物理实验第六名——卡文迪许扭秤_哔哩哔哩_bilibili</a></p><p>天体之间的距离的测量</p><ol><li>视差：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">视差就是从有一定距离的两个点上观察同一个目标所产生的[方向](https://baike.baidu.com/item/方向/4631)差异。从目标看两个点之间的夹角，叫做这两个点的视差角，两点之间的连线称作基线。只要知道视差角度和基线长度，就可以计算出目标和观测者之间的距离。<br><br>詹姆斯·布拉德雷：第三任英国皇家天文台台长<br>1. 光行差：光行差（或称为天文光行差、恒星光行差）是指运动的观测者观察到光的方向与同一时间同一地点静止的观测者观察到的方向有偏差的现象。光行差现象在天文观测上表现得尤为明显。由于地球公转、自转等原因，地球上观察天体的位置时总是存在光行差，其大小与观测者的速度和天体方向与观测者运动方向之间的夹角有关，并且在不断变化。<br>2. 地球的章动，地球的章动主要是月亮和太阳的潮汐力变化引起的<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">极移与章动<br><br>极移（polar wandering）地球自转轴相对于地球本体的位置是变化的，这种运动称地极移动，简称极移。<br>1765年，L.欧拉在假定地球是刚体的前提下，最先从力学上预言极移的存在。一直到1888年德国的K.F.屈斯特纳才从纬度变化的观测中发现极移。1891年，美国天文学家张德勒进一步指出，极移包括两个主要的周期成分：一个是近于14个月的周期；另一个是周年周期。前者叫作张德勒周期,这种极移成分是非刚体地球的自由摆动（见张德勒摆动）。极移的周年成分主要是由大气作用引起的受迫摆动。二者合起来，极移的范围不超过±0.4″。<br><br>章动:<br><br>https://www.zhihu.com/question/434071655<br></code></pre></td></tr></table></figure><h1 id="第十期-天体间距离的测量"><a href="#第十期-天体间距离的测量" class="headerlink" title="第十期 天体间距离的测量"></a>第十期 天体间距离的测量</h1><p><a href="https://zhuanlan.zhihu.com/p/33445584">天体距离的测量 - 知乎 (zhihu.com)</a></p><ol><li>雷达测距（地月）</li><li>激光测距（地月） </li><li>视差（地月）</li></ol><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220130115312576.png" style="zoom:50%;" /></div><ol start="4"><li>恒星的视差（300光年内的恒星测距）（德国数学家——贝塞尔）<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220130120225728.png"/></div></li></ol><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220130120251054.png"/></div><ol start="5"><li><p>分光视差法</p></li><li><p>光谱分析法（300-30000秒差距内的恒星）</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220130120443980.png"/></div></li><li><p>造父变星法（千万光年内的恒星测距）</p></li></ol><p>仙王座δ星（中文：造父一），亮度周期性变化，因为该恒心会周期性的膨胀和收缩。</p><p>膨胀-&gt;变亮</p><p>收缩-&gt;变暗</p><p>周期：光变周期</p><p>造夫一的光变周期：5d8h46m38s</p><p>有光变周期的恒星统称为造父变星，光变周期越长，恒星的亮度越大</p><p>测距：通过周期估算亮度，然后就得到了绝对星等，通过视星等，估算出距离</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220130120732377.png"/></div><ol start="8"><li>谱线红移法（百亿光年之外的恒星测距）</li></ol><p>恒星的光谱存在红移现象，且越远的恒星的红移量越大（哈勃）</p><p>哈勃定律：</p><p>Z：红移量</p><p>H:哈勃常数（目前不确定）</p><p>c：光速</p><p>r：距离</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220130121344296.png"/></div><h1 id="第十一期-天文单位"><a href="#第十一期-天文单位" class="headerlink" title="第十一期 天文单位"></a>第十一期 天文单位</h1><p>日地距离：1AU：一个天文单位</p><p>1AU&#x3D;1.496亿千米</p><ol><li><p>视差法:不好，以地球半径为基线，视差角为9角秒</p></li><li><p>月相法:阿里斯塔克斯,使用月地距离作为极限,太阳的视差角:8角分</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220130123507703.png"/></div></li></ol><p>月相的原因,太阳的光线照亮了月球的一半,地月之间相对位置的变化,引起地球上对观看月亮明暗形状的变化</p><p><a href="https://www.bilibili.com/video/BV1zh411X7eh/">月相变化的原因、月球自转的正确姿势_哔哩哔哩_bilibili</a></p><p><a href="https://www.zhihu.com/search?q=%E6%9C%88%E7%9B%B8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:157754857%7D">月相</a>的成因就是日地月三者的位置关系。月球是总是有一面对着太阳而被照亮，如果是初一，月球位于日地之间，则月亮被照亮的那一面完全背对着地球，我们看不到月亮，如果十五，月亮在地球正后方，被照亮的一面完全对着地球，故是圆的;而初七或二十三，月球位于地球侧面，月球被照亮的一面只有一半对着地球，故是半月(当然一个这两天月亮凸的方向正好相反)。具体看下图:</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/v2-ad31e9e0aa1e916a56c6f987f171994e_720w.jpg" alt="img" style="zoom:200%;" /></div><ol start="3"><li>开普勒第三定律</li><li>测量恒星的轨道差,卡西尼</li></ol><p>卡西尼1625年出生于<a href="https://baike.baidu.com/item/%E6%84%8F%E5%A4%A7%E5%88%A9">意大利</a>的佩里纳尔多，在<a href="https://baike.baidu.com/item/1648%E5%B9%B4">1648年</a>至<a href="https://baike.baidu.com/item/1669%E5%B9%B4">1669年</a>期间曾在旁扎诺天文台工作。<a href="https://baike.baidu.com/item/1640%E5%B9%B4">1640年</a>起，担任<a href="https://baike.baidu.com/item/%E5%8D%9A%E6%B4%9B%E5%B0%BC%E4%BA%9A%E5%A4%A7%E5%AD%A6">博洛尼亚大学</a><a href="https://baike.baidu.com/item/%E5%A4%A9%E6%96%87%E5%AD%A6">天文学</a><a href="https://baike.baidu.com/item/%E6%95%99%E6%8E%88">教授</a>，并在<a href="https://baike.baidu.com/item/1671%E5%B9%B4">1671年</a><a href="https://baike.baidu.com/item/%E5%B7%B4%E9%BB%8E%E5%A4%A9%E6%96%87%E5%8F%B0">巴黎天文台</a>落成后成为该台的第一任总监直到去世。<a href="https://baike.baidu.com/item/1673%E5%B9%B4">1673年</a>加入法国<a href="https://baike.baidu.com/item/%E5%9B%BD%E7%B1%8D">国籍</a>，改名为<a href="https://baike.baidu.com/item/%E6%B3%95%E6%96%87">法文</a>，即让-多米尼克·卡西尼，又称卡西尼一世（Cassini I，其曾孙与其同名，称卡西尼二世）。</p><p>卡西尼是一位保守的天文学家，他不接受<a href="https://baike.baidu.com/item/%E5%93%A5%E7%99%BD%E5%B0%BC">哥白尼</a>的日心说，也反对<a href="https://baike.baidu.com/item/%E5%BC%80%E6%99%AE%E5%8B%92%E5%AE%9A%E5%BE%8B">开普勒定律</a>、<a href="https://baike.baidu.com/item/%E8%89%BE%E8%90%A8%E5%85%8B%C2%B7%E7%89%9B%E9%A1%BF">艾萨克·牛顿</a>的<a href="https://baike.baidu.com/item/%E4%B8%87%E6%9C%89%E5%BC%95%E5%8A%9B%E5%AE%9A%E5%BE%8B">万有引力定律</a>和<a href="https://baike.baidu.com/item/%E5%85%89%E9%80%9F">光速</a>有限学说。卡西尼于1711年失明，次年(1712年)逝世于法国<a href="https://baike.baidu.com/item/%E5%B7%B4%E9%BB%8E">巴黎</a>。除了天文学的贡献以外，他亦曾被<a href="https://baike.baidu.com/item/%E6%95%99%E5%AE%97">教宗</a>委任治理<a href="https://baike.baidu.com/item/%E6%B3%A2%E6%B2%B3">波河</a>的防治、管理及防汛工程。</p><p>当代人类探测<a href="https://baike.baidu.com/item/%E5%9C%9F%E6%98%9F">土星</a>的<a href="https://baike.baidu.com/item/%E6%8E%A2%E6%B5%8B%E5%99%A8">探测器</a>“<a href="https://baike.baidu.com/item/%E5%8D%A1%E8%A5%BF%E5%B0%BC%E5%8F%B7">卡西尼号</a>”即以他的名字命名。</p><ol start="5"><li>金星凌日测量日地距离-哈雷</li></ol><p><a href="https://www.zhihu.com/question/20200833">用“金星凌日”怎么测算日地距离？ - 知乎 (zhihu.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">凌日：所谓的凌日，通常是指地内行星从地球与太阳之间经过，在地球上的观察者会发现一个黑点从太阳表面通过，持续一个多小时，称为X星凌日。同理，在地球之外的其他行星，除了水星之外，均可观察到其内侧行星的凌日，比如火星上可以看到地球凌日。<br><br>冲日（英文：opposition）：所谓的冲日，简称冲，通常是指在地球上观察的天体和太阳的位置相差180度，即该天体和太阳分别在地球的两侧，天体、地球、太阳排成一条直线。同理，在其他行星的外侧，除了冥王星之外，均可观察到其外侧行星的冲日，比如火星上可以看到木星冲日。<br>冲日前后是观测天体的好时机，因为天体在冲的位置时，当太阳落下，天体刚从东方地平线升起，至午夜时分天体的地平位置最高，至翌日的日出前天体才西下，所以天体整夜皆可见，这时天体与地球的距离也是一年中最短的，视直径最大，也是最亮的。<br>而因为地球与行星的轨道非正圆之关系，天体在近日点前后的冲较接近地球，亮度也是历次冲日之中最亮的，这个冲即大冲，相对于其他的冲日即称小冲或直接称冲日。<br><br>合日：相对于冲日的现象叫合日，合日即天体视位置跟太阳为同一方向，该天体和太阳都处于地球的同一侧，此时天体与太阳同升落，受太阳光线影响不能见到，有日食发生时除外。<br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220130124429363.png"/></div><p>1761年,金星凌日</p><p>金星凌日的周期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">虽然罕见，但是准确预测这一天文现象并不困难。金星凌日以243年的周期重复如下相同的模式：经过121.5年漫长的岁月，会出现一对间隔8年的凌日事件，而再过105.5年之后，会出现另一对间隔8年的凌日事件，如此重复。但是这121.5年和105.5年只代表了最近几千年的情况，随着时间的推移是会改变的，只有243年的周期却是始终恒定。<br>为什么以243年为周期呢？这涉及到天体力学方面的问题。如果两个天体的运行轨道的公转周期构成整数比，他们之间就会受到彼此周期性的引力影响，使得二者的轨道在互相的引力扰动下，保持稳定。而地球与金星之间，就存在着接近243:395的轨道共振。地球上的243个恒星年（每年365.25636天）是88757.3天，而金星上的395个恒星年（每年224.701天）是88756.9天，二者十分接近——这意味着每经过243年，地球和金星就几乎运行到了各自轨道上的相同位置。<br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220130125141972.png"/></div><p><a href="https://www.bilibili.com/video/BV1134y1r7yL?spm_id_from=444.41.0.0">https://www.bilibili.com/video/BV1134y1r7yL?spm_id_from=444.41.0.0</a></p><h1 id="第十二期-天王星和海王星"><a href="#第十二期-天王星和海王星" class="headerlink" title="第十二期 天王星和海王星"></a>第十二期 天王星和海王星</h1><p> 提丢斯-波德公式：行星轨道经验公式</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220205115826070.png"/><p>威廉·<strong>赫歇尔</strong>：35岁之前玩音乐，之后玩天文，玩望远镜，发现了<strong>天王星</strong>。</p><p><a href="https://zhuanlan.zhihu.com/p/33260465">威廉·赫歇尔：我一个德国音乐家，怎么就跑到英国当了天文学家？ - 知乎 (zhihu.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">第一任格林尼治天文台台长弗兰斯蒂德曾经发现了天王星，但是错误将其标记为金牛座34。<br><br>弗兰斯蒂德星表：本博客德第八期、和另一篇博客：巡天（一），均提到了该星表<br></code></pre></td></tr></table></figure><p>确定行星德轨道需要六个参数，轨道参数（轨道根数）：轨道倾角，升交点黄经，离心率，近日点辐角，椭圆半长轴，平近点角</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220205133555241.png"/></div>拉普拉斯确定了天王星的轨道参数。<p>因为天王星的观测轨道和计算轨道有区别，轨道椭圆有<strong>摄动</strong>现象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">摄动指一个天体绕另一个天体按 二体问题 的规律运动时，因受其它 天体 的吸引或其他因素的影响在轨道上产生的偏差，这些作用与中心体的引力相比是很小的，因此称为摄动。<br></code></pre></td></tr></table></figure><p>皮亚奇：谷神星，第五颗<strong>行星</strong>，太小了，难观测</p><p>高斯：计算了谷神星的轨道</p><p>奥伯斯：不仅再次观测到了谷神星，而且发现了与谷神星相似的星</p><p>之后逐渐发现了四个：谷神星，智神星，婚神星，灶神星。</p><p>由于行星个数太多，且半径太小，之后天文学家统一命名为小行星。</p><p>（现在：谷神星被划分为矮行星，半径500公里）</p><p>亚当斯和勒维耶，两人分别独立同时使用纯粹的数学计算出了海王星的轨道；</p><p>德国天文学家伽勒根据勒维耶的论文，观测到了海王星。</p><h1 id="第十三期-冥王星"><a href="#第十三期-冥王星" class="headerlink" title="第十三期 冥王星"></a>第十三期 冥王星</h1><p>美国罗威尔天文台，寻找第九颗行星</p><p>克莱德·汤博在1930年发现了冥王星，第九颗行星</p><p>2016年，冥王星被降级为矮行星。太阳系内只有八大行星。</p><p>2006年，国际天文联合会对行星做出定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 轨道必须环绕太阳（或者其它星系的中心恒星）<br>2. 有足够的质量使它的自身引力克服刚体力，使它呈流体静力平衡（接近圆形）的形状，即接近圆球体<br>3. 将临近轨道上的天体清除<br>4. 不能发生核聚变<br>5. 不能是行星的卫星<br></code></pre></td></tr></table></figure><p>冥王星不满足第三条。柯伊伯天体带。</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-07-43.png"/></div>矮行星的定义<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 轨道环绕太阳<br>2. 有足够的质量使它的自身引力克服刚体力，使它呈流体静力平衡（接近圆形）的形状，即接近圆球体<br>3. 不能将临近轨道的天体清除<br>4. 不能是行星的卫星<br></code></pre></td></tr></table></figure><p>太阳系小天体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">除了行星和矮行星之外的所有太阳系天体的统称<br>小行星+彗星等<br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-30-12.png"/><h2 id="水星"><a href="#水星" class="headerlink" title="水星"></a>水星</h2><p>Mercury（墨丘利）</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-12-32.png"/></div>墨丘利是罗马神话中的信使神<p>水星的公转速度是太阳系中所有行星最快的，公转周期不到88个地球日，，自转周期58.646地球日</p><p>轨道共振，比例3：2，即水星自转三圈恰好公转两圈</p><p>太阳系中最小的行星，水星半径&#x3D;2440千米，水日距&#x3D;0.387AU</p><p>水星因为距离太阳太近了，一般很难看到，日出日落是观测时间段。</p><p>水星上有稀薄的大气（几乎没有）：自身重力小，留不住大气；距离太阳太近了。</p><p>昼夜温差600多度。</p><h2 id="金星"><a href="#金星" class="headerlink" title="金星"></a>金星</h2><p>太白星，启明星，长庚星，肉眼可见最亮的行星（浓厚的大气层和云层，反射率高，大气90%的二氧化碳，温室效应强，云层是浓硫酸，反射阳光）</p><p>高压高温</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-21-22.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-22-37.png"/><p>唯一一个能够逆行自转（曾经受到小行星的撞击，被撞到逆性了）的，从金星上看太阳，太阳是从西边出来。</p><h2 id="地球"><a href="#地球" class="headerlink" title="地球"></a>地球</h2><p>地球的卫星——月球</p><p>水星，金星没有卫星</p><p>由于潮汐锁定，月亮只有一个面对着地球</p><p>月球为地球挡下了很多陨石的撞击；</p><p>月球没有大气</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-26-54.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-27-04.png"/><h2 id="火星"><a href="#火星" class="headerlink" title="火星"></a>火星</h2><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-29-53.png"/></div>火星表面的氧化铁时的火星表面呈现出红色<p>大气稀薄主要是二氧化碳，环境恶劣，温差大</p><p>2013年，好奇号发现火星上有水分</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-32-20.png"/><p>两个卫星</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-33-21.png"/><h2 id="木星"><a href="#木星" class="headerlink" title="木星"></a>木星</h2><p>固体星，类地行星：水星，金星，地球，火星</p><p>流体星，巨行星：木星，土星，天王星，海王星（这四颗行星都具有行星环，只是土星的星环最为明显）</p><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-35-50.png"/></div>木星是太阳系内最大的行星，主要成分是氢和氦 <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-37-55.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-38-09.png" /><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-38-15.png" style="zoom:80%;" /><p>木星卫星目前发现了79颗</p><p>1994年。彗木相撞，素梅克-列维9号彗星撞击到了木星的南半球</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-40-49.png"/><h2 id="土星"><a href="#土星" class="headerlink" title="土星"></a>土星</h2><p>大气：氢和氦</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-41-39.png"/><p>土星环的宽度有8万千米，平均厚度为10米</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-42-41.png"/><p>图像环的成因：卫星靠近土星太近，超过了洛希极限，然后被撕成了碎片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">洛希极限<br>爱德华·艾伯特·洛希 （1820.10.17－1883.4.27），法国数学家与天文学家，他的杰出主要表现在天体力学的领域，他的名字被冠在洛希球、洛希极限和洛希瓣等概念上。<br>这里我们就简单的介绍下这个洛希极限。所谓洛希极限是指一个天体（一般是较小的）被另一个天体的潮汐力作用，小天体被大天体撕碎的一种极限值（往往是指它们之间距离上的极限）。<br><br>换言之，洛希极限是一个天体自身的重力与第二个天体造成的潮汐力相等时两者之间的距离。如果两者之间的距离小于这个洛希极限值，那么较小的这个天体就会被倾向于碎散或被“撕裂”，继而成为母天体的环。<br><br>洛希极限（Roche <span class="hljs-built_in">limit</span>）是一个天体自身的引力与第二个天体造成的潮汐力相等时的距离。当两个天体的距离少于洛希极限，天体就会倾向碎散，继而成为第二个天体的环。它以首位计算这个极限的人爱德华·洛希命名。<br>洛希极限常用于行星和环绕它的卫星。有些天然和人工的卫星，尽管它们在它们所环绕的星体的洛希极限内，却不至成碎片，因为它们除了引力外，还受到其他的力。木卫十六和土卫十八是其中的例子，它们和所环绕的星体的距离少于流体洛希极限。它们仍未成为碎片是因为有弹性，加上它们并非完全流体。在这个情况，在卫星表面的物件有可能被潮汐力扯离卫星，要视乎物件在卫星表面哪部分——潮汐力在两个天体中心之间的直线最强。一些内部引力较弱的物体，例如彗星，可能在经过洛希极限内时化成碎片。苏梅克－列维9号彗星就是好例子。它在1992年经过木星时分成碎片，1994年落在木星上。现时所知的行星环都在洛希极限之内。<br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-45-53.png"/><p>地质结构</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-46-41.png"/><p>目前确定的卫星：62颗，土卫六是唯一一颗有大气层的卫星，土卫六的体积比水星还要大</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-47-26.png" style="zoom:80%;" /><h2 id="天王星和海王星"><a href="#天王星和海王星" class="headerlink" title="天王星和海王星"></a>天王星和海王星</h2><p>天王星体积大于海王星，质量小于海王星</p><p>主要大气成分是氢，甲烷，氨</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-50-09.png"/><p>天王星是唯一”躺着“转的行星，自转轴与公转平面几乎是平行的</p><p>天王星的地表是巨厚的冰层</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-51-58.png"/><p>海王星上具有太阳系最强烈的风</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-53-36.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-56-24.png"/><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-05_14-14-56-32.png"/></div><p>彗星：</p><p>短期彗星来自柯伊伯天体带</p><p>长期彗星来自奥尔特云</p><h1 id="第十四期-恒星天文学"><a href="#第十四期-恒星天文学" class="headerlink" title="第十四期 恒星天文学"></a>第十四期 恒星天文学</h1><p>威廉·赫歇尔（第十二期，天王星的发现者），恒星天文学之父</p><p><a href="https://baijiahao.baidu.com/s?id=1622286133400241525">名人风采：恒星天文学之父——威廉·赫歇尔 (baidu.com)</a></p><h2 id="恒星自行"><a href="#恒星自行" class="headerlink" title="恒星自行"></a>恒星自行</h2><p>哈雷发现恒星的自行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">自行是指恒星于一年内所行经的距离对观测者所张的角度 (横向运动)。 恒星对于太阳的空间运动可分解为视向运动和横向运动两个分量,后者常以一颗背景微弱的恒星在天球上的位移而测定,单位是角秒/年。 自行一般很小,只有200颗星的自行达到每年1角秒,其中50颗达到每年2角秒,而以“ 巴纳德星 ”的自行为最大,每年移动达10.31角秒,为地球上所见月球角直径的0.5%。 [1] 恒星在一年内沿着垂直于视线方向走过的距离对观测者所张的角度。 其单位为 角秒 /年。 1718年，E.哈雷把他当时观测所得的恒星位置同喜帕恰斯和托勒密的观测结果作比较，发现恒星的位置有显著的变化，首次指出了所谓恒星不动的概念是错误的。 <br><br>实际上，恒星在空间是运动的。观测到的恒星运动包括：①恒星的真正的运动，又称本动。②太阳运动引起的视运动，又称视差动。恒星自行是很小的，一般小于每年0″.1。只有 400多颗恒星的自行等于或大于每年1″，巴纳德星的自行最大，为每年10″.31 。引起恒星位置变化的原因，除自行外，还有岁差，这两项加在一起，称为恒星的年变。除去岁差的影响，即可求得绝对自行<br></code></pre></td></tr></table></figure><p>赫歇尔通过观测天狼星，北河二，南河三等七颗恒星，得出结论，我们的太阳是在运动的，朝向武仙座方向运动。因此太阳也不是宇宙的中心。</p><h2 id="双星系统"><a href="#双星系统" class="headerlink" title="双星系统"></a>双星系统</h2><p>赫歇尔发现了双星系统。</p><p>双星很早就被发现了，最早被发现的双星是大熊座的开阳。之前的猜测只是两颗星星的投影相距很近而已</p><p>1804年，赫歇尔发现了双星系统（目前称为：联星）</p><p><a href="https://baike.baidu.com/item/%E5%8F%8C%E6%98%9F/188330">双星（天文学术语）_百度百科 (baidu.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">联星有多种，一颗恒星围绕另外一颗恒星运动，或者两者互相围绕，并且互相间有引力作用，也称为物理双星；两颗恒星看起来靠的很近，但是实际距离却非常远，这称为光学双星。一般所说的双星，没有特别指明的话，都是指物理双星。根据观测方式不同，通过天文望远镜可以观测到的双星称为目视双星；只有通过分析光谱变化才能辨别的双星称为分光双星。<br>此外，还有一颗恒星围绕另一颗恒星运动，第三颗恒星又绕他们运动，这称为三合星。依此类推，还有四合星等等，这些都称为聚星。联星对于天体物理尤其重要，因为两颗星的质量可从通过观测旋转轨道确定。这样，很多独立星体的质量也可以推算出来。<br>著名的联星系统包括天狼星（肉眼可见的为天狼星，其伴星为白矮星）、南河三、大陵五以及天鹅座X-1（其中一个成员很可能是一个黑洞）。<br></code></pre></td></tr></table></figure><p>目前对双星的分类为两种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">光学双星：只是投影距离很近，没有共同的质心<br><br>联星：实际距离较近，有共同的质心<br></code></pre></td></tr></table></figure><p>开阳：哪一种双星说不清楚</p><h2 id="银河和星云"><a href="#银河和星云" class="headerlink" title="银河和星云"></a>银河和星云</h2><p>通过观测数据，猜测银河是圆盘状的</p><p>赫歇尔观测星云提出：星云就是一坨星系</p><h2 id="红外线"><a href="#红外线" class="headerlink" title="红外线"></a>红外线</h2><p>赫歇尔是第一个证实了红外线存在的人</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">红外线的发现来自一个偶然的实验。英国天文学家Frederick William Herschel（1738-1822），有一个灵感，想测量一下不同颜色的光的加热能力。让阳光通过三棱镜后达到白色纸屏上，和牛顿一样，看到了七个颜色的可见光，每一种可见光区域内的温度计的温度升高有所不同，为了和没有光（黑暗）的区域对比，他将一支温度计放在了红色光之外的黑暗区域，结果，令他惊奇的是，红色光区域之外的黑暗区域的温度计升温最大！他意识到红光之外的黑暗区域存在一种我们看不到的光，称之为“红外线”。<br></code></pre></td></tr></table></figure><p>受到赫歇尔的启发，人们之后发现了紫外线</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1801年，这位科学家先把一张纸放在氯化银溶液中浸泡一下，然后把它放在J棱镜可见光谱的紫光区域邻近。他发现，紫光外部地方的纸片强烈地变黑，说明纸片的这一部分受到了一种看不见的射线照射。他把紫光外附近的不可见光叫做“去氧射线”，这就是我们所说的紫外线。他还把红光外附近的不可见光叫做“氧化剔”线，也就是红外线。从此人类开始不断开发紫外线的用途，为人类造福。<br><br>他就是德国科学家里特，里特于1776年12月出生于萨姆尼茨，在1791年到1795年在耶拿大学学医，但到1797年里特开始从事电学和电化学方面的研究，是德国作为伽伐尼电研究的先驱者。1800年9月提出报告，在电解水实验中，他成功的收集到两种气体（应该都知道是啥吧），并从胆矾中电解出铜。<br></code></pre></td></tr></table></figure><p><a href="https://www.ccnta.cn/article/7620.html">紫外线的发现和应用发展史 (ccnta.cn)</a></p><p><a href="https://zhuanlan.zhihu.com/p/69012246">紫外线是如何被发现的 - 知乎 (zhihu.com)</a></p><h2 id="变星"><a href="#变星" class="headerlink" title="变星"></a>变星</h2><p>赫歇尔的儿子小赫歇尔（约翰·赫歇尔）也是研究天文学</p><p><a href="https://zhidao.baidu.com/daily/view?id=123775">天文学银枪小霸王——约翰·赫谢尔的故事_知道日报_百度知道 (baidu.com)</a></p><p>小赫歇尔到南半球长时间观星，发现了船底座η星（海山二）的亮度变化问题；</p><p>哈雷曾经记录海山二的亮度为4等星；</p><p>拉卡伊到南半球记录的海山二为2等星</p><p><a href="https://zhuanlan.zhihu.com/p/365483281">南天天文之父-拉卡伊 - 知乎 (zhihu.com)</a></p><p><a href="https://baike.baidu.com/item/%E6%8B%89%E5%8D%A1%E4%BC%8A/9367507">拉卡伊_百度百科 (baidu.com)</a></p><p>小赫歇尔看到海山二为二等星，之后（1838年）变成了一等星</p><p>之后天文学家开始了对变星的研究，还创造出来造父变星测距法（第十期天体间距离的测量 ）</p><p><strong>海山二</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">海山二距离地球只有7500光年，所以当它发生超新星爆炸或极超新星爆炸时可能会影响到地球，但是不太可能会直接影响到人类，因为大气层会阻挡外来的伽马射线。这次冲击影响的范围很可能被限制在大气层的上部，这个部份包括臭氧层、航天器、人造卫星与太空人。至少有一位科学家宣称，如果海山二演化成超新星或极超新星的话，“它将会明亮到即使在白天都可以看到，甚至在夜晚可以凭着它发生的亮光来看书[20]”。海山二造成的超新星或极超新星爆炸很可能将从两极发射出伽马射线暴。自从科学家从它的光度与X光的短暂变化中发现海山二至少是一个双星系统，甚至是三合星系统后，这可能增加或减少它成为超新星或极超新星时的强度<br></code></pre></td></tr></table></figure><p><a href="https://www.zhihu.com/question/26461721">海山二对银河系生命的威胁有多大？ - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/39194282">核光谱望远镜阵列证明超级巨星海山二发射宇宙射线 - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnbeta.com/articles/science/1230445.htm">科学家将大质量恒星“海山二”大爆发进行了视觉化处理 - 科学探索 - cnBeta.COM</a></p><h2 id="星表"><a href="#星表" class="headerlink" title="星表"></a>星表</h2><p>小赫歇尔综合自己和父亲赫歇尔的观测数据，整理了几张星表</p><p>星云表：5,079个星云</p><p>双星表：10,000多对双星</p><p>星表：70,000多颗恒星</p><p><a href="https://murphyhoucn.github.io/2022/01/28/%E5%B7%A1%E5%A4%A9%EF%BC%88%E4%B8%80%EF%BC%89/">https://murphyhoucn.github.io/2022/01/28/%E5%B7%A1%E5%A4%A9%EF%BC%88%E4%B8%80%EF%BC%89/</a></p><p>《天文学概要》</p><h2 id="摄影术"><a href="#摄影术" class="headerlink" title="摄影术"></a>摄影术</h2><p>小赫歇尔还对摄影术有一定的研究，摄影的单词photography是小赫歇尔发明的，之后影响到了达盖尔的银版法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">达盖尔银版法（Daguerreo <span class="hljs-built_in">type</span>），又称银板照相法，公认为它是照相的起源。 由达盖尔发明于1839年。 在研磨过的银版表面形成碘化银的感光膜，于30分钟曝光之后，靠汞升华显影而呈阳图。 达盖尔法可能是公认的摄影术发明人。 当时是，这种摄影方法的曝光时间约为30分钟，大大地短于尼埃普斯日光硬化的摄影方法。 用这种方法拍摄出的照片具有影纹细腻、色调均匀、不易褪色、不能复制、影像左右相反等特点。<br></code></pre></td></tr></table></figure><p>朗伯的光度学，牛顿的分光学，摄影术三项技术奠定了<strong>天体物理</strong>的兴起。</p><h2 id="对贝塞尔的影响"><a href="#对贝塞尔的影响" class="headerlink" title="对贝塞尔的影响"></a>对贝塞尔的影响</h2><p>同时期赫歇尔父子的数据影响了周年视差法的出现（第十期 天体间距离的测量）——贝塞尔</p><p><a href="https://baike.baidu.com/item/%E8%B4%9D%E5%A1%9E%E5%B0%94/696605">贝塞尔（德国天文学家，数学家）_百度百科 (baidu.com)</a></p><p>贝塞尔对双星的贡献</p><p>有些双星看起啦只是一颗星，但却是一个联星系统，因为另外的一颗星太暗了，看不到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">天狼星根据拜耳命名法的名称为大犬座α星。 我们肉眼以为是一颗恒星的天狼星，实际上是一个联星系统，其中包括一颗光谱型A1V的蓝矮星和另一颗光谱型DA2的暗白矮星伴星天狼星B（Bd：α CMa B）。<br><br>南河三是一个双星系统，由一颗白色主序星南河三A（属于F5 IV-V光谱类）和一颗DA型弱白矮星 南河三B 作为伴星组成。 南河三A的质量为1.4倍太阳质量，亮度是太阳的7.5倍，而南河三B的质量为0.6倍太阳质量，视星等为10.7。<br></code></pre></td></tr></table></figure><h1 id="第十五期-恒星光谱"><a href="#第十五期-恒星光谱" class="headerlink" title="第十五期 恒星光谱"></a>第十五期 恒星光谱</h1><p>牛顿：光的色散</p><p>夫琅和费：光栅分割仪，暗线：夫琅禾费谱线</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_11-11-19-42.png"/></div>基尔霍夫光谱学定律<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 每一种元素都有自己的光谱<br>2. 每一种元素都能够吸收它可以发射的光谱<br></code></pre></td></tr></table></figure><h2 id="连续光谱"><a href="#连续光谱" class="headerlink" title="连续光谱"></a>连续光谱</h2><p>频率不间断，炽热的固体，液体，高温高压气体发射连续光谱</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_11-11-24-38.png"/></div>## 发射光谱<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_11-11-26-18.png"/></div>对于太阳光谱上的暗线，基尔霍夫做出解释，暗纹是因为对应的元素吸收了该光谱。<h2 id="吸收光谱"><a href="#吸收光谱" class="headerlink" title="吸收光谱"></a>吸收光谱</h2><p>在连续的光谱上，叠加了某一种或某几种吸收暗线的光谱就叫做吸收光谱</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_11-11-27-10.png"/></div>根据元素发射光谱的两线位置，匹配太阳吸收光谱的暗线位置，就能得到太阳大气的元素组成；通过谱线的强弱，得到大气中该元素的含量的多少。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">太阳光谱为什么是吸收光谱而不是发射光谱？<br><br>恒星本身接近理想黑体，恒星发射的是连续光谱， 恒星外围的气体温度压强低，所以外围气体就会吸收特定频率的电磁波，因此就在连续光谱上面产生暗线，因此就是吸收光谱！<br><br>恒星光谱大半部分都吸收光谱，个别是发发射光谱（极少），也有的是吸收光谱和发生光谱同时呈现（即又有暗线也有亮线）<br><br>太阳日全食的时候的所看到的光谱就是发射光谱（日珥：低压高温气体）<br></code></pre></td></tr></table></figure><p>通过恒星的光谱还能得到<strong>恒星大致的表面温度</strong></p><p>通过光谱还能得到恒星的压力，磁场等信息</p><h2 id="分光学"><a href="#分光学" class="headerlink" title="分光学"></a>分光学</h2><p>通过多普勒效应，确定恒星的视向速度和自转</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">根据多普勒效应，如果恒星正在远离观察点，则谱线会整体红移，反之，谱线蓝移；<br>因为宇宙在膨胀，所以大部分恒星的谱线都会有红移现象<br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_11-11-48-04.png"/></div>##  光度学<p>喜帕恰斯（第二期）：视星等：恒星亮度分为六个等级，最亮的为一等星，勉强看到的为六等星</p><p>朗伯（第十四期 摄影术）：发展了光度学</p><p>普森（第二期）： 一等星的亮度是六等星亮度的100倍，星等差一等，亮度差了2.512倍，即100开五次方</p><p><a href="https://blog.csdn.net/a6333230/article/details/90036993">辐射照度、辐射强度、光照度、发光强度</a><br><a href="https://zhuanlan.zhihu.com/p/432123281">中科研 | 太阳辐射光照度和光强度的区别</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">发光强度：光源在单位立体角内发出的光通量，单位是坎德拉，即每球面度1流明。<br>光照度：被照明面单位面积上得到的光通量，单位是勒克斯，即每平方米1流明。<br>光出射度：光源单位面积上发出的光通量，单位与光照度相同。<br>光亮度：单位面积上沿法线方向的发光强度，或称单位面积在其法线方向上单位立体角内发出的光通量，单位是尼特，即每平方米每球面度1流明。<br></code></pre></td></tr></table></figure><p>发光强度：可见光</p><p>辐照强度：所有的电磁波</p><p>天文学中的光度：单位时间内，恒星整个表面辐射电磁波的总能量，单位：瓦特或尔格&#x2F;秒</p><p>星等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">绝对星等与视星等<br>绝对星等：恒星真实光度的参照，天文学家规定，将恒星移动（换算）到距离光差点10pc（10秒差距，1pc=3.26光年），将看到的视星等定义为该恒星的绝对星等，记作M<br>--<br>太阳的视星等：-26.7<br>太阳的绝对星等：4.8<br>--<br>天狼星的视星等:-1.46<br>天狼星的绝对星等：1.4<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/70310301">比较满月和超新星的亮度大小——视星等、绝对星等的换算关系 - 知乎 (zhihu.com)</a></p><blockquote><h3 id="目视星等"><a href="#目视星等" class="headerlink" title="目视星等"></a>目视星等</h3><p>是指我们用肉眼所看到的星等。看来不突出的、不明亮的恒星，并不一定代表他们的发光本领差。道理十分简单：我们所看到恒星视亮度，除了与恒星本生所辐射光度有关外，距离的远近也十分重要。同样亮度的星球距离我们比较近的，看起来自然比较光亮。所以晦暗的星并不代表他比较亮的星暗。</p><h3 id="绝对星等"><a href="#绝对星等" class="headerlink" title="绝对星等"></a>绝对星等</h3><p>由于<a href="https://baike.baidu.com/item/%E7%9B%AE%E8%A7%86%E6%98%9F%E7%AD%89">目视星等</a>并没有实际的物理学意义，于是天文学家制定了绝对星等来描述星体的实际发光本领。假想把星体放在距离10秒差距（即32.6光年，秒差距亦是天文学上常用的距离单位，1秒差距&#x3D;3.26光年）远的地方，所观测到的视星等，就是绝对星等了。通常绝对星等以大写英文字母M表示。目视星等和绝对星等可用公式转换，公式如下：</p><p>M&#x3D;m+5－5 lg d</p><p>M为绝对星等； m为<a href="https://baike.baidu.com/item/%E7%9B%AE%E8%A7%86%E6%98%9F%E7%AD%89">目视星等</a>； d为距离。</p></blockquote><h1 id="第十六期-哈佛光谱分类与赫罗图"><a href="#第十六期-哈佛光谱分类与赫罗图" class="headerlink" title="第十六期 哈佛光谱分类与赫罗图"></a>第十六期 哈佛光谱分类与赫罗图</h1><h2 id="光谱分类"><a href="#光谱分类" class="headerlink" title="光谱分类"></a>光谱分类</h2><p>光谱仪（摄谱仪）：将光色散成光谱</p><p>根据色散的两种办法分为两种摄谱仪</p><ol><li>棱镜摄谱仪（牛顿的三棱镜对光进行色散后面经过凸透镜汇聚成像）</li><li>光栅摄谱仪（光栅通过衍射进行对光的分光）（精度高）<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_12-12-15-18.png"/></div>光谱巡天望远镜：LAMOST郭守敬望远镜，SDSS斯隆数字巡天望远镜<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_12-12-19-40.png"/><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_12-12-20-06.png"/></div>皮克林：哈佛光谱分类法</li></ol><p>皮克林+女助理耗时40多年的大工程</p><p><a href="https://baike.baidu.com/item/%E7%88%B1%E5%BE%B7%E5%8D%8E%C2%B7%E6%9F%A5%E5%B0%94%E6%96%AF%C2%B7%E7%9A%AE%E5%85%8B%E6%9E%97/6844751">爱德华·查尔斯·皮克林_百度百科 (baidu.com)</a></p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/19fc7ca9fa01471b813cbe86b1eb97fb.jpeg"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_12-12-24-56.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_12-12-28-08.png"/></div><h2 id="赫罗图HR"><a href="#赫罗图HR" class="headerlink" title="赫罗图HR"></a>赫罗图HR</h2><p>温度与光度</p><p><a href="https://baike.baidu.com/item/%E8%B5%AB%E7%BD%97%E5%9B%BE">赫罗图_百度百科 (baidu.com)</a></p><p><a href="https://baike.baidu.com/item/%E8%B5%AB%E8%8C%A8%E6%99%AE%E9%BE%99/2476806">赫茨普龙_百度百科 (baidu.com)</a></p><p><a href="https://baike.baidu.com/item/%E7%BD%97%E7%B4%A0/2999031#viewPageContent">罗素（美国天文学家）_百度百科 (baidu.com)</a></p><p>亮的：巨星</p><p>暗的：矮星</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_12-12-50-07.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/08f790529822720ed3cf88617acb0a46f21fab2c.jpg"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/赫罗图.jpg"/></div>位于主要星序上的恒星称为主序星，目前观测到的恒星90%的恒星都是主序星<div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_12-12-53-09.png" style="zoom:100%;" /></div><p>根据在赫罗图中，由斯特潘-玻尔兹曼公式求恒星的半径</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_12-12-54-18.png" style="zoom:100%;" /></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_12-12-50-41.png" style="zoom:100%;" /></div><p>赫罗图揭示了恒星的演化过程，赫罗图上每一类恒星就是恒星生命过程的一个年龄段</p><h1 id="第十七期-恒星的演化"><a href="#第十七期-恒星的演化" class="headerlink" title="第十七期 恒星的演化"></a>第十七期 恒星的演化</h1><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/演化.jpg"/></div><div align=center>    <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/演化1.jpg"/></div><h2 id="幼年到壮年"><a href="#幼年到壮年" class="headerlink" title="幼年到壮年"></a>幼年到壮年</h2><p>恒星最初的是存在形式是弥散星云</p><p>星云-星云坍缩-&gt;原恒星</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">星云坍缩<br>1. 星云坍缩成恒星的速度极快<br>2. 星云坍缩会形成一片恒星<br>3. 星云坍缩可能会失败<br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_13-13-44-38.png"/></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">原恒星<br>原恒星的质量在0.1个太阳质量-100个太阳质量之间<br>原恒星发光发热：能量来自于引力势能转换成辐射能（开尔文-赫尔姆霍兹原理）<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E5%BC%80%E5%B0%94%E6%96%87-%E8%B5%AB%E5%B0%94%E5%A7%86%E9%9C%8D%E5%85%B9%E5%8E%9F%E7%90%86/892064">开尔文-赫尔姆霍兹原理_百度百科 (baidu.com)</a></p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_13-13-50-15.png" style="zoom:150%;" /></div><p>原恒星的质量小于0.08个太阳质量，恒星收缩达不到氢聚变，这样的恒星为褐矮星（气体星）</p><p><a href="https://baike.baidu.com/item/%E8%A4%90%E7%9F%AE%E6%98%9F/493341">褐矮星_百度百科 (baidu.com)</a></p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_13-13-52-25.png"/></div><p>原恒星的质量大于0.08个太阳质量，原恒星收缩时，可以达到氢核聚变的条件，氢开始燃烧，这颗恒星就进入了主星序（壮年）；</p><h2 id="壮年到老年"><a href="#壮年到老年" class="headerlink" title="壮年到老年"></a>壮年到老年</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_14-14-42-51.png" alt="各个质恒星的演化结果"></p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_14-14-30-41.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_15-15-13-02.png"/></div><p>质量越大的恒星，氢燃烧的越快，质量越小的恒星，氢燃烧地越慢</p><h3 id="0-08-2-3"><a href="#0-08-2-3" class="headerlink" title="0.08-2.3"></a>0.08-2.3</h3><p><strong>质量在0.08-2.3个太阳质量的恒星</strong>会变成白矮星</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_13-13-58-44.png"/></div><p>在核心区域的氢燃烧完成之后，氢都变成了氦（氦核：冷核），进入恒星的晚年，恒星脱离主序。核心区域粒子数量减小，压器减小，引力大于压器，核心收缩，核心温度升高，氦核外层的氢再次被点燃。核心收缩会辐射能力，氢燃烧辐射能量，因此整个恒星的外层就会膨胀，表面温度就会降低。 （核心收缩升温，外层膨胀降温，整体光度增加），此时恒星变成亚巨星。</p><p>当恒星温度降低到一定程度时达到某个平衡数，此时恒星温度不会再次降低，但是会持续膨胀，此时亚巨星变为红巨星（特别亮，体积特别大）；</p><blockquote><p>恒星质量在0.08-0.5之间的恒星与0.5-2.3之间的恒星，从这之后，会出现分界线，</p></blockquote><p>0.08-0.5：当核心区域收缩到一定程度时，核心区域的氦会进入到电子简并态，当核心温度达不到一亿摄氏度时，核心的氦发生不聚变。</p><p>这样的恒星就变成了氦白矮星。</p><p>0.5-2.3：当核心区域收缩到一定程度时，核心区域的氦会进入到电子简并态，当核心温度达到一亿摄氏度时，核心的氦发生聚变。</p><blockquote><p>氦闪：<a href="https://baike.baidu.com/item/%E6%B0%A6%E9%97%AA/8596181">氦闪_百度百科 (baidu.com)</a></p></blockquote><blockquote><p>氦闪<strong>发生在0.8太阳质量（M☉）至2.0M☉的低质量恒星核心</strong>，在 红巨星 阶段，是非常短暂的失控热 核聚变 ，有大量的氦经由两次电离过程成为碳（预测太阳在离开主序带12亿年后会发生）。 许多罕见的失控氦融合过程也可以在 白矮星 吸积 的表面上进行。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">电子简并态：简并态物质是一种高密度的物质状态。 简并态物质的压力主要来源于 泡利不相容原理 ，叫做 简并压力 。<br></code></pre></td></tr></table></figure><div align=center>> <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220206141709943.png"/></div><p>氦的聚变，三个氦核聚变成碳。氦的聚变释放大量的热，反应非常迅速（氦闪）</p><blockquote><p>氦闪几乎观察不到，只能在理论上进行模拟。</p><ol><li>整个过程虽然释放大量的热，但是时间很短</li><li>简并态解除，核心吸热，体积膨胀，光度骤降</li></ol></blockquote><p>核心的氦燃烧完成之后，核心就变成了碳和氧，粒子数少，再次开始收缩，温度升高，壳层的氢和氦都被点燃（双壳层燃烧），外层继续膨胀，红巨星变成红超巨星。红超巨星，体积非常大，外层物质几乎不受控制，整体非常不稳定，外层物质向外抛射，形成行星状星云。</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_14-14-29-42.png" style="zoom:50%;"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-06_14-14-29-47.png" style="zoom:50%;"/></div><p>恒星最后变成碳氧白矮星。（0.5-2.3）</p><h3 id="2-3-8"><a href="#2-3-8" class="headerlink" title="2.3-8"></a>2.3-8</h3><p>过程与0.08-2.3演化过程差不多，红巨星之后，进行氦的聚变，但是比较平静，不会出现氦闪。</p><p>整体演化速度比较快，最终宿命为行星状星云+碳氧白矮星核心</p><h3 id="8-30"><a href="#8-30" class="headerlink" title="8-30"></a>8-30</h3><p>超新星爆炸</p><p><a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%B0%E6%98%9F%E7%88%86%E5%8F%91/10195482">超新星爆发_百度百科 (baidu.com)</a></p><p>氦燃烧完成之后，变成碳和氧，由于恒星质量大，核心温度高，碳氧继续聚变，生成钠，镁，硅，一直聚变成为铁。最终生成铁的中心核。</p><p>当温度达到50亿K时，铁在高能光子（γ射线）的作用下发生光致分解，导致超新星爆炸。</p><blockquote><p><a href="https://baike.baidu.com/item/%E5%85%89%E8%87%B4%E5%88%86%E8%A7%A3/14706150">光致分解_百度百科 (baidu.com)</a></p><p>光致分解是指较重的原子在高温下分解为较轻的原子、质子及中子的物理过程。与普通的核裂变不同，该过程是比铁轻的原子分解为更轻的粒子，故而是一种吸热过程。该过程多见于恒星演化过程中。</p><p>另外，光核物理在核废物处理方面的一种应用也被称为光致分解。是指对特定的<a href="https://baike.baidu.com/item/%E6%94%BE%E5%B0%84%E6%80%A7%E5%90%8C%E4%BD%8D%E7%B4%A0/6490136">放射性同位素</a>进行照射，使其释放出一个中子，从而产生没有放射性或半衰期很短的同位素。</p></blockquote><p>光致分解过程是吸热的。</p><p>由于光致分解，能量被吸收，恒星迅速的坍缩，铁核心受到巨大的压力，电子简并被打破，电子本压缩进入原子核内部，电子迅速与质子反应，生成中子并释放中微子。由于释放了中微子释放出巨大的能力，铁核心的外壳被驱散，形成了超新星的爆炸。</p><p>铁核心被中子化，中子的简并压可以支撑起来整个铁核心的压力，则恒星最终变成一颗中子星</p><p><a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90%E6%98%9F/101875">中子星_百度百科 (baidu.com)</a></p><blockquote><p>中子星的前身一般是一颗质量为10-29倍太阳质量的恒星。它在爆发坍缩过程中产生的巨大压力，使它的物质结构发生巨大的变化。在这种情况下，不仅原子的外壳被压破了，而且连<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%A0%B8">原子核</a>也被压破了。原子核中的质子和中子便被挤出来，质子和电子挤到一起又结合成中子。最后，所有的中子挤在一起，形成了中子星。显然，中子星的密度，即使是由原子核所组成的白矮星也无法和它相比。在中子星上，每立方厘米物质足足有一亿吨重甚至达到十亿吨。</p></blockquote><h3 id="30-100"><a href="#30-100" class="headerlink" title="30-100"></a>30-100</h3><p>中子简并压无法支撑起强大的压力，恒星进一步坍缩，从而形成黑洞。</p><h1 id="第十八期-超新星爆发"><a href="#第十八期-超新星爆发" class="headerlink" title="第十八期 超新星爆发"></a>第十八期 超新星爆发</h1><p>超新星名字由第谷·布拉赫所起</p><p>1572年第谷在仙后座方向发现了一颗新星，后起名为“第谷超新星”（SN1572）</p><h2 id="新星"><a href="#新星" class="headerlink" title="新星"></a>新星</h2><p>天文学上新星和超新星是不同的两个概念</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">新星：白矮星，低亮度高温度，处于电子简并态，密度大。<br>单独的白矮星亮度低，看不到，如果白矮星有一颗伴星，白矮星巨大的引力能够吸引它附件的伴星的包层的氢，氢在白矮星的外层由于高温，氢发生剧烈的聚变， 像爆炸一样，在地球上看起啦就像突然出现了一颗新星。爆炸结束后，亮度减小。<br>如果上述过程周期性发生，即周期性光变，则就叫做变星<br><br>白矮星+伴星就是激变变星<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E6%BF%80%E5%8F%98%E5%8F%98%E6%98%9F/494232">激变变星_百度百科 (baidu.com)</a></p><blockquote><p>一种爆发性的恒星，或称为 CV型变星，指新星、超新星、耀星和其它正在爆发的<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F/493">恒星</a>。 激变变星（CV）是拥有一颗<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F/226390">白矮星</a>和<a href="https://baike.baidu.com/item/%E4%BC%B4%E6%98%9F/8804067">伴星</a>的<a href="https://baike.baidu.com/item/%E5%8F%8C%E6%98%9F%E7%B3%BB%E7%BB%9F/1401783">双星系统</a>（参考双子座U），这颗伴星通常是红矮星，但有些情况下它也可以是一颗白矮星或正在演化成次巨星。已经发现数百颗激变变星。</p><p>2021年8月，媒体报道中国郭守敬望远镜成功捕获激变变星，相关研究成果在线发表于国际学术期刊《皇家天文学会月刊》。</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_10-10-40-16.png"/></div><h2 id="超新星"><a href="#超新星" class="headerlink" title="超新星"></a>超新星</h2><p>亮度非常亮</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_11-11-02-31.png"/></div>超新星分类：Ⅰ型，Ⅱ型<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ⅰ型超新星的光谱中没有氢线<br>Ⅱ型超新星的光谱中有氢线，即超新星的最外层有氢元素<br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_11-11-06-14.png"/></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ⅱ型超新星<br>核心坍缩前符合洋葱结构，中心铁核坍缩成中子星，外层都被炸飞了，因此超新星的外层有氢元素<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E2%85%A1%E5%9E%8B%E8%B6%85%E6%96%B0%E6%98%9F/5915192">Ⅱ型超新星_百度百科 (baidu.com)</a></p><blockquote><p><strong>Ⅱ型超新星</strong>（又称<strong>核塌缩超新星</strong>）是大质量<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F">恒星</a>由内部塌缩引发剧烈爆炸的结果，在分类上是<a href="https://baike.baidu.com/item/%E6%BF%80%E5%8F%98%E5%8F%98%E6%98%9F/494232">激变变星</a>的一个分支。能造成内部塌缩的恒星，质量至少是太阳质量的9倍。 [1] </p><p>大质量恒星由<a href="https://baike.baidu.com/item/%E6%A0%B8%E8%81%9A%E5%8F%98/426375">核聚变</a>产生能量，与太阳不同的是，这些恒星的质量能够合成原子量比氢和氦更重的元素，恒星的演化供应和储存质量更大的核聚变燃料，直到铁元素被制造出来。但是铁的核聚变不能产生能量来支撑恒星，所以核心的质量改由<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E7%AE%80%E5%B9%B6%E5%8E%8B%E5%8A%9B/8411560">电子简并压力</a>来支撑。这种压力来自属于费米子的电子，在恒星被压缩时不能在原子核内拥有相同的能量状态。（参考*<a href="https://baike.baidu.com/item/%E6%B3%A1%E5%88%A9%E4%B8%8D%E7%9B%B8%E5%AE%B9%E5%8E%9F%E7%90%86/773763">泡利不相容原理</a>*）</p><p>当铁核的质量大于1.44倍太阳质量（<a href="https://baike.baidu.com/item/%E9%92%B1%E5%BE%B7%E6%8B%89%E5%A1%9E%E5%8D%A1%E6%9E%81%E9%99%90/494913">钱德拉塞卡极限</a>），接着就会发生内爆。快速的收缩使核心被加热，导致快速的核反应形成大量的<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90/466557">中子</a>和<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%BE%AE%E5%AD%90/243111">中微子</a>。<a href="https://baike.baidu.com/item/%E5%A1%8C%E7%BC%A9/2454979">塌缩</a>被中子的短距力阻止，造成内爆转而向外。向外传递的震波有足够的能量将环绕在周围的物质推挤掉，形成<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%B0%E6%98%9F/22133">超新星</a>的爆炸。</p><p>Ⅱ型超新星的爆炸有几种不同的类型，可以依据爆炸后的光度曲线－光度对爆炸后的时间变化图－来分类。Ⅱ-L超新星显示出稳定的线性光度下降；而Ⅱ-P超新星在一段正常的光度下降之后，呈现出平缓的下降，才会再持续正常的下降曲线。通常这些塌缩超新星的光谱中也会出现氢的光谱，虽然Ib和Ic超新星也是将<a href="https://baike.baidu.com/item/%E6%B0%A2/642031">氢</a>和<a href="https://baike.baidu.com/item/%E6%B0%A6/400171">氦</a>（Ic超新星）的壳层抛出的核心塌缩大质量恒星，但它们的光谱看起来却缺乏这些元素。</p></blockquote><p><a href="https://baike.baidu.com/item/%E8%9F%B9%E7%8A%B6%E6%98%9F%E4%BA%91/1084365">蟹状星云_百度百科 (baidu.com)</a></p><blockquote><p>蟹状星云（Crab Nebula， 编号 ：M1 [3] ，NGC 1952或金牛座 A）是位于<a href="https://baike.baidu.com/item/%E9%87%91%E7%89%9B%E5%BA%A7/9442523">金牛座</a>ζ星（天关）东北面的一个超新星残骸和脉冲风星云，是银河系英仙臂的一部分，距地球约6,500光年（2,000秒差距），直径达11光年（3.4秒差距），并以每秒约1,500公里的速度膨胀。 [4] </p><p>该星云由约翰·贝维斯于1731年发现，对应中国、阿拉伯和日本天文学家于公元1054年记录的一次超新星爆发（编号SN 1054，中国称天关客星）。1969年天文学家发现星云的中心是一颗脉冲星 [5] ，直径约28–30公里，每秒自转30.2次，并发射出从γ射线到无线电波的宽频率范围电磁波。它也是首颗被确认为历史上超新星爆发遗迹的天体。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ⅰ型超新星<br>分类：Ⅰa,Ⅰb,Ⅰc<br>Ⅰb,Ⅰc的成因可以用恒星坍缩理论解释<br>Ia型超新星来自于伴星物质达到一定质量时(1.4倍的太阳质量——钱德拉塞卡极限),恒星处于电子简并态，但是由于质量变大，核心压力变大，温度升高，碳被迅速点燃引发据聚变，直到生成铁（碳融合），白矮星核心瞬间爆燃，形成超新星，也就是碳爆发型超新星。<br><br>一般来说，提到Ⅱ型超新星，包括了Ⅰb和Ⅰc<br>提到Ⅰ型超新星，一般就是指Ⅰa<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">钱德拉塞卡极限是怎么算出来的？<br>因为Ia型超新星爆发时候的绝对星等固定，约为-19.3<br><br>Ia型超新星的距离<br>已知绝对星等和视星等，因此可以换算出距离<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E2%85%A0%E5%9E%8B%E8%B6%85%E6%96%B0%E6%98%9F/5915177">Ⅰ型超新星_百度百科 (baidu.com)</a></p><blockquote><p>I型超新星又被细分为Ia、Ib与Ic型。其中，Ia型超新星来自于<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F%E5%90%B8%E7%A7%AF/14734874">白矮星吸积</a>伴星物质达到一定质量时的爆炸或者两个白矮星并合产生爆炸，属于热核爆炸超新星；Ib与Ic型超新星来自于大质量恒星晚期铁核坍缩爆炸，由于在爆炸前前身星已经失去氢包层甚至氦包层，使得光谱中缺乏氢线，因此归入I型。</p></blockquote><p><a href="https://baike.baidu.com/item/%E9%92%B1%E5%BE%B7%E6%8B%89%E5%A1%9E%E5%8D%A1%E6%9E%81%E9%99%90/494913">钱德拉塞卡极限_百度百科 (baidu.com)</a></p><blockquote><p>钱德拉塞卡极限（Chandrasekhar limit ）指<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F/226390">白矮星</a>的最高质量，约为3×1030公斤，是<a href="https://baike.baidu.com/item/%E5%A4%AA%E9%98%B3%E8%B4%A8%E9%87%8F">太阳质量</a>的1.44倍。这个极限是由<a href="https://baike.baidu.com/item/%E9%92%B1%E5%BE%B7%E6%8B%89%E5%A1%9E%E5%8D%A1/810849">钱德拉塞卡</a>计算出的。计算的结果会依据<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%A0%B8">原子核</a>的结构和温度而有些差异。</p></blockquote><p>碳融合与氦闪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">过程相似：<br>- 碳融合：碳迅速聚变直到形成铁，然后直接爆炸<br>- 氦闪：氦迅速聚变，之后根据恒星的质量进行不同的恒星的演化<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">哈勃通过恒星谱线的红移发现宇宙膨胀<br>物理学家通过观测Ia超新星爆炸时候的光度相同，发现宇宙的膨胀速度正在加快<br></code></pre></td></tr></table></figure><blockquote><p>宇宙加速膨胀（accelerating universe）是宇宙的膨胀速度越来越快的现象。就是<a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99%E6%A0%87%E5%BA%A6%E5%9B%A0%E5%AD%90/3418771">宇宙标度因子</a>的二次导数是正值，这意味着星系远离地球的速度，随着时间演进，应该会持续地增快。</p><p>这速度是<a href="https://baike.baidu.com/item/%E5%93%88%E6%9F%8F%E5%AE%9A%E5%BE%8B/6364048">哈柏定律</a>里所提到的<a href="https://baike.baidu.com/item/%E9%80%80%E8%A1%8C%E9%80%9F%E5%BA%A6/5914025">退行速度</a>。于1998年观测<a href="https://baike.baidu.com/item/Ia%E8%B6%85%E6%96%B0%E6%98%9F">Ia超新星</a>得到的数据，提示宇宙的膨胀速度正在加快。物理学家<a href="https://baike.baidu.com/item/%E7%B4%A2%E5%B0%94%C2%B7%E7%8F%80%E5%B0%94%E9%A9%AC%E7%89%B9/6511115">索尔·珀尔马特</a>（<a href="https://baike.baidu.com/item/%E5%8A%A0%E5%B7%9E%E5%A4%A7%E5%AD%A6%E4%BC%AF%E5%85%8B%E5%88%A9%E5%88%86%E6%A0%A1/3755024">加州大学伯克利分校</a>）、<a href="https://baike.baidu.com/item/%E5%B8%83%E8%8E%B1%E6%81%A9%C2%B7%E6%96%BD%E5%AF%86%E7%89%B9/6368638">布莱恩·施密特</a>（<a href="https://baike.baidu.com/item/%E6%BE%B3%E5%A4%A7%E5%88%A9%E4%BA%9A%E5%9B%BD%E7%AB%8B%E5%A4%A7%E5%AD%A6/1781473">澳大利亚国立大学</a>）与<a href="https://baike.baidu.com/item/%E4%BA%9A%E5%BD%93%C2%B7%E9%87%8C%E6%96%AF/6369000">亚当·里斯</a>（<a href="https://baike.baidu.com/item/%E7%BA%A6%E7%BF%B0%C2%B7%E9%9C%8D%E6%99%AE%E9%87%91%E6%96%AF%E5%A4%A7%E5%AD%A6/515149">约翰·霍普金斯大学</a>）“透过观测遥远超新星而发现了宇宙加速膨胀”，因此，共同荣获2006年<a href="https://baike.baidu.com/item/%E9%82%B5%E9%80%B8%E5%A4%AB%E5%A4%A9%E6%96%87%E5%AD%A6%E5%A5%96/14079997">邵逸夫天文学奖</a>与2011年<a href="https://baike.baidu.com/item/%E8%AF%BA%E8%B4%9D%E5%B0%94%E7%89%A9%E7%90%86%E5%AD%A6%E5%A5%96">诺贝尔物理学奖</a>。</p></blockquote><p><a href="http://discover.news.163.com/special/cosmicexpansion/">解读2011诺贝尔物理奖：宇宙如何加速膨胀？_发现者第154期_网易探索 (163.com)</a></p><blockquote><p><strong>1、宇宙膨胀来自“超新星”大爆炸</strong> 超新星（即大质量恒星）爆炸的概念是1934年由茨维基和巴德提出的。他们猜测当一些恒星寿命结束时将会塌缩，然后发生爆炸，其亮度可达到十亿甚至百亿个太阳的亮度，巴德和茨维基也观测到了一些超新星。 宇宙中其实有两种不同的超新星：一种是茨维基最早提出的核塌缩超新星，另一种其爆炸机理不同，现在一般认为是白矮星（质量比较低的恒星比如太阳在燃尽核燃料后就会变成白矮星）从其伴星中吸积（吸积是围绕年轻恒星的星盘入面的碎片渐渐变大,最后形成行星的过程;即是天体通过引力“吸引”和“积累”周围物质的过程。）物质，到一定程度后再发生核爆炸。但有趣的是，茨维基和巴德最早观测到的超新星都是后面这种他们所未曾想到过的类型，他们把这种发生爆炸的白矮星称为“Ia型超新星”。下面我们将解读“超新星”。[<a href="http://news.163.com/08/0129/08/43C2CMHI000125LI.html">详细]</a> </p><p><strong>2、诺奖研究团队如何发现宇宙中的“超新星”</strong> 尽管超新星非常亮，但放在浩瀚的宇宙之中，也只是微弱的一点。如何寻找超新星？这意味着研究团队必须彻查整个天空，来寻找遥远的超新星。诀窍就在于，比较同样的一小块天空拍摄于不同时间的两张照片。这一小块天空的大小，就相当于你伸直手臂时看到的指甲盖大小。第一张照片必须在新月之后拍摄，第二张照片则要在3个星期之后，抢在月光把星光淹没之前拍摄。 接下来，两张照片就可以拿来比对，希望能够从中发现一个小小光点，即CCD图像中的一个像素——这有可能就是遥远星系中爆发了一颗超新星的标志。只有距离超过可观测宇宙半径1&#x2F;3的超新星才是可用的，这样做是为了消除近距离星系自身运动而带来的干扰。两个研究小组总共观测了约50颗遥远的“Ia型超新星”，并于1998年得到了一致的结论：宇宙的膨胀速度不是恒定的，也不是越来越慢，而是不断加快。[<a href="http://discover.news.163.com/11/1005/10/7FJK8JN7000125LI.html">详细]</a></p><p> <strong>3、宇宙膨胀：加速度来自一种未知的暗能量</strong> 是什么在加速宇宙膨胀？这种神秘力量被称为暗能量，它向物理学提出了一大挑战，至今无人能够破解这一谜题。科学家已经提出了若干想法。宇宙膨胀的这种加速度暗示，在蕴藏于空间结构中的某种未知能量的推动下，宇宙正在分崩离析。这种所谓的“暗能量”（dark energy）占据了宇宙成分的绝大部分，含量超过70%。它的本质仍然是谜，或许是今天的物理学面临的最大谜题。 宇宙的组成部分，除去上文所说的暗能量，还有像我们人类所在的这个星球这样的常规物质之外，还有一个组成部分那就是暗物质。暗物质是我们大都未知的宇宙中另一个迄今未解的谜题。与暗能量一样，暗物质也是不可见的。对于这两样东西，我们只知道它们发挥的作用—— 一个是推，另一个是拉。名字前面那个“暗”字，是它们唯一的共同点。[<a href="http://news.163.com/10/0630/00/6ACSVJUR00014AED.html">详细]</a> </p><p><strong>4、超新星爆炸时的“红移”现象说明，星系正离我们远去</strong> 红移现象指的是白矮星爆炸的光在远离我们的时候，其光波长会被拉长，而波长越长，它的颜色就越红。目前对红移现象的公认解释为：速度造成红移。例如：当一列火车向我们奔驰而来时，它的汽笛声尖锐刺耳，因为火车的高速运动使声波波长被压缩，能量密度增加。相反，当火车离开我们飞驰而去时，它的汽笛声则低沉幽缓，简称多普勒效应。 光波的红移现象指的是：物体辐射的波长因为光源和观测者的相对运动而产生变化。在20实际20年代，世界上最大的天文望远镜投入使用之后，美国天文学家哈勃于1929年确认，遥远的星系均远离我们地球所在的银河系而去。星系不光在离我们而去，彼此之间也在相互远离，而且距离越远，逃离的速度就越快——这被称为哈勃定律（Hubble’s law），这也说明宇宙正在膨胀。[<a href="http://news.163.com/11/0915/09/7E00KJQR00014AED.html">详细]</a> </p><p><strong>5、用“标准烛光”计算恒星运动距离</strong> 今年的诺贝尔物理学奖获得者当年认为，他们会测量到宇宙减速膨胀，测量出宇宙膨胀的速度是如何减慢的。他们采用的方法，从原理上讲，跟60多年前天文学家所用的方法是一样的——那就是给遥远的恒星定位，并测量它们如何运动；而实际上宇宙膨胀速度是加速的。 那些光亮变化稳定的恒星中有一个关联：光变周期越长，亮度就越大。由于知道了视亮度和真实亮度，就可以计算恒星的距离，因此光变周期成为了计算变星距离的理想手段。也因此，一种被称为“造父变星”的恒星，成为早期宇宙的“标准烛光”。所谓标准烛光，指的是人们可以用造父变星来测量视差法无法测量的特大距离。[<a href="http://discover.news.163.com/09/0417/11/573KQG0K000125LI.html">详细]</a> </p><p><strong>“造父变星”是亮度有显著变化的恒星的统称</strong> 在解释造父变星之前，先来看看什么是变星(variable star)，狭义上指的是“亮度有显著起伏变化”的恒星。宇宙中，一些恒星在光学波段的物理条件和光学波段以外的电磁辐射有变化，天文学家将其称为变星，如光谱变星、磁变星、红外变星、X射线新星等。星空中那些亮度随时间而改变的恒星被称为变星。变星分很多种，光学变星和物理变星。光学变星因为双星互绕，当其中一个遮蔽到另外一个时，造成观测上的视觉差异，使得观测者认为恒星亮度改变。物理变星是因为恒星本身内源或者大气状态不稳定，造成亮度改变。它分为脉动变星和爆炸性变星。 荷兰人古德里克在研究仙王座恒星时，发现其中的一颗名为“仙王座δ”的亮度会有规律地起伏变化，在中国古代将“仙王座δ”称作“造父一”，因此这颗有规律变换光亮的恒星就被称为“造父一”。而古德里克观察到“造父一”的光度周期（即从最暗变到最亮又回到最暗所需要的时间）是5天9小时，这是一种脉动型变星。此后人们发现了更多这样的变星，于是就将其中最重要的一类命名为“造父变星”，以最著名的变星成员“造父一”而得名。（本专题部分内容摘编自<a href="http://www.guokr.com/post/66114/">果壳网</a>、2011诺贝尔物理学奖新闻稿）[<a href="http://discover.163.com/07/1130/10/3UHRTK27000125LI.html">详细]</a> </p></blockquote><h2 id="历史上的超新星爆发"><a href="#历史上的超新星爆发" class="headerlink" title="历史上的超新星爆发"></a>历史上的超新星爆发</h2><blockquote><p>最早的超新星纪录是中国天文学家于AD185年看见的SN 185。纪录中最亮的超新星是SN 1006，中国和伊斯兰天文学家都有详细的记述。 [7] 观测最广泛的超新星是SN 1054，它形成了<a href="https://baike.baidu.com/item/%E8%9F%B9%E7%8A%B6%E6%98%9F%E4%BA%91/1084365">蟹状星云</a>。超新星SN 1572和SN 1604是以裸眼观测到的最后两颗银河系超新星，对欧洲天文学的发展有显著的影响，因为它们被用来反驳在月球和行星之外是不变的亚里斯多德宇宙。约翰·开普勒于SN 1604在峰值的1604年10月17日观测到它，并且持续的估计它的亮度，直到第二年亮度暗淡到裸眼看不见才停止。 [8] 它是那个时代的人观测到的第二颗超新星（继第谷·布拉赫的仙后座SN 1572之后）。</p><p>由于望远镜的发展，发现超新星的领域已近扩大到其他的星系。在1885年观察到<a href="https://baike.baidu.com/item/%E4%BB%99%E5%A5%B3%E5%BA%A7%E6%98%9F%E7%B3%BB/7166508">仙女座星系</a>的超新星仙女座S。美国天文学家鲁道夫·闵可夫斯基和弗里茨·兹威基在1941年开启了现代的超新星分类计划。在1960年代，天文学家发现超新星爆炸的最大强度可以作为天文距离的<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E7%83%9B%E5%85%89/8126520">标准烛光</a>，因而测量出天体的距离。最近，观测到一些最遥远的超新星比预期的黯淡，这个现象支持了宇宙加速膨胀的观点。 [9] 为重建没有书面纪录的超新星观测，开发了新技术，从超新星仙后座A的日期，侦测到来自星云的回光事件。 [10] 从温度的测量和来自钛-44的γ射线衰变，估计出<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%B0%E6%98%9F%E9%81%97%E8%BF%B9/9760568">超新星遗迹</a>RX J0852.0-4622的年龄。在2009年，从南极冰沉积物的硝酸含量的匹配，发现过去超新星事件的时间。 [11] </p></blockquote><blockquote><p>185年12月7日，东汉中平二年乙丑，中国天文学家观测到超新星185，这是人类历史上发现的第一颗超新星。 [12] 该超新星在夜空中照耀了八个月。《后汉书·天文志》载：“中平二年（185年）十月癸亥，客星出南门中，大如半筵，五色喜怒，稍小，至后年六月消”。</p><p>1006年4月30日：位于豺狼座的SN 1006爆发，它可能是有史以来人们记录到的视亮度最高的超新星，据推断其亮度达到了-9等。据现代天文学家推测：“在1006年的春天，人们甚至有可能能够借助它的光芒在半夜阅读。” [13] 在中国宋朝，这颗超新星由司天监周克明等人发现，因而将它称作周伯星。在《宋史·天文志》卷五六中记载为：“景德三年四月戊寅，周伯星见，出氐南，骑官西一度，状如半月，有芒角，煌煌然可以鉴物，历库楼东。八月，随天轮入浊。十一月复见在氐。自是，常以十一月辰见东方，八月西南入浊。”</p><p>1054年7月4日：产生蟹状星云的一次超新星爆发，这次客星的出现被中国宋朝的天文学家详细记录，《<a href="https://baike.baidu.com/item/%E7%BB%AD%E8%B5%84%E6%B2%BB%E9%80%9A%E9%89%B4%E9%95%BF%E7%BC%96/1995568">续资治通鉴长编</a>》卷一七六中载：“至和元年五月己酉，客星晨出天关之东南可数寸（嘉祐元年三月乃没）。”日本、美洲原住民也有观测的记录。</p><p>1572年11月初（可能在2日到6日之间）：仙后座的超新星（<a href="https://baike.baidu.com/item/%E7%AC%AC%E8%B0%B7%E8%B6%85%E6%96%B0%E6%98%9F/9562615">第谷超新星</a>）爆发，丹麦天文学家第谷有观测的记录，并因此出版了《De Nova Stella》一书，是新星的拉丁名nova的来源。据估计这颗超新星的绝对星等有-15.4等，距地球7500光年；它最高时的视亮度有-4等，可以与金星相比。</p><p>1604年10月9日：蛇夫座的超新星（<a href="https://baike.baidu.com/item/%E5%BC%80%E6%99%AE%E5%8B%92%E8%B6%85%E6%96%B0%E6%98%9F/9562737">开普勒超新星</a>），德国天文学家开普勒有详细观测的记录，这是迄今为止银河系里最后一颗被发现的超新星，视星等为-2.5等，距地球6000光年。它曾被伽利略用作反驳当时亚里士多德学派所谓上天永远不变的理论。</p><p>1885年8月19日：位于仙女座星系的超新星SN 1885A（仙女座S）被爱尔兰业余天文学家艾萨克·瓦德（Issac Ward）在贝尔法斯特发现，这是人类首次发现<a href="https://baike.baidu.com/item/%E6%B2%B3%E5%A4%96%E6%98%9F%E7%B3%BB/191505">河外星系</a>中的超新星，也是至今在仙女座星系中发现的唯一一颗超新星。</p><p>1987年2月24日：位于<a href="https://baike.baidu.com/item/%E5%A4%A7%E9%BA%A6%E5%93%B2%E4%BC%A6%E6%98%9F%E4%BA%91/3022269">大麦哲伦星云</a>的<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%B0%E6%98%9F1987A/3568791">超新星1987A</a>在爆发后的数小时内就被发现，是现代超新星理论第一次可以与实际观测比较的机会。它距地球约为五万一千四百秒差距，最亮时视星等为3等。 [14] </p><p>2006年9月18日：距地球2.38亿光年的超新星SN 2006gy爆发（曾被假设是不稳定对超新星，但没有得到证实），是有史以来观测到的最强烈的超新星爆发。 [15] </p></blockquote><p>SN:Supernova</p><p>1006表示的发现的年份</p><p>SN1006</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/SN1006.png"/></div><p>SN1604（开普勒超新星）</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_11-11-44-02.png"/></div><p>SN1987A：表示1987年发现的第一颗超新星（位于大麦哲伦云内，距地16.8万光年）</p><p><a href="https://baike.baidu.com/item/1987A%E8%B6%85%E6%96%B0%E6%98%9F/7192386">1987A超新星_百度百科 (baidu.com)</a></p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_11-11-45-32.png"/></div><p>SN1987A超新星爆发对粒子物理的影响</p><p><a href="https://baike.baidu.com/item/%E4%B8%AD%E5%BE%AE%E5%AD%90/243111">中微子（轻子的一种）_百度百科 (baidu.com)</a></p><p><a href="https://baike.baidu.com/item/%E9%9B%B7%E8%92%99%E5%BE%B7%C2%B7%E6%88%B4%E7%BB%B4%E6%96%AF/7566653">雷蒙德·戴维斯_百度百科 (baidu.com)</a></p><p><a href="https://baike.baidu.com/item/%E5%B0%8F%E6%9F%B4%E6%98%8C%E4%BF%8A/7635324">小柴昌俊_百度百科 (baidu.com)</a></p><blockquote><p>小柴昌俊教授对<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%BE%AE%E5%AD%90/243111">中微子</a>物理实验研究和天体物理做出了杰出贡献。他所领导的日本神冈实验室的研究工作独立地证实了由 Ray Davis Jr首先发现的太阳<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E4%B8%AD%E5%BE%AE%E5%AD%90/10870847">电子中微子</a>与理论预言的差值，并在1987年第一次截获由<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%B0%E6%98%9F/22133">超新星</a>（SN1987A）爆炸所释放的中微子，打开了天体物理中极为重要的中微子窗口。</p><p>雷蒙德·戴维斯(Raymond Davis Jr., 1914-)和小柴昌俊(Masatoshi Koshiba, 1926-)因在宇宙中微子探测方面所作的贡献，里卡尔多·贾科尼(Riccardo Giacconi, 1931-)因发现<a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99X%E5%B0%84%E7%BA%BF%E6%BA%90/15666006">宇宙X射线源</a>，共同分享了2002年度<a href="https://baike.baidu.com/item/%E8%AF%BA%E8%B4%9D%E5%B0%94%E7%89%A9%E7%90%86%E5%AD%A6%E5%A5%96">诺贝尔物理学奖</a>。</p><p>2002年诺贝尔物理学奖表彰的就是这一领域的两项重大成果。瑞典皇家科学院8日将2002年诺贝尔物理学奖授予美国科学家雷蒙德·戴维斯、日本科学家小柴昌俊和美国科学家里卡尔多·贾科尼，称他们“在天体物理学领域做出的先驱性贡献”打开了人类观测宇宙的两个新“窗口”。</p></blockquote><blockquote><p>　瑞典皇家科学院8日宣布，将2002年诺贝尔物理学奖授予美国科学家雷蒙德·戴维斯、日本科学家小柴昌俊和美国科学家里卡尔多·贾科尼，以表彰他们在天体物理学领域做出的先驱性贡献。</p><p>　　瑞典皇家科学院称赞这3名科学家为人类观测宇宙开启了两扇新的“窗户”，从而改变了人类认识宇宙的方式。他们的重要发现使人类可以借助中微子和Ｘ射线这些宇宙中极其微小的物质，提高对太阳、恒星、星系和超新星等宇宙中巨大天体的认识。</p><p>　　瑞典皇家科学院发表的新闻公报说，1945年诺贝尔物理学奖获得者著名物理学家沃尔夫冈·泡利，早在上世纪30年代便预测了神秘的中微子的存在。在太阳和其它恒星内部发生核聚变时产生的中微子几乎不与其他物质发生作用，因此尽管每秒钟有数万亿个中微子穿过我们的身体，我们仍然很难发现它们的踪影。</p><p>　　最终能够捕捉到中微子应当归功于雷蒙德·戴维斯和小柴昌俊。前者发明了一种全新的探测器，其主体是一个注满615吨四氯乙烯的巨桶。该探测器埋藏在美国的一个矿井中。戴维斯利用这个探测器，在长达30年的时间里成功捕捉到了约2000个来自于太阳的中微子。小柴领导的一个研究小组通过另一个巨大的探测器证实了戴维斯的成果。戴维斯和小柴还在1987年成功捕捉到了一个遥远的超新星爆炸后释放出的中微子。由于他们两人的发现，科学研究领域出现了一个新的学科——中微子天文学。</p><p>　　瑞典皇家科学院的新闻公报在介绍贾科尼的贡献时说，太阳和其他所有恒星都以不同的波长发射出可见的和不可见的电磁波，包括Ｘ射线。为探测进入地球大气层的宇宙Ｘ射线，贾科尼发明了一种可以置放在空中的探测器，从而第一次探测到了太阳系以外的Ｘ射线源，第一次证实宇宙中存在着隐蔽的Ｘ射线背景辐射，发现了可能来自黑洞的Ｘ射线。他还建造了第一台Ｘ射线天文望远镜，为我们观察宇宙提供了新的手段。贾科尼的这些贡献为创立Ｘ射线天文学奠定了基础。</p><p>　　今年的每项诺贝尔奖奖金额均为1000万瑞典克朗（约合107万美元），戴维斯和小柴昌俊将得到其中的一半，另一半则为贾科尼获得。</p></blockquote><p>SN1987A超新星爆发带来的疑惑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 超新星爆发人类探测器先探测到了中微子，后探测到光？<br>原因：恒星核心坍缩在前，释放出中微子，然后爆发，释放出大量的能力和光。<br>中微子的速度接近于光速<br>2. 超新星爆发前是一颗蓝超巨星，处于中年阶段，就爆炸了。之前人们认为只有红超巨星会爆炸，蓝超巨星爆炸这是头一次观测到，解释不清楚<br>3. 蓝超巨星的质量在20个太阳质量左右，爆发之后的产物应该是中子星，但是天文学家没有找到这颗中子星，未解之谜<br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_11-11-57-23.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_12-12-00-42.png"/></div><h2 id="元素合成"><a href="#元素合成" class="headerlink" title="元素合成"></a>元素合成</h2><p> 铁元素的比结合能最大，意味者铁最不容易被拆散，铁元素最稳定，因此聚变只能到铁就结束了</p><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_12-12-07-00.png"/></div><p>铁之后的元素是通过中子俘获得到的</p><p><a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90%E4%BF%98%E8%8E%B7/953462">中子俘获_百度百科 (baidu.com)</a></p><p>R-过程发生在超新星爆炸</p><blockquote><p>中子俘获是一种<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%A0%B8/420990">原子核</a>与一个或者多个<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90/466557">中子</a>撞击，形成重核的<a href="https://baike.baidu.com/item/%E6%A0%B8%E5%8F%8D%E5%BA%94/822469">核反应</a>。由于中子不带<a href="https://baike.baidu.com/item/%E7%94%B5%E8%8D%B7/1144574">电荷</a>，它们能够比带一个正电荷的<a href="https://baike.baidu.com/item/%E8%B4%A8%E5%AD%90/65645">质子</a>更加容易地进入原子核。</p><p>在宇宙形成过程中，中子俘获在一些<a href="https://baike.baidu.com/item/%E8%B4%A8%E9%87%8F%E6%95%B0/284188">质量数</a>较大元素的<a href="https://baike.baidu.com/item/%E6%A0%B8%E5%90%88%E6%88%90/7584450">核合成</a>过程中起到了重要的作用。中子俘获在<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F/493">恒星</a>里以快（<a href="https://baike.baidu.com/item/R-%E8%BF%87%E7%A8%8B">R-过程</a>）、慢（<a href="https://baike.baidu.com/item/S-%E8%BF%87%E7%A8%8B">S-过程</a>）两种形式发生。质量数大于56的核素不能够通过<a href="https://baike.baidu.com/item/%E7%83%AD%E6%A0%B8%E5%8F%8D%E5%BA%94/11043669">热核反应</a>（即核聚变）产生，但是可以通过中子俘获产生。</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_12-12-10-23.jpg"/></div><h1 id="第十九期-宇宙中的致密天体"><a href="#第十九期-宇宙中的致密天体" class="headerlink" title="第十九期 宇宙中的致密天体"></a>第十九期 宇宙中的致密天体</h1><h2 id="白矮星"><a href="#白矮星" class="headerlink" title="白矮星"></a>白矮星</h2><p><a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F/226390">白矮星（恒星）_百度百科 (baidu.com)</a></p><blockquote><p>白矮星（White Dwarf，也称为<a href="https://baike.baidu.com/item/%E7%AE%80%E5%B9%B6%E7%9F%AE%E6%98%9F/12730825">简并矮星</a>）是一种低光度、高密度、高温度的恒星。因为它的颜色呈白色、体积比较矮小，因此被命名为白矮星。表面温度8000K，发出白光，可有几十亿年寿命。</p><p>白矮星（White Dwarf，也称为<a href="https://baike.baidu.com/item/%E7%AE%80%E5%B9%B6%E7%9F%AE%E6%98%9F/12730825">简并矮星</a>）是一种低<a href="https://baike.baidu.com/item/%E5%85%89%E5%BA%A6">光度</a>、高密度、高温度的<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F/493">恒星</a>。因为它的颜色呈白色、体积比较矮小，因此被命名为白矮星。白矮星是演化到末期的恒星，主要由碳构成，外部覆盖一层氢气与<a href="https://baike.baidu.com/item/%E6%B0%A6%E6%B0%94">氦气</a>。白矮星在亿万年的时间里逐渐冷却、变暗，它体积小，亮度低，但密度高，质量大。1982年出版的白矮星星表表明，银河系当时中已被发现的白矮星有488颗，它们都是离太阳不远的近距天体。随着观测天文学在最近几十年迅速的发展，尤其是大型巡天项目的实施，新发现的天体数目急剧增加，尤其是SDSS的光谱巡天和Gaia卫星的巡天已经发现了数十万的白矮星。</p><p>白矮星属于演化到晚年期的恒星，恒星在演化后期，抛射出大量的物质，经过大量的质量损失后，如果剩下的核的质量小于1.44个太阳质量，这颗恒星便演化成为白矮星。对白矮星的形成也有人认为，白矮星的前身是行星状星云（是宇宙中由高温气体、少量尘埃等组成的环状或圆盘状的物质），它的中心通常都有一个温度很高的恒星——中心星，它的核能源已经基本耗尽，整个星体开始慢慢冷却、晶化，直至最后“死亡”。</p><p><a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E7%AE%80%E5%B9%B6%E5%8E%8B/15543922">电子简并压</a>与白矮星强大的重力平衡，维持着白矮星的稳定。当白矮星质量进一步增大，电子简并压就有可能抵抗不住自身的<a href="https://baike.baidu.com/item/%E5%BC%95%E5%8A%9B%E6%94%B6%E7%BC%A9">引力收缩</a>，白矮星还会<a href="https://baike.baidu.com/item/%E5%9D%8D%E7%BC%A9">坍缩</a>成密度更高的天体：<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90%E6%98%9F">中子星</a>或<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>。对单星系统而言，由于没有<a href="https://baike.baidu.com/item/%E7%83%AD%E6%A0%B8%E5%8F%8D%E5%BA%94">热核反应</a>来提供能量，白矮星在发出光热的同时，也以同样的速度冷却着。经过数千亿年的漫长岁月，年老的白矮星将渐渐停止辐射而死去。它的躯体变成一个比钻石还硬的巨大晶体——<a href="https://baike.baidu.com/item/%E9%BB%91%E7%9F%AE%E6%98%9F">黑矮星</a>。</p><p>而对于多星系统，白矮星的演化过程则有可能被改变（例如双星）。</p></blockquote><p><a href="https://baike.baidu.com/item/%E6%B3%A1%E5%88%A9%E4%B8%8D%E7%9B%B8%E5%AE%B9%E5%8E%9F%E7%90%86/773763">泡利不相容原理_百度百科 (baidu.com)</a></p><blockquote><p>泡利不相容原理（Pauli exclusion principle），又称泡利原理、不相容原理，是<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%A7%82%E7%B2%92%E5%AD%90/1125264">微观粒子</a>运动的基本规律之一。它指出：在<a href="https://baike.baidu.com/item/%E8%B4%B9%E7%B1%B3%E5%AD%90/126356">费米子</a>组成的系统中，不能有两个或两个以上的粒子处于完全相同的状态。在<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90/420269">原子</a>中完全确定一个电子的状态需要四个<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E6%95%B0/2723409">量子数</a>，所以泡利不相容原理在原子中就表现为：不能有两个或两个以上的电子具有完全相同的四个量子数，或者说在轨道量子数<em>m</em>，<em>l</em>，<em>n</em>确定的一个原子轨道上最多可容纳两个电子，而这两个电子的<a href="https://baike.baidu.com/item/%E8%87%AA%E6%97%8B%E6%96%B9%E5%90%91/22386426">自旋方向</a>必须相反。这成为电子在核外排布形成<a href="https://baike.baidu.com/item/%E5%91%A8%E6%9C%9F%E6%80%A7/6458545">周期性</a>从而解释<a href="https://baike.baidu.com/item/%E5%85%83%E7%B4%A0%E5%91%A8%E6%9C%9F%E8%A1%A8/282048">元素周期表</a>的准则之一。</p></blockquote><p>最早被发现的白矮星</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">波江座40B（距离地球16.5光年）<br>天狼星的伴星（距离我们8.6光年）<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E6%B3%A2%E6%B1%9F%E5%BA%A740/10403979">波江座40_百度百科 (baidu.com)</a></p><blockquote><p><strong>波江座 40A</strong>是橘红色的<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%BA%8F%E6%98%9F">主序星</a>，光谱类型是K1的矮星，它的两颗伴星，<strong>波江座 40B</strong>和<strong>波江座 40C</strong>分别是9等的白矮星 (光谱类型为DA4) 和11等的<a href="https://baike.baidu.com/item/%E7%BA%A2%E7%9F%AE%E6%98%9F">红矮星</a>，还是闪光星(光谱类型为M4.5e) ，所以还被标示为<a href="https://baike.baidu.com/item/%E5%8F%98%E6%98%9F">变星</a>波江座 DY。依据推测，波江座 40B原本是<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%BA%8F%E6%98%9F">主序星</a>，并且是系统之中质量最大的一颗，但在成为白矮星之前喷发出了大部份的质量。B和C互相环绕着，与A的距离大约是400<a href="https://baike.baidu.com/item/%E5%A4%A9%E6%96%87%E5%8D%95%E4%BD%8D">天文单位</a>。这两颗星的轨道半长轴大约是35天文单位 (大约就是这两颗星之间的距离)，轨道的形状是椭圆形 (<a href="https://baike.baidu.com/item/%E7%A6%BB%E5%BF%83%E7%8E%87">离心率</a>大概是0.410)。 对应至中国的星官为毕宿的<a href="https://baike.baidu.com/item/%E4%B9%9D%E5%B7%9E%E6%AE%8A%E5%8F%A3%E5%A2%9E%E5%8D%81%E4%B8%80/14704261">九州殊口增十一</a>，但伊世同认为是九州殊口增七。</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_13-13-52-43.png"/></div><p><a href="https://baike.baidu.com/item/%E5%A4%A9%E7%8B%BC%E6%98%9F/69473">天狼星（大犬座 α 星）_百度百科 (baidu.com)</a></p><blockquote><p>天狼星（Sirius），即大犬座 α 星A（α Canis Majoris A），位于<a href="https://baike.baidu.com/item/%E5%A4%A7%E7%8A%AC%E5%BA%A7/1277493">大犬座</a>。天狼星的视星等为-1.46等，是除太阳外全天最亮的恒星，但是暗于金星与<a href="https://baike.baidu.com/item/%E6%9C%A8%E6%98%9F/222105">木星</a>，绝大多数时间亮于火星。天狼星是一颗蓝白色的主序星，有一颗白矮星伴星，系统质心距离地球约为 8.6 光年。其中天狼星B，即那颗<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F/226390">白矮星</a>伴星，是人类最早观测到的白矮星，也是质量最大的白矮星之一。</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_13-13-56-48.png"/></div><blockquote><p>1717年，<a href="https://baike.baidu.com/item/%E5%9F%83%E5%BE%B7%E8%92%99%E5%A4%9A%C2%B7%E5%93%88%E9%9B%B7/10451577">埃德蒙多·哈雷</a>（Edmond Halley）在比较了当代天体测量与<a href="https://baike.baidu.com/item/%E5%85%8B%E7%BD%97%E7%8B%84%E6%96%AF%C2%B7%E6%89%98%E5%8B%92%E5%AF%86/2675843">克罗狄斯·托勒密</a>《年鉴》中公元二世纪的测量结果后，发现了恒星的自身运动，即恒星<a href="https://baike.baidu.com/item/%E8%87%AA%E8%A1%8C/13028926">自行</a>。哈雷注意到，明亮的恒星<a href="https://baike.baidu.com/item/%E6%AF%95%E5%AE%BF%E4%BA%94/9469848">毕宿五</a>、<a href="https://baike.baidu.com/item/%E5%A4%A7%E8%A7%92%E6%98%9F/5230101">大角星</a>和天狼星已经显著地移动；天狼星已经向西南方向移动了大约30角分（大约是一个月亮的直径）。 [4] </p><p>1844 年，德国天文学家<a href="https://baike.baidu.com/item/%E8%B4%9D%E5%A1%9E%E5%B0%94/696605">贝塞尔</a>根据它的移动路径出现的波浪图形推断天狼星是一颗双星，因为该星在附近空间中沿一条呈波形的轨迹运动， 从而得出它有一颗伴星和绕转周期约为 50 年的结论。这颗伴星于 1862 年被美国天文学家 A ·克拉克（A. Clark）用他自制的折射天文望远镜最先看到。 [5] </p><p>1868年，天狼星成为第一颗被测量速度的恒星，这是研究天体径向速度的开端。<a href="https://baike.baidu.com/item/%E5%A8%81%E5%BB%89%C2%B7%E5%93%88%E9%87%91%E6%96%AF/3762724">威廉·哈金斯</a>爵士检查了这颗恒星的光谱并观察到了红移。他得出的结论是，天狼星正以大约40公里&#x2F;秒的速度远离太阳系，而现代的测量结果为-5.5公里&#x2F;秒（负号“−”表示它正在接近太阳）。这是一个极度不准确的数据，有可能是哈金斯没有考虑地球的轨道速度，这将导致高达30公里&#x2F;秒的误差。</p><p>自1894年以来，在天狼星系统中观察到了一些明显的轨道不规则现象，这表明有第三颗非常小的伴星，但这一点从未得到证实。对数据的最佳拟合表明，围绕天狼星a的轨道为6年，质量为0.06m☉。这颗恒星将比白矮星天狼星B暗5到10个量级，这将使观测变得困难。2008年发表的观测结果既不能探测到第三颗恒星，也不能探测到行星。20世纪20年代观测到的一颗明显的“第三颗星”现在被认为是背景物体。</p></blockquote><blockquote><ul><li><strong>天狼星 A</strong></li></ul><p>天狼星 A 是一颗<a href="https://baike.baidu.com/item/%E8%93%9D%E7%9F%AE%E6%98%9F/8104461">蓝矮星</a>，半径约为 1.711 R⊙。<a href="https://baike.baidu.com/item/%E5%85%89%E5%AD%A6%E5%B9%B2%E6%B6%89%E4%BB%AA/14706935">光学干涉仪</a>量度出此星的半径，估计角直径为 5.936 ± 0.016 mas。它的自转速度约为 16 km&#x2F;s，因此并没有有效地把星体压扁成椭圆形。<a href="https://baike.baidu.com/item/%E7%BB%87%E5%A5%B3%E6%98%9F/1247527">织女星</a>则以更高速的 274 km&#x2F;s 自转，使其成为扁球体。</p><p>天体模型指出天狼星 A 形成于一次<a href="https://baike.baidu.com/item/%E5%88%86%E5%AD%90%E4%BA%91">分子云</a>坍塌的时候，到了 10^7 年之后，其能源的生成已经完全由核聚变提供。其核心成为了对流层，并利用 C-N-O 循环制造能量。人们预测，天狼星 A 会在其形成之后 1.76 × 10^9 年之内用尽储存在核心的<a href="https://baike.baidu.com/item/%E6%B0%A2">氢</a>。此时它会经历<a href="https://baike.baidu.com/item/%E7%BA%A2%E5%B7%A8%E6%98%9F/569283">红巨星</a>阶段，届时天狼星 A 的<a href="https://baike.baidu.com/item/%E5%85%89%E5%BA%A6/2339791">光度</a>将大增。然后它将温和下来，成为一颗<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F/226390">白矮星</a>。</p><p>天狼星 A 的光谱有着很深的金属线，显示出一些重于<a href="https://baike.baidu.com/item/%E6%B0%A6">氦</a>的元素的增强（如<a href="https://baike.baidu.com/item/%E9%93%81/29586">铁</a>），因此也被归为 Am 星。相比于太阳，天狼星 A 大气层里相对于氢含量的铁含量为 Fe&#x2F;H &#x3D; 0.5，也等于 100.5，意思是说它大气层中的铁的含量是太阳的 316%。因为不太可能整颗恒星都富有金属元素，因而这些金属元素都可能是悬浮在位于表面的一层薄对流层上。 [8] </p><ul><li><strong>天狼星 B</strong></li></ul><p>天狼星 B 的质量大于太阳的质量，并且是已知最大质量的<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F/226390">白矮星</a>之一。它差不多有 1.1 M⊙。然而这么多物质却被压缩成约为地球的大小。其表面温度为 25000 ± 200 K。但是，由于在内部已经没有能量的生成，剩余的热量会以辐射的形态放射出外太空，天狼星 B 终究会渐渐冷却，这需时要多于 2 × 10^8 年。</p><p>一颗恒星要经过<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%BA%8F%E6%98%9F/820493">主序星</a>和<a href="https://baike.baidu.com/item/%E7%BA%A2%E5%B7%A8%E6%98%9F/569283">红巨星</a>阶段才会成为<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F/226390">白矮星</a>。约为 1.2 × 10^8 年前，天狼星 B 可能是一颗光度更高的<a href="https://baike.baidu.com/item/%E8%93%9D%E7%9F%AE%E6%98%9F/8104461">蓝矮星</a>，光谱在 B4-B5 之间，质量约为 5M⊙。天狼星 B 成为红巨星的时候，可能增加了其伴星天狼星 A 的金属量。</p><p>天狼星 B 最初由碳及氧元素组成，这两种元素是形成天狼星 B 的已死亡恒星里的氦核聚变产生的。这些元素被更轻的元素覆盖，并根据质量来分层，因为天狼星 B 有着高表面重力。因此，天狼星 B 的外层大气层几乎为纯氢，宇宙中最轻的元素，<a href="https://baike.baidu.com/item/%E5%85%89%E8%B0%B1/757474">光谱</a>中也找不到任何其它元素。 [9] </p></blockquote><h2 id="中子星"><a href="#中子星" class="headerlink" title="中子星"></a>中子星</h2><p>白矮星和核心，处于电子简并态，维持着平衡；</p><p>超过钱德拉塞卡极限，电子简并态被打破，成为中子星。</p><p><a href="https://baike.baidu.com/item/%E8%8B%8F%E5%B8%83%E6%8B%89%E9%A9%AC%E5%B0%BC%E6%89%AC%C2%B7%E9%92%B1%E5%BE%B7%E6%8B%89%E5%A1%9E%E5%8D%A1/2190314">苏布拉马尼扬·钱德拉塞卡_百度百科 (baidu.com)</a></p><blockquote><p>苏布拉马尼扬·钱德拉塞卡（Subrahmanyan Chandrasekhar，1910年10月19日——1995年8月21日），男，印度裔美国籍物理学家和天体物理学家。钱德拉塞卡在1983年因在星体结构和进化的研究而与另一位美国天体物理学家<a href="https://baike.baidu.com/item/%E5%A8%81%E5%BB%89%C2%B7%E8%89%BE%E5%B0%94%E5%BC%97%E9%9B%B7%E5%BE%B7%C2%B7%E7%A6%8F%E5%8B%92/817551">威廉·艾尔弗雷德·福勒</a>共同获<a href="https://baike.baidu.com/item/%E8%AF%BA%E8%B4%9D%E5%B0%94%E7%89%A9%E7%90%86%E5%AD%A6%E5%A5%96/211390">诺贝尔物理学奖</a>。他也是另一个获诺贝尔奖的物理学家<a href="https://baike.baidu.com/item/%E6%8B%89%E6%9B%BC/2770600">拉曼</a>的亲戚。钱德拉塞卡从1937年开始在<a href="https://baike.baidu.com/item/%E8%8A%9D%E5%8A%A0%E5%93%A5%E5%A4%A7%E5%AD%A6/514980">芝加哥大学</a>任职，直到1995年去世为止。他在1953年成为美国的公民。</p><p>苏布拉马尼扬·钱德拉塞卡，1930年毕业于印度马德拉斯大学，1933年获得英国剑桥大学三一学院博士学位。1930～1934年在英国<a href="https://baike.baidu.com/item/%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6%E4%B8%89%E4%B8%80%E5%AD%A6%E9%99%A2/6370048">剑桥大学三一学院</a>学习理论物理。1933～1937年在该校任教。1937年1月返回芝加哥大学，成为天文学家鄂图·斯特鲁维（Otto Struve）博士与罗伯·胡钦斯的助理教授。他后来都没有离开过<a href="https://baike.baidu.com/item/%E8%8A%9D%E5%8A%A0%E5%93%A5%E5%A4%A7%E5%AD%A6/514980">芝加哥大学</a>，并在1952年成为天体物理学教授，并且在1985年退休。</p></blockquote><p><a href="https://baike.baidu.com/item/%E9%92%B1%E5%BE%B7%E6%8B%89%E5%A1%9E%E5%8D%A1%E6%8B%89%C2%B7%E6%96%87%E5%8D%A1%E5%A1%94%C2%B7%E6%8B%89%E6%9B%BC/7539110">钱德拉塞卡拉·文卡塔·拉曼_百度百科 (baidu.com)</a></p><blockquote><p>钱德拉塞卡拉·拉曼<a href="https://baike.baidu.com/item/%E7%88%B5%E5%A3%AB/8315449">爵士</a>，<a href="https://baike.baidu.com/item/FRS/8662394">FRS</a>（<a href="https://baike.baidu.com/item/%E8%8B%B1%E8%AF%AD/109997">英语</a>：Sir Chandrasekhara Raman， 1888年11月7日－1970年11月21日），<a href="https://baike.baidu.com/item/%E5%8D%B0%E5%BA%A6/121904">印度</a><a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AD%A6%E5%AE%B6/2353">物理学家</a>，1930年<a href="https://baike.baidu.com/item/%E8%AF%BA%E8%B4%9D%E5%B0%94%E7%89%A9%E7%90%86%E5%AD%A6%E5%A5%96">诺贝尔物理学奖</a>获得者。</p><p>C.V.拉曼是<a href="https://baike.baidu.com/item/%E8%8B%8F%E5%B8%83%E6%8B%89%E9%A9%AC%E5%B0%BC%E6%89%AC%C2%B7%E9%92%B1%E5%BE%B7%E6%8B%89%E5%A1%9E%E5%8D%A1/2190314">苏布拉马尼扬·钱德拉塞卡</a>的叔叔，苏布拉马尼扬·钱德拉塞卡因他发现的<a href="https://baike.baidu.com/item/%E9%92%B1%E5%BE%B7%E6%8B%89%E5%A1%9E%E5%8D%A1%E6%9E%81%E9%99%90/494913">钱德拉塞卡极限</a>，后来获得公元1983年的<a href="https://baike.baidu.com/item/%E8%AF%BA%E8%B4%9D%E5%B0%94%E7%89%A9%E7%90%86%E5%A5%96">诺贝尔物理奖</a>，他1931年以后的工作主要是必须核反应的恒星演化方面。</p></blockquote><p><a href="https://baike.baidu.com/item/%E9%92%B1%E5%BE%B7%E6%8B%89%E5%A1%9E%E5%8D%A1%E6%9E%81%E9%99%90/494913">钱德拉塞卡极限_百度百科 (baidu.com)</a></p><blockquote><p>钱德拉塞卡极限（Chandrasekhar limit ）指<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F/226390">白矮星</a>的最高质量，约为3×1030公斤，是<a href="https://baike.baidu.com/item/%E5%A4%AA%E9%98%B3%E8%B4%A8%E9%87%8F">太阳质量</a>的1.44倍。这个极限是由<a href="https://baike.baidu.com/item/%E9%92%B1%E5%BE%B7%E6%8B%89%E5%A1%9E%E5%8D%A1/810849">钱德拉塞卡</a>计算出的。计算的结果会依据<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%A0%B8">原子核</a>的结构和温度而有些差异。</p></blockquote><p><a href="https://baike.baidu.com/item/%E4%BA%9A%E7%91%9F%C2%B7%E6%96%AF%E5%9D%A6%E5%88%A9%C2%B7%E7%88%B1%E4%B8%81%E9%A1%BF/5340831">亚瑟·斯坦利·爱丁顿_百度百科 (baidu.com)</a></p><blockquote><p>亚瑟·斯坦利·爱丁顿（Arthur Stanley Eddington，1882年12月28日—1944年11月22日），<a href="https://baike.baidu.com/item/%E8%8B%B1%E5%9B%BD/144602">英国</a><a href="https://baike.baidu.com/item/%E5%A4%A9%E6%96%87%E5%AD%A6%E5%AE%B6/1242040">天文学家</a>、<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AD%A6%E5%AE%B6/2353">物理学家</a>、<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6%E5%AE%B6/1210991">数学家</a>，，第一位用英语宣讲<a href="https://baike.baidu.com/item/%E7%9B%B8%E5%AF%B9%E8%AE%BA/48750">相对论</a>的科学家，自然界密实物体的<a href="https://baike.baidu.com/item/%E5%8F%91%E5%85%89%E5%BC%BA%E5%BA%A6/1073260">发光强度</a>极限被命名为“<a href="https://baike.baidu.com/item/%E7%88%B1%E4%B8%81%E9%A1%BF%E6%9E%81%E9%99%90/4036396">爱丁顿极限</a>”。1919年写了“重力的相对理论报导”，第一次向英语世界介绍了<a href="https://baike.baidu.com/item/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6/122624">爱因斯坦</a>的<a href="https://baike.baidu.com/item/%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/472897">广义相对论</a>理论。著作有《恒星和原子》、《<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/1307865">恒星内部结构</a>》、《基本理论》、《科学和未知世界》、《膨胀着的宇宙：天文学的重要数据》、《质子和电子的相对论》、《物理世界的性质》、《科学的新道路》等等。</p></blockquote><p><a href="https://baike.baidu.com/item/%E7%88%B1%E4%B8%81%E9%A1%BF%E6%9E%81%E9%99%90/4036396">爱丁顿极限_百度百科 (baidu.com)</a></p><blockquote><p>指在球对称前提下天体的辐射压力不超过引力时的光度上限值。</p></blockquote><p><a href="https://baike.baidu.com/item/%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7%E6%9F%A5%E5%BE%B7%E5%A8%81%E5%85%8B/9269558">詹姆斯·查德威克_百度百科 (baidu.com)</a></p><blockquote><p>1891年查德威克出生在<a href="https://baike.baidu.com/item/%E8%8B%B1%E5%9B%BD/144602">英国</a><a href="https://baike.baidu.com/item/%E6%9F%B4%E9%83%A1/6691654">柴郡</a>，曼彻斯特维多利亚大学（现<a href="https://baike.baidu.com/item/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E5%A4%A7%E5%AD%A6">曼彻斯特大学</a>）毕业。毕业后，专攻<a href="https://baike.baidu.com/item/%E6%94%BE%E5%B0%84%E6%80%A7/1205455">放射性</a>现象的研究。后到<a href="https://baike.baidu.com/item/%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6/278542">剑桥大学</a>，在<a href="https://baike.baidu.com/item/%E5%8D%A2%E7%91%9F%E7%A6%8F/187498">卢瑟福</a>教授的指导下，取得许多成绩。</p><p>查德威克解决了理论物理学家在原子研究中遇到的难题，完成了原子物理研究上的一项突破性进展。后来，意大利物理学家<a href="https://baike.baidu.com/item/%E8%B4%B9%E7%B1%B3/379324">费米</a>用中子作“炮弹”轰击<a href="https://baike.baidu.com/item/%E9%93%80/444442">铀</a>原子核，发现了<a href="https://baike.baidu.com/item/%E6%A0%B8%E8%A3%82%E5%8F%98/492775">核裂变</a>和裂变中的<a href="https://baike.baidu.com/item/%E9%93%BE%E5%BC%8F%E5%8F%8D%E5%BA%94/6319735">链式反应</a>，开创了人类利用<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E8%83%BD/101748">原子能</a>的新时代。查德威克因发现中子的杰出贡献，获得1935年诺贝尔物理学奖。</p></blockquote><p><a href="https://baike.baidu.com/item/%E5%88%97%E5%A4%AB%C2%B7%E8%BE%BE%E7%BB%B4%E5%A4%9A%E7%BB%B4%E5%A5%87%C2%B7%E6%9C%97%E9%81%93/2194600">列夫·达维多维奇·朗道_百度百科 (baidu.com)</a></p><blockquote><p>早在1937年的时候，作为苏联理论物理的年青领袖，朗道觉得斯大林的大清洗正逐渐逼近，公众的注意或许能够让他得到保护。朗道亟需一个能在东西方科学界都掀起波澜的想法，他最后的选择，就是中子星(朗道称之为中子核，是在恒星内部的中子星，为恒星提供能源)。朗道把稿件直接寄给了玻尔，希望能够得到他的推荐让自己的文章在《自然》（当时已经是最权威的自然综合性的杂志）上发表。因为当时严格的审查，朗道只能用点春秋之笔，玻尔也是个绝顶聪明的人，当天就回了信。当时苏联《<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E6%8A%A5/3954106">消息报</a>》的编辑们也许良知未泯，他们连同玻尔的回信一起发表，并盛赞了朗道的成果，“……尼尔斯·玻尔对这位苏联科学家的工作给以极高的评价，说‘朗道的新思想是很杰出而大有希望的’。”</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/53106362">贝尔：第一个发现了脉冲星，世界却欠她一个诺贝尔奖 - 知乎 (zhihu.com)</a></p><blockquote><p>1974年的诺贝尔物理奖被称为“TheNoBellNobe”（没有贝尔的诺贝尔奖），这一年她的导师安东尼·休伊什教授领取了诺贝尔奖，而贝尔根本就没有被提起。</p></blockquote><p><a href="https://baike.baidu.com/item/%E8%84%89%E5%86%B2%E6%98%9F/83609">脉冲星（有10^7—10^14T强磁场的快速自转中子星）_百度百科 (baidu.com)</a></p><blockquote><p>脉冲星（Pulsar），就是旋转的<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90%E6%98%9F/101875">中子星</a>，因不断地发出电磁脉冲信号而得名。脉冲星是在1967年首次被发现的。当时，还是一名女研究生的贝尔，发现<a href="https://baike.baidu.com/item/%E7%8B%90%E7%8B%B8%E6%98%9F%E5%BA%A7/11000047">狐狸星座</a>有一颗星会发出一种<a href="https://baike.baidu.com/item/%E5%91%A8%E6%9C%9F%E6%80%A7/6458545">周期性</a>的<a href="https://baike.baidu.com/item/%E7%94%B5%E6%B3%A2/10807776">电波</a>。经过仔细分析，科学家认为这是一种未知的<a href="https://baike.baidu.com/item/%E5%A4%A9%E4%BD%93/749823">天体</a>。因为这种星体不断地发出<a href="https://baike.baidu.com/item/%E7%94%B5%E7%A3%81%E8%84%89%E5%86%B2/110279">电磁脉冲</a>信号，就把它命名为脉冲星。</p><p>2021年5月20日，国家天文台研究团队利用中国天眼FAST望远镜在观测中取得的重要进展，正式发布了201颗新脉冲星的发现。 [6] </p><p>2021年12月20日，2021年度FAST运行和发展中心年终总结会在贵州省平塘县中国天眼(FAST)观测基地举行。FAST已发现509颗脉冲星，是世界上所有其他望远镜发现脉冲星总数的4倍以上。</p><p>脉冲星（Pulsar），又称<a href="https://baike.baidu.com/item/%E6%B3%A2%E9%9C%8E">波霎</a>，是<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90%E6%98%9F">中子星</a>的一种，能够周期性发射<a href="https://baike.baidu.com/item/%E8%84%89%E5%86%B2%E4%BF%A1%E5%8F%B7">脉冲信号</a>，直径大多为10千米左右，自转极快。 [1] </p><p>人们最早认为<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F">恒星</a>是永远不变的。而大多数恒星的变化过程是如此的漫长，人们也根本觉察不到。然而，并不是所有的恒星都那么平静。后来人们发现，有些恒星也很“调皮”，变化多端。于是，就给那些喜欢变化的恒星起了个专门的名字，叫“<a href="https://baike.baidu.com/item/%E5%8F%98%E6%98%9F">变星</a>”。</p><p>脉冲星发射的射电脉冲的周期性非常有规律。一开始，人们对此很困惑，甚至曾想到这可能是外星人在向我们发电报联系。据说，第一颗脉冲星就曾被叫做“小绿人一号”。</p><p>经过几位天文学家一年的努力，终于证实，脉冲星就是正在快速<a href="https://baike.baidu.com/item/%E8%87%AA%E8%BD%AC/1011647">自转</a>的<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90%E6%98%9F">中子星</a>。而且，正是由于它的快速自转而发出射电<a href="https://baike.baidu.com/item/%E8%84%89%E5%86%B2">脉冲</a>。</p><p>正如地球有<a href="https://baike.baidu.com/item/%E7%A3%81%E5%9C%BA">磁场</a>一样，<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F">恒星</a>也有磁场；也正如地球在<a href="https://baike.baidu.com/item/%E8%87%AA%E8%BD%AC">自转</a>一样，恒星也都在自转着；还跟地球一样，恒星的磁场方向不一定跟<a href="https://baike.baidu.com/item/%E8%87%AA%E8%BD%AC%E8%BD%B4">自转轴</a>在同一直线上。这样，每当<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F%E8%87%AA%E8%BD%AC">恒星自转</a>一周，它的磁场就会在空间划一个圆，而且可能扫过地球一次。那么岂不是所有恒星都能发脉冲了？其实不然，要发出像脉冲星那样的射电信号，需要很强的<a href="https://baike.baidu.com/item/%E7%A3%81%E5%9C%BA/63505">磁场</a>。而只有体积越小、质量越大的恒星，它的磁场才越强。而<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90">中子</a>星正是这样高密度的<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F/493">恒星</a>。</p><p>另一方面，当恒星体积越小、质量越大，它的自转周期就越短。我们很熟悉的<a href="https://baike.baidu.com/item/%E5%9C%B0%E7%90%83%E8%87%AA%E8%BD%AC">地球自转</a>一周要二十四小时。而脉冲星的自转周期竟然小到0.0014秒！要达到这个速度，连<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F">白矮星</a>都不行。这同样说明，只有高速旋转的<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90%E6%98%9F">中子星</a>，才可能扮演脉冲星的角色</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_14-14-19-15.png"/></div><p><a href="https://baike.baidu.com/item/%E6%98%9F%E9%9C%87/7852007">星震_百度百科 (baidu.com)</a></p><blockquote><p>星震被看作是中子星外壳的撕裂<a href="https://baike.baidu.com/item/%E7%8E%B0%E8%B1%A1/2808631">现象</a>，与地球上发生的<a href="https://baike.baidu.com/item/%E5%9C%B0%E9%9C%87/40588">地震</a>颇为相似。<a href="https://baike.baidu.com/item/%E5%AE%87%E5%AE%99/31801">宇宙</a>中存在着一种称做“<a href="https://baike.baidu.com/item/%E7%A3%81%E6%98%9F/2386999">磁星</a>”的新星，其<a href="https://baike.baidu.com/item/%E5%AF%86%E5%BA%A6/718381">密度</a>极大，而且坚硬的<a href="https://baike.baidu.com/item/%E5%A4%96%E5%A3%B3/4765104">外壳</a>包裹着一个奇异的液体核。更重要的是，这颗磁星具有强大的<a href="https://baike.baidu.com/item/%E7%A3%81%E5%9C%BA/63505">磁场</a>，而<a href="https://baike.baidu.com/item/%E7%A3%81%E5%9C%BA/63505">磁场</a>的运动又将磁星表面加热，直到达到极大<a href="https://baike.baidu.com/item/%E5%8E%8B%E5%8A%9B/33064">压力</a>，磁星破裂,而这,就是星震，其次,它还会引发伽马射线袭击宇宙。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/411980086">绚烂的超新星爆发背后，可能是一颗“消化不良”的中子星 - 知乎 (zhihu.com)</a></p><p><a href="https://new.qq.com/omn/20211130/20211130A06DE900.html">超新星的死亡有何奥秘，中子星为何会一直存在，都与大爆炸有关_腾讯新闻 (qq.com)</a></p><blockquote><p>在过去的几年里，天文学家发现一些高质量的恒星没有爆炸成超新星，但它们突然消失了。结果表明，一些高质量的恒星不会以超新星的形式结束生命，他们的核心收缩会直接收缩成黑洞，大部分物质落下后不会反弹，而是会直接吸入黑洞。这种事件被称为失败的超新星。同时超新星在死亡后其中心的的中子星不会消失。</p></blockquote><h2 id="黑洞"><a href="#黑洞" class="headerlink" title="黑洞"></a>黑洞</h2><p><a href="https://baike.baidu.com/item/%E7%BD%97%E4%BC%AF%E7%89%B9%C2%B7%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98/4771793">罗伯特·奥本海默_百度百科 (baidu.com)</a></p><blockquote><p>中子星的中子简并态被打破之后，恒星继续坍缩，成为一个点——黑洞</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/133547052">钱德拉塞卡极限和奥本海默极限为什么是白矮星和中子星的生死线？ - 知乎 (zhihu.com)</a></p><blockquote><p>这两种至密天体都是由量子简并压支撑着自身巨大的引力压而存在的。</p></blockquote><p><a href="https://baike.baidu.com/item/%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98%E6%9E%81%E9%99%90/1306338">奥本海默极限_百度百科 (baidu.com)</a></p><blockquote><p><a href="https://baike.baidu.com/item/%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98/489072">奥本海默</a>极限是稳定中子星的质量上限。1936年﹐<a href="https://baike.baidu.com/item/%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98/489072">奥本海默</a>等证明存在一个临界质量，一颗热核能源耗尽的星体﹐如果质量大于这个临界质量﹐就不可能成为稳定的中子星，它要么经过无限坍缩形成黑洞﹐要么形成介于<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90%E6%98%9F/101875">中子星</a>与<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E/10952">黑洞</a>之间的其他类型的致密星，这个临界质量被称为<a href="https://baike.baidu.com/item/%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98/489072">奥本海默</a>极限。</p><p><a href="https://baike.baidu.com/item/%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98/489072">奥本海默</a>，J.R.（J. Robert Oppenheimer）(1904～1967)美国理论物理学家和科学组织家，美国研制第一批<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E5%BC%B9/136858">原子弹</a>的“<a href="https://baike.baidu.com/item/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%AE%A1%E5%88%92/2141">曼哈顿计划</a>”的主要技术负责人。</p><p>稳定<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%AD%90%E6%98%9F/101875">中子星</a>的质量上限。</p><p>1936年﹐<a href="https://baike.baidu.com/item/%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98">奥本海默</a>等首先讨论了由简并中子态物质构成的<a href="https://baike.baidu.com/item/%E8%87%B4%E5%AF%86%E6%98%9F">致密星</a>体﹐即中子星的平衡和稳定性。这种星体的性质﹐主要由自引力和简并中子压力二者之间的平衡决定。利用广义相对论的无转动球对称星体结构方程﹐并用理想费密气体方程作为中子物质的物态方程﹐奥本海默等证明﹐存在一个临界质量M ≒0.75M ﹐M 表示<a href="https://baike.baidu.com/item/%E5%A4%AA%E9%98%B3%E8%B4%A8%E9%87%8F">太阳质量</a>。当星体的质量小于M 时﹐存在稳定的平衡解﹔反之﹐没有稳定的平衡解。中子星的质量上限M 就是奥本海默极限。如果采用更接近实际的中子物态方程。奥本海默极限的数值将不同于原来的数值。由于有关密度大于 10克&#x2F;厘米时的物态方程还不确定﹐中子星的质量上限也不确定﹐一般可取为2M 。</p><p>奥本海默极限（TOV极限，也叫奥本海默-沃尔科夫极限）即是中子星的质量上限，类似于<a href="https://baike.baidu.com/item/%E7%99%BD%E7%9F%AE%E6%98%9F">白矮星</a>质量上限的钱德拉塞卡极限。如上节所述，奥本海默和沃尔科夫得到的中子星质量上限约为0.7倍太阳质量，这在今天看来应该是错误的，当今的结果在1.5至3倍太阳质量之间。对于质量小于此极限的中子星，支持星体的内部压力来自中子与中子之间的强相互作用以及中子本身的量子简并压力；而对于质量大于此极限的中子星会在自身引力的作用下崩溃，从而坍缩为一个黑洞，理论上在其他途径的内部压力支持下还可能成为其他形式的星体（例如在夸克简并压力的支持下坍缩为夸克星）。但由于对这些理论上的夸克简并物质了解相对中子简并物质更少，一般天体物理学家相信，除非有实际观测的反例证实，中子星在超过这一极限时都会直接坍缩为黑洞。</p><p>一颗热核能源耗尽的星体﹐如果质量大于奥本海默极限﹐不可能成为稳定的中子星。它的一种可能归宿是经过无限坍缩形成黑洞﹐另一种归宿是形成介于中子星与黑洞之间的其他类型的<a href="https://baike.baidu.com/item/%E8%87%B4%E5%AF%86%E6%98%9F">致密星</a>。</p></blockquote><h1 id="第二十期-类星体"><a href="#第二十期-类星体" class="headerlink" title="第二十期 类星体"></a>第二十期 类星体</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">20世纪60年代，天体物理学的四大发现：脉冲星，类星体，星际分子，宇宙微波背景辐射<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E7%B1%BB%E6%98%9F%E4%BD%93/347669">类星体（类似恒星的天体）_百度百科 (baidu.com)</a></p><blockquote><p>类星体，<a href="https://baike.baidu.com/item/%E5%A4%A9%E6%96%87%E5%AD%A6/402068">天文学</a>名词，是类似<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F/493">恒星</a>天体的简称，又称为<a href="https://baike.baidu.com/item/%E4%BC%BC%E6%98%9F%E4%BD%93/1374459">似星体</a>、魁霎或<a href="https://baike.baidu.com/item/%E7%B1%BB%E6%98%9F%E5%B0%84%E7%94%B5%E6%BA%90/2038841">类星射电源</a>，与<a href="https://baike.baidu.com/item/%E8%84%89%E5%86%B2%E6%98%9F/83609">脉冲星</a>、<a href="https://baike.baidu.com/item/%E5%BE%AE%E6%B3%A2%E8%83%8C%E6%99%AF%E8%BE%90%E5%B0%84/473045">微波背景辐射</a>和<a href="https://baike.baidu.com/item/%E6%98%9F%E9%99%85%E6%9C%89%E6%9C%BA%E5%88%86%E5%AD%90/1964254">星际有机分子</a>一道并称为20世纪60年代天文学“四大发现”。长期以来，它总是让天文学家感到困惑不解。</p><p>类星体是人类观测到的非常遥远的天体，高红移的类星体距离地球可达到100亿光年以上。类星体是一种在极其遥远距离外观测到的高光度天体，80%以上的类星体是射电宁静的。类星体比星系小很多，但是释放的能量却是星系的千倍以上，类星体的超常亮度使其光能在100亿<a href="https://baike.baidu.com/item/%E5%85%89%E5%B9%B4">光年</a>以外的距离处被观测到。</p><p>据推测，在100亿年前，类星体数量更多。类星体是一类离地球最远、能量最高的<a href="https://baike.baidu.com/item/%E6%B4%BB%E5%8A%A8%E6%98%9F%E7%B3%BB%E6%A0%B8/491373">活动星系核</a>。类星体与脉冲星、微波背景辐射和星际有机分子一度被称为20世纪60年代天文学“四大发现”。</p></blockquote><p>类星体的特点</p><blockquote><p>类星体的显著特点是具有很大的<a href="https://baike.baidu.com/item/%E7%BA%A2%E7%A7%BB">红移</a>，表示它正以飞快的速度在向地球远离。类星体离地球很远，大约在100亿<a href="https://baike.baidu.com/item/%E5%85%89%E5%B9%B4">光年</a>以外，可能是目前所发现最遥远的天体，天文学家能看到类星体，是因为它们以<a href="https://baike.baidu.com/item/%E5%85%89">光</a>、无线电波或<a href="https://baike.baidu.com/item/x%E5%B0%84%E7%BA%BF">x射线</a>的形式发射出巨大的能量。 </p><p>① 类星体在照相底片上具有类似恒星的像，这意味着它们的<a href="https://baike.baidu.com/item/%E8%A7%92%E7%9B%B4%E5%BE%84">角直径</a>小于1″。极少数类星体有微弱的星云状包层，如3C48。还有些类星体有<a href="https://baike.baidu.com/item/%E5%96%B7%E6%B5%81">喷流</a>状结构。</p><p>② 类星体光谱中有许多强而宽的发射线，包括容许谱线和禁线。最经常出现的是氢、氧、碳、镁等元素的谱线，氦线非常弱或者不出现，这只能用氦的低丰度来解释。普遍认为，类星体的发射线产生于一个气体包层，产生的过程与一般的<a href="https://baike.baidu.com/item/%E6%B0%94%E4%BD%93%E6%98%9F%E4%BA%91">气体星云</a>类似。类星体的发射线很宽，说明气体包层中一定存在猛烈的湍流运动。有些类星体的光谱中有很锐的吸收线，说明产生吸收线的区域里湍流运动的速度很小。</p><p>③ 类星体发出很强的紫外辐射，因此，颜色显得很蓝。光学波段连续光谱的能量分布呈幂律谱形式，为辐射强度，v为频率，α为谱指数，常大于零。<a href="https://baike.baidu.com/item/%E5%85%89%E5%AD%A6%E8%BE%90%E5%B0%84">光学辐射</a>是偏振的，具有<a href="https://baike.baidu.com/item/%E9%9D%9E%E7%83%AD%E8%BE%90%E5%B0%84">非热辐射</a>性质（见热辐射和非热辐射）。另外，类星体的<a href="https://baike.baidu.com/item/%E7%BA%A2%E5%A4%96%E8%BE%90%E5%B0%84">红外辐射</a>也非常强。</p><p>④ 类星射电源发出强烈的非热<a href="https://baike.baidu.com/item/%E5%B0%84%E7%94%B5%E8%BE%90%E5%B0%84">射电辐射</a>。射电结构多数呈双源型，少数呈复杂结构，还有少数是致密的单源，角直径小于0″.001，至今都未能分辨开。致密源的位置通常都与光学源重合。射电辐射的频谱指数α平均为0.75。一般，α&gt;0.4的称陡谱；α&lt;0.4的称平谱。陡谱<a href="https://baike.baidu.com/item/%E5%B0%84%E7%94%B5%E6%BA%90">射电源</a>多数是双源；平谱射电源多数是致密单源，它们的厘米波段辐射特别强。</p><p>⑤类星体一般都有光变，时标为几年。少数类星体光变很剧烈，时标为几个月或几天。从光变时标可以估计出类星体发出光学辐射的区域的大小（几光日至几光年）。类星射电源的射电辐射也经常变化。观测还发现有几个双源型类星射电源的两子源，以极高的速度向外分离。光学辐射和射电辐射的变化没有周期性。</p><p>⑥ 类星体的发射线都有很大红移。迄今为止，观测到的最大红移为3.53（OQ 172）。对于有吸收线的类星体来说，吸收线红移z吸一般小于发射线红移z发。有些类星体有好几组吸收线，分别对应于不同的红移，称为<a href="https://baike.baidu.com/item/%E5%A4%9A%E9%87%8D%E7%BA%A2%E7%A7%BB">多重红移</a>。例如，类星体PHL 957的发射线红移为2.69，吸收线红移有五组：2.67、2.55、2.54、2.31、2.23。</p><p>⑦ 观测表明，有些类星体还发出<a href="https://baike.baidu.com/item/X%E5%B0%84%E7%BA%BF">X射线</a>辐射。</p></blockquote><p><a href="https://baike.baidu.com/item/%E5%B0%84%E7%94%B5%E5%A4%A9%E6%96%87%E5%AD%A6/301723">射电天文学_百度百科 (baidu.com)</a></p><blockquote><p>射电天文学是<a href="https://baike.baidu.com/item/%E5%A4%A9%E6%96%87%E5%AD%A6">天文学</a>的一个分支，通过<a href="https://baike.baidu.com/item/%E7%94%B5%E7%A3%81%E6%B3%A2%E9%A2%91%E8%B0%B1">电磁波频谱</a>以<a href="https://baike.baidu.com/item/%E6%97%A0%E7%BA%BF%E7%94%B5%E9%A2%91%E7%8E%87">无线电频率</a>研究<a href="https://baike.baidu.com/item/%E5%A4%A9%E4%BD%93/749823">天体</a>。</p><p>射电天文学以无线电接收技术为观测手段，观测的对象遍及所有天体：从近处的<a href="https://baike.baidu.com/item/%E5%A4%AA%E9%98%B3%E7%B3%BB/173281">太阳系</a>天体到<a href="https://baike.baidu.com/item/%E9%93%B6%E6%B2%B3%E7%B3%BB/189795">银河系</a>中的各种对象，直到极其遥远的银河系以外的目标。射电天文<a href="https://baike.baidu.com/item/%E6%B3%A2%E6%AE%B5/2554375">波段</a>的无线电技术，到二十世纪四十年代才真正开始发展。对于历史悠久的天文学而言，射电天文使用的是一种崭新的手段，为天文学开拓了新的园地。</p></blockquote><p><a href="https://baike.baidu.com/item/%E5%B0%84%E7%94%B5%E6%BA%90%E8%A1%A8/1307323">射电源表_百度百科 (baidu.com)</a></p><blockquote><p>射电源表，是<strong>记载射电源的名称﹑位置﹑强度等数据的表册</strong>。 射电望远镜 与 光学望远镜 不同﹐接收的是来自天体一个狭窄频带的射电。</p></blockquote><h2 id="类星体的红移"><a href="#类星体的红移" class="headerlink" title="类星体的红移"></a>类星体的红移</h2><p>[3C 48_百度百科 (baidu.com)](<a href="https://baike.baidu.com/item/3C">https://baike.baidu.com/item/3C</a> 48&#x2F;546853)</p><blockquote><p><strong>3C48</strong>是许多<a href="https://baike.baidu.com/item/%E7%B1%BB%E6%98%9F%E4%BD%93">类星体</a>之中第一颗被发现的。</p><p><strong>3C 48</strong>是剑桥大学电波星表第三版中的第一个源，它是由Allan Sandage和[Thomas Matthews](<a href="https://baike.baidu.com/item/Thomas">https://baike.baidu.com/item/Thomas</a> Matthews)于1960年通过<a href="https://baike.baidu.com/item/%E5%B9%B2%E6%B6%89%E4%BB%AA">干涉仪</a>发现的。</p><p><strong>3C 48</strong>，剑桥大学第三射电星表第48号射电源。它的发现有一段有趣的故事。</p><p><a href="https://baike.baidu.com/item/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98/174090">第二次世界大战</a>后,随着雷达技术的不断发展,<a href="https://baike.baidu.com/item/%E5%B0%84%E7%94%B5%E5%A4%A9%E6%96%87%E5%AD%A6/301723">射电天文学</a>也获得很快的发展.<a href="https://baike.baidu.com/item/%E8%8B%B1%E5%9B%BD%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6/1338998">英国剑桥大学</a>为所发现的射电源编号,1950年编制的射电源表叫做IC,1956年编的表称3C.其中<strong>3C 48</strong>和 <strong>3C 273</strong>是两颗非常奇怪的射电源.1960年，<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD">美国</a>天文学家<a href="https://baike.baidu.com/item/%E8%89%BE%E4%BC%A6%C2%B7%E6%A1%91%E5%BE%B7%E5%A5%87">艾伦·桑德奇</a>用一台5米口径的<a href="https://baike.baidu.com/item/%E5%85%89%E5%AD%A6%E6%9C%9B%E8%BF%9C%E9%95%9C">光学望远镜</a>找到了剑桥射电源第三星表上第48号天体（3C 48）的<a href="https://baike.baidu.com/item/%E5%85%89%E5%AD%A6%E5%AF%B9%E5%BA%94%E4%BD%93/5906076">光学对应体</a>。他注意到<strong>3C 48</strong>是一个与众不同的恒星状天体,它的亮度很低(7.6星等),是一颗蓝星。它的光谱与一般的天体很不一样,因为在<strong>3C 48</strong>的光谱中，在一个奇怪的位置上有一些又宽又亮的发射线，说不清它究竟是星云、星系、<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%B0%E6%98%9F%E9%81%97%E8%BF%B9/9760568">超新星遗迹</a>，还是什么别的东西，很难解释。</p><p><strong>3C 48</strong>的光谱很让科学家困惑：因为它的谱线好像不是我们已知的元素，元素本来应该的位置上没有相对应的谱线。科学家都很重视，以期能够发现新的未知的元素。很快<strong>3C 273</strong>的光谱分析也如同<strong>3C 48</strong>一样，后来科学家经过仔细的研究和证认，原来都是我们地球上的已知的元素，只不过有了很大的红移。也就是说向红端移动了。换句话说，这个星体就是在离我们远去。<strong>3C 48</strong>的<a href="https://baike.baidu.com/item/%E7%BA%A2%E7%A7%BB">红移</a>达到15%，也就是以每秒10万公里离我们远去。</p><p>由于当时发现的光谱科学家说不明白<strong>3C 48</strong>是超新星、或者是星系爆炸、还是其它什么天体，就给它起了一个模模糊糊的名字:类星体。</p><p>每秒10万公里!巨大的能量如何而来?如果它的速度达到每秒30万公里，那我们就不是看不见了吗?难道还存在一个我们所不知道的时空?或者说当它达到光速时，就是宇宙的尽头?还是多普勒效应并不适合于这么遥远的星系?</p><p><strong>3C 48</strong>为人类揭开了一个神秘的世界结构，那是一个广袤的、充满新元素的时空。3</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_14-14-33-20.png"/></div><p>[3C 273_百度百科 (baidu.com)](<a href="https://baike.baidu.com/item/3C">https://baike.baidu.com/item/3C</a> 273&#x2F;10966933)</p><blockquote><p><strong>3C 273</strong>是位于<a href="https://baike.baidu.com/item/%E5%AE%A4%E5%A5%B3%E5%BA%A7">室女座</a>的一个<a href="https://baike.baidu.com/item/%E7%B1%BB%E6%98%9F%E4%BD%93">类星体</a>。它在可见光波段上是最明亮的一个类星体，在天空中的<a href="https://baike.baidu.com/item/%E8%A7%86%E6%98%9F%E7%AD%89">视星等</a>大约是12.9等，是最靠近地球的类星体之一，<a href="https://baike.baidu.com/item/%E7%BA%A2%E7%A7%BB">红移</a><em>z</em>只有0.158。它的<a href="https://baike.baidu.com/item/%E5%85%89%E5%BA%A6%E8%B7%9D%E7%A6%BB">光度距离</a>，DL &#x3D; 24.4亿光年（749 <a href="https://baike.baidu.com/item/Mpc/3586221">Mpc</a>）是经由<em>z</em>值换算的。它也是最明亮的类星体之一，<a href="https://baike.baidu.com/item/%E7%BB%9D%E5%AF%B9%E6%98%9F%E7%AD%89">绝对星等</a>为-26.3等。通过对它宽发射线的<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%93%8D%E6%98%A0%E5%B0%84">反响映射</a> reverberation mapping测量，它的质量是太阳质量的8.86 ± 1.87亿倍。</p><p>3C 273名称的由来是<a href="https://baike.baidu.com/item/%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6">剑桥大学</a>在1959年出版的电波源目录（依照<a href="https://baike.baidu.com/item/%E8%B5%A4%E7%BB%8F">赤经</a>排序的3C星表））中的第273个天体。帕克斯电波天文台的西里尔哈泽德使用<a href="https://baike.baidu.com/item/%E6%9C%88%E6%8E%A9%E6%98%9F">月掩星</a>精确的测量位置之后，这个电波源很快的与<a href="https://baike.baidu.com/item/%E5%85%89%E5%AD%A6%E5%AF%B9%E5%BA%94%E4%BD%93/5906076">光学对应体</a>结合在一起，一个无法解释的“恒星体”。<a href="https://baike.baidu.com/item/%E9%A9%AC%E4%B8%81%C2%B7%E6%96%BD%E5%AF%86%E7%89%B9">马丁·施密特</a>和Bev Oke在1963年于《自然》期刊上双双发表了3C 273有实质上的<a href="https://baike.baidu.com/item/%E7%BA%A2%E7%A7%BB">红移</a>，它的距离有数<a href="https://baike.baidu.com/item/%E5%8D%81%E4%BA%BF%E5%85%89%E5%B9%B4/6965549">十亿光年</a>远。</p><p>天文学家在发现3C 273之前，已经有一些电波源有光学对应体，第一个是[3C 48](<a href="https://baike.baidu.com/item/3C">https://baike.baidu.com/item/3C</a> 48)。许多活跃星系都被误认为<a href="https://baike.baidu.com/item/%E5%8F%98%E6%98%9F">变星</a>，包括著名的<a href="https://baike.baidu.com/item/%E8%9D%8E%E8%99%8E%E5%BA%A7BL%E5%9E%8B%E5%A4%A9%E4%BD%93">蝎虎座BL型天体</a>，<a href="https://baike.baidu.com/item/%E5%90%8E%E5%8F%91%E5%BA%A7">后发座</a>W和<a href="https://baike.baidu.com/item/%E7%8C%8E%E7%8A%AC%E5%BA%A7">猎犬座</a>AU。然而天文学家还是不知道这是种什么样的天体，因为它们的光谱和任何已知的恒星都不一样。3C 273是第一个被确认的类星体—在宇宙学的距离上极端明亮的天体。</p><p>3C 273是一个电波噪的类星体，也是在1970年就发现的第一个河外星系X-射线源。然而，X-射线放射过程的认定依然是有争议的。3C 273在所有的<a href="https://baike.baidu.com/item/%E6%B3%A2%E9%95%BF">波长</a>，从<a href="https://baike.baidu.com/item/%E6%97%A0%E7%BA%BF%E7%94%B5%E6%B3%A2">无线电波</a>到<a href="https://baike.baidu.com/item/%CE%B3%E5%B0%84%E7%BA%BF">γ射线</a>的<a href="https://baike.baidu.com/item/%E5%85%89%E5%BA%A6">光度</a>都在变化，而时间从几天到数十年都有。从大尺度的喷流发射出的电波、红外线和可见光都有一致方向性的<a href="https://baike.baidu.com/item/%E6%9E%81%E5%8C%96">极化</a>被观察到；因此这些辐射在本质上几乎就是来自自然界的<a href="https://baike.baidu.com/item/%E5%90%8C%E6%AD%A5%E5%8A%A0%E9%80%9F%E5%99%A8">同步加速器</a>，由在喷流中以相对论性的速度移动的电荷创造出来的辐射。 这样的喷流应该是由中心的<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E">黑洞</a>和<a href="https://baike.baidu.com/item/%E5%90%B8%E7%A7%AF%E7%9B%98">吸积盘</a>的相互作用创造出来的。使用<a href="https://baike.baidu.com/item/VLBI">VLBI</a>观察3C 273曾经揭露一些电波辐射区的<a href="https://baike.baidu.com/item/%E8%87%AA%E8%A1%8C">自行</a>，更进一步的建议喷流中存在着相对论性的物质。<a href="https://baike.baidu.com/item/%E5%8D%97%E5%8D%8A%E7%90%83">南半球</a>和<a href="https://baike.baidu.com/item/%E5%8C%97%E5%8D%8A%E7%90%83">北半球</a>在五月份都能看见3C 273，<a href="https://baike.baidu.com/item/%E4%B8%9A%E4%BD%99%E5%A4%A9%E6%96%87%E5%AD%A6">业余天文学</a>使用<a href="https://baike.baidu.com/item/%E5%A4%A7%E6%9C%9B%E8%BF%9C%E9%95%9C/1307374">大望远镜</a>也可以看得见。</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_14-14-34-22.png"/></div><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20220207143513088.png"/></div><p>红移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">红移在物理学和天文学领域，指物体的电磁辐射由于某种原因频率降低的现象，在可见光波段，表现为光谱的谱线朝红端移动了一段距离，即波长变长、频率降低。红移的现象多用于天体的移动及规律的预测上。<br>红移的大小由“红移值”衡量，红移值用Z表示，定义为：<br>这里 是谱线原先的频率， 是观测到的频率，是谱线原先的波长，是观测到的波长。<br></code></pre></td></tr></table></figure><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/4d75a083eb59bbaa1cdf06d1f9cf1f25.svg"/></div><p><a href="https://zhuanlan.zhihu.com/p/370097042">多普勒效应和宇宙学红移 - 知乎 (zhihu.com)</a></p><p><a href="https://wuli.wiki/changed/CoReSh.html">宇宙学红移 - 小时百科 (wuli.wiki)</a></p><h2 id="全波段辐射"><a href="#全波段辐射" class="headerlink" title="全波段辐射"></a>全波段辐射</h2><p>有的类星体在整个波段辐射都非常强</p><h2 id="活动星系核"><a href="#活动星系核" class="headerlink" title="活动星系核"></a>活动星系核</h2><p><a href="https://baike.baidu.com/item/%E6%B4%BB%E5%8A%A8%E6%98%9F%E7%B3%BB/998737">活动星系_百度百科 (baidu.com)</a></p><blockquote><p>活动星系，又称激扰星系，有猛烈活动现象或剧烈物理过程的星系，包括<a href="https://baike.baidu.com/item/%E5%A1%9E%E5%BC%97%E7%89%B9%E6%98%9F%E7%B3%BB/6728375">塞弗特星系</a>、<a href="https://baike.baidu.com/item/%E7%B1%BB%E6%98%9F%E4%BD%93/347669">类星体</a>、<a href="https://baike.baidu.com/item/%E5%B0%84%E7%94%B5%E6%98%9F%E7%B3%BB/999495">射电星系</a>、<a href="https://baike.baidu.com/item/%E8%9D%8E%E8%99%8E%E5%A4%A9%E4%BD%93/5913719">蝎虎天体</a>、<a href="https://baike.baidu.com/item/%E6%98%9F%E7%88%86%E6%98%9F%E7%B3%BB/8816433">星爆星系</a>等。</p><p>大部分活动星系都位于极遥远距离的事实表明它们是宇宙中的年轻天体，因为它们的光要经过数百万年乃至数十亿年才能到达地球。这使天文学家们认为可能所有星系都经历过这种活动阶段。</p></blockquote><p><a href="https://baike.baidu.com/item/%E6%B4%BB%E5%8A%A8%E6%98%9F%E7%B3%BB%E6%A0%B8/491373">活动星系核_百度百科 (baidu.com)</a></p><blockquote><p><a href="https://baike.baidu.com/item/%E6%B4%BB%E8%B7%83%E6%98%9F%E7%B3%BB%E6%A0%B8/3277767">活跃星系核</a>（active galactic nucleus，缩写为AGN）是河外天体中的一类中央核区活动性很强的系外星系的核心，可以定义为：其主要特征为核活动，是产生于<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F/493">恒星</a>中热核反应以外的另一种能源，并在某些现象中有着相当的影响。这个定义是非定量的，<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%B8%B8%E6%98%9F%E7%B3%BB/5913238">正常星系</a>的核也有活动性，因此活动星系核的下边界可以延伸到某些正常星系，例如我们的<a href="https://baike.baidu.com/item/%E9%93%B6%E5%BF%83/948866">银心</a>。活动星系核寄居的星系称之为<a href="https://baike.baidu.com/item/%E6%B4%BB%E5%8A%A8%E6%98%9F%E7%B3%BB/998737">活动星系</a>，在活动性最强的<a href="https://baike.baidu.com/item/%E7%B1%BB%E6%98%9F%E4%BD%93/347669">类星体</a>中本底星系作用极小，往往只言核，按习惯，对活动性较差的活动星系，我们也统称为活动星系核。一般不严格区分活动星系和活动星系核。</p><p>活动星系核在一个星系中央区有比普通的星系的强烈很多的光度，至少部分波段或甚至可能全部波段里都发出很强的电磁波谱。被观察到的发射覆盖从<a href="https://baike.baidu.com/item/%E6%97%A0%E7%BA%BF%E7%94%B5%E6%B3%A2/942435">无线电波</a>，<a href="https://baike.baidu.com/item/%E5%BE%AE%E6%B3%A2/182739">微波</a>，<a href="https://baike.baidu.com/item/%E7%BA%A2%E5%A4%96%E7%BA%BF/115851">红外线</a>，<a href="https://baike.baidu.com/item/%E5%8F%AF%E8%A7%81%E5%85%89/1241853">可见光</a>，<a href="https://baike.baidu.com/item/%E7%B4%AB%E5%A4%96%E7%BA%BF/95551">紫外线</a>，<a href="https://baike.baidu.com/item/X%E5%B0%84%E7%BA%BF">X射线</a>，到<a href="https://baike.baidu.com/item/%E4%BC%BD%E9%A9%AC%E5%B0%84%E7%BA%BF/2942667">伽马射线</a>。光度大约在1036-1041 J&#x2F;s之间。容纳活动星系核的宿主星系为活动星系。活动星系核是这些星系明亮的核心部分，尺度通常在1<a href="https://baike.baidu.com/item/%E5%85%89%E5%B9%B4/70940">光年</a>上下，只占整个活动星系的很小一部分。活动星系核是在宇宙中的电磁辐射的最明亮的持久性的来源，并且因此可以被用作发现远方天体的方法；其演化的宇宙时间函数也设置了宇宙模型的制约条件。另外，亦有研究显示活动星系核的能量可能源自星系碰撞</p></blockquote><blockquote><p>黑洞-吸积盘模型是得到广泛承认的活动星系核标准模型。在这个模型中，活动星系核的“中央引擎”是一个超大质量黑洞。在引力的作用下，黑洞周围的气体朝黑洞下落。由于具有角动量，物质形成了一个围绕黑洞的吸积盘。吸积盘中具有耗散作用，气体会被加热到很高的温度，同时不断损失角动量，逐渐下落到黑洞中央，与此同时释放出巨大的引力能，以电磁波的形式辐射出来，其中主要是非热辐射。当黑洞的吸积率很高，远远超过星系的其他部分时，就表现为活动星系核。随着黑洞周围的物质逐渐耗尽，核心的光度减小，活动星系演化为正常的星系。吸积盘两端沿法线方向形成高速喷流，这一过程中，磁场扮演了很重要的角色。当喷流的方向与观测者视线方向夹角很小时，还会观测到视超光速现象。</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_14-14-50-03.png"/></div><p><a href="https://baike.baidu.com/item/%E7%9B%B8%E5%AF%B9%E8%AE%BA%E6%80%A7%E5%96%B7%E6%B5%81/7633656">相对论性喷流_百度百科 (baidu.com)</a></p><blockquote><p>相对论性喷流. 一般认为相对论性喷流的直接成因是中<strong>心星体 吸积盘 表面</strong>的 磁场 沿着星体自转轴的方向扭曲并向外发射，因而当条件允许时在吸积盘的两个表面都会形成向外发射的喷流。. 如果喷流的方向恰巧和星体与地球的连线一致，由于是 相对论性粒子 束，喷流的亮度会因而发生改变。. 在科学界相对论性喷流的形成机制和物理成分仍然是个有争议的话题，不过一般认为喷流是电中性的，其由 电子 、 正电子 和 质子 按一定比例组成。. 一般还认为相对论性喷流的形成是解释 伽玛射线暴 成因的关键。. 这些喷流具有的 洛伦兹因子 可达大约100，是已知的速度最快的天体之一。. 类似的较小尺寸的相对论性喷流可由 中子星 或 恒星质量黑洞 的吸积盘而产生，这类系统经常被称作微类星体。</p></blockquote><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/2022-02-07_14-14-57-12.png"/></div>]]></content>
    
    
    <categories>
      
      <category>天文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>天文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SemSeg的马里亚纳海沟遥感图像场景解析</title>
    <link href="/blog/post/CV/SceneParsingProject/"/>
    <url>/blog/post/CV/SceneParsingProject/</url>
    
    <content type="html"><![CDATA[<p>搭建起深度学习的环境，并把程序运行起来。另外，也读了几篇论文，学习了几个网络的结构。</p><p>之前还做过一个使用dlib，PaddlePaddle做图片人物抠图的一个小程序，其中的参数文件是别人使用PaddlePaddle训练好了的了。</p><p>但是目前我对于深度学习所了解的东西太少了，本科期间的培养方案上也没有相关的课程，感觉很迷茫！</p><p><em><strong>非教程，仅作为记录，复现不能保证成功</strong></em></p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>老师给了数据集和一篇论文，用论文中的方法实现一定的功能。</p><p>我首先读了论文，再根据改论文的标题找到了论文的源地址<a href="https://arxiv.org/abs/2106.10683">LSPR2106.10683</a>，然后找到了论文中用到的源代码<a href="https://github.com/JiaxinZhuang/Large-scale-Product-Recognition.Pytorch">LSPR</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/%E6%A0%B9%E6%8D%AE%E6%A0%87%E9%A2%98%E6%89%BE%E5%88%B0%E8%AE%BA%E6%96%87%E6%94%B6%E5%BD%95%E5%9C%B0%E5%9D%80-%E5%BA%B7%E5%A5%88%E5%B0%94%E5%A4%A7%E5%AD%A6arvix.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/%E4%B8%8B%E8%BD%BD%E6%BA%90%E4%BB%A3%E7%A0%81.png"></p><p>将源代码clone到本地<em><strong>（这里有个问题，我挂了VPN，仍然不能git clone，只有下载zip能下载到本地）</strong></em>。根据作者的说明文档，我对这个程序做了基本的判断：需要深度学习开发环境，用的Python，好像是在Linux系统下跑的程序！</p><p>在学习过程中遇到了一些问题，遂决定更换方法。</p><p>Linux操作系统对我来说确实有点困难，我觉得先试试在Windows下能不能运行吧，于是就开始折腾之路！</p><h1 id="在Windows下安装深度学习开发环境"><a href="#在Windows下安装深度学习开发环境" class="headerlink" title="在Windows下安装深度学习开发环境"></a>在Windows下安装深度学习开发环境</h1><p>因为论文作者只提供了CUDA和PyTorch的版本，我查看了电脑支持的最大CUDA版本是11.6，但是根据作者提供的，我最终选择了安装了CUDA10.2。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121112547170.png"></p><h2 id="PyTorch-1-10"><a href="#PyTorch-1-10" class="headerlink" title="PyTorch 1.10"></a>PyTorch 1.10</h2><p>直接找了官网，找了相关的配置，直接pip下载了</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/pytorch%E7%9A%84%E5%AE%89%E8%A3%85.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121113302674.png"></p><p>进入python，检查一下pytorch是不是成功安装了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>x = totch.rand(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211120234607835.png"></p><h2 id="CUDA-10-2"><a href="#CUDA-10-2" class="headerlink" title="CUDA 10.2"></a>CUDA 10.2</h2><p>参考资源:</p><p><a href="https://www.bilibili.com/video/BV1q54y1y7Mf">如何在Win10下轻松安装CUDA和Cudnn</a></p><p><a href="https://blog.csdn.net/weixin_43848614/article/details/117221384">CUDA 安装 （windows版）</a></p><p>按照网上的教学步骤安装即可</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/%E5%AE%89%E8%A3%85CUDA.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvcc -V<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211120235638749.png"></p><p>跑几个测试看一下</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211120235749266.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211120235843604.png"></p><h2 id="cuDNN-7-6-5"><a href="#cuDNN-7-6-5" class="headerlink" title="cuDNN 7.6.5"></a>cuDNN 7.6.5</h2><p>参考资料：与CUDA的安装相同相同</p><p><a href="https://www.bilibili.com/video/BV1q54y1y7Mf">如何在Win10下轻松安装CUDA和Cudnn</a></p><p><a href="https://blog.csdn.net/weixin_43848614/article/details/117221384">CUDA 安装 （windows版）</a></p><p>需要注册nVidia开发者账号才能下载cuDNN</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/CUDnn%E7%9A%84%E5%AE%89%E8%A3%85%E9%9C%80%E8%A6%81NVIDIA%E8%B4%A6%E6%88%B7.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/%E4%B8%8B%E8%BD%BDCUDNN.png"></p><p>下载之后解压，按照视频中的步骤，直接复制到CUDA的安装路径即可</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121113659274.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/%E6%A3%80%E6%9F%A5CUDA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p><p>最后再检查一下环境变量是不是已经弄好了！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/%E6%A3%80%E6%9F%A5CUDA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png"></p><h2 id="TensorFlow2-3-0"><a href="#TensorFlow2-3-0" class="headerlink" title="TensorFlow2.3.0"></a>TensorFlow2.3.0</h2><p>Python&amp;CUDA&amp;cuDNN&amp;TensorFlow版本对应关系</p><p><a href="https://github.com/fo40225/tensorflow-windows-wheel">fo40225&#x2F;tensorflow-windows-wheel: Tensorflow prebuilt binary for Windows (github.com)</a></p><p>Windows-CPU</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/20210131153046629.png" alt="CPU" style="zoom:150%;" /><p>Windows-GPU</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/20210131153313535.png" alt="GPU" style="zoom:150%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install tensorflow==2.3.0<br><br>pip install tensorflow-gpu==2.3.0<br></code></pre></td></tr></table></figure><p>注意所有的版本对应，否则会出现各种各样的问题</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash">Windows PowerShell<br>版权所有 (C) Microsoft Corporation。保留所有权利。<br><br>尝试新的跨平台 PowerShell https://aka.ms/pscore6<br><br>PS C:\Users\DELL&gt; python --version<br>Python 3.8.6<br>PS C:\Users\DELL&gt; nvcc -V<br>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2019 NVIDIA Corporation<br>Built on Wed_Oct_23_19:32:27_Pacific_Daylight_Time_2019<br>Cuda compilation tools, release 10.2, V10.2.89<br>PS C:\Users\DELL&gt; python<br>Python 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)] on win32<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import torch<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(torch.__version__)<br>1.10.0+cu102<br>&gt;&gt;&gt; import tensorflow as tf<br>2021-11-21 12:17:03.769777: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cudart64_101.dll<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(tf.__version__)<br>2.3.0<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(torch.cuda.is_available())<br>True<br>&gt;&gt;&gt; tf.test.is_gpu_available()<br>WARNING:tensorflow:From &lt;stdin&gt;:1: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed <span class="hljs-keyword">in</span> a future version.<br>Instructions <span class="hljs-keyword">for</span> updating:<br>Use `tf.config.list_physical_devices(<span class="hljs-string">&#x27;GPU&#x27;</span>)` instead.<br>2021-11-21 12:19:43.396815: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN)to use the following CPU instructions <span class="hljs-keyword">in</span> performance-critical operations:  AVX2<br>To <span class="hljs-built_in">enable</span> them <span class="hljs-keyword">in</span> other operations, rebuild TensorFlow with the appropriate compiler flags.<br>2021-11-21 12:19:43.406420: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x1da756cae50 initialized <span class="hljs-keyword">for</span> platform Host (this does not guarantee that XLA will be used). Devices:<br>2021-11-21 12:19:43.406558: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version<br>2021-11-21 12:19:43.406737: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library nvcuda.dll<br>2021-11-21 12:19:43.406971: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 0 with properties:<br>pciBusID: 0000:01:00.0 name: NVIDIA GeForce GTX 1650 computeCapability: 7.5<br>coreClock: 1.56GHz coreCount: 16 deviceMemorySize: 4.00GiB deviceMemoryBandwidth: 119.24GiB/s<br>2021-11-21 12:19:43.407083: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cudart64_101.dll<br>2021-11-21 12:19:43.407208: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cublas64_10.dll<br>2021-11-21 12:19:43.407387: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cufft64_10.dll<br>2021-11-21 12:19:43.407520: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library curand64_10.dll<br>2021-11-21 12:19:43.407593: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cusolver64_10.dll<br>2021-11-21 12:19:43.407740: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cusparse64_10.dll<br>2021-11-21 12:19:43.407894: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cudnn64_7.dll<br>2021-11-21 12:19:43.408023: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1858] Adding visible gpu devices: 0<br>2021-11-21 12:19:45.176360: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1257] Device interconnect StreamExecutor with strength 1 edge matrix:<br>2021-11-21 12:19:45.176465: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1263]      0<br>2021-11-21 12:19:45.176528: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 0:   N<br>2021-11-21 12:19:45.176750: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402] Created TensorFlow device (/device:GPU:0 with 2905 MB memory) -&gt; physical GPU (device: 0, name: NVIDIA GeForce GTX 1650, pci bus <span class="hljs-built_in">id</span>: 0000:01:00.0, compute capability: 7.5)<br>2021-11-21 12:19:45.179856: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x1da3ed8bce0 initialized <span class="hljs-keyword">for</span> platform CUDA (this does not guarantee that XLA will be used). Devices:<br>2021-11-21 12:19:45.179952: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): NVIDIA GeForce GTX 1650, Compute Capability 7.5<br>True<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/ceshi.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/ceshi222.jpg"></p><h1 id="在WSL-Ubuntu-20-04-安装深度学习开发环境（失败了）"><a href="#在WSL-Ubuntu-20-04-安装深度学习开发环境（失败了）" class="headerlink" title="在WSL-Ubuntu 20.04 安装深度学习开发环境（失败了）"></a>在WSL-Ubuntu 20.04 安装深度学习开发环境（失败了）</h1><h2 id="CUDA-安装失败"><a href="#CUDA-安装失败" class="headerlink" title="CUDA 安装失败"></a>CUDA 安装失败</h2><p>参考资料：</p><p><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">nVidia官方说明文档</a></p><p><a href="https://www.bilibili.com/video/BV1FZ4y1p7Qp">Cuda On WSL 2</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/dawafg.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/fafwrh9haiu.jpg"></p><p>原因：可能是CUDA还未适配到WSL的Ubuntu 20.04</p><h1 id="在WSL-Ubuntu-18-04-安装深度学习开发环境"><a href="#在WSL-Ubuntu-18-04-安装深度学习开发环境" class="headerlink" title="在WSL-Ubuntu 18.04 安装深度学习开发环境"></a>在WSL-Ubuntu 18.04 安装深度学习开发环境</h1><p>参考资料：</p><p><a href="https://developer.nvidia.com/cuda/wsl">GPU in Windows Subsystem for Linux (WSL) | NVIDIA Developer</a></p><p><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">CUDA on WSL :: CUDA Toolkit Documentation (nvidia.com)</a></p><p><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">nVidia官方说明文档</a></p><p><a href="https://www.bilibili.com/video/BV1FZ4y1p7Qp">Cuda On WSL 2</a></p><p><a href="https://zhuanlan.zhihu.com/p/350399229">win10的wsl2安装cuda并配置pytorch</a></p><p><a href="https://www.bilibili.com/video/BV1RJ411X7Uz">WSL Ubuntu修改软件源</a></p><p>重装了Ubuntu 18.04</p><p>切换为WSL2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --set-version Ubuntu-18.04 2<br></code></pre></td></tr></table></figure><h2 id="CUDA-11-0"><a href="#CUDA-11-0" class="headerlink" title="CUDA 11.0"></a>CUDA 11.0</h2><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-key adv --fetch-keys http://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64/7fa2af80.pub<br><br><span class="hljs-built_in">sudo</span> sh -c <span class="hljs-string">&#x27;echo &quot;deb http://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64 /&quot; &gt; /etc/apt/sources.list.d/cuda.list&#x27;</span><br><br><span class="hljs-built_in">sudo</span> apt-get update<br><br><span class="hljs-built_in">sudo</span> apt-get install -y cuda-toolkit-11-0<br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> su -<br>vim ~/.bashrc<br></code></pre></td></tr></table></figure><p>用vim打开的文档，在最后面添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/usr/local/cuda-11.0/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-11.0/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><br><span class="hljs-comment"># cuda-11.0 自己安装版本的名称</span><br></code></pre></td></tr></table></figure><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://get.docker.com | sh<br></code></pre></td></tr></table></figure><p>测试CUDA根据视频<a href="https://www.bilibili.com/video/BV1FZ4y1p7Qp">Cuda On WSL 2</a></p><h2 id="cuDNN-8-0-5"><a href="#cuDNN-8-0-5" class="headerlink" title="cuDNN 8.0.5"></a>cuDNN 8.0.5</h2><p>在Windows系统下下载cuDNN的压缩包，在Ubuntu下用cp命令从Windows移动到Ubuntu</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/tYLIHUWND.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf cudnn-11.0-linux-x64-v8.0.5.39.tgz<br><br><span class="hljs-comment"># cudnn-11.0-linux-x64-v8.0.5.39.tgz cuDNN压缩包的名称</span><br><br><span class="hljs-comment"># 复制</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -P cuda/lib64/libcudnn* /usr/local/cuda-11.0/lib64/<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span>  cuda/include/cudnn.h /usr/local/cuda-11.0/include/<br><br><span class="hljs-comment"># 更改权限</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> a+r /usr/local/cuda-11.0/include/cudnn.h <br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> a+r /usr/local/cuda-11.0/lib64/libcudnn*<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121140908702.png"></p><h2 id="PyTorch-1-7-1-cu110"><a href="#PyTorch-1-7-1-cu110" class="headerlink" title="PyTorch 1.7.1+cu110"></a>PyTorch 1.7.1+cu110</h2><p>安装了3遍才成功了</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/gawdagwafw.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/hrgegwe.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">murphy-ubuntu@Murphy-DELL:/mnt/c/Users/DELL$ python<br>Python 3.6.9 (default, Jan 26 2021, 15:33:00)<br>[GCC 8.4.0] on linux<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import tensorflow<br>2021-11-21 14:34:29.474127: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0<br>&gt;&gt;&gt; import torch<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(torch.cuda.is_available())<br>True<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><h2 id="TensorFlow-2-4-0"><a href="#TensorFlow-2-4-0" class="headerlink" title="TensorFlow 2.4.0"></a>TensorFlow 2.4.0</h2><p>直接用pip install tensorflow安装的版本是最新的版本，不能与CUDA和cnDNN匹配，运行的时候不能调用GPU，因此需要根据文档找到合适的版本</p><p>Windows-CPU</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/20210131153046629.png" alt="CPU" style="zoom:150%;" /><p>Windows-GPU</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/20210131153313535.png" alt="GPU" style="zoom:150%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">murphy-ubuntu@Murphy-DELL:/mnt/c/Users/DELL$ python<br>Python 3.6.9 (default, Jan 26 2021, 15:33:00)<br>[GCC 8.4.0] on linux<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import tensorflow as tf<br>&gt;&gt;&gt; tf.test.is_gpu_available()<br>WARNING:tensorflow:From &lt;stdin&gt;:1: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed <span class="hljs-keyword">in</span> a future version.<br>Instructions <span class="hljs-keyword">for</span> updating:<br>Use `tf.config.list_physical_devices(<span class="hljs-string">&#x27;GPU&#x27;</span>)` instead.<br>2021-11-21 14:36:24.495813: I tensorflow/compiler/jit/xla_gpu_device.cc:99] Not creating XLA devices, tf_xla_enable_xla_devices not <span class="hljs-built_in">set</span><br>2021-11-21 14:36:24.496873: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcuda.so.1<br>2021-11-21 14:36:24.498697: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:36:24.498759: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1720] Found device 0 with properties:<br>pciBusID: 0000:01:00.0 name: NVIDIA GeForce GTX 1650 computeCapability: 7.5<br>coreClock: 1.56GHz coreCount: 16 deviceMemorySize: 4.00GiB deviceMemoryBandwidth: 119.24GiB/s<br>2021-11-21 14:36:24.498799: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0<br>2021-11-21 14:36:24.516945: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublas.so.11<br>2021-11-21 14:36:24.517034: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublasLt.so.11<br>2021-11-21 14:36:24.532660: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcufft.so.10<br>2021-11-21 14:36:24.538639: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcurand.so.10<br>2021-11-21 14:36:24.557670: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusolver.so.10<br>2021-11-21 14:36:24.562764: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusparse.so.11<br>2021-11-21 14:36:24.564244: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudnn.so.8<br>2021-11-21 14:36:24.564836: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:36:24.565348: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:36:24.566200: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1862] Adding visible gpu devices: 0<br>2021-11-21 14:36:24.566892: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0<br>2021-11-21 14:36:26.926735: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1261] Device interconnect StreamExecutor with strength 1 edge matrix:<br>2021-11-21 14:36:26.926810: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1267]      0<br>2021-11-21 14:36:26.926840: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1280] 0:   N<br>2021-11-21 14:36:26.928867: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:36:26.928923: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1489] Could not identify NUMA node of platform GPU <span class="hljs-built_in">id</span> 0, defaulting to 0.  Your kernel may not have been built with NUMA support.<br>2021-11-21 14:36:26.929470: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:36:26.929971: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:36:26.930033: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1406] Created TensorFlow device (/device:GPU:0 with 2875 MB memory) -&gt; physical GPU (device: 0, name: NVIDIA GeForce GTX 1650, pci bus <span class="hljs-built_in">id</span>: 0000:01:00.0, compute capability: 7.5)<br>True<br></code></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs bash">murphy-ubuntu@Murphy-DELL:/mnt/c/Users/DELL$ neofetch<br>            .-/+oossssoo+/-.               murphy-ubuntu@Murphy-DELL<br>        `:+ssssssssssssssssss+:`           -------------------------<br>      -+ssssssssssssssssssyyssss+-         OS: Ubuntu 18.04.2 LTS on Windows 10 x86_64<br>    .ossssssssssssssssssdMMMNysssso.       Kernel: 5.10.60.1-microsoft-standard-WSL2<br>   /ssssssssssshdmmNNmmyNMMMMhssssss/      Uptime: 18 mins<br>  +ssssssssshmydMMMMMMMNddddyssssssss+     Packages: 895<br> /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Shell: bash 4.4.19<br>.ssssssssdMMMNhsssssssssshNMMMdssssssss.   Terminal: /dev/pts/0<br>+sssshhhyNMMNyssssssssssssyNMMMysssssss+   CPU: Intel i5-9300H (8) @ 2.400GHz<br>ossyNMMMNyMMhsssssssssssssshmmmhssssssso   GPU: Microsoft Corporation Device 008e<br>ossyNMMMNyMMhsssssssssssssshmmmhssssssso   Memory: 94MiB / 12654MiB<br>+sssshhhyNMMNyssssssssssssyNMMMysssssss+<br>.ssssssssdMMMNhsssssssssshNMMMdssssssss.<br> /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/<br>  +sssssssssdmydMMMMMMMMddddyssssssss+<br>   /ssssssssssshdmNNNNmyNMMMMhssssss/<br>    .ossssssssssssssssssdMMMNysssso.<br>      -+sssssssssssssssssyyyssss+-<br>        `:+ssssssssssssssssss+:`<br>            .-/+oossssoo+/-.<br><br>murphy-ubuntu@Murphy-DELL:/mnt/c/Users/DELL$ nvcc -V<br>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2020 NVIDIA Corporation<br>Built on Wed_Jul_22_19:09:09_PDT_2020<br>Cuda compilation tools, release 11.0, V11.0.221<br>Build cuda_11.0_bu.TC445_37.28845127_0<br>murphy-ubuntu@Murphy-DELL:/mnt/c/Users/DELL$ python<br>Python 3.6.9 (default, Jan 26 2021, 15:33:00)<br>[GCC 8.4.0] on linux<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import torch<br>&gt;&gt;&gt; import tensorflow as tf<br>2021-11-21 14:38:07.986815: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(torch.__version__)<br>1.7.1+cu110<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(tf.__version__)<br>2.4.0<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(torch.cuda.test_gpu_abailable())<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="hljs-keyword">in</span> &lt;module&gt;<br>AttributeError: module <span class="hljs-string">&#x27;torch.cuda&#x27;</span> has no attribute <span class="hljs-string">&#x27;test_gpu_abailable&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(torch.cuda.is_available())<br>True<br>&gt;&gt;&gt; tf.test.is_gpu_available()<br>WARNING:tensorflow:From &lt;stdin&gt;:1: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed <span class="hljs-keyword">in</span> a future version.<br>Instructions <span class="hljs-keyword">for</span> updating:<br>Use `tf.config.list_physical_devices(<span class="hljs-string">&#x27;GPU&#x27;</span>)` instead.<br>2021-11-21 14:39:05.764557: I tensorflow/compiler/jit/xla_gpu_device.cc:99] Not creating XLA devices, tf_xla_enable_xla_devices not <span class="hljs-built_in">set</span><br>2021-11-21 14:39:05.764673: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcuda.so.1<br>2021-11-21 14:39:05.765235: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:39:05.765340: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1720] Found device 0 with properties:<br>pciBusID: 0000:01:00.0 name: NVIDIA GeForce GTX 1650 computeCapability: 7.5<br>coreClock: 1.56GHz coreCount: 16 deviceMemorySize: 4.00GiB deviceMemoryBandwidth: 119.24GiB/s<br>2021-11-21 14:39:05.765400: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0<br>2021-11-21 14:39:05.767384: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublas.so.11<br>2021-11-21 14:39:05.767443: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublasLt.so.11<br>2021-11-21 14:39:05.768263: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcufft.so.10<br>2021-11-21 14:39:05.768539: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcurand.so.10<br>2021-11-21 14:39:05.771097: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusolver.so.10<br>2021-11-21 14:39:05.771751: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusparse.so.11<br>2021-11-21 14:39:05.771888: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudnn.so.8<br>2021-11-21 14:39:05.772427: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:39:05.772838: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:39:05.772878: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1862] Adding visible gpu devices: 0<br>2021-11-21 14:39:05.772930: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0<br>2021-11-21 14:39:11.938306: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1261] Device interconnect StreamExecutor with strength 1 edge matrix:<br>2021-11-21 14:39:11.938386: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1267]      0<br>2021-11-21 14:39:11.938421: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1280] 0:   N<br>2021-11-21 14:39:11.939059: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:39:11.939098: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1489] Could not identify NUMA node of platform GPU <span class="hljs-built_in">id</span> 0, defaulting to 0.  Your kernel may not have been built with NUMA support.<br>2021-11-21 14:39:11.939505: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:39:11.939939: E tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:927] could not open file to <span class="hljs-built_in">read</span> NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node<br>Your kernel may have been built without NUMA support.<br>2021-11-21 14:39:11.940011: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1406] Created TensorFlow device (/device:GPU:0 with 1951 MB memory) -&gt; physical GPU (device: 0, name: NVIDIA GeForce GTX 1650, pci bus <span class="hljs-built_in">id</span>: 0000:01:00.0, compute capability: 7.5)<br>True<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/gaoylkjgybw.jpg"></p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 因为WSL占据的系统存储太大了，且在系统盘，有点担心，就去卸载一些没用的东西；<br><span class="hljs-bullet">-</span> 因为前几天也弄过把Ubuntu从C盘移动到D盘，当时是不允许我移动，我就随便点了一下，然后我看到了系统的硬盘资源在疯狂占用，我想，居然真的搬移了，我还担心搬过去之后配置好的环境是不是就没了。结果我担心的事情发生了，WSL-Ubuntu直接打不开了，直接完蛋，两天时间白费；<br><span class="hljs-bullet">-</span> 在向旺哥和学长诉苦的时候，我以为我真的搞完蛋了，我就在看之前目录的时候，发现了之前的文件夹还在，打不开，我一看文件大小，20多个GB，但是系统上显示的的确是没有了这部分，我就很纳闷，死马当做活马医，就把D盘的Ubuntu搬到了C盘，心里很忐忑，等到搬过去之后，我测试了一下，救过来了，感谢老天，实在是太险了，两天的时间差点就全白费了。唉！<br><span class="hljs-bullet">-</span> 以后真的不敢这么折腾了，太可怕了！<br></code></pre></td></tr></table></figure><p>从C盘移动到D盘时</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121144321555.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121144358342.png"></p><p>移动到D盘时，所占存储大小</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121144423968.png" alt="image-20211121144423968" style="zoom:150%;" /><p> 移动到D盘后Ubuntu打不开了，且KALI也受到影响也打不开了，过了一段时间之后KALI能打开了</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121144528795.png" alt="image-20211121144528795" style="zoom:150%;" /><p>移动到D盘之后C盘的容量扩大了20多GB，但是我看后台的C盘利用率并没有很大，我猜原来的内容没有删掉，我找了找果然这个20多GB还在这里，我就死马当做活马医，把Ubuntu从D盘又搬回了C盘</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121144603971.png"></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121144835332.png" alt="image-20211121144835332" style="zoom:150%;" /><p>最后救活了，不敢手贱了</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/gaergfEFGUNJ.R.jpg"></p><p>目前C盘仅有了40多GB，等完成了这个作业在再折腾一下这个WSL搬到非系统盘的方法</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211121145134059.png"></p><h1 id="语义分割Semantic-Segmentation"><a href="#语义分割Semantic-Segmentation" class="headerlink" title="语义分割Semantic Segmentation"></a>语义分割Semantic Segmentation</h1><p>[<a href="https://arxiv.org/abs/2003.13328">2003.13328] Strip Pooling: Rethinking Spatial Pooling for Scene Parsing (arxiv.org)</a></p><p><a href="https://github.com/Andrew-Qibin/SPNet">https://github.com/Andrew-Qibin/SPNet</a></p><p>[<a href="https://zhuanlan.zhihu.com/p/132532190">论文笔记] Strip Pooling（SPNet） - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/liuyunfeng/p/10505991.html">比较语义分割的几种结构：FCN，UNET，SegNet，PSPNet和Deeplab - yunfeng_net - 博客园 (cnblogs.com)</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>语义分割：给图像的每个像素点标注类别。通常认为这个类别与邻近像素类别有关，同时也和这个像素点归属的整体类别有关。利用图像分类的网络结构,可以利用不同层次的特征向量来满足判定需求。现有算法的主要区别是如何提高这些向量的分辨率，以及如何组合这些向量。</p><h2 id="几种结构"><a href="#几种结构" class="headerlink" title="几种结构"></a>几种结构</h2><ul><li>全卷积网络FCN：上采样提高分割精度，不同特征向量相加。[3]</li><li>UNET：拼接特征向量；编码-解码结构；采用弹性形变的方式，进行数据增广；用边界加权的损失函数分离接触的细胞。[4]</li><li>SegNet：记录池化的位置，反池化时恢复。[3]</li><li>PSPNet：多尺度池化特征向量，上采样后拼接[3]</li><li>Deeplab：池化跨度为1，然后接带孔卷积。</li><li>ICNet：多分辨图像输入，综合不同网络生成结果。</li></ul><h2 id="semseg（Semantic-Segmentation）"><a href="#semseg（Semantic-Segmentation）" class="headerlink" title="semseg（Semantic Segmentation）"></a>semseg（Semantic Segmentation）</h2><p>作者：香港中文大学的博士生Hengshuang Zhao。<a href="https://hszhao.github.io/">https://hszhao.github.io/</a></p><p>基于PyTorch的语义分割开源库semseg：<a href="https://github.com/hszhao/semseg">https://github.com/hszhao/semseg</a></p><p>semseg用PyTorch实现的语义分割&#x2F;场景解析开源库。 它可以方便帮助开发者用于各种语义分割数据集的训练和测试。</p><p>该库主要使用ResNet50 &#x2F; 101&#x2F;152作为主干网，也可以很容易地改成其他分类网络结构。</p><blockquote><p>ResNet又名残差神经网络，指的是在传统卷积神经网络中加入残差学习（residual learning）的思想，解决了深层网络中梯度弥散和精度下降（训练集）的问题，使网络能够越来越深，既保证了精度，又控制了速度。</p></blockquote><p>目前已经实现了包括<strong>PSPNet和PSANet</strong>在内的网络，其在2016年ImageNet场景解析挑战赛@ ECCV16，LSUN语义分割挑战赛2017 @ CVPR17和WAD可驾驶区域分割挑战赛2018 @ CVPR18中排名第一。 示例实验数据集包括主流的ADE20K，PASCAL VOC 2012和Cityscapes。</p><p>ps. 该库开发者即PSPNet和PSANet算法的一作。</p><p><strong>核心组件Pyramid Pooling Module</strong></p><p>金字塔池化模块Pyramid Pooling Module由一组不同尺度的池化块组成</p><p><img src="https://github.com/hszhao/semseg/raw/master/figure/pspnet.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/pspnet.jpg"></p><ul><li>（a）Input Image：即自然场景下拍摄的包含不同目标的原始图；</li><li>（b）Feature Map：即通过前面CNN获得的特征图，<strong>这个CNN是预训练的ResNet</strong>；</li><li>（c）Pyramid Pooling Module：上图中方框POOL表示采用<strong>1x1、2x2、3x3和6x6四种不同尺寸的pooling操作</strong>得到多个尺寸的特征图，并对这些尺寸的特征图再次进行“<strong>1x1的Conv”来减少通道数</strong>。然后采用<strong>双线性插值进行UPSAMPLE</strong>（上采样），即通过上采样来获得金字塔模块前相同尺寸的特征图，并在<strong>通道上进行拼接</strong>；</li><li>（d）Final Prediction：即最终预测结果。</li></ul><ol><li><p>同时支持多线程训练与多进程训练，并且后者非常快（该库比较重视训练）。</p></li><li><p>重新实现的算法取得更好的结果，而且代码结构清晰（说明代码质量高）。</p></li><li><p>所有初始化模型、训练得到的模型和预测的结果都能够下载<a href="https://drive.google.com/open?id=15wx9vOM0euyizq-M1uINgN0_wjVRf9J3">google drive</a>，方便开发者直接使用或者研究比较。</p></li></ol><p>作者推荐的软硬件环境：</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/hseta35g.png"></p><p><a href="https://zhuanlan.zhihu.com/p/77418807">【资源】常用的语义分割架构结构综述以及代码复现 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/97706803">场景解析网络PSPNet——金字塔池化模型 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/78760534">CNN基础知识——池化（pooling） - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/31852747">你必须要知道CNN模型：ResNet - 知乎 (zhihu.com)</a></p><h2 id="PSPNet"><a href="#PSPNet" class="headerlink" title="PSPNet"></a>PSPNet</h2><p><a href="https://hszhao.github.io/projects/pspnet/index.html">Pyramid Scene Parsing Network (hszhao.github.io)</a></p><p>作者：香港中文大学的博士生Hengshuang Zhao。<a href="https://hszhao.github.io/">https://hszhao.github.io/</a></p><p>Pyramid Scene Parsing Network：</p><p>[<a href="https://arxiv.org/abs/1612.01105">1612.01105] Pyramid Scene Parsing Network (arxiv.org)</a></p><p><a href="https://github.com/hszhao/PSPNet">GitHub - hszhao&#x2F;PSPNet: Pyramid Scene Parsing Network, CVPR2017.</a></p><p><a href="https://blog.csdn.net/qq_31347869/article/details/102476128">【实验记录】PSPNet（PyTorch）_yaoyz105-CSDN博客_pspnet pytorch</a></p><p>[<a href="https://zhuanlan.zhihu.com/p/115004020">论文笔记] PSPNet：Pyramid Scene Parsing Network - 知乎 (zhihu.com)</a></p><p>摘要：</p><p>本文提出了基于整合全局上下文信息的金字塔池化模块的PSPNet，这种全局的先验信息能够有效地在场景语义分析中获得高质量的结果。</p><p>为了实现准确地场景感知，这需要场景上下文的先验信息。文章发现基于FCN的模型的主要问题是，缺乏合适的策略来利用全局场景的类别信息。 对于典型的复杂场景理解，以前要获得全局图像级别的功能，spatial pyramid pooling被广泛采用，其中空间统计为整体场景解释提供了良好的描述符，SPPNet进一步增强了这个能力。</p><p>本文主要有3个贡献：1、提出了PSPNet，在FCN中嵌入了不同场景的上下文特征；2、我们基于深度监督的损失为deep ResNet开发了有效的优化策略；3、我们构建了一个用于最新场景解析和语义分割的实用系统，其中包括了所有关键的实现细节。</p><h2 id="SPNet"><a href="#SPNet" class="headerlink" title="SPNet"></a>SPNet</h2><p>作者：<a href="https://github.com/Andrew-Qibin">Andrew-Qibin</a></p><p>Strip Pooling: Rethinking Spatial Pooling for Scene Parsing：</p><p>[<a href="https://arxiv.org/abs/2003.13328">2003.13328] Strip Pooling: Rethinking Spatial Pooling for Scene Parsing (arxiv.org)</a></p><p><a href="https://github.com/Andrew-Qibin/SPNet">GitHub - Andrew-Qibin&#x2F;SPNet: Code for our CVPR2020 paper “Strip Pooling: Rethinking Spatial Pooling for Scene Parsing”</a></p><p>SPM</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/spnet.png"></p><p>MPM</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211225140915981.png"></p><p>The results reported in our paper are originally based on <a href="https://github.com/zhanghang1989/PyTorch-Encoding">PyTorch-Encoding</a> but the environment settings are a little bit complicated. To ease use, we reimplement our work based on <a href="https://github.com/hszhao/semseg">semseg</a>.</p><p>[<a href="https://zhuanlan.zhihu.com/p/132532190">论文笔记] Strip Pooling（SPNet） - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/122571198">CVPR2020-语义分割：Strip Pooling（条纹池化） - 知乎 (zhihu.com)</a></p><p>摘要：</p><p>事实证明，空间池化在捕获用于场景分析等像素级预测任务的远程上下文信息方面非常有效。</p><p>基于条带池化，我们深入了解了空间池化的架构设计：（1）引入了新的条带池化模型，可以使主干网络可以有效地捕捉长距离的依赖关系；（2）提出了一个新颖的、可以将不同的空间池化作为核心的构件块；（3）有组织地在性能上比较了所提出的条带池化和传统的空间池化技术的差别。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211225112618480.png"></p><p>因为SPNet是基于semseg的环境，因此我们不仅做了SPNet的实验，而且还做了semseg的作者基于semseg做的一个非常著名的PSPNet的实验。</p><p>由于SPNet与PSPNet的实验过程类似，下面仅记录PSPNet 。</p><h1 id="PSPNet-on-WSL-Ubuntu-18-04"><a href="#PSPNet-on-WSL-Ubuntu-18-04" class="headerlink" title="PSPNet on WSL-Ubuntu 18.04"></a>PSPNet on WSL-Ubuntu 18.04</h1><p><strong>在已经完成”在WSL-Ubuntu 18.04 安装深度学习开发环境”的前提下进行下一步</strong></p><h2 id="卸载-CUDA11-0"><a href="#卸载-CUDA11-0" class="headerlink" title="卸载 CUDA11.0"></a>卸载 CUDA11.0</h2><p><a href="https://blog.csdn.net/u012372401/article/details/117251997?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">卸载cuda11.0并安装cuda11.1和cudnn_u012372401的博客-CSDN博客_卸载cuda11.1</a></p><p>由于考虑到与pytorch版本的匹配问题，还是决定重装成CUDA10.1</p><p>根据网上的教程是用这一行就可以完成卸载，但是在文件目录下并没有找到这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /usr/local/cuda-11.0/bin/cuda-uninstaller<br></code></pre></td></tr></table></figure><p>遂采用如下命令，直接选择删除该文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /usr/local/cuda-11.0<br></code></pre></td></tr></table></figure><h2 id="重装CUDA10-1"><a href="#重装CUDA10-1" class="headerlink" title="重装CUDA10.1"></a>重装CUDA10.1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载</span><br>wget https://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run<br><span class="hljs-comment"># 安装</span><br><span class="hljs-built_in">sudo</span> sh cuda_10.1.243_418.87.00_linux.run<br><span class="hljs-comment"># 配置环境变量</span><br>vim ~/.bashrc<br><br><span class="hljs-comment"># 使用vim把cuda的路径放到环境变量中</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/cuda-10.1/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><br><br><span class="hljs-comment"># 运行该命令，保存环境变量的配置</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219142750500.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219144421658.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219141854640.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219142146181.png"></p><h2 id="cuDNN-8-0-5-1"><a href="#cuDNN-8-0-5-1" class="headerlink" title="cuDNN 8.0.5"></a>cuDNN 8.0.5</h2><p>在nVidia的官网下载cuDNN，到Windows目录下；</p><p>用cp命令移动到wsl &#x2F;home&#x2F;目录下；</p><p>运行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压</span><br>tar -xzvf cudnn-11.0-linux-x64-v8.0.5.39.tgz<br><span class="hljs-comment">#移动</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> cuda/include/cudnn*.h /usr/local/cuda/include <br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -P cuda/lib64/libcudnn* /usr/local/cuda/lib64<br><span class="hljs-comment">#修改权限</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*<br><br></code></pre></td></tr></table></figure><h2 id="检查-CUDA和cuDNN"><a href="#检查-CUDA和cuDNN" class="headerlink" title="检查 CUDA和cuDNN"></a>检查 CUDA和cuDNN</h2><p><a href="https://blog.csdn.net/m511655654/article/details/88419965?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.not_use_machine_learn_pai">查看cuda和cudnn版本win&amp;linux_天真不无邪，hello和world-CSDN博客_查看cudnn和cuda版本</a></p><p>运行如下命令，检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cuDNN</span><br><span class="hljs-built_in">cat</span> /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br><span class="hljs-comment"># CUDA</span><br><span class="hljs-built_in">cat</span> /usr/local/cuda/version.txt<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219143502295.png"></p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>在读代码的时候发现，程序的运行需要anaconda环境，于是下载anaconda；</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">Index of &#x2F;anaconda&#x2F;archive&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/Murphy_2021-12-08_22-02-57.png"></p><h2 id="使用conda创建虚拟环境"><a href="#使用conda创建虚拟环境" class="headerlink" title="使用conda创建虚拟环境"></a>使用conda创建虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建虚拟环境</span><br>conda create -n pt140 python==3.7<br><br><span class="hljs-comment"># pt140是虚拟环境的名称，读代码的时候发现，虚拟环境的名字就叫做pt140，于是直接就叫做这个名字，免得再改代码了</span><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/Murphy_2021-12-08_23-02-46.png"></p><p>激活虚拟环境，可以看到，激活后，在终端出现（pt140）的字样</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219144221905.png"></p><h2 id="在虚拟环境pt140下安装PyTroch"><a href="#在虚拟环境pt140下安装PyTroch" class="headerlink" title="在虚拟环境pt140下安装PyTroch"></a>在虚拟环境pt140下安装PyTroch</h2><p>这一步很可能安装的是CPU版本的pytorch</p><p>在官网直接用命令行下载（这一步是错误的，不要做这一步）</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219144716255.png"></p><h2 id="配置pt140"><a href="#配置pt140" class="headerlink" title="配置pt140"></a>配置pt140</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建虚拟环境</span><br>conda create -n pt140 python==3.7<br>pip install torch==1.4.0+cu90 torchvision==0.5.0+cu92 -f https://download.pytorch.org/whl/torch_stable.html<br>pip install tensorboardX<br>conda install opencv<br>conda install pillow<br>conda install pyaml<br><br><span class="hljs-comment"># clone源文件</span><br>git <span class="hljs-built_in">clone</span> https://github.com/hszhao/semseg.git<br></code></pre></td></tr></table></figure><h2 id="运行程序-修改代码"><a href="#运行程序-修改代码" class="headerlink" title="运行程序&amp;修改代码"></a>运行程序&amp;修改代码</h2><h3 id="不知道什么错误"><a href="#不知道什么错误" class="headerlink" title="不知道什么错误"></a>不知道什么错误</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/5dtygR.jpg"></p><h3 id="无法调用GPU，重装了pytorch"><a href="#无法调用GPU，重装了pytorch" class="headerlink" title="无法调用GPU，重装了pytorch"></a>无法调用GPU，重装了pytorch</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/cjkgrsdh.jpg"></p><p>在<a href="https://download.pytorch.org/whl/torch_stable.html">pytorch的这个网站</a>下载whl文件，离线安装</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219162510029.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/gear.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># testgpu.py</span><br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-built_in">print</span>(torch.__version__)<br><span class="hljs-built_in">print</span>(torch.cuda.is_available())<br><span class="hljs-built_in">print</span>(torch.cuda.device_count())<br><span class="hljs-built_in">print</span>(torch.cuda.get_device_name())<br><span class="hljs-built_in">print</span>(torch.cuda.current_device())<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219145145564.png"></p><h3 id="代码中用了八个GPU，但是电脑上面只有一个GPU，因此需要将显卡序列改掉"><a href="#代码中用了八个GPU，但是电脑上面只有一个GPU，因此需要将显卡序列改掉" class="headerlink" title="代码中用了八个GPU，但是电脑上面只有一个GPU，因此需要将显卡序列改掉"></a>代码中用了八个GPU，但是电脑上面只有一个GPU，因此需要将显卡序列改掉</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/shrthhj.jpg"></p><p>注意，在修改代码的时候，我加了一个注释，这个注释不能是中文的，因为编码问题，程序报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 需要英文注释</span><br><br><span class="hljs-comment"># modify GPU</span><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219150250773.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219150414672.png"></p><h3 id="读取数据量序列错误"><a href="#读取数据量序列错误" class="headerlink" title="读取数据量序列错误"></a>读取数据量序列错误</h3><p>需要对数据集的list文件进行修改</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219150449817.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219150545807.png"></p><h3 id="成功了，但没完全成功"><a href="#成功了，但没完全成功" class="headerlink" title="成功了，但没完全成功"></a>成功了，但没完全成功</h3><p>程序能跑了，但由于显存资源不够，不能完全跑起来</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219150614087.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/saraf.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/ntsrt.jpg"></p><h1 id="PSPNet-on-Server-Ubuntu-16-04"><a href="#PSPNet-on-Server-Ubuntu-16-04" class="headerlink" title="PSPNet on Server Ubuntu 16.04"></a>PSPNet on Server Ubuntu 16.04</h1><p>自己电脑上面跑不起代码来，于是用实验室服务器重新环境配置，以运行该项目</p><h2 id="数据扩增"><a href="#数据扩增" class="headerlink" title="数据扩增"></a>数据扩增</h2><p>通过程序，对图像加入高斯噪声，变换亮度等操作，将数据集扩增14倍</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/hrfwrg.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/ategr.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os.path<br><span class="hljs-keyword">import</span> copy<br><br><span class="hljs-comment"># 椒盐噪声</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SaltAndPepper</span>(<span class="hljs-params">src,percetage</span>):<br>    SP_NoiseImg=src.copy()<br>    SP_NoiseNum=<span class="hljs-built_in">int</span>(percetage*src.shape[<span class="hljs-number">0</span>]*src.shape[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SP_NoiseNum):<br>        randR=np.random.randint(<span class="hljs-number">0</span>,src.shape[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>)<br>        randG=np.random.randint(<span class="hljs-number">0</span>,src.shape[<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>)<br>        randB=np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">if</span> np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)==<span class="hljs-number">0</span>:<br>            SP_NoiseImg[randR,randG,randB]=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            SP_NoiseImg[randR,randG,randB]=<span class="hljs-number">255</span><br>    <span class="hljs-keyword">return</span> SP_NoiseImg<br><br><span class="hljs-comment"># 高斯噪声</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addGaussianNoise</span>(<span class="hljs-params">image,percetage</span>):<br>    G_Noiseimg = image.copy()<br>    w = image.shape[<span class="hljs-number">1</span>]<br>    h = image.shape[<span class="hljs-number">0</span>]<br>    G_NoiseNum=<span class="hljs-built_in">int</span>(percetage*image.shape[<span class="hljs-number">0</span>]*image.shape[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(G_NoiseNum):<br>        temp_x = np.random.randint(<span class="hljs-number">0</span>,h)<br>        temp_y = np.random.randint(<span class="hljs-number">0</span>,w)<br>        G_Noiseimg[temp_x][temp_y][np.random.randint(<span class="hljs-number">3</span>)] = np.random.randn(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> G_Noiseimg<br><br><span class="hljs-comment"># 昏暗</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">darker</span>(<span class="hljs-params">image,percetage=<span class="hljs-number">0.9</span></span>):<br>    image_copy = image.copy()<br>    w = image.shape[<span class="hljs-number">1</span>]<br>    h = image.shape[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">#get darker</span><br>    <span class="hljs-keyword">for</span> xi <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,w):<br>        <span class="hljs-keyword">for</span> xj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,h):<br>            image_copy[xj,xi,<span class="hljs-number">0</span>] = <span class="hljs-built_in">int</span>(image[xj,xi,<span class="hljs-number">0</span>]*percetage)<br>            image_copy[xj,xi,<span class="hljs-number">1</span>] = <span class="hljs-built_in">int</span>(image[xj,xi,<span class="hljs-number">1</span>]*percetage)<br>            image_copy[xj,xi,<span class="hljs-number">2</span>] = <span class="hljs-built_in">int</span>(image[xj,xi,<span class="hljs-number">2</span>]*percetage)<br>    <span class="hljs-keyword">return</span> image_copy<br><br><span class="hljs-comment"># 亮度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brighter</span>(<span class="hljs-params">image, percetage=<span class="hljs-number">1.5</span></span>):<br>    image_copy = image.copy()<br>    w = image.shape[<span class="hljs-number">1</span>]<br>    h = image.shape[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">#get brighter</span><br>    <span class="hljs-keyword">for</span> xi <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,w):<br>        <span class="hljs-keyword">for</span> xj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,h):<br>            image_copy[xj,xi,<span class="hljs-number">0</span>] = np.clip(<span class="hljs-built_in">int</span>(image[xj,xi,<span class="hljs-number">0</span>]*percetage),a_max=<span class="hljs-number">255</span>,a_min=<span class="hljs-number">0</span>)<br>            image_copy[xj,xi,<span class="hljs-number">1</span>] = np.clip(<span class="hljs-built_in">int</span>(image[xj,xi,<span class="hljs-number">1</span>]*percetage),a_max=<span class="hljs-number">255</span>,a_min=<span class="hljs-number">0</span>)<br>            image_copy[xj,xi,<span class="hljs-number">2</span>] = np.clip(<span class="hljs-built_in">int</span>(image[xj,xi,<span class="hljs-number">2</span>]*percetage),a_max=<span class="hljs-number">255</span>,a_min=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> image_copy<br><br><span class="hljs-comment"># 旋转</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">image, angle, center=<span class="hljs-literal">None</span>, scale=<span class="hljs-number">1.0</span></span>):<br>    (h, w) = image.shape[:<span class="hljs-number">2</span>]<br>    <span class="hljs-comment"># If no rotation center is specified, the center of the image is set as the rotation center</span><br>    <span class="hljs-keyword">if</span> center <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        center = (w / <span class="hljs-number">2</span>, h / <span class="hljs-number">2</span>)<br>    m = cv2.getRotationMatrix2D(center, angle, scale)<br>    rotated = cv2.warpAffine(image, m, (w, h))<br>    <span class="hljs-keyword">return</span> rotated<br><br><span class="hljs-comment"># 翻转</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flip</span>(<span class="hljs-params">image</span>):<br>    flipped_image = np.fliplr(image)<br>    <span class="hljs-keyword">return</span> flipped_image<br>    <br><span class="hljs-comment"># 图片文件夹路径</span><br>file_dir = <span class="hljs-string">r&#x27;D:/Python_Develop/datasets/IT/Demo/output/&#x27;</span> <br><span class="hljs-keyword">for</span> img_name <span class="hljs-keyword">in</span> os.listdir(file_dir):<br>    img_path = file_dir + img_name<br>    img = cv2.imread(img_path)<br>    <span class="hljs-comment"># cv2.imshow(&quot;1&quot;,img)</span><br>    <span class="hljs-comment"># cv2.waitKey(5000)</span><br>    <span class="hljs-comment"># 旋转</span><br>    rotated_90 = rotate(img, <span class="hljs-number">90</span>)<br>    cv2.imwrite(file_dir + img_name[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;_r90.jpg&#x27;</span>, rotated_90)<br>    rotated_180 = rotate(img, <span class="hljs-number">180</span>)<br>    cv2.imwrite(file_dir + img_name[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;_r180.jpg&#x27;</span>, rotated_180)<br><br><span class="hljs-keyword">for</span> img_name <span class="hljs-keyword">in</span> os.listdir(file_dir):<br>    img_path = file_dir + img_name<br>    img = cv2.imread(img_path)<br>    <span class="hljs-comment"># 镜像</span><br>    flipped_img = flip(img)<br>    cv2.imwrite(file_dir +img_name[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;_fli.jpg&#x27;</span>, flipped_img)<br><br>    <span class="hljs-comment"># 增加噪声</span><br>    <span class="hljs-comment"># img_salt = SaltAndPepper(img, 0.3)</span><br>    <span class="hljs-comment"># cv2.imwrite(file_dir + img_name[0:7] + &#x27;_salt.jpg&#x27;, img_salt)</span><br>    img_gauss = addGaussianNoise(img, <span class="hljs-number">0.3</span>)<br>    cv2.imwrite(file_dir + img_name[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;_noise.jpg&#x27;</span>,img_gauss)<br><br>    <span class="hljs-comment">#变亮、变暗</span><br>    img_darker = darker(img)<br>    cv2.imwrite(file_dir + img_name[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;_darker.jpg&#x27;</span>, img_darker)<br>    img_brighter = brighter(img)<br>    cv2.imwrite(file_dir + img_name[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;_brighter.jpg&#x27;</span>, img_brighter)<br><br>    blur = cv2.GaussianBlur(img, (<span class="hljs-number">7</span>, <span class="hljs-number">7</span>), <span class="hljs-number">1.5</span>)<br>    <span class="hljs-comment">#      cv2.GaussianBlur(图像，卷积核，标准差）</span><br>    cv2.imwrite(file_dir + img_name[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;_blur.jpg&#x27;</span>,blur)<br><br></code></pre></td></tr></table></figure><h2 id="Xftp-代码和数据上传到服务器"><a href="#Xftp-代码和数据上传到服务器" class="headerlink" title="Xftp 代码和数据上传到服务器"></a>Xftp 代码和数据上传到服务器</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219151339713.png"></p><h2 id="创建集群Platform-for-AI-平台账户"><a href="#创建集群Platform-for-AI-平台账户" class="headerlink" title="创建集群Platform for AI 平台账户"></a>创建集群Platform for AI 平台账户</h2><p>代码将从该平台提交到服务器中</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219151707948.png"></p><h2 id="使用集群上预置的系统环境，提交代码"><a href="#使用集群上预置的系统环境，提交代码" class="headerlink" title="使用集群上预置的系统环境，提交代码"></a>使用集群上预置的系统环境，提交代码</h2><p>程序不能正常运行，需要重新配置一个符合要求的环境</p><h2 id="使用Xshell登陆服务器修改一个符合要求的环境"><a href="#使用Xshell登陆服务器修改一个符合要求的环境" class="headerlink" title="使用Xshell登陆服务器修改一个符合要求的环境"></a>使用Xshell登陆服务器修改一个符合要求的环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 使用 ssh 登陆服务器</span><br><br><span class="hljs-comment"># 2. 使用 ssh 登陆一台节点服务器</span><br><br><span class="hljs-comment"># 3. sudo docker images 列出服务器上的 dockers 镜像，找到提交任务时使用的镜像</span><br><br><span class="hljs-comment"># 4. sudo docker run -it ufoym/deepo:pytorch-py36-cu90 /bin/bash 使用该命令运行该镜像</span><br><br><span class="hljs-comment"># 5. 然后我们可以在这里继续安装软件，安装方法和正常 ubuntu 系统一样。安装完成后我们需要将镜像重新保存。</span><br><br><span class="hljs-comment"># 6.exit 首先退出容器</span><br><br><span class="hljs-comment"># 7. sudo docker ps -a 找到我们刚刚运行的容器</span><br><br><span class="hljs-comment"># 8. sudo docker commit 3cac363bc174 ufoym/pytorch-py36-cu90:v1.0 将容器重新保存为镜像，命令中 3cac363bc174 为容器的 id，见上图第一列 CONTAINER ID。ufoym/pytorch-py36-cu90:v1.0 是为镜像修改的名字，:v1.0 是镜像版本，可根据需求修改。</span><br><br><span class="hljs-comment"># 9. 保存完之后我们再次查看镜像列表 sudo docker images，此时镜像已经显示了。</span><br><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219153819090.png"></p><h3 id="Xshell上对深度学习镜像环境进行配置"><a href="#Xshell上对深度学习镜像环境进行配置" class="headerlink" title="Xshell上对深度学习镜像环境进行配置"></a>Xshell上对深度学习镜像环境进行配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入我的镜像环境</span><br><span class="hljs-built_in">sudo</span> docker run -it ufoym/pytorch15-py37-cuda101:v1.0 /bin/bash<br></code></pre></td></tr></table></figure><h3 id="anaconda3-下载"><a href="#anaconda3-下载" class="headerlink" title="anaconda3 下载"></a>anaconda3 下载</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219163336368.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219163412966.png"></p><p>创建conda 虚拟环境 pt140</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建虚拟环境</span><br>conda create -n pt140 python==3.7<br></code></pre></td></tr></table></figure><p>conda设置清华源</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219163516431.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/<br>conda config --<span class="hljs-built_in">set</span> show_channel_urls <span class="hljs-built_in">yes</span><br><br>作者：Ginkgo<br>链接：https://www.jianshu.com/p/7e663bb0d904<br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure><p>其他环境的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install torch==1.4.0+cu90 torchvision==0.5.0+cu92 -f https://download.pytorch.org/whl/torch_stable.html<br>pip install tensorboardX<br>conda install opencv<br>conda install pillow<br>conda install pyaml<br></code></pre></td></tr></table></figure><h3 id="CUDA-10-1"><a href="#CUDA-10-1" class="headerlink" title="CUDA 10.1"></a>CUDA 10.1</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/sjlrioegbauo.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219211952632.png"></p><h3 id="cuDNN-8-0-5-2"><a href="#cuDNN-8-0-5-2" class="headerlink" title="cuDNN 8.0.5"></a>cuDNN 8.0.5</h3><p>在Windows上下载,然后用Xftp传到服务器</p><p><strong>docker cp 命令，将服务器上的文件传到镜像环境下(这一步我不会,找学长帮忙给搞得,操作太快了,没看懂)</strong></p><p><a href="https://www.cnblogs.com/fsong/p/11335251.html">传输文件到docker容器 - wakasann - 博客园 (cnblogs.com)</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219212238816.png"></p><h3 id="pytorch-1-5-0-cu101"><a href="#pytorch-1-5-0-cu101" class="headerlink" title="pytorch 1.5.0+cu101"></a>pytorch 1.5.0+cu101</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219212417973.png"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh登陆服务器<br><br>ssh登陆节点服务器<br><br><span class="hljs-comment"># 查看镜像</span><br><span class="hljs-built_in">sudo</span> docker images<br><br><span class="hljs-comment"># 进入镜像</span><br><span class="hljs-built_in">sudo</span> docker run -it pt140:2.0<br><br><span class="hljs-comment"># 查看cuda版本</span><br>nvcc -V<br><span class="hljs-built_in">cat</span> /usr/local/cuda/version.txt<br><span class="hljs-built_in">cat</span> /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219213303346.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 激活pt140虚拟环境</span><br>conda activate pt140<br><br><span class="hljs-comment"># 进入python</span><br>python<br>import torch<br><br><span class="hljs-comment"># 查看torch版本和GPU调用情况</span><br><span class="hljs-built_in">print</span>(torch.__version__)<br>torch.cuda.is_available()<br><br><span class="hljs-comment"># 问题!!!</span><br><span class="hljs-comment"># torch不能调用GPU,找不到解决的方向了</span><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219213503637.png"></p><h1 id="将docker-镜像推送到阿里云"><a href="#将docker-镜像推送到阿里云" class="headerlink" title="将docker 镜像推送到阿里云"></a>将docker 镜像推送到阿里云</h1><h2 id="阿里云账户"><a href="#阿里云账户" class="headerlink" title="阿里云账户"></a>阿里云账户</h2><p>注册阿里账户</p><p><a href="https://cr.console.aliyun.com/cn-shanghai/instances/repositorie">阿里云</a></p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211219224624886.png"></p><h2 id="在服务器登陆阿里云"><a href="#在服务器登陆阿里云" class="headerlink" title="在服务器登陆阿里云"></a>在服务器登陆阿里云</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker login --username=murphyhou0928 registry.cn-qingdao.a liyuncs.com<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/docker%20%E7%99%BB%E5%BD%95%E9%98%BF%E9%87%8C%E4%BA%91.png"></p><h2 id="把镜像修改为阿里云的-docker-仓库路径"><a href="#把镜像修改为阿里云的-docker-仓库路径" class="headerlink" title="把镜像修改为阿里云的 docker 仓库路径"></a>把镜像修改为阿里云的 docker 仓库路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker tag aa553d773527 registry.cn-qingdao.aliyuncs.com/murphyhou/pt140:v1.0<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/tag%20docker%20%E9%95%9C%E5%83%8F%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91.png"></p><h2 id="把镜像推送到阿里云"><a href="#把镜像推送到阿里云" class="headerlink" title="把镜像推送到阿里云"></a>把镜像推送到阿里云</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker push registry.cn-qingdao.aliyuncs.com/murphyhou/pt140:v1.0<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%93%E5%BA%93.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211225103355594.png"></p><h1 id="在Platform-for-AI-平台提交代码"><a href="#在Platform-for-AI-平台提交代码" class="headerlink" title="在Platform for AI 平台提交代码"></a>在Platform for AI 平台提交代码</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211225103720403.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/jhsdagrghq53.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/image-20211225103830678.png"></p><h1 id="结果分析工具程序"><a href="#结果分析工具程序" class="headerlink" title="结果分析工具程序"></a>结果分析工具程序</h1><h2 id="图像相似度"><a href="#图像相似度" class="headerlink" title="图像相似度"></a>图像相似度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br> <br><span class="hljs-comment"># 将图片转化为RGB</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_regalur_image</span>(<span class="hljs-params">img, size=(<span class="hljs-params"><span class="hljs-number">64</span>, <span class="hljs-number">64</span></span>)</span>):<br>    gray_image = img.resize(size).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>    <span class="hljs-keyword">return</span> gray_image<br> <br><span class="hljs-comment"># 计算直方图</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hist_similar</span>(<span class="hljs-params">lh, rh</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(lh) == <span class="hljs-built_in">len</span>(rh)<br>    hist = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> - (<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> l == r <span class="hljs-keyword">else</span> <span class="hljs-built_in">float</span>(<span class="hljs-built_in">abs</span>(l-r))/<span class="hljs-built_in">max</span>(l,r))<span class="hljs-keyword">for</span> l, r <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(lh, rh))/<span class="hljs-built_in">len</span>(lh)<br>    <span class="hljs-keyword">return</span> hist<br> <br><span class="hljs-comment"># 计算相似度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_similar</span>(<span class="hljs-params">li, ri</span>):<br>    calc_sim = hist_similar(li.histogram(), ri.histogram())<br>    <span class="hljs-keyword">return</span> calc_sim<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">151</span>,<span class="hljs-number">209</span>):<br>        patha=<span class="hljs-string">&quot;./validation/&quot;</span>+<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&quot;.png&quot;</span><br>        pathb=<span class="hljs-string">&quot;./color/&quot;</span>+<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&quot;.png&quot;</span><br>        image1 = Image.<span class="hljs-built_in">open</span>(patha)<br>        image1 = make_regalur_image(image1)<br>        image2 = Image.<span class="hljs-built_in">open</span>(pathb)<br>        image2 = make_regalur_image(image2)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;图片&quot;</span>+<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&quot;的相似度为&quot;</span>,calc_similar(image1, image2))<br> <br> <br></code></pre></td></tr></table></figure><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">import</span> numpy<br>results = [<span class="hljs-number">0.5357053546104784</span>,<span class="hljs-number">0.5507430161474265</span>,<span class="hljs-number">0.5285612742106119</span>,<span class="hljs-number">0.603323384344262</span>,<span class="hljs-number">0.6080867770442063</span>,<span class="hljs-number">0.6575597122000112</span>,<span class="hljs-number">0.6114677464392965</span>,<span class="hljs-number">0.8446443289317913</span>,<span class="hljs-number">0.9043420339718073</span>,<span class="hljs-number">0.9041090450680298</span>,<span class="hljs-number">0.9943628311157227</span>,<span class="hljs-number">0.9301581073676269</span>,<span class="hljs-number">0.6554113765607682</span>,<span class="hljs-number">0.4948109783779284</span>,<span class="hljs-number">0.4464763005574544</span>,<span class="hljs-number">0.537724494934082</span>,<span class="hljs-number">0.5748386242222617</span>,<span class="hljs-number">0.6774920940940619</span>,<span class="hljs-number">0.5907715624134954</span>,<span class="hljs-number">0.5808468070438285</span>,<span class="hljs-number">0.5194940567016602</span>,<span class="hljs-number">0.5553396342901941</span>,<span class="hljs-number">0.4472212463045831</span>,<span class="hljs-number">0.5701756034156457</span>,<span class="hljs-number">0.749638084820338</span>,<span class="hljs-number">0.7998814375835139</span>,<span class="hljs-number">0.7819517675158355</span>,<span class="hljs-number">0.7034507667709003</span>,<span class="hljs-number">0.8941413242592676</span>,<span class="hljs-number">0.9030247433871216</span>,<span class="hljs-number">0.9960931142171224</span>,<span class="hljs-number">0.9021762212117513</span>,<span class="hljs-number">0.6966854060271549</span>,<span class="hljs-number">0.5482711791992188</span>,<span class="hljs-number">0.5566729593095879</span>,<span class="hljs-number">0.6602304149091052</span>,<span class="hljs-number">0.6497804211327798</span>,<span class="hljs-number">0.5605064664271656</span>,<span class="hljs-number">0.5285503069638954</span>,<span class="hljs-number">0.7237626953522035</span>,<span class="hljs-number">0.6645485884810058</span>,<span class="hljs-number">0.6430581410725912</span>,<span class="hljs-number">0.6576677958170573</span>,<span class="hljs-number">0.6513833999633789</span>,<span class="hljs-number">0.5016614719713388</span>,<span class="hljs-number">0.6468158204973189</span>,<span class="hljs-number">0.7732410430908203</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">0.8808919355405141</span>,<span class="hljs-number">0.7832873451527739</span>,<span class="hljs-number">0.6083869868941091</span>,<span class="hljs-number">0.9531558296113718</span>,<span class="hljs-number">0.8561667485859004</span>,<span class="hljs-number">0.8622514783048857</span>,<span class="hljs-number">0.9823717198087157</span>,<span class="hljs-number">0.9268625386919616</span>,<span class="hljs-number">0.801384002484161</span>,<span class="hljs-number">0.768682721808406</span> ]<br>sections = [<span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.7</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">0.9</span>,<span class="hljs-number">1.0</span>]<br>group_names = [<span class="hljs-string">&#x27;0-0.1&#x27;</span>, <span class="hljs-string">&#x27;0.1-0.2&#x27;</span>, <span class="hljs-string">&#x27;0.2-0.3&#x27;</span>, <span class="hljs-string">&#x27;0.3-0.4&#x27;</span>, <span class="hljs-string">&#x27;0.4-0.5&#x27;</span>,<span class="hljs-string">&#x27;0.5-0.6&#x27;</span>,<span class="hljs-string">&#x27;0.6-0.7&#x27;</span>,<span class="hljs-string">&#x27;0.7-0.8&#x27;</span>,<span class="hljs-string">&#x27;0.8-0.9&#x27;</span>,<span class="hljs-string">&#x27;0.9-1.0&#x27;</span>]<br>x=[]<br>cuts = pandas.cut(numpy.array(results), sections, labels=group_names)<br>counts = pandas.value_counts(cuts)<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>(counts).items():<br>    <span class="hljs-built_in">print</span>(key, value)<br>    x.append(<span class="hljs-built_in">str</span>(value))<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/wsl/rgwFWHEAJRLKNE.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>Python</tag>
      
      <tag>PyTorch</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP</title>
    <link href="/blog/post/Electronic/ESP/"/>
    <url>/blog/post/Electronic/ESP/</url>
    
    <content type="html"><![CDATA[<p>ESP8266是一款物联网WiFi芯片，基于ESP8266可以开发物联网串口WiFi模块，像SKYLAB的WG219&#x2F;WG229专为移动设备和物联网应用设计，可将用户的物理设备连接到WiFi无线网络上，进行互联网或局域网通信，实现联网功能。另外WG219&#x2F;WG229仅需要通过出串口使用AT指令控制，就能满足大部分的网络功能需求。</p><p>ESP32模块是ESP8266的升级版本。除了Wi-Fi模块，该模块还包含蓝牙4.0模块。双核CPU工作频率为80至240 MHz，包含两个Wi-Fi和蓝牙模块以及各种输入和输出引脚， ESP32是物联网项目的理想选择。</p><p>ESP32-CAM是安信可最新发布小尺寸的摄像头模组。该模块可以作为最小系统独立工作，尺寸仅为27<em>40.5</em>4.5mm，深度睡眠电流最低达到6mA。<br>ESP32-CAM可广泛应用于各种物联网场合，适用于家庭智能设备、工业无线控制、无线监控、QR无线识别，无线定位系统信号以及其它物联网应用，是物联网应用的理想解决方案。ESP32-CAM采用DIP封装，直接插上底板即可使用，实现产品的快速生产，为客户提供高可靠性的连接方式，方便应用于各种物联网硬件终端场合。</p><h1 id="ESP8266"><a href="#ESP8266" class="headerlink" title="ESP8266"></a>ESP8266</h1><p>学习ESP8266主要是通过 B站<a href="https://www.bilibili.com/video/BV1L7411c7jw?from=search&seid=5700302342344653731&spm_id_from=333.337.0.0">太极创客</a></p><ul><li>开发板详解</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211013214656601.png" alt="image-20211013214656601"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/pin.png" alt="pin"></p><p>蓝底白字:GPIO：通用输入输出（ESP8266芯片上的引脚命名）<br>ADC:模拟引脚<br>3V3,GND<br>VIN：为nodemcu供电<br>nodemcu供电方式:数据线&#x2F;VIN<br>数字引脚电压：3.3V<br>数字引脚所能连接的电压不能超过3.3V</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">数字引脚<br>digitalWrite:给引脚写电平<br>digitalRead：读引脚电平<br></code></pre></td></tr></table></figure><p>模拟引脚可读取的电压范围:0-1V<br>蓝底黑字：通讯类型的引脚，通讯方式:串口通讯，SPI通讯，I2C通讯；<br>串口通信引脚：</p><ul><li>U0TXD：</li><li>U0RXD：</li><li>U1TXD</li><li>U1RXD</li></ul><p>黑底白字：操作存储单元的引脚<br>按键RST：<br>按键：FLASH：刷固件的时候要用</p><ul><li>互联网协议</li></ul><p>TCP&#x2F;IP协议</p><p>ESP8266通过WiFi联网时有三种工作模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">- 接入点模式access point<br><br>- 无线终端模式wireless Station<br><br>- 混合模式<br></code></pre></td></tr></table></figure><ul><li>工作模式设置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// AP模式设置</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *ssid = <span class="hljs-string">&quot;Murphy&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *password = <span class="hljs-string">&quot;0928&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span>&#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  WiFi.softAP(ssid,password);<br><br>  Serial.print(<span class="hljs-string">&quot;Access Point:&quot;</span>);<br>  Serial.println(ssid);<br>  Serial.print(<span class="hljs-string">&quot;IP address:&quot;</span>);<br>  Serial.println(WiFi.softAPIP());<br>  <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span>&#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// WS 模式设置</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssid = <span class="hljs-string">&quot;MERCURY&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwd = <span class="hljs-string">&quot;11235813&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span>&#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);<br><br>  WiFi.begin(ssid,passwd);<br>  Serial.print(<span class="hljs-string">&quot;Connect to:&quot;</span>);<br>  Serial.print(ssid);<br>  Serial.println(<span class="hljs-string">&quot;......&quot;</span>);<br><br><br>  <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED)&#123;<br>    delay(<span class="hljs-number">1000</span>);<br>    Serial.print(i++);<br>    Serial.println(<span class="hljs-string">&#x27; &#x27;</span>);<br>  &#125;<br><br>  Serial.println(<span class="hljs-string">&#x27; &#x27;</span>);<br><br>  Serial.println(<span class="hljs-string">&quot;Connection established&quot;</span>);<br>  Serial.print(<span class="hljs-string">&quot;IP address:&quot;</span>);<br>  Serial.println(WiFi.localIP());<br><br>  <br><br>&#125;<br><br> <span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span>&#123;<br>  <br> &#125;<br><br></code></pre></td></tr></table></figure><h1 id="ESP32"><a href="#ESP32" class="headerlink" title="ESP32"></a>ESP32</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/ouclesson/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bmRkdW4=,size_16,color_FFFFFF,t_70.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/nodemcu_32s_sch.png"></p><h1 id="ESP31CAM"><a href="#ESP31CAM" class="headerlink" title="ESP31CAM"></a>ESP31CAM</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211116225204943.png" alt="image-20211116225204943"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211116225239847.png" alt="image-20211116225239847"></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211116225315992.png" alt="image-20211116225315992" style="zoom:150%;" /><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211116225355894.png" alt="image-20211116225355894"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211116225431044.png" alt="image-20211116225431044"></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/%E5%BC%95%E8%84%9A%20(2).png" alt="引脚 (2)" style="zoom:150%;" /><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211116225450167.png" alt="image-20211116225450167"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/%E6%B3%A8%E6%84%8F.png" alt="注意"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211116225548324.png" alt="image-20211116225548324"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/ESP32-CAM-FTDI-programmer-5V-supply.png"></p><h2 id="LED1"><a href="#LED1" class="headerlink" title="LED1"></a>LED1</h2><p>RST按钮旁边有一个板载红色LED。该LED内部连接到GPIO 33。您可以使用此LED指示正在发生的事情。例如，如果连接了Wi-Fi，则LED为红色，反之亦然。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211118175859160.png" alt="image-20211118175859160"></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/ESP32-CAM-AI-Thinker-Module-Red-LED-built-in.jpg" alt="ESP32-CAM-AI-Thinker-Module-Red-LED-built-in" style="zoom:150%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  pinMode(<span class="hljs-number">33</span>, OUTPUT);<br>  <span class="hljs-comment">//digitalWrite(33, HIGH);// 不亮</span><br>  digitalWrite(<span class="hljs-number">33</span>, LOW);<span class="hljs-comment">// 亮</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="FLASH-LED"><a href="#FLASH-LED" class="headerlink" title="FLASH LED"></a>FLASH LED</h2><p>DATA1 &#x2F;手电筒  GPIO 4</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211118175931265.png" alt="image-20211118175931265"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211118180134693.png" alt="image-20211118180134693"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  pinMode(<span class="hljs-number">4</span>, OUTPUT);<br>  digitalWrite(<span class="hljs-number">4</span>,LOW);<span class="hljs-comment">//不亮</span><br>  <span class="hljs-comment">//digitalWrite(4,HIGH);//亮</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>电子电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
      <tag>ESP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArduinoUno</title>
    <link href="/blog/post/Electronic/ArduinoUno/"/>
    <url>/blog/post/Electronic/ArduinoUno/</url>
    
    <content type="html"><![CDATA[<p>Arduino Uno</p><p>Arduino Nano</p><p>Arduino LilyPad</p><p>Arduino Mega 2560</p><p>Arduino Ethernet</p><p>Arduino Due</p><p>Arduino Leonardo</p><p>ArduinoYún</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/A000066_03.front_970c6014-61ab-4226-a20f-14cc6d8d682c_934x700.jpg" style="zoom:150%;" /><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/Pinout-UNOrev3_latest.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211110085313599.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211110085641779.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211110085515497.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/esp/image-20211110085601502.png"></p>]]></content>
    
    
    <categories>
      
      <category>电子电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>庆国庆的微信头像生成</title>
    <link href="/blog/post/Ideas/WeChatAvatarForNationalDay/"/>
    <url>/blog/post/Ideas/WeChatAvatarForNationalDay/</url>
    
    <content type="html"><![CDATA[<p>2021年的国庆节即将到来，国庆的氛围也逐渐上来了。2019年的时候，微信出来一个带国旗的头像的功能，今天看公众号的时候发现今年又有公众号在做国旗头像了，国旗渐变色与头像叠加效果，感觉效果还不错，不过关注公众号什么的太麻烦了，那就自己手撸代码写一个吧！</p><h1 id="项目解析"><a href="#项目解析" class="headerlink" title="项目解析"></a>项目解析</h1><p>Python简单的图像出来PIL库就够了，好像也不需要其他什么东西了！</p><p>国旗下载地址：<a href="http://www.gov.cn/guoqing/guoqi/index.htm">中华人民共和国国旗_中国政府网 (www.gov.cn)</a></p><ul><li>总共涉及到的是三张图片，一张是五星红旗的图片，一张是自己的头像，还有一张是程序生成的图片；</li><li>图像格式无非是png或者jpg，两者用什么没有特别要求，差别不大；</li><li>比较棘手的问题是国旗和头像的比例问题，微信或QQ等社交平台的头像一般都是正方形的，那就需要把国旗做裁切，裁切为正方形，不能简单地把国旗图像变成正方形，比例变化会导致国旗变形的；</li><li>裁切成方形的国旗与图像不能直接叠加，因为图像本身大小不一样，必须先让两者大小一样的时候才能做叠加，至于将国旗变为头像大小还是头像变成国旗大小，其实效果应该差不多，但是我考虑到了，国旗图像裁切后的大小比头像的大小是要大的，把大的缩放为小的清晰的不会下降，但是将小的图像缩放为大的图像，清晰度是会下降的，因此最后采用了将国旗大小重整为头像大小，然后进行叠加；</li><li>另一个需要处理的问题是，渐变效果的实现，其实做一个嵌套的循环遍历整个图像，然后把颜色变淡应该可以实现渐渐效果；</li><li>最后一步是将两者做叠加，然后保存图像。</li></ul><h1 id="项目完整代码"><a href="#项目完整代码" class="headerlink" title="项目完整代码"></a>项目完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 读取图片</span><br><br>name=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入头像名称：&quot;</span>)<br>form=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入文件格式（jpg/png）：&quot;</span>)<br>portrait = Image.<span class="hljs-built_in">open</span>(<span class="hljs-built_in">str</span>(name)+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(form))<br><br>The_flag_of_China = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;国旗.png&#x27;</span>)<br><br><span class="hljs-comment"># 获取国旗的尺寸</span><br>x,y = The_flag_of_China.size<br><br><span class="hljs-comment"># 关于裁切尺寸的问题具体看下文的关于cut方法的坐标图示。</span><br>cut=(<span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">550</span>, <span class="hljs-number">530</span>)<br>area = The_flag_of_China.crop(cut)<br><br><span class="hljs-comment"># 测试代码：生成裁切后的图像，看一下效果，如果裁切效果不好的话，重新修改上面的cut尺寸（类似反馈doge）！</span><br><span class="hljs-comment"># cut_name=&#x27;flag.png&#x27;</span><br><span class="hljs-comment"># area.save(cut_name)</span><br><br><span class="hljs-comment"># 头像的尺寸</span><br>w,h = portrait.size<br><br><span class="hljs-comment"># 国旗尺寸变成头像尺寸</span><br>area = area.resize((w,h))<br><br><span class="hljs-comment"># 渐变色设置</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>        pixelcolor = area.getpixel((i, j))<br>        parameter = <span class="hljs-number">260</span>-i//<span class="hljs-number">3</span>   <span class="hljs-comment">#参数都是多次运行程序测试出来的，可以根据需要进行更改</span><br>        <span class="hljs-keyword">if</span> parameter &lt; <span class="hljs-number">0</span>:<br>            parameter=<span class="hljs-number">0</span><br>        pixelcolor = pixelcolor[:-<span class="hljs-number">1</span>] + (parameter,)<br>        area.putpixel((i, j), pixelcolor)  <br><span class="hljs-comment"># //：向下取整做除法</span><br><span class="hljs-comment"># getpixel函数是用来获取图像中某一点的像素的RGB颜色值，getpixel的参数是一个坐标点（x,y）;</span><br><span class="hljs-comment">#putpixel函数是用来在指定位置画一像素，其中(x,y)是坐标，pixelcolor是像素的颜色.</span><br><br><br><span class="hljs-comment"># 粘贴到头像并保存 </span><br>portrait.paste(area,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),area)<br>portrait.save(<span class="hljs-built_in">str</span>(name)+<span class="hljs-string">&#x27;_flag.png&#x27;</span>,quality=<span class="hljs-number">100</span>, subsampling=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>PS：关于裁切尺寸的问题具体看下文的关于cut方法的坐标图示</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/%E5%9B%BE%E7%A4%BA.png"></p><p>生成头像效果</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/Murphy.png"></p><h1 id="关于项目的思考"><a href="#关于项目的思考" class="headerlink" title="关于项目的思考"></a>关于项目的思考</h1><ul><li><p>使用APP等生成带有国旗的头像应该是一件非常容易的事情，但是如果运行python程序来做这件事的话，让人感觉就是非常复杂了，并且不是所有人都有一个带有python开发环境的电脑，所以，用这段程序用的人应该不会有多少；</p></li><li><p>程序本身没有图像化操作界面，这让使用的人会更少了；</p></li><li><p>程序功能单一，应用范围太窄了，且如果图像格式方面有什么问题的话，估计程序运行的效果不会很好！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>奇思妙想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令与使用</title>
    <link href="/blog/post/Knowledge/GitCommands/"/>
    <url>/blog/post/Knowledge/GitCommands/</url>
    
    <content type="html"><![CDATA[<h1 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h1><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。</p><p>它通常将现有路径的当前内容作为一个整体添加，但是通过一些选项，它也可以用于添加内容，只对所应用的工作树文件进行一些更改，或删除工作树中不存在的路径了。</p><p>“索引”保存工作树内容的快照，并且将该快照作为下一个提交的内容。 因此，在对工作树进行任何更改之后，并且在运行 <code>git commit</code> 命令之前，必须使用 <code>git add</code> 命令将任何新的或修改的文件添加到索引。</p><p>该命令可以在提交之前多次执行。它只在运行 <code>git add</code> 命令时添加指定文件的内容; 如果希望随后的更改包含在下一个提交中，那么必须再次运行 <code>git add</code> 将新的内容添加到索引。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 把指定的文件添加到暂存区中</span><br>$ git add &lt;文件路径&gt;<br><br><span class="hljs-comment"># 添加所有修改、已删除的文件到暂存区中</span><br>$ git add -u [&lt;文件路径&gt;]<br>$ git add --update [&lt;文件路径&gt;]<br><br><span class="hljs-comment"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span><br>$ git add -A [&lt;文件路径&gt;]<br>$ git add --all [&lt;文件路径&gt;]<br><br><span class="hljs-comment"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span><br>$ git add -i [&lt;文件路径&gt;]<br>$ git add --interactive [&lt;文件路径&gt;]<br></code></pre></td></tr></table></figure><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>操作 Git 的分支命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出本地的所有分支，当前所在分支以 &quot;*&quot; 标出</span><br>$ git branch<br><br><span class="hljs-comment"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 &quot;*&quot; 标出</span><br>$ git branch -v<br><br><span class="hljs-comment"># 创建新分支，新的分支基于上一次提交建立</span><br>$ git branch &lt;分支名&gt;<br><br><span class="hljs-comment"># 修改分支名称</span><br><span class="hljs-comment"># 如果不指定原分支名称则为当前所在分支</span><br>$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;<br><span class="hljs-comment"># 强制修改分支名称</span><br>$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;<br><br><span class="hljs-comment"># 删除指定的本地分支</span><br>$ git branch -d &lt;分支名称&gt;<br><br><span class="hljs-comment"># 强制删除指定的本地分支</span><br>$ git branch -D &lt;分支名称&gt;<br></code></pre></td></tr></table></figure><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>更新工作树中的文件以匹配索引或指定树中的版本。如果没有给出路径 - <code>git checkout</code> 还会更新 <code>HEAD</code> ，将指定的分支设置为当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换到已存在的指定分支</span><br>$ git checkout &lt;分支名称&gt;<br><br><span class="hljs-comment"># 创建并切换到指定的分支，保留所有的提交记录</span><br><span class="hljs-comment"># 等同于 &quot;git branch&quot; 和 &quot;git checkout&quot; 两个命令合并</span><br>$ git checkout -b &lt;分支名称&gt;<br><br><span class="hljs-comment"># 创建并切换到指定的分支，删除所有的提交记录</span><br>$ git checkout --orphan &lt;分支名称&gt;<br><br><span class="hljs-comment"># 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</span><br>$ git checkout &lt;文件路径&gt;<br></code></pre></td></tr></table></figure><blockquote><p><code>git checkout</code> 是 git 最常用的命令之一，同时也是一个很危险的命令，因为这条命令会重写工作区。</p></blockquote><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>将存储库克隆到新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支(使用 <code>git branch -r</code> 可见)，并从克隆检出的存储库作为当前活动分支的初始分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span><br>$ git <span class="hljs-built_in">clone</span> &lt;远程仓库的网址&gt;<br><br><span class="hljs-comment"># 指定本地仓库的目录</span><br>$ git <span class="hljs-built_in">clone</span> &lt;远程仓库的网址&gt; &lt;本地目录&gt;<br><br><span class="hljs-comment"># -b 指定要克隆的分支，默认是master分支</span><br>$ git <span class="hljs-built_in">clone</span> &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;<br></code></pre></td></tr></table></figure><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span><br>$ git commit<br><br><span class="hljs-comment"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span><br>$ git commit -m <span class="hljs-string">&quot;&lt;提交的描述信息&gt;&quot;</span><br><br><span class="hljs-comment"># 把所有修改、已删除的文件提交到本地仓库中</span><br><span class="hljs-comment"># 不包括未被版本库跟踪的文件，等同于先调用了 &quot;git add -u&quot;</span><br>$ git commit -a -m <span class="hljs-string">&quot;&lt;提交的描述信息&gt;&quot;</span><br><br><span class="hljs-comment"># 修改上次提交的描述信息</span><br>$ git commit --amend<br></code></pre></td></tr></table></figure><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>主要是用来配置 Git 的相关参数，其主要操作有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看配置信息</span><br><span class="hljs-comment"># --local：仓库级，--global：全局级，--system：系统级</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; -l<br><br><span class="hljs-comment"># 查看当前生效的配置信息</span><br>$ git config -l<br><br><span class="hljs-comment"># 编辑配置文件</span><br><span class="hljs-comment"># --local：仓库级，--global：全局级，--system：系统级</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; -e<br><br><span class="hljs-comment"># 添加配置项</span><br><span class="hljs-comment"># --local：仓库级，--global：全局级，--system：系统级</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;<br><br><span class="hljs-comment"># 获取配置项</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; --get &lt;name&gt;<br><br><span class="hljs-comment"># 删除配置项</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; --<span class="hljs-built_in">unset</span> &lt;name&gt;<br><br><span class="hljs-comment"># 配置提交记录中的用户信息</span><br>$ git config --global user.name &lt;用户名&gt;<br>$ git config --global user.email &lt;邮箱地址&gt;<br><br>(如果GitHub账户绑定的邮箱进行了更改，对本地的git配置也要更改邮箱后才能继续将更新的代码上传到GitHub)<br><br><span class="hljs-comment"># 更改Git缓存区的大小</span><br><span class="hljs-comment"># 如果提交的内容较大，默认缓存较小，提交会失败</span><br><span class="hljs-comment"># 缓存大小单位：B，例如：524288000（500MB）</span><br>$ git config --global http.postBuffer &lt;缓存大小&gt;<br><br><span class="hljs-comment"># 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</span><br>$ git config --global color.ui <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 配置可以缓存密码，默认缓存时间15分钟</span><br>$ git config --global credential.helper cache<br><br><span class="hljs-comment"># 配置密码的缓存时间</span><br><span class="hljs-comment"># 缓存时间单位：秒</span><br>$ git config --global credential.helper <span class="hljs-string">&#x27;cache --timeout=&lt;缓存时间&gt;&#x27;</span><br><br><span class="hljs-comment"># 配置长期存储密码</span><br>$ git config --global credential.helper store<br></code></pre></td></tr></table></figure><blockquote><p>Git 一共有3个配置文件：</p></blockquote><ol><li>仓库级的配置文件：在仓库的 <code>.git/.gitconfig</code>，该配置文件只对所在的仓库有效。</li><li>全局配置文件：Mac 系统在 <code>~/.gitconfig</code>，Windows 系统在 <code>C:\Users\&lt;用户名&gt;\.gitconfig</code>。</li><li>系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 <code>/usr/local/git</code>）的 <code>etc</code> 文件夹中的 <code>gitconfig</code>。</li></ol><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>用于显示提交和工作树等之间的更改。</p><p>此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</span><br>$ git diff<br><br><span class="hljs-comment"># 比较暂存区中的文件和上次提交时的差异</span><br>$ git diff --cached<br>$ git diff --staged<br><br><span class="hljs-comment"># 比较当前文件和上次提交时的差异</span><br>$ git diff HEAD<br><br><span class="hljs-comment"># 查看从指定的版本之后改动的内容</span><br>$ git diff &lt;commit ID&gt;<br><br><span class="hljs-comment"># 比较两个分支之间的差异</span><br>$ git diff &lt;分支名称&gt; &lt;分支名称&gt;<br><br><span class="hljs-comment"># 查看两个分支分开后各自的改动内容</span><br>$ git diff &lt;分支名称&gt;...&lt;分支名称&gt;<br></code></pre></td></tr></table></figure><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>从远程仓库获取最新的版本到本地的 tmp 分支上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将远程仓库所有分支的最新版本全部取回到本地</span><br>$ git fetch &lt;远程仓库的别名&gt;<br><br><span class="hljs-comment"># 将远程仓库指定分支的最新版本取回到本地</span><br>$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化本地仓库，在当前目录下生成 .git 文件夹</span><br>$ git init<br></code></pre></td></tr></table></figure><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>显示提交的记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打印所有的提交记录</span><br>$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 打印从第一次提交到指定的提交的记录</span><br>$ git <span class="hljs-built_in">log</span> &lt;commit ID&gt;<br><br><span class="hljs-comment"># 打印指定数量的最新提交的记录</span><br>$ git <span class="hljs-built_in">log</span> -&lt;指定的数量&gt;<br></code></pre></td></tr></table></figure><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>用于将两个或两个以上的开发历史加入(合并)一起。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 把指定的分支合并到当前所在的分支下，并自动进行新的提交</span><br>$ git merge &lt;分支名称&gt;<br><br><span class="hljs-comment"># 把指定的分支合并到当前所在的分支下，不进行新的提交</span><br>$ git merge --no-commit &lt;分支名称&gt;<br></code></pre></td></tr></table></figure><h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><p>重命名文件或者文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重命名指定的文件或者文件夹</span><br>$ git <span class="hljs-built_in">mv</span> &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt;<br></code></pre></td></tr></table></figure><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>从远程仓库获取最新版本并合并到本地。 首先会执行 <code>git fetch</code>，然后执行 <code>git merge</code>，把获取的分支的 HEAD 合并到当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从远程仓库获取最新版本。</span><br>$ git pull<br></code></pre></td></tr></table></figure><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>把本地仓库的提交推送到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 把本地仓库的分支推送到远程仓库的指定分支</span><br>$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br><br><span class="hljs-comment"># 删除指定的远程仓库的分支</span><br>$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;<br>$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt;<br></code></pre></td></tr></table></figure><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>操作远程库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出已经存在的远程仓库</span><br>$ git remote<br><br><span class="hljs-comment"># 列出远程仓库的详细信息，在别名后面列出URL地址</span><br>$ git remote -v<br>$ git remote --verbose<br><br><span class="hljs-comment"># 添加远程仓库</span><br>$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;<br><br><span class="hljs-comment"># 修改远程仓库的别名</span><br>$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;<br><br><span class="hljs-comment"># 删除指定名称的远程仓库</span><br>$ git remote remove &lt;远程仓库的别名&gt;<br><br><span class="hljs-comment"># 修改远程仓库的 URL 地址</span><br>$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;<br></code></pre></td></tr></table></figure><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>还原提交记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重置暂存区，但文件不受影响</span><br><span class="hljs-comment"># 相当于将用 &quot;git add&quot; 命令更新到暂存区的内容撤出暂存区，可以指定文件</span><br><span class="hljs-comment"># 没有指定 commit ID 则默认为当前 HEAD</span><br>$ git reset [&lt;文件路径&gt;]<br>$ git reset --mixed [&lt;文件路径&gt;]<br><br><span class="hljs-comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span><br>$ git reset &lt;commit ID&gt;<br>$ git reset --mixed &lt;commit ID&gt;<br><br><span class="hljs-comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span><br><span class="hljs-comment"># 相当于调用 &quot;git reset --mixed&quot; 命令后又做了一次 &quot;git add&quot;</span><br>$ git reset --soft &lt;commit ID&gt;<br><br><span class="hljs-comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</span><br>$ git reset --hard &lt;commit ID&gt;<br></code></pre></td></tr></table></figure><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成一个新的提交来撤销某次提交</span><br>$ git revert &lt;commit ID&gt;<br></code></pre></td></tr></table></figure><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>删除文件或者文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 移除跟踪指定的文件，并从本地仓库的文件夹中删除</span><br>$ git <span class="hljs-built_in">rm</span> &lt;文件路径&gt;<br><br><span class="hljs-comment"># 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除</span><br>$ git <span class="hljs-built_in">rm</span> -r &lt;文件夹路径&gt;<br><br><span class="hljs-comment"># 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件</span><br>$ git <span class="hljs-built_in">rm</span> --cached<br></code></pre></td></tr></table></figure><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>用于显示工作目录和暂存区的状态。使用此命令能看到那些修改被暂存到了, 哪些没有, 哪些文件没有被 Git tracked 到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看本地仓库的状态</span><br>$ git status<br></code></pre></td></tr></table></figure><blockquote><p><code>git status</code> 不显示已经 <code>commit</code> 到项目历史中去的信息。<br>看项目历史的信息要使用 <code>git log</code>。</p></blockquote><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p>操作标签的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打印所有的标签</span><br>$ git tag<br><br><span class="hljs-comment"># 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录</span><br>$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]<br><br><span class="hljs-comment"># 添加带有描述信息的附注标签，可以指定之前的提交记录</span><br>$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]<br><br><span class="hljs-comment"># 切换到指定的标签</span><br>$ git checkout &lt;标签名称&gt;<br><br><span class="hljs-comment"># 查看标签的信息</span><br>$ git show &lt;标签名称&gt;<br><br><span class="hljs-comment"># 删除指定的标签</span><br>$ git tag -d &lt;标签名称&gt;<br><br><span class="hljs-comment"># 将指定的标签提交到远程仓库</span><br>$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;<br><br><span class="hljs-comment"># 将本地所有的标签全部提交到远程仓库</span><br>$ git push &lt;远程仓库的别名&gt; –tags<br></code></pre></td></tr></table></figure><hr><h1 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h1><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/website/git常用命令.jpg"/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init                                                  <span class="hljs-comment"># 初始化本地git仓库（创建新仓库）</span><br>git config --global user.name <span class="hljs-string">&quot;xxx&quot;</span>                       <span class="hljs-comment"># 配置用户名</span><br>git config --global user.email <span class="hljs-string">&quot;xxx@xxx.com&quot;</span>              <span class="hljs-comment"># 配置邮件</span><br>git config --global color.ui <span class="hljs-literal">true</span>                         <span class="hljs-comment"># git status等命令自动着色</span><br>git config --global color.status auto<br>git config --global color.diff auto<br>git config --global color.branch auto<br>git config --global color.interactive auto<br>git config --global --<span class="hljs-built_in">unset</span> http.proxy                    <span class="hljs-comment"># remove  proxy configuration on git</span><br>git <span class="hljs-built_in">clone</span> git+ssh://git@192.168.53.168/VT.git             <span class="hljs-comment"># clone远程仓库</span><br>git status                                                <span class="hljs-comment"># 查看当前版本状态（是否修改）</span><br>git add xyz                                               <span class="hljs-comment"># 添加xyz文件至index</span><br>git add .                                                 <span class="hljs-comment"># 增加当前子目录下所有更改过的文件至index</span><br>git commit -m <span class="hljs-string">&#x27;xxx&#x27;</span>                                       <span class="hljs-comment"># 提交</span><br>git commit --amend -m <span class="hljs-string">&#x27;xxx&#x27;</span>                               <span class="hljs-comment"># 合并上一次提交（用于反复修改）</span><br>git commit -am <span class="hljs-string">&#x27;xxx&#x27;</span>                                      <span class="hljs-comment"># 将add和commit合为一步</span><br>git <span class="hljs-built_in">rm</span> xxx                                                <span class="hljs-comment"># 删除index中的文件</span><br>git <span class="hljs-built_in">rm</span> -r *                                               <span class="hljs-comment"># 递归删除</span><br>git <span class="hljs-built_in">log</span>                                                   <span class="hljs-comment"># 显示提交日志</span><br>git <span class="hljs-built_in">log</span> -1                                                <span class="hljs-comment"># 显示1行日志 -n为n行</span><br>git <span class="hljs-built_in">log</span> -5<br>git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span>                                            <span class="hljs-comment"># 显示提交日志及相关变动文件</span><br>git <span class="hljs-built_in">log</span> -p -m<br>git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="hljs-comment"># 显示某个提交的详细内容</span><br>git show dfb02                                            <span class="hljs-comment"># 可只用commitid的前几位</span><br>git show HEAD                                             <span class="hljs-comment"># 显示HEAD提交日志</span><br>git show HEAD^                                            <span class="hljs-comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br>git tag                                                   <span class="hljs-comment"># 显示已存在的tag</span><br>git tag -a v2.0 -m <span class="hljs-string">&#x27;xxx&#x27;</span>                                  <span class="hljs-comment"># 增加v2.0的tag</span><br>git show v2.0                                             <span class="hljs-comment"># 显示v2.0的日志及详细内容</span><br>git <span class="hljs-built_in">log</span> v2.0                                              <span class="hljs-comment"># 显示v2.0的日志</span><br>git diff                                                  <span class="hljs-comment"># 显示所有未添加至index的变更</span><br>git diff --cached                                         <span class="hljs-comment"># 显示所有已添加index但还未commit的变更</span><br>git diff HEAD^                                            <span class="hljs-comment"># 比较与上一个版本的差异</span><br>git diff HEAD -- ./lib                                    <span class="hljs-comment"># 比较与HEAD版本lib目录的差异</span><br>git diff origin/master..master                            <span class="hljs-comment"># 比较远程分支master上有本地分支master上没有的</span><br>git diff origin/master..master --<span class="hljs-built_in">stat</span>                     <span class="hljs-comment"># 只显示差异的文件，不显示具体内容</span><br>git remote add origin git+ssh://git@192.168.53.168/VT.git <span class="hljs-comment"># 增加远程定义（用于push/pull/fetch）</span><br>git branch                                                <span class="hljs-comment"># 显示本地分支</span><br>git branch --contains 50089                               <span class="hljs-comment"># 显示包含提交50089的分支</span><br>git branch -a                                             <span class="hljs-comment"># 显示所有分支</span><br>git branch -r                                             <span class="hljs-comment"># 显示所有原创分支</span><br>git branch --merged                                       <span class="hljs-comment"># 显示所有已合并到当前分支的分支</span><br>git branch --no-merged                                    <span class="hljs-comment"># 显示所有未合并到当前分支的分支</span><br>git branch -m master master_copy                          <span class="hljs-comment"># 本地分支改名</span><br>git checkout -b master_copy                               <span class="hljs-comment"># 从当前分支创建新分支master_copy并检出</span><br>git checkout -b master master_copy                        <span class="hljs-comment"># 上面的完整版</span><br>git checkout features/performance                         <span class="hljs-comment"># 检出已存在的features/performance分支</span><br>git checkout --track hotfixes/BJVEP933                    <span class="hljs-comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br>git checkout v2.0                                         <span class="hljs-comment"># 检出版本v2.0</span><br>git checkout -b devel origin/develop                      <span class="hljs-comment"># 从远程分支develop创建新本地分支devel并检出</span><br>git checkout -- README                                    <span class="hljs-comment"># 检出head版本的README文件（可用于修改错误回退）</span><br>git merge origin/master                                   <span class="hljs-comment"># 合并远程master分支至当前分支</span><br>git cherry-pick ff44785404a8e                             <span class="hljs-comment"># 合并提交ff44785404a8e的修改</span><br>git push origin master                                    <span class="hljs-comment"># 将当前分支push到远程master分支</span><br>git push origin :hotfixes/BJVEP933                        <span class="hljs-comment"># 删除远程仓库的hotfixes/BJVEP933分支</span><br>git push --tags                                           <span class="hljs-comment"># 把所有tag推送到远程仓库</span><br>git fetch                                                 <span class="hljs-comment"># 获取所有远程分支（不更新本地分支，另需merge）</span><br>git fetch --prune                                         <span class="hljs-comment"># 获取所有原创分支并清除服务器上已删掉的分支</span><br>git pull origin master                                    <span class="hljs-comment"># 获取远程分支master并merge到当前分支</span><br>git <span class="hljs-built_in">mv</span> README README2                                     <span class="hljs-comment"># 重命名文件README为README2</span><br>git reset --hard HEAD                                     <span class="hljs-comment"># 将当前版本重置为HEAD（通常用于merge失败回退）</span><br>git rebase<br>git branch -d hotfixes/BJVEP933                           <span class="hljs-comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><br>git branch -D hotfixes/BJVEP933                           <span class="hljs-comment"># 强制删除分支hotfixes/BJVEP933</span><br>git ls-files                                              <span class="hljs-comment"># 列出git index包含的文件</span><br>git show-branch                                           <span class="hljs-comment"># 图示当前分支历史</span><br>git show-branch --all                                     <span class="hljs-comment"># 图示所有分支历史</span><br>git whatchanged                                           <span class="hljs-comment"># 显示提交历史对应的文件修改</span><br>git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="hljs-comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br>git ls-tree HEAD                                          <span class="hljs-comment"># 内部命令：显示某个git对象</span><br>git rev-parse v2.0                                        <span class="hljs-comment"># 内部命令：显示某个ref对于的SHA1 HASH</span><br>git reflog                                                <span class="hljs-comment"># 显示所有提交，包括孤立节点</span><br>git show HEAD@&#123;5&#125;<br>git show master@&#123;yesterday&#125;                               <span class="hljs-comment"># 显示master分支昨天的状态</span><br>git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&#x27;%h %s&#x27;</span> --graph                   <span class="hljs-comment"># 图示提交日志</span><br>git show HEAD~3<br>git show -s --pretty=raw 2be7fcb476<br>git stash                                                 <span class="hljs-comment"># 暂存当前修改，将所有至为HEAD状态</span><br>git stash list                                            <span class="hljs-comment"># 查看所有暂存</span><br>git stash show -p stash@&#123;0&#125;                               <span class="hljs-comment"># 参考第一次暂存</span><br>git stash apply stash@&#123;0&#125;                                 <span class="hljs-comment"># 应用第一次暂存</span><br>git grep <span class="hljs-string">&quot;delete from&quot;</span>                                    <span class="hljs-comment"># 文件中搜索文本“delete from”</span><br>git grep -e <span class="hljs-string">&#x27;#define&#x27;</span> --and -e SORT_DIRENT<br>git gc<br>git fsck<br></code></pre></td></tr></table></figure><hr><h1 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h1><p>Git是用于代码管理的工具，通过仓库（repository）来保存版本管理所需要的信息。Git在每台开发机上都会有一个仓库，代码可以先提交到本地仓库，然后再从本地仓库推送到远端仓库。Git的每次提交（commit）都会生成一个快照，快照保存了所有被修改文件的副本而不是增量。Git每次分支切换都是直接从快照中提取文件，而不是根据增量重新计算出最终文件，因此操作速度会比较。当前最流行的Android源码就是使用Git进行代码管理。</p><h2 id="Windows上安装Git"><a href="#Windows上安装Git" class="headerlink" title="Windows上安装Git"></a>Windows上安装Git</h2><p>在官网<a href="https://git-scm.com/download/">下载</a>Git安装文件。按照默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，打开Git Bash命令行窗口，说明安装成功。以后所有的Git命令均在这里运行。</p><h2 id="MacOS上安装Git"><a href="#MacOS上安装Git" class="headerlink" title="MacOS上安装Git"></a>MacOS上安装Git</h2><p>Mac上的安装方法比较多，可以<a href="https://git-scm.com/download/">下载</a>dmg安装文件安装。也可以使用<a href="http://brew.sh/">homebrew</a>安装。最简单也是推荐的方式是安装 Xcode Command Line Tools。 Mavericks （10.9） 或更高版本的系统中，在 Terminal 里尝试首次运行 <em>git</em> 命令即可。 如果没有安装过命令行开发者工具，将会提示你安装。</p><h2 id="Linux上安装Git"><a href="#Linux上安装Git" class="headerlink" title="Linux上安装Git"></a>Linux上安装Git</h2><p>对于Ubuntu或者Debian，运行以下命令就可以直接安装，老版本的Ubuntu需要运行sudo apt-get install git-core</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">sudo</span> apt-get install git<br></code></pre></td></tr></table></figure><p>对于CentOS和Fedora使用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">sudo</span> yum install git<br></code></pre></td></tr></table></figure><p>其他版本的Linux可以下载源码自己编译。</p><h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>打开命令行工具（Windows打开Git Bash），运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name  <span class="hljs-string">&quot;your name&quot;</span>  <br>$ git config --global user.email <span class="hljs-string">&quot;your email&quot;</span>   <br>$ git config --global push.default simple        <span class="hljs-comment"># 每次push仅push当前分支</span><br>$ git config --global core.autocrlf <span class="hljs-literal">false</span>        <span class="hljs-comment"># 忽略window/unix换行符</span><br>$ git config --global gui.encoding utf-8         <span class="hljs-comment"># 避免乱码</span><br>$ git config --global core.quotepath off         <span class="hljs-comment"># 避免git status显示的中文文件名乱码</span><br></code></pre></td></tr></table></figure><p>Windows上还需配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global core.ignorecase <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>以上配置适用于全部的Repository，如果某个Repository需要其他的用户名和邮箱，则cd到相应Repository目录执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name <span class="hljs-string">&quot;your name&quot;</span><br>git config user.email <span class="hljs-string">&quot;your email&quot;</span><br></code></pre></td></tr></table></figure><h2 id="设置SSH"><a href="#设置SSH" class="headerlink" title="设置SSH"></a>设置SSH</h2><p>打开命令行（Windows用户打开Git bash）键入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;your email&quot;</span><br></code></pre></td></tr></table></figure><p>然后一路回车，不需要输入任何密码。在当前用户目录的.ssh文件夹下(~&#x2F;.ssh&#x2F;id_rsa.pub)会生成id_rsa.pub文件，其内容就是ssh key pair。<br>对于Linux还需执行以下命令将ssh key告诉系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>将生成的ssh key添加到github（<a href="https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE">账户创建和配置</a>），git@osc或者任何提供git服务的网站，以后使用git提交到远端服务器就不需要密码了。</p><p>参考资料<br><a href="https://git-scm.com/doc">https://git-scm.com/doc</a></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号与系统</title>
    <link href="/blog/post/Knowledge/SignalsAndSystems/"/>
    <url>/blog/post/Knowledge/SignalsAndSystems/</url>
    
    <content type="html"><![CDATA[<p>信号与系统是很重要的一门课，是很多学校通信考研的专业课！<br>这门课几乎每个知识点都很重要，最重要的是三大变换：傅里叶变换，拉普拉斯变换，Z变换。</p><p>学好这门课在课本理解和做题两方面都需要抓紧！</p><p>信号与系统在我学的科目中属于做题比较多的了，我自我感觉，对于定义的理解和对于基本题型的解答都还是不错的，但是期末用事实告诉我，我做的该不够！</p><p>特别的对于基本知识点的理解和对定义的掌握不好，导致在期末做题的时候对于题目表达的意思我理解起来都很吃力！</p><h1 id="第一章-信号与系统"><a href="#第一章-信号与系统" class="headerlink" title="第一章 信号与系统"></a>第一章 信号与系统</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F.png" alt="第一章 信号与系统"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">本章内容<br><br><span class="hljs-bullet">-</span> 信号的描述<br><span class="hljs-bullet">-</span> 信号的自变量变换<br><span class="hljs-bullet">-</span> 基本信号<br><span class="hljs-bullet">-</span> 系统机器数学模型<br><span class="hljs-bullet">-</span> 系统的性质<br></code></pre></td></tr></table></figure><h2 id="1-0-引言"><a href="#1-0-引言" class="headerlink" title="1.0 引言"></a>1.0 引言</h2><p>信号</p><ul><li>信号的定义：描述一定物理现象</li><li>信号的表示方式：函数</li><li>信号的分类、<ul><li>确知信号和随机信号</li><li>连续时间信号和离散时间信号</li></ul></li></ul><p><strong>信号与系统不是讲数学，而是用数学的方法来解决信号处理的问题</strong></p><h2 id="1-1-连续时间信号和离散时间信号"><a href="#1-1-连续时间信号和离散时间信号" class="headerlink" title="1.1 连续时间信号和离散时间信号"></a>1.1 连续时间信号和离散时间信号</h2><h3 id="1-1-1-数学表示"><a href="#1-1-1-数学表示" class="headerlink" title="1.1.1 数学表示"></a>1.1.1 数学表示</h3><p>连续时间信号（CTS）：自变量是连续可变的</p><p>离散时间信号（DTS）：仅仅定义在离散时刻点上</p><p>连续时间信号-&gt;离散时间信号?</p><ul><li>连续时间信号在离散时刻点上的样本可以构成一个离散时间信号（采样）</li></ul><h3 id="1-1-2-信号的能量与功率"><a href="#1-1-2-信号的能量与功率" class="headerlink" title="1.1.2 信号的能量与功率"></a>1.1.2 信号的能量与功率</h3><p>能量</p><p>平均功率</p><p>有限区间内CTS和DTS的总能量和平均功率的计算</p><p>无限区间内CTS和DTS的总能量和平均功率的计算</p><p>利用能量与功率将信号分为三类：</p><ul><li>能量信号——信号具有有限的总能量<ul><li>信号的总能量有限</li><li>平均功率为0</li></ul></li><li>功率信号——信号具有无限的总能量但是平均功率有限<ul><li>信号的总能量有限</li><li>平均功率为大于0，小于∞</li></ul></li><li>非能量信号也非功率信号<ul><li>信号的总能量无穷大</li><li>信号的平均功率无穷大</li></ul></li></ul><h3 id="1-1-3-周期信号与非周期信号"><a href="#1-1-3-周期信号与非周期信号" class="headerlink" title="1.1.3 周期信号与非周期信号"></a>1.1.3 周期信号与非周期信号</h3><p>$$<br>x(t)&#x3D;x(t+nT)<br>$$</p><p>$$<br>x[n]&#x3D;x[n+N]<br>$$</p><p>周期信号一定是功率信号</p><p>非周期信号，且能量有限的信号称为能量信号</p><h2 id="1-2-自变量的变换"><a href="#1-2-自变量的变换" class="headerlink" title="1.2 自变量的变换"></a>1.2 自变量的变换</h2><p><strong>自变量的变换必然会使得信号的特性相应地改变</strong></p><h3 id="1-2-1-自变量变换"><a href="#1-2-1-自变量变换" class="headerlink" title="1.2.1 自变量变换"></a>1.2.1 自变量变换</h3><ul><li><p>时移变换 shift of signals</p><ul><li>左加右减</li></ul></li><li><p>时间反转 time reversal</p><ul><li>以纵轴为轴呈镜像对称</li></ul></li><li><p>时间尺度变换 time scaling</p><ul><li>在时间常数上对时间做压缩或者扩展</li></ul></li></ul><h3 id="1-2-2-周期信号"><a href="#1-2-2-周期信号" class="headerlink" title="1.2.2 周期信号"></a>1.2.2 周期信号</h3><p>周期：T或N</p><p>基波周期：$T_0$或$N_0$</p><h3 id="1-2-3-偶信号和奇信号"><a href="#1-2-3-偶信号和奇信号" class="headerlink" title="1.2.3 偶信号和奇信号"></a>1.2.3 偶信号和奇信号</h3><p>任何一个信号都能分解成两个信号之和，其中之一为偶信号，另一个为奇信号。</p><h2 id="1-3-指数信号和正弦信号"><a href="#1-3-指数信号和正弦信号" class="headerlink" title="1.3 指数信号和正弦信号"></a>1.3 指数信号和正弦信号</h2><h2 id="1-4-单位冲激和单位阶跃函数（重要）"><a href="#1-4-单位冲激和单位阶跃函数（重要）" class="headerlink" title="1.4 单位冲激和单位阶跃函数（重要）"></a>1.4 单位冲激和单位阶跃函数（重要）</h2><h3 id="离散时间的单位脉冲和单位阶跃序列"><a href="#离散时间的单位脉冲和单位阶跃序列" class="headerlink" title="离散时间的单位脉冲和单位阶跃序列"></a>离散时间的单位脉冲和单位阶跃序列</h3><h3 id="连续时间单位冲激和单位阶跃函数"><a href="#连续时间单位冲激和单位阶跃函数" class="headerlink" title="连续时间单位冲激和单位阶跃函数"></a>连续时间单位冲激和单位阶跃函数</h3><p>课本P19——重要内容</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109221845118.png" alt="image-20211109221845118"></p><h2 id="1-5-连续时间和离散时间系统"><a href="#1-5-连续时间和离散时间系统" class="headerlink" title="1.5 连续时间和离散时间系统"></a>1.5 连续时间和离散时间系统</h2><h2 id="1-6-基本系统的性质"><a href="#1-6-基本系统的性质" class="headerlink" title="1.6 基本系统的性质"></a>1.6 基本系统的性质</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%80%A7%E8%B4%A82.png" alt="系统的性质2"></p><h1 id="第二章-线性时不变系统"><a href="#第二章-线性时不变系统" class="headerlink" title="第二章 线性时不变系统"></a>第二章 线性时不变系统</h1><h2 id="离散线性时不变系统"><a href="#离散线性时不变系统" class="headerlink" title="离散线性时不变系统"></a>离散线性时不变系统</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222000602.png" alt="image-20211109222000602"></p><h2 id="连续时间线性时不变系统"><a href="#连续时间线性时不变系统" class="headerlink" title="连续时间线性时不变系统"></a>连续时间线性时不变系统</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222027637.png" alt="image-20211109222027637"></p><h2 id="线性时不变系统的性质"><a href="#线性时不变系统的性质" class="headerlink" title="线性时不变系统的性质"></a>线性时不变系统的性质</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222109193.png" alt="image-20211109222109193"></p><h1 id="第三章-周期信号的傅里叶级数表示"><a href="#第三章-周期信号的傅里叶级数表示" class="headerlink" title="第三章 周期信号的傅里叶级数表示"></a>第三章 周期信号的傅里叶级数表示</h1><h2 id="线性时不变系统对复指数信号的响应"><a href="#线性时不变系统对复指数信号的响应" class="headerlink" title="线性时不变系统对复指数信号的响应"></a>线性时不变系统对复指数信号的响应</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222225570.png" alt="image-20211109222225570"></p><h2 id="连续时间周期信号的傅里叶级数表示"><a href="#连续时间周期信号的傅里叶级数表示" class="headerlink" title="连续时间周期信号的傅里叶级数表示"></a>连续时间周期信号的傅里叶级数表示</h2><h3 id="成谐波关系的复指数信号的线性组合"><a href="#成谐波关系的复指数信号的线性组合" class="headerlink" title="成谐波关系的复指数信号的线性组合"></a>成谐波关系的复指数信号的线性组合</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222320380.png" alt="image-20211109222320380"></p><h3 id="连续时间周期信号傅里叶级数表示"><a href="#连续时间周期信号傅里叶级数表示" class="headerlink" title="连续时间周期信号傅里叶级数表示"></a>连续时间周期信号傅里叶级数表示</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222351587.png" alt="image-20211109222351587"></p><h2 id="傅里叶级数收敛"><a href="#傅里叶级数收敛" class="headerlink" title="傅里叶级数收敛"></a>傅里叶级数收敛</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222418948.png" alt="image-20211109222418948"></p><h2 id="连续时间傅里叶级数性质"><a href="#连续时间傅里叶级数性质" class="headerlink" title="连续时间傅里叶级数性质"></a>连续时间傅里叶级数性质</h2><h3 id="线性性质"><a href="#线性性质" class="headerlink" title="线性性质"></a>线性性质</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222612727.png" alt="image-20211109222612727"></p><h3 id="时移性质"><a href="#时移性质" class="headerlink" title="时移性质"></a>时移性质</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222621328.png" alt="image-20211109222621328"></p><h3 id="时间反转"><a href="#时间反转" class="headerlink" title="时间反转"></a>时间反转</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222627507.png" alt="image-20211109222627507"></p><h3 id="时间尺度"><a href="#时间尺度" class="headerlink" title="时间尺度"></a>时间尺度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222632824.png" alt="image-20211109222632824"></p><h3 id="相乘性质"><a href="#相乘性质" class="headerlink" title="相乘性质"></a>相乘性质</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222650906.png" alt="image-20211109222650906"></p><h3 id="共轭及其共轭对称"><a href="#共轭及其共轭对称" class="headerlink" title="共轭及其共轭对称"></a>共轭及其共轭对称</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222703928.png" alt="image-20211109222703928"></p><h3 id="连续时间周期信号的帕斯瓦尔定理"><a href="#连续时间周期信号的帕斯瓦尔定理" class="headerlink" title="连续时间周期信号的帕斯瓦尔定理"></a>连续时间周期信号的帕斯瓦尔定理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211109222710690.png" alt="image-20211109222710690"></p><h2 id="总结：连续时间傅里叶级数性质"><a href="#总结：连续时间傅里叶级数性质" class="headerlink" title="总结：连续时间傅里叶级数性质"></a>总结：连续时间傅里叶级数性质</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114210912354.png" alt="" style="zoom:150%;" /><h1 id="第四章-连续时间傅里叶变换"><a href="#第四章-连续时间傅里叶变换" class="headerlink" title="第四章 连续时间傅里叶变换"></a>第四章 连续时间傅里叶变换</h1><h2 id="4-1非周期信号的表示"><a href="#4-1非周期信号的表示" class="headerlink" title="4.1非周期信号的表示"></a>4.1非周期信号的表示</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114211601937.png" alt="image-20211114211601937"></p><h3 id="傅里叶变换的收敛"><a href="#傅里叶变换的收敛" class="headerlink" title="傅里叶变换的收敛"></a>傅里叶变换的收敛</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114211612899.png" alt="image-20211114211612899"></p><h3 id="常见傅里叶变换举例子"><a href="#常见傅里叶变换举例子" class="headerlink" title="常见傅里叶变换举例子"></a>常见傅里叶变换举例子</h3><h2 id="4-2周期信号的傅里叶变换"><a href="#4-2周期信号的傅里叶变换" class="headerlink" title="4.2周期信号的傅里叶变换"></a>4.2周期信号的傅里叶变换</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114211915489.png" alt="image-20211114211915489"></p><h2 id="4-3连续时间傅里叶变换性质"><a href="#4-3连续时间傅里叶变换性质" class="headerlink" title="4.3连续时间傅里叶变换性质"></a>4.3连续时间傅里叶变换性质</h2><h3 id="线性性质-1"><a href="#线性性质-1" class="headerlink" title="线性性质"></a>线性性质</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114212741940.png" alt="image-20211114212741940"></p><h3 id="时移性质-1"><a href="#时移性质-1" class="headerlink" title="时移性质"></a>时移性质</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114212751847.png" alt="image-20211114212751847"></p><h3 id="共轭和共轭对称性质"><a href="#共轭和共轭对称性质" class="headerlink" title="共轭和共轭对称性质"></a>共轭和共轭对称性质</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114212821020.png" alt="image-20211114212821020"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114212840126.png" alt="image-20211114212840126"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114212852131.png" alt="image-20211114212852131"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114212902799.png" alt="image-20211114212902799"></p><h3 id="微分与积分性质"><a href="#微分与积分性质" class="headerlink" title="微分与积分性质"></a>微分与积分性质</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114213056673.png" alt="image-20211114213056673"></p><h3 id="时间与频率的尺度变换"><a href="#时间与频率的尺度变换" class="headerlink" title="时间与频率的尺度变换"></a>时间与频率的尺度变换</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114213226698.png" alt="image-20211114213226698"></p><h3 id="对偶性质"><a href="#对偶性质" class="headerlink" title="对偶性质"></a>对偶性质</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123027523.png" alt="image-20211229123027523"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123037735.png" alt="image-20211229123037735"></p><h3 id="帕斯瓦尔定理"><a href="#帕斯瓦尔定理" class="headerlink" title="帕斯瓦尔定理"></a>帕斯瓦尔定理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211114213349722.png" alt="image-20211114213349722"></p><h2 id="4-4-卷积性质"><a href="#4-4-卷积性质" class="headerlink" title="4.4 卷积性质"></a>4.4 卷积性质</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123050594.png" alt="image-20211229123050594"></p><h2 id="4-5-相乘性质"><a href="#4-5-相乘性质" class="headerlink" title="4.5 相乘性质"></a>4.5 相乘性质</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123057541.png" alt="image-20211229123057541"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206223140661.png" alt="image-20211206223140661"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206223723775.png" alt="image-20211206223723775"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206223223857.png" alt="image-20211206223223857"></p><h1 id="第五章-离散时间傅里叶变换"><a href="#第五章-离散时间傅里叶变换" class="headerlink" title="第五章 离散时间傅里叶变换"></a>第五章 离散时间傅里叶变换</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123158629.png" alt="image-20211229123158629"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/dtftlist%20(3).jpg" alt="dtftlist (3)"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/dtftlist%20(4).jpg" alt="dtftlist (4)"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/dtftlist%20(1).jpg" alt="dtftlist (1)"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/dtftlist%20(2).jpg" alt="dtftlist (2)"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/dtftlist%20(5).jpg" alt="dtftlist (5)"></p><h1 id="第六章-信号与系统的时域和频域特征"><a href="#第六章-信号与系统的时域和频域特征" class="headerlink" title="第六章 信号与系统的时域和频域特征"></a>第六章 信号与系统的时域和频域特征</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123248305.png" alt="image-20211229123248305"></p><h2 id="6-2-线性时不变系统频率响应的模和相位表示"><a href="#6-2-线性时不变系统频率响应的模和相位表示" class="headerlink" title="6.2 线性时不变系统频率响应的模和相位表示"></a>6.2 线性时不变系统频率响应的模和相位表示</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123300715.png" alt="image-20211229123300715"></p><h3 id="群时延"><a href="#群时延" class="headerlink" title="群时延"></a>群时延</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123309034.png" alt="image-20211229123309034"></p><h3 id="对数模和相位图"><a href="#对数模和相位图" class="headerlink" title="对数模和相位图"></a>对数模和相位图</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123413689.png" alt="image-20211229123413689"></p><h2 id="6-3-理想频率选择器滤波器的时域特性"><a href="#6-3-理想频率选择器滤波器的时域特性" class="headerlink" title="6.3 理想频率选择器滤波器的时域特性"></a>6.3 理想频率选择器滤波器的时域特性</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123429741.png" alt="image-20211229123429741"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123436962.png" alt="image-20211229123436962"></p><h2 id="6-5-一阶连续时间系统"><a href="#6-5-一阶连续时间系统" class="headerlink" title="6.5 一阶连续时间系统"></a>6.5 一阶连续时间系统</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229123456338.png" alt="image-20211229123456338"></p><h1 id="第七章-采样"><a href="#第七章-采样" class="headerlink" title="第七章 采样"></a>第七章 采样</h1><h2 id="7-1-用信号样本表示连续时间信号：采样定理"><a href="#7-1-用信号样本表示连续时间信号：采样定理" class="headerlink" title="7.1 用信号样本表示连续时间信号：采样定理"></a>7.1 用信号样本表示连续时间信号：采样定理</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093508545.png" alt="image-20211228093508545"></p><h3 id="冲击串采样"><a href="#冲击串采样" class="headerlink" title="冲击串采样"></a>冲击串采样</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093601348.png" alt="image-20211228093601348"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093624672.png" alt="image-20211228093624672"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093655083.png" alt="image-20211228093655083"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093706888.png" alt="image-20211228093706888"></p><h3 id="零阶保持采样"><a href="#零阶保持采样" class="headerlink" title="零阶保持采样"></a>零阶保持采样</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093721826.png" alt="image-20211228093721826"></p><h2 id="7-2-利用内插由样本重建信号"><a href="#7-2-利用内插由样本重建信号" class="headerlink" title="7.2 利用内插由样本重建信号"></a>7.2 利用内插由样本重建信号</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093738455.png" alt="image-20211228093738455"></p><h2 id="7-3-欠采样的效果：混叠现象"><a href="#7-3-欠采样的效果：混叠现象" class="headerlink" title="7.3 欠采样的效果：混叠现象"></a>7.3 欠采样的效果：混叠现象</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093750160.png" alt="image-20211228093750160"></p><h2 id="7-4-连续时间信号的离散时间处理"><a href="#7-4-连续时间信号的离散时间处理" class="headerlink" title="7.4 连续时间信号的离散时间处理"></a>7.4 连续时间信号的离散时间处理</h2><h2 id="7-5-离散时间信号采样"><a href="#7-5-离散时间信号采样" class="headerlink" title="7.5 离散时间信号采样"></a>7.5 离散时间信号采样</h2><h1 id="第八章-通信系统"><a href="#第八章-通信系统" class="headerlink" title="第八章 通信系统"></a>第八章 通信系统</h1><h2 id="8-0-引言"><a href="#8-0-引言" class="headerlink" title="8.0 引言"></a>8.0 引言</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229224835569.png" alt="image-20211229224835569"></p><h2 id="8-1-复指数载波"><a href="#8-1-复指数载波" class="headerlink" title="8.1 复指数载波"></a>8.1 复指数载波</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229224855735.png" alt="image-20211229224855735"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229224912738.png" alt="image-20211229224912738"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229224933643.png" alt="image-20211229224933643"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229224939739.png" alt="image-20211229224939739"></p><h2 id="8-2-正弦载波"><a href="#8-2-正弦载波" class="headerlink" title="8.2 正弦载波"></a>8.2 正弦载波</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225014905.png" alt="image-20211229225014905"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225022151.png" alt="image-20211229225022151"></p><h2 id="解调"><a href="#解调" class="headerlink" title="解调"></a>解调</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225048457.png" alt="image-20211229225048457"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225058364.png" alt="image-20211229225058364"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225109153.png" alt="image-20211229225109153"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225115240.png" alt="image-20211229225115240"></p><h2 id="8-3-频分多路复用"><a href="#8-3-频分多路复用" class="headerlink" title="8.3 频分多路复用"></a>8.3 频分多路复用</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225121758.png" alt="image-20211229225121758"></p><h2 id="8-4-单边带正弦幅度调制"><a href="#8-4-单边带正弦幅度调制" class="headerlink" title="8.4 单边带正弦幅度调制"></a>8.4 单边带正弦幅度调制</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225132331.png" alt="image-20211229225132331"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225139490.png" alt="image-20211229225139490"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225148790.png" alt="image-20211229225148790"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225156048.png" alt="image-20211229225156048"></p><h1 id="第九章-拉普拉斯变换"><a href="#第九章-拉普拉斯变换" class="headerlink" title="第九章 拉普拉斯变换"></a>第九章 拉普拉斯变换</h1><h2 id="9-0-引言"><a href="#9-0-引言" class="headerlink" title="9.0 引言"></a>9.0 引言</h2><p>连续时间傅里叶变换的推广——拉普拉斯变换</p><p>拉普拉斯变换和Z变换能用于很多不稳定系统的分析</p><h2 id="9-1-拉普拉斯变换"><a href="#9-1-拉普拉斯变换" class="headerlink" title="9.1 拉普拉斯变换"></a>9.1 拉普拉斯变换</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206200817398.png" alt="image-20211206200817398"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206200900094.png" alt="image-20211206200900094"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201136022.png" alt="image-20211206201136022"></p><h2 id="9-2拉普拉斯变换的收敛域"><a href="#9-2拉普拉斯变换的收敛域" class="headerlink" title="9.2拉普拉斯变换的收敛域"></a>9.2拉普拉斯变换的收敛域</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201301335.png" alt="image-20211206201301335"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201315072.png" alt="image-20211206201315072"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201326783.png" alt="image-20211206201326783"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201409322.png" alt="image-20211206201409322"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201421000.png" alt="image-20211206201421000"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201435902.png" alt="image-20211206201435902"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201448097.png" alt="image-20211206201448097"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201454653.png" alt="image-20211206201454653"></p><h2 id="9-3-拉普拉斯逆变换"><a href="#9-3-拉普拉斯逆变换" class="headerlink" title="9.3 拉普拉斯逆变换"></a>9.3 拉普拉斯逆变换</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201512087.png" alt="image-20211206201512087"></p><p>部分分式展开</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201550289.png" alt="image-20211206201550289"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206201611776.png" alt="image-20211206201611776"></p><p>部分分式展开——重根的情况</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206203227393.png" alt="image-20211206203227393"></p><h2 id="9-4-由零-极点图对傅里叶变换进行几何求值"><a href="#9-4-由零-极点图对傅里叶变换进行几何求值" class="headerlink" title="9.4 由零-极点图对傅里叶变换进行几何求值"></a>9.4 由零-极点图对傅里叶变换进行几何求值</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211229225335369.png" alt="image-20211229225335369"></p><h2 id="9-5-拉普拉斯变换的性质"><a href="#9-5-拉普拉斯变换的性质" class="headerlink" title="9.5 拉普拉斯变换的性质"></a>9.5 拉普拉斯变换的性质</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206210923272.png" alt="image-20211206210923272"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211210115437813.png" alt="image-20211210115437813"></p><h2 id="9-6-常用拉普拉斯变换对"><a href="#9-6-常用拉普拉斯变换对" class="headerlink" title="9.6 常用拉普拉斯变换对"></a>9.6 常用拉普拉斯变换对</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206214129892.png" alt="image-20211206214129892"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206214147645.png" alt="image-20211206214147645"></p><h2 id="9-7-用拉普拉斯变换分析表征线性时不变系统"><a href="#9-7-用拉普拉斯变换分析表征线性时不变系统" class="headerlink" title="9.7 用拉普拉斯变换分析表征线性时不变系统"></a>9.7 用拉普拉斯变换分析表征线性时不变系统</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206222523614.png" alt="image-20211206222523614"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206222533422.png" alt="image-20211206222533422"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206222546276.png" alt="image-20211206222546276"></p><h2 id="9-8-系统函数的代数属性与方框图表示"><a href="#9-8-系统函数的代数属性与方框图表示" class="headerlink" title="9.8 系统函数的代数属性与方框图表示"></a>9.8 系统函数的代数属性与方框图表示</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206222744133.png" alt="image-20211206222744133"></p><h2 id="9-9-单边拉普拉斯变换"><a href="#9-9-单边拉普拉斯变换" class="headerlink" title="9.9 单边拉普拉斯变换"></a>9.9 单边拉普拉斯变换</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204045969.png" alt="image-20211230204045969"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204106649.png" alt="image-20211230204106649"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204119619.png" alt="image-20211230204119619"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211206204658304.png" alt="image-20211206204658304"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204135503.png" alt="image-20211230204135503"></p><h1 id="第十章-Z变换"><a href="#第十章-Z变换" class="headerlink" title="第十章 Z变换"></a>第十章 Z变换</h1><h2 id="10-1-z变换"><a href="#10-1-z变换" class="headerlink" title="10.1 z变换"></a>10.1 z变换</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228092713865.png" alt="image-20211228092713865"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228092728208.png" alt="image-20211228092728208"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228092739098.png" alt="image-20211228092739098"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228092749702.png" alt="image-20211228092749702"></p><h2 id="10-2-z变换的收敛域"><a href="#10-2-z变换的收敛域" class="headerlink" title="10.2 z变换的收敛域"></a>10.2 z变换的收敛域</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228092821884.png" alt="image-20211228092821884"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228092838193.png" alt="image-20211228092838193"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228092852243.png" alt="image-20211228092852243"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228092907453.png" alt="image-20211228092907453"></p><h2 id="10-3-z逆变换"><a href="#10-3-z逆变换" class="headerlink" title="10.3 z逆变换"></a>10.3 z逆变换</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093019957.png" alt="image-20211228093019957"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093040462.png" alt="image-20211228093040462"></p><h2 id="10-4-利用零极点图对傅里叶变换进行几何求值"><a href="#10-4-利用零极点图对傅里叶变换进行几何求值" class="headerlink" title="10.4 利用零极点图对傅里叶变换进行几何求值"></a>10.4 利用零极点图对傅里叶变换进行几何求值</h2><p>一阶系统</p><p>二阶系统（可能要考）</p><h2 id="10-5-z变换的性质"><a href="#10-5-z变换的性质" class="headerlink" title="10.5 z变换的性质"></a>10.5 z变换的性质</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093105483.png" alt="image-20211228093105483"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093118710.png" alt="image-20211228093118710"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093137269.png" alt="image-20211228093137269"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093151072.png" alt="image-20211228093151072"></p><h2 id="10-6-常见z变换对"><a href="#10-6-常见z变换对" class="headerlink" title="10.6 常见z变换对"></a>10.6 常见z变换对</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093205083.png" alt="image-20211228093205083"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093218685.png" alt="image-20211228093218685"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093228078.png" alt="image-20211228093228078"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093235884.png" alt="image-20211228093235884"></p><h2 id="10-7-利用z变换分析与表征线性时不变系统"><a href="#10-7-利用z变换分析与表征线性时不变系统" class="headerlink" title="10.7 利用z变换分析与表征线性时不变系统"></a>10.7 利用z变换分析与表征线性时不变系统</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211228093246260.png" alt="image-20211228093246260"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204204723.png" alt="image-20211230204204723"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204215018.png" alt="image-20211230204215018"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204224534.png" alt="image-20211230204224534"></p><h2 id="10-8-系统函数的代数属性与方框图表示"><a href="#10-8-系统函数的代数属性与方框图表示" class="headerlink" title="10.8 系统函数的代数属性与方框图表示"></a>10.8 系统函数的代数属性与方框图表示</h2><h2 id="10-9-单边z变换"><a href="#10-9-单边z变换" class="headerlink" title="10.9 单边z变换"></a>10.9 单边z变换</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204236350.png" alt="image-20211230204236350"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204250144.png" alt="image-20211230204250144"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/signalsystem/image-20211230204256194.png" alt="image-20211230204256194"></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电磁场与电磁波</title>
    <link href="/blog/post/Knowledge/ElectromagneticFieldsAndElectromagneticWaves/"/>
    <url>/blog/post/Knowledge/ElectromagneticFieldsAndElectromagneticWaves/</url>
    
    <content type="html"><![CDATA[<p>电磁场与电磁波，这门课有点难，难就难在太多公式了！<br>前半部分是电磁场部分，与大学物理所学的东西有很多重合的地方，因此老师在讲课的时候，回默认大家的大学物理电磁场学的很好，我的大学物理学的并不好，因此电磁场部分学的很吃力，很多知识点都听不太懂，记不住！<br>后半部分是电磁场部分，知识点不多，记住基本的条件下的电磁波就能理解特殊的条件下的电磁场吧，这一部分问题也是公式太多了，特别是引入的复矢量，对定义的理解一下子就难了起来了！<br>这门课要想学好，得刷题，记忆公式！</p><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/%E7%94%B5%E7%A3%81%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%87%8F.png" alt="电磁学中的基本量"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/1.%20%E7%BB%AA%E8%AE%BA.png" alt="1. 绪论"></p><h1 id="第一章-矢量分析"><a href="#第一章-矢量分析" class="headerlink" title="第一章 矢量分析"></a>第一章 矢量分析</h1><h2 id="矢量加减法"><a href="#矢量加减法" class="headerlink" title="矢量加减法"></a>矢量加减法</h2><hr><hr><h2 id="矢量乘法"><a href="#矢量乘法" class="headerlink" title="矢量乘法"></a>矢量乘法</h2><p>1标量与矢量的乘积</p><ul><li>结果为矢量</li></ul><p>2矢量与矢量的标量积（点乘）</p><ul><li>结果为标量</li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211007180447503.png"></li></ul><p>3矢量与矢量的矢量积（叉乘）</p><ul><li>结果为矢量</li><li>结果矢量的方向满足右手螺旋定则</li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211007181904006.png"></li></ul><p>4三矢量的乘积</p><ul><li><strong>标量三重积</strong></li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211007181919281.png"></li><li><strong>矢量三重积</strong></li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211007181936604.png"></li></ul><hr><hr><h2 id="正交坐标系"><a href="#正交坐标系" class="headerlink" title="正交坐标系"></a>正交坐标系</h2><h3 id="直角坐标系"><a href="#直角坐标系" class="headerlink" title="直角坐标系"></a>直角坐标系</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023202905518.png"></p><h3 id="圆柱坐标系"><a href="#圆柱坐标系" class="headerlink" title="圆柱坐标系"></a>圆柱坐标系</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/zhuzuobiao.jpg"></p><h3 id="球坐标系"><a href="#球坐标系" class="headerlink" title="球坐标系"></a>球坐标系</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/qiuzuobiao.jpg"></p><h3 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028173800846.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023203518366.png"></p><hr><hr><h2 id="矢量分析的数学基础"><a href="#矢量分析的数学基础" class="headerlink" title="矢量分析的数学基础"></a>矢量分析的数学基础</h2><p>矢量场的散度唯一地确定场中任一点的通量源强度； </p><p>场的旋度唯一地确定场中任一点的旋涡源强度.</p><p>从分量式上可以看出，散度取决于场分量的纵向变化率， </p><p>而旋度取决于场的横向变化率； </p><p>因而，散度和旋度完整地描述了场的分布特性。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">• 梯度、散度或旋度都是微分运算，它们表示场在某点附近 的变化特性，场中各点的梯度、散度或旋度可能不同。<br><br> • 梯度、散度及旋度描述的是场的点特性或称为微分特性。<br><br> • 函数的连续性是可微的必要条件。因此在场量发生不连续 处，也就不存在前面定义的梯度、散度或旋度。<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/2.%20%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80.png" alt="2. 数学基础"></p><hr><hr><h2 id="标量场的等值面"><a href="#标量场的等值面" class="headerlink" title="标量场的等值面"></a>标量场的等值面</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028203344951.png"></p><hr><hr><h2 id="§1-0-哈密顿算子"><a href="#§1-0-哈密顿算子" class="headerlink" title="§1.0 哈密顿算子"></a>§1.0 哈密顿算子</h2><h3 id="哈密顿算子定义"><a href="#哈密顿算子定义" class="headerlink" title="哈密顿算子定义"></a>哈密顿算子定义</h3><p>性质：矢量性&#x2F;微分性</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023205250358.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20220108085839928.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20220108085903045.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20220108090051818.png"></p><h3 id="三种坐标系下散度计算公式"><a href="#三种坐标系下散度计算公式" class="headerlink" title="三种坐标系下散度计算公式"></a>三种坐标系下散度计算公式</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023205336204.png"></p><h3 id="三种坐标系下旋度计算公式"><a href="#三种坐标系下旋度计算公式" class="headerlink" title="三种坐标系下旋度计算公式"></a>三种坐标系下旋度计算公式</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023205512112.png"></p><h3 id="含两点间距离的微分关系式"><a href="#含两点间距离的微分关系式" class="headerlink" title="含两点间距离的微分关系式"></a>含两点间距离的微分关系式</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028212351539.png"></p><hr><hr><h2 id="§1-1-方向导数与梯度"><a href="#§1-1-方向导数与梯度" class="headerlink" title="§1.1 方向导数与梯度"></a>§1.1 方向导数与梯度</h2><h3 id="方向导数定义—标量"><a href="#方向导数定义—标量" class="headerlink" title="方向导数定义—标量"></a>方向导数定义—标量</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028203417644.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028203445399.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028181825761.png"></p><h3 id="梯度定义—矢量"><a href="#梯度定义—矢量" class="headerlink" title="梯度定义—矢量"></a>梯度定义—矢量</h3><p>标量场中某点梯度的大小为该点最大的方向导数， 其方向为该点所在等值面的法线方向。</p><p>梯度的方向就是等值面的法线方向</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028204042059.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028181920349.png"></p><h3 id="梯度的运算规则"><a href="#梯度的运算规则" class="headerlink" title="梯度的运算规则"></a>梯度的运算规则</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028204143782.png"></p><hr><hr><h2 id="§1-2-通量与散度"><a href="#§1-2-通量与散度" class="headerlink" title="§1.2 通量与散度"></a>§1.2 通量与散度</h2><p>矢线（场线）：在矢量场中，若一条曲线上每一点的切线方向与 场矢量在该点的方向重合，则该曲线称为矢线。</p><h3 id="通量定义—标量"><a href="#通量定义—标量" class="headerlink" title="通量定义—标量"></a>通量定义—标量</h3><p>通量：如果在该矢量场中取一曲面S， 通过该曲面的矢线量称为通量。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023204050022.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023204513566.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023204547206.png"></p><h3 id="散度定义—标量"><a href="#散度定义—标量" class="headerlink" title="散度定义—标量"></a>散度定义—标量</h3><p>通量反映了封闭面中源的总特性，但没有反映源的分布特性; 若要进一步描述源的分布特性，则要引入散度;</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023204942460.png"></p><h3 id="用哈密顿算子表示散度"><a href="#用哈密顿算子表示散度" class="headerlink" title="用哈密顿算子表示散度"></a>用哈密顿算子表示散度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028171628316.png"></p><h3 id="散度的物理意义"><a href="#散度的物理意义" class="headerlink" title="散度的物理意义"></a>散度的物理意义</h3><p>散度是 矢量A 通过某点处单位体积的通量 （通量体密度）； </p><p>它反映了 矢量A 在该点的通量源强度；</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/astronomy/image-20211023205204811.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211023205157973.png"></p><h3 id="散度的运算规则"><a href="#散度的运算规则" class="headerlink" title="散度的运算规则"></a>散度的运算规则</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028170359525.png"></p><h3 id="散度定理"><a href="#散度定理" class="headerlink" title="散度定理"></a>散度定理</h3><p>矢量场的散度代表其通量的体密度,因此从散度的定义出 发，散度的体积分等于穿过包围该体积封闭面的总通量</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028170424728.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028170446797.png"></p><hr><hr><h2 id="§1-3-环量与旋度"><a href="#§1-3-环量与旋度" class="headerlink" title="§1.3 环量与旋度"></a>§1.3 环量与旋度</h2><p>不是所有的矢量场都由通量源激发。存在另一类不同于通量源的矢量源，它所激发的<strong>矢量场的力线是闭合</strong>的，<strong>它对于任何闭合曲面的通量为零</strong>。但在<strong>场所定义的空间中闭合路径的积分不为零</strong>。</p><h3 id="环量定义—标量"><a href="#环量定义—标量" class="headerlink" title="环量定义—标量"></a>环量定义—标量</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028182520858.png"></p><h3 id="环量密度—标量"><a href="#环量密度—标量" class="headerlink" title="环量密度—标量"></a>环量密度—标量</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028183020351.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028195932542.png"></p><h3 id="旋度定义—矢量"><a href="#旋度定义—矢量" class="headerlink" title="旋度定义—矢量"></a>旋度定义—矢量</h3><p>矢量场的环流给出了矢量场与积分回路所围曲面内旋涡源 宏观联系。 </p><p>为了给出空间任意点矢量场与旋涡源的关系，引入 矢量场的旋度。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028200117309.png"></p><h3 id="旋度的物理意义"><a href="#旋度的物理意义" class="headerlink" title="旋度的物理意义"></a>旋度的物理意义</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028200211651.png"></p><h3 id="旋度的计算式"><a href="#旋度的计算式" class="headerlink" title="旋度的计算式"></a>旋度的计算式</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028200346789.png"></p><h3 id="哈密顿算子表示旋度"><a href="#哈密顿算子表示旋度" class="headerlink" title="哈密顿算子表示旋度"></a>哈密顿算子表示旋度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028200406863.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028200421254.png"></p><h3 id="旋度的运算规则"><a href="#旋度的运算规则" class="headerlink" title="旋度的运算规则"></a>旋度的运算规则</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028200500907.png"></p><h3 id="静电场的是无旋场"><a href="#静电场的是无旋场" class="headerlink" title="静电场的是无旋场"></a>静电场的是无旋场</h3><p>静止点电荷产生的电场的旋度为0</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028201737832.png"></p><hr><hr><h2 id="§1-4-斯托克斯定理"><a href="#§1-4-斯托克斯定理" class="headerlink" title="§1.4 斯托克斯定理"></a>§1.4 斯托克斯定理</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028201425556.png"></p><h3 id="物理意义"><a href="#物理意义" class="headerlink" title="物理意义"></a>物理意义</h3><p>一个矢量场旋度的面积分等于该矢量沿此曲面周界的曲 线积分。</p><p>斯托克斯定理是闭合曲线积分与曲面积分之间的一个 变换关系式，在电磁理论中也有广泛的应用。</p><hr><hr><h2 id="§1-5-Green定理"><a href="#§1-5-Green定理" class="headerlink" title="§1.5 Green定理"></a>§1.5 Green定理</h2><h3 id="两大定理"><a href="#两大定理" class="headerlink" title="两大定理"></a>两大定理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028204300698.png"></p><h3 id="Green定理的应用"><a href="#Green定理的应用" class="headerlink" title="Green定理的应用"></a>Green定理的应用</h3><ul><li><p>将体积V中场的求解问题变换为边界S上场的求解问题。</p></li><li><p>已知其中一个场的分布，就可以用Green定理求解另一 场的分布特性。</p></li></ul><hr><hr><h2 id="§1-6-场论重要公式"><a href="#§1-6-场论重要公式" class="headerlink" title="§1.6 场论重要公式"></a>§1.6 场论重要公式</h2><h3 id="两个重要恒等式"><a href="#两个重要恒等式" class="headerlink" title="两个重要恒等式"></a>两个重要恒等式</h3><p>梯无旋</p><p>旋无散</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028204937243.png"></p><h3 id="三个坐标系下的拉普拉斯算子"><a href="#三个坐标系下的拉普拉斯算子" class="headerlink" title="三个坐标系下的拉普拉斯算子"></a>三个坐标系下的拉普拉斯算子</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028205000150.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028212501433.png"></p><h3 id="常用的矢量恒等式"><a href="#常用的矢量恒等式" class="headerlink" title="常用的矢量恒等式"></a>常用的矢量恒等式</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028205027039.png"></p><hr><hr><h2 id="§1-7-亥姆霍兹定理"><a href="#§1-7-亥姆霍兹定理" class="headerlink" title="§1.7 亥姆霍兹定理"></a>§1.7 亥姆霍兹定理</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028210149509.png"></p><h3 id="矢量场的惟一性定理"><a href="#矢量场的惟一性定理" class="headerlink" title="矢量场的惟一性定理"></a>矢量场的惟一性定理</h3><p>位于某一区域中的矢量场，当其散度、旋度以及边界 上场量的切向分量或法向分量给定后，则该区域中的矢 量场被惟一地确定。</p><p>已知散度和旋度代表产生矢量场的源，可见惟一性定 理表明，矢量场被其源及边界条件共同决定的。</p><hr><hr><h2 id="§1-8-矢量场按源分类"><a href="#§1-8-矢量场按源分类" class="headerlink" title="§1.8 矢量场按源分类"></a>§1.8 矢量场按源分类</h2><h3 id="无旋场"><a href="#无旋场" class="headerlink" title="无旋场"></a>无旋场</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028210518584.png"></p><h3 id="无散场"><a href="#无散场" class="headerlink" title="无散场"></a>无散场</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028210533779.png"></p><h3 id="无旋，无散场"><a href="#无旋，无散场" class="headerlink" title="无旋，无散场"></a>无旋，无散场</h3><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028210543512.png" alt="" style="zoom:200%;" /><h3 id="有旋，有散场"><a href="#有旋，有散场" class="headerlink" title="有旋，有散场"></a>有旋，有散场</h3><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028210550203.png" alt=""  /><hr><hr><hr><hr><hr><h1 id="第二章-电磁场基本方程"><a href="#第二章-电磁场基本方程" class="headerlink" title="第二章 电磁场基本方程"></a>第二章 电磁场基本方程</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">0</span> 电荷、电流、电荷守恒定律<br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span> 静态电磁场的基本定律<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span> 法拉第电磁感应定律和全电流定律<br><span class="hljs-attribute">2</span>.<span class="hljs-number">3</span> Maxwell方程组<br><span class="hljs-attribute">2</span>.<span class="hljs-number">4</span> 电磁场的边界条件<br><span class="hljs-attribute">2</span>.<span class="hljs-number">5</span> 坡印廷定理和坡印廷矢量<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211028212835449.png"></p><hr><hr><h2 id="§2-0-电荷、电流，电荷守恒定理"><a href="#§2-0-电荷、电流，电荷守恒定理" class="headerlink" title="§2.0 电荷、电流，电荷守恒定理"></a>§2.0 电荷、电流，电荷守恒定理</h2><p>电荷是产生电场的源</p><p>电流是产生磁场的源</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/%E7%94%B5%E8%8D%B7%E4%B8%8E%E7%94%B5%E6%B5%81.png" alt="电荷与电流"></p><hr><hr><hr><hr><h2 id="§2-1-静态电磁场的基本定律和基本场矢量"><a href="#§2-1-静态电磁场的基本定律和基本场矢量" class="headerlink" title="§2.1 静态电磁场的基本定律和基本场矢量"></a>§2.1 静态电磁场的基本定律和基本场矢量</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">• 库仑定律</span><span class="hljs-literal">-----</span> <span class="hljs-comment">电场强度</span><br><span class="hljs-comment">• 高斯定理</span><span class="hljs-literal">------</span><span class="hljs-comment">电通密度</span><br><span class="hljs-comment">• 比奥—沙伐定律</span><span class="hljs-literal">-------</span><span class="hljs-comment">磁通密度</span><br><span class="hljs-comment">• 磁通连续性原理</span><span class="hljs-literal">-----</span><span class="hljs-comment">安培环路定律</span><span class="hljs-literal">-----</span><span class="hljs-comment">磁场强度</span><br></code></pre></td></tr></table></figure><h3 id="库伦定律"><a href="#库伦定律" class="headerlink" title="库伦定律"></a>库伦定律</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211029201951045.png"></p><hr><h3 id="电场强度"><a href="#电场强度" class="headerlink" title="电场强度"></a>电场强度</h3><p>源点：场源所在位置</p><p>场点：场中任意空间位置</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211029203002866.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/%E7%94%B5%E5%9C%BA%E7%B1%BB%E5%9E%8B.png" alt="电场类型"></p><hr><h3 id="真空中的高斯定理"><a href="#真空中的高斯定理" class="headerlink" title="真空中的高斯定理"></a>真空中的高斯定理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211029210112164.png"></p><hr><h3 id="电场强度的散度"><a href="#电场强度的散度" class="headerlink" title="电场强度的散度"></a>电场强度的散度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211029210550383.png"></p><hr><h3 id="电通密度"><a href="#电通密度" class="headerlink" title="电通密度"></a>电通密度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211029211320280.png"></p><hr><h3 id="介质中的高斯定理"><a href="#介质中的高斯定理" class="headerlink" title="介质中的高斯定理"></a>介质中的高斯定理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211029211333436.png"></p><hr><h3 id="电通密度的散度"><a href="#电通密度的散度" class="headerlink" title="电通密度的散度"></a>电通密度的散度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211029211430652.png"></p><hr><h3 id="静电场常见问题"><a href="#静电场常见问题" class="headerlink" title="静电场常见问题"></a>静电场常见问题</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/%E9%9D%99%E7%94%B5%E5%9C%BA%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.png" alt="静电场的常见问题"></p><hr><h3 id="安培力定律"><a href="#安培力定律" class="headerlink" title="安培力定律"></a>安培力定律</h3><p>电流相互作用 力公式，称为安培力定律</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030145923231.png"></p><hr><h3 id="毕奥萨法尔定律"><a href="#毕奥萨法尔定律" class="headerlink" title="毕奥萨法尔定律"></a>毕奥萨法尔定律</h3><p>电流在其周围空间中产生磁场，描述磁场分布的基本物理量是<strong>磁通密度 B（矢量）</strong> ，单位为T（特斯拉）。</p><p>磁场的重要特征是对场中的电流磁场力作用，载流回路C_1对载流回路 C_2 的作用力是回路 C_1中的电流 I_1产生的磁场对回路 C_2中的电流 I_2的作用力。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030152339567.png"></p><hr><h3 id="磁感应强度-磁通密度"><a href="#磁感应强度-磁通密度" class="headerlink" title="磁感应强度&#x2F;磁通密度"></a>磁感应强度&#x2F;磁通密度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/%E7%A3%81%E9%80%9A%E5%AF%86%E5%BA%A6.png" alt="磁通密度"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/%E5%87%A0%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%94%B5%E6%B5%81%E5%88%86%E5%B8%83%E7%9A%84%E7%A3%81%E6%84%9F%E5%BA%94%E5%BC%BA%E5%BA%A6.png" alt="几种典型电流分布的磁感应强度"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030153647451.png"></p><hr><h3 id="磁通连续性原理"><a href="#磁通连续性原理" class="headerlink" title="磁通连续性原理"></a>磁通连续性原理</h3><p>因为自然界中并不存在任何单独的磁荷, 磁力线总是闭合的。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030154251192.png"></p><hr><h3 id="磁场强度"><a href="#磁场强度" class="headerlink" title="磁场强度"></a>磁场强度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030160220426.png"></p><hr><h3 id="安培环路定理"><a href="#安培环路定理" class="headerlink" title="安培环路定理"></a>安培环路定理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030160532859.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030160241874.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030161653036.png"></p><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030162224008.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030162852776.png"></p><hr><hr><h2 id="§2-2-法拉第电磁感应定律和全电流定律"><a href="#§2-2-法拉第电磁感应定律和全电流定律" class="headerlink" title="§2.2 法拉第电磁感应定律和全电流定律"></a>§2.2 法拉第电磁感应定律和全电流定律</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">• 电磁感应定律 —— 揭示时变磁场产生电场<br>• 位移电流 —— 揭示时变电场产生磁场<br>• 重要结论： 在时变情况下，电场与磁场相互激励，形成统一的电磁场。<br><br>2.2.1 电磁感应定律<br>2.2.2 位移电流和全电流定律<br>2.2.3 全电流连续性原理<br></code></pre></td></tr></table></figure><h3 id="法拉第电磁感定律"><a href="#法拉第电磁感定律" class="headerlink" title="法拉第电磁感定律"></a>法拉第电磁感定律</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030163915813.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030164322868.png"></p><h4 id="引起回路中磁通变化的几种情况"><a href="#引起回路中磁通变化的几种情况" class="headerlink" title="引起回路中磁通变化的几种情况"></a>引起回路中磁通变化的几种情况</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/%E5%BC%95%E8%B5%B7%E5%9B%9E%E8%B7%AF%E4%B8%AD%E7%A3%81%E9%80%9A%E5%8F%98%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5.png" alt="引起回路中磁通变化的几种情况"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030165732168.png"></p><h3 id="位移电流于位移电流密度"><a href="#位移电流于位移电流密度" class="headerlink" title="位移电流于位移电流密度"></a>位移电流于位移电流密度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030170152296.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030170517881.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030170555953.png"></p><h3 id="全电流连续性原理"><a href="#全电流连续性原理" class="headerlink" title="全电流连续性原理"></a>全电流连续性原理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030170816398.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030170858420.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030171135109.png"></p><h4 id="传导电流与位移电流对比"><a href="#传导电流与位移电流对比" class="headerlink" title="传导电流与位移电流对比"></a>传导电流与位移电流对比</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030171617563.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030171628679.png"></p><hr><hr><h2 id="§2-3-麦克斯韦方程组⭐"><a href="#§2-3-麦克斯韦方程组⭐" class="headerlink" title="§2.3 麦克斯韦方程组⭐"></a>§2.3 麦克斯韦方程组⭐</h2><p><a href="https://zhuanlan.zhihu.com/p/123835582">麦克斯韦方程组 - 知乎 (zhihu.com)</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021195815000.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030172530102.png"></p><p>全电流定律：磁场强度沿任意闭合曲线的环量，等于穿过以闭合曲线为周界的任意曲面的传导电流和位移电流之和；</p><p>电磁感应定律：电场强度沿任意闭合曲线的环量，等于穿过以闭合曲线为边界的任意曲面磁通量变化率的负值；</p><p>磁通连续性原理：穿过任意闭合曲面的磁感应强度的通量为0；</p><p>高斯定理：穿过任意闭合曲面的电位移的通量等于该闭合曲面所包围的自由电荷的代数和；</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030203138077.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030203149283.png"></p><ul><li>时变电场的激发源除了电荷以外，还有变化的磁场；而时变 磁场的激发源除了传导电流以外，还有变化的电场。电场和 磁场互为激发源，相互激发。</li><li>时变电磁场的电场和磁场不再相互独立，而是相互关联， 构成一个整体 —— 电磁场。电场和磁场分别是电磁场的两 个分量。</li><li>在离开辐射源（如天线）的无源空间中，电荷密度和电流密 度矢量为零，电场和磁场仍然可以相互激发，从而在空间形 成电磁振荡并传播，这就是电磁波。</li></ul><h3 id="本构关系"><a href="#本构关系" class="headerlink" title="本构关系"></a>本构关系</h3><p>在有介质存在时，电场强度矢量和磁感应强度矢量 都与介质的特性有关，因此上述麦克斯韦方程组是不完 备的，还需要再补充描述介质性质的方程：</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030172809099.png"></p><h3 id="波动方程"><a href="#波动方程" class="headerlink" title="波动方程"></a>波动方程</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030173008632.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030173020672.png"></p><h3 id="电磁场的位函数——洛伦兹规范"><a href="#电磁场的位函数——洛伦兹规范" class="headerlink" title="电磁场的位函数——洛伦兹规范"></a>电磁场的位函数——洛伦兹规范</h3><h4 id="矢量位函数"><a href="#矢量位函数" class="headerlink" title="矢量位函数"></a>矢量位函数</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030175539599.png"></p><h4 id="标量位函数"><a href="#标量位函数" class="headerlink" title="标量位函数"></a>标量位函数</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030175601661.png"></p><h4 id="位函数的非齐次波动方程"><a href="#位函数的非齐次波动方程" class="headerlink" title="位函数的非齐次波动方程"></a>位函数的非齐次波动方程</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030203546162.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030203614589.png"></p><h3 id="泊松方程"><a href="#泊松方程" class="headerlink" title="泊松方程"></a>泊松方程</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030202824868.png"></p><h2 id="§2-4-电磁场的边界条件"><a href="#§2-4-电磁场的边界条件" class="headerlink" title="§2.4 电磁场的边界条件"></a>§2.4 电磁场的边界条件</h2><p>• 不同媒质的介电常数ε、磁导率μ、电导率σ不同，在分界面两侧的媒质参数有突变。 </p><p>• 边界上Maxwell方程组的微分失去意义 </p><p>• 从<strong>积分形式的Maxwell方程组</strong>出发推导边界两侧电磁场间的关系。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span> 边界条件的一般表达式<br><span class="hljs-attribute">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">2</span> 两种常见的情况<br></code></pre></td></tr></table></figure><h3 id="边界条件的一般表达式"><a href="#边界条件的一般表达式" class="headerlink" title="边界条件的一般表达式"></a>边界条件的一般表达式</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030204118539.png"></p><hr><h3 id="电场和磁场切向和法向边界条件"><a href="#电场和磁场切向和法向边界条件" class="headerlink" title="电场和磁场切向和法向边界条件"></a>电场和磁场切向和法向边界条件</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030204719454.png"></p><h3 id="常见情形"><a href="#常见情形" class="headerlink" title="常见情形"></a>常见情形</h3><h4 id="两种理想介质间的边界条件"><a href="#两种理想介质间的边界条件" class="headerlink" title="两种理想介质间的边界条件"></a>两种理想介质间的边界条件</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030205315843.png"></p><hr><h4 id="理想介质与理想导体间的边界条件"><a href="#理想介质与理想导体间的边界条件" class="headerlink" title="理想介质与理想导体间的边界条件"></a>理想介质与理想导体间的边界条件</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030205326976.png"></p><hr><hr><h2 id="§2-5-坡印廷定理和坡印廷矢量"><a href="#§2-5-坡印廷定理和坡印廷矢量" class="headerlink" title="§2.5 坡印廷定理和坡印廷矢量"></a>§2.5 坡印廷定理和坡印廷矢量</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">⚫电磁场是具有能量的<span class="hljs-comment">;</span><br>⚫时变电磁场中的能量守恒定律——坡印廷定理；<br>⚫坡印廷矢量是描述电磁场能量流动的物理量。<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030210217078.png"></p><h3 id="坡印廷定理—-表征电磁能量守恒关系的定理"><a href="#坡印廷定理—-表征电磁能量守恒关系的定理" class="headerlink" title="坡印廷定理—-表征电磁能量守恒关系的定理"></a>坡印廷定理—-表征电磁能量守恒关系的定理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030210740593.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030210751298.png"></p><h3 id="坡印廷矢量（电磁能流密度矢量）"><a href="#坡印廷矢量（电磁能流密度矢量）" class="headerlink" title="坡印廷矢量（电磁能流密度矢量）"></a>坡印廷矢量（电磁能流密度矢量）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030211046910.png"></p><h3 id="场与路的一些对应关系"><a href="#场与路的一些对应关系" class="headerlink" title="场与路的一些对应关系"></a>场与路的一些对应关系</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030211132873.png"></p><h2 id="§2-6-惟一性定理"><a href="#§2-6-惟一性定理" class="headerlink" title="§2.6 惟一性定理"></a>§2.6 惟一性定理</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030211431129.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211030211506117.png"></p><h1 id="第三章-静电场及其边值问题的解法"><a href="#第三章-静电场及其边值问题的解法" class="headerlink" title="第三章 静电场及其边值问题的解法"></a>第三章 静电场及其边值问题的解法</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211107170419954.png"></p><p>静态场中的电场和磁场是彼此独立存在的。</p><p>静电场：第三章</p><p>恒定电场：第四章</p><p>恒定磁场：第四章</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113170525779.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">一、静电场基本方程与电位方程<br>二、静电场中的介质<br>三、 静电场中的导体和电容<br>四．静电场的边界条件<br>五．静电场边值问题，惟一性定理<br>六、镜像法<br>七、分离变量法<br></code></pre></td></tr></table></figure><h2 id="§3-1-静电场基本方程与电位方程"><a href="#§3-1-静电场基本方程与电位方程" class="headerlink" title="§3.1 静电场基本方程与电位方程"></a>§3.1 静电场基本方程与电位方程</h2><h3 id="静电场的麦克斯韦方程组"><a href="#静电场的麦克斯韦方程组" class="headerlink" title="静电场的麦克斯韦方程组"></a>静电场的麦克斯韦方程组</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211107172617518.png"></p><h3 id="静电场的无旋性"><a href="#静电场的无旋性" class="headerlink" title="静电场的无旋性"></a>静电场的无旋性</h3><p>静电场中电场力作的功与路径无关, 只取决于始点和终点的位置； </p><p>静电场是保守场, 也称位场；</p><h3 id="电位"><a href="#电位" class="headerlink" title="电位"></a>电位</h3><h4 id="电位参考点"><a href="#电位参考点" class="headerlink" title="电位参考点"></a>电位参考点</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211107173457448.png"></p><h4 id="四种分布的电位表达式"><a href="#四种分布的电位表达式" class="headerlink" title="四种分布的电位表达式"></a>四种分布的电位表达式</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211107173552128.png"></p><h4 id="电位差U"><a href="#电位差U" class="headerlink" title="电位差U"></a>电位差U</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211107173829189.png"></p><h3 id="电位方程——泊松方程与拉普拉斯方程"><a href="#电位方程——泊松方程与拉普拉斯方程" class="headerlink" title="电位方程——泊松方程与拉普拉斯方程"></a>电位方程——泊松方程与拉普拉斯方程</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211107174134725.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112100207352.png"></p><h3 id="电位的计算"><a href="#电位的计算" class="headerlink" title="电位的计算"></a>电位的计算</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/%E7%94%B5%E4%BD%8D%E7%9A%84%E8%AE%A1%E7%AE%97.png" alt="电位的计算"></p><h2 id="§3-2-静电场中的介质"><a href="#§3-2-静电场中的介质" class="headerlink" title="§3.2 静电场中的介质"></a>§3.2 静电场中的介质</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112103145712.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112103211475.png"></p><h3 id="介质极化"><a href="#介质极化" class="headerlink" title="介质极化"></a>介质极化</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112103559654.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112104054538.png"></p><h3 id="极化强度"><a href="#极化强度" class="headerlink" title="极化强度"></a>极化强度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112104214020.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112104258553.png"></p><p>这类介质的极化强度与合成的电场强度的方向相同。 极化强度的某一坐标分量仅决定于相应的电场强度的坐标分量。 极化率与电场方向无关，这类介质称为各向同性介质。</p><p>介质的极化率与电场强度的方向有关，也就是极化特性与 电场强度方向有关，因此，这类介质称为各向异性介质。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112104453482.png"></p><h3 id="极化强度矢量与束缚电荷密度"><a href="#极化强度矢量与束缚电荷密度" class="headerlink" title="极化强度矢量与束缚电荷密度"></a>极化强度矢量与束缚电荷密度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112104629429.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112104639931.png"></p><h3 id="高斯通量定理"><a href="#高斯通量定理" class="headerlink" title="高斯通量定理"></a>高斯通量定理</h3><h4 id="真空高斯定理"><a href="#真空高斯定理" class="headerlink" title="真空高斯定理"></a>真空高斯定理</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112104923072.png"></p><h4 id="介质高斯定理"><a href="#介质高斯定理" class="headerlink" title="介质高斯定理"></a>介质高斯定理</h4><p>介质中的电通量密度（电位移矢量）的定义！！！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112110304501.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112105108812.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112105122040.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112105134211.png"></p><h3 id="介质中高斯定理的应用"><a href="#介质中高斯定理的应用" class="headerlink" title="介质中高斯定理的应用"></a>介质中高斯定理的应用</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112110544257.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112110646088.png"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><h4 id="电磁场的基本方程与本构关系"><a href="#电磁场的基本方程与本构关系" class="headerlink" title="电磁场的基本方程与本构关系"></a>电磁场的基本方程与本构关系</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112163315649.png"></p><h4 id="场量"><a href="#场量" class="headerlink" title="场量"></a>场量</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112163450964.png"></p><h4 id="静电场中的两类基本问题"><a href="#静电场中的两类基本问题" class="headerlink" title="静电场中的两类基本问题"></a>静电场中的两类基本问题</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112163705776.png"></p><h2 id="§3-3-静电场中的导体和电容"><a href="#§3-3-静电场中的导体和电容" class="headerlink" title="§3.3 静电场中的导体和电容"></a>§3.3 静电场中的导体和电容</h2><h3 id="静电场中的导体——静电平衡"><a href="#静电场中的导体——静电平衡" class="headerlink" title="静电场中的导体——静电平衡"></a>静电场中的导体——静电平衡</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112163911302.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112164726977.png"></p><h3 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h3><p>电容的决定式</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112165447551.png"></p><p>电容的定义式：C&#x3D;Q&#x2F;U</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112164819718.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112201919317.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112201935602.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112201950267.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">电容是导体系统的一种基本属性，<br>是描述导体系统 储存电荷能力的物理量。<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112171426848.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">孤立导体的电容<br>双导体的电容<br>多导体系统的分布电容<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112170910999.png"></p><h3 id="电容计算的两种方法"><a href="#电容计算的两种方法" class="headerlink" title="电容计算的两种方法"></a>电容计算的两种方法</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112171726394.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112200551760.png"></p><h2 id="§3-4-静电场的边界条件"><a href="#§3-4-静电场的边界条件" class="headerlink" title="§3.4 静电场的边界条件"></a>§3.4 静电场的边界条件</h2><p><em><strong>转2.4 电磁场的边界条件</strong></em></p><h3 id="场量的边界条件"><a href="#场量的边界条件" class="headerlink" title="场量的边界条件"></a>场量的边界条件</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112202341412.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112202624939.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112203107180.png"></p><h3 id="两种特殊的电场边界条件"><a href="#两种特殊的电场边界条件" class="headerlink" title="两种特殊的电场边界条件"></a>两种特殊的电场边界条件</h3><h4 id="介质与导体间边界条件"><a href="#介质与导体间边界条件" class="headerlink" title="介质与导体间边界条件"></a>介质与导体间边界条件</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113105328107.png"></p><h4 id="两种介质间边界条件"><a href="#两种介质间边界条件" class="headerlink" title="两种介质间边界条件"></a>两种介质间边界条件</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113110205940.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113110221050.png"></p><h3 id="电位φ满足的边界条件"><a href="#电位φ满足的边界条件" class="headerlink" title="电位φ满足的边界条件"></a>电位φ满足的边界条件</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113110342034.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113112201207.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113114435906.png"></p><h4 id="介质与导体间的电位边界条件"><a href="#介质与导体间的电位边界条件" class="headerlink" title="介质与导体间的电位边界条件"></a>介质与导体间的电位边界条件</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113114455038.png"></p><h4 id="介质与介质之间的电位边界条件"><a href="#介质与介质之间的电位边界条件" class="headerlink" title="介质与介质之间的电位边界条件"></a>介质与介质之间的电位边界条件</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113114512292.png"></p><p><strong>边界条件的重要性</strong> 1. 构成边值问题必不可少的条件; 2. 判断不同媒质界面两侧场量的大小、方向及连续、突变</p><h2 id="§3-5-静电场边值问题，惟一性定理"><a href="#§3-5-静电场边值问题，惟一性定理" class="headerlink" title="§3.5 静电场边值问题，惟一性定理"></a>§3.5 静电场边值问题，惟一性定理</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">一、静电场基本方程与电位方程<br>二、静电场中的介质<br>三、 静电场中的导体和电容<br>四．静电场的边界条件<br>五．静电场边值问题，惟一性定理<br>六．镜像法<br>七．分离变量法<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112212015897.png"></p><h3 id="静电场边值问题及其分类"><a href="#静电场边值问题及其分类" class="headerlink" title="静电场边值问题及其分类"></a>静电场边值问题及其分类</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112212210823.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112212222736.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112212238340.png"></p><h3 id="边值问题的解法"><a href="#边值问题的解法" class="headerlink" title="边值问题的解法"></a>边值问题的解法</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112212648119.png"></p><h3 id="唯一性定理"><a href="#唯一性定理" class="headerlink" title="唯一性定理"></a>唯一性定理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211112212715704.png"></p><h2 id="§3-6-镜像法"><a href="#§3-6-镜像法" class="headerlink" title="§3.6 镜像法"></a>§3.6 镜像法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">一．镜像法的基本原理<br>二．接地导体平面的镜像<br>三．点电荷对无限大介质平面的镜像<br>四．导体球面的镜像<br>五．导体圆柱面的镜像<br>六．线电流对无限大磁介质平面的镜像<br></code></pre></td></tr></table></figure><h3 id="镜像法的基本原理"><a href="#镜像法的基本原理" class="headerlink" title="镜像法的基本原理"></a>镜像法的基本原理</h3><p>非均匀感应电荷产生的电位很难求 解，可以用等效电荷的电位替代</p><p>所谓镜像法是将不均匀电荷分布的作用等效为点电荷 或线电荷的作用。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113100843410.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113101023703.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113101905218.png"></p><h3 id="接地导体平面的镜像"><a href="#接地导体平面的镜像" class="headerlink" title="接地导体平面的镜像"></a>接地导体平面的镜像</h3><h4 id="点电荷对无限大接地导体平面的镜像"><a href="#点电荷对无限大接地导体平面的镜像" class="headerlink" title="点电荷对无限大接地导体平面的镜像"></a>点电荷对无限大接地导体平面的镜像</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113102506367.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113103240360.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113103545553.png"></p><h4 id="线电荷对无限大接地导体平面的镜像"><a href="#线电荷对无限大接地导体平面的镜像" class="headerlink" title="线电荷对无限大接地导体平面的镜像"></a>线电荷对无限大接地导体平面的镜像</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113143947632.png"></p><h4 id="点电荷对半无限大接地导体角域-导体劈-的镜像"><a href="#点电荷对半无限大接地导体角域-导体劈-的镜像" class="headerlink" title="点电荷对半无限大接地导体角域 (导体劈) 的镜像"></a>点电荷对半无限大接地导体角域 (导体劈) 的镜像</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113144054432.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113144136141.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113144211584.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113144302950.png"></p><h3 id="点电荷对无限大介质平面的镜像"><a href="#点电荷对无限大介质平面的镜像" class="headerlink" title="点电荷对无限大介质平面的镜像"></a>点电荷对无限大介质平面的镜像</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113150130026.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113150312323.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113150344780.png"></p><h3 id="导体球面的镜像"><a href="#导体球面的镜像" class="headerlink" title="导体球面的镜像"></a>导体球面的镜像</h3><h4 id="接地导体球"><a href="#接地导体球" class="headerlink" title="接地导体球"></a>接地导体球</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113155100047.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113155256649.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113151757430.png"></p><h4 id="导体球不接地、不带电荷"><a href="#导体球不接地、不带电荷" class="headerlink" title="导体球不接地、不带电荷"></a>导体球不接地、不带电荷</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113151823382.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113151921860.png"></p><h4 id="导体球不接地、带电荷"><a href="#导体球不接地、带电荷" class="headerlink" title="导体球不接地、带电荷"></a>导体球不接地、带电荷</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113151938225.png"></p><h4 id="接地导体球壳"><a href="#接地导体球壳" class="headerlink" title="接地导体球壳"></a>接地导体球壳</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113160307469.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113160327475.png"></p><h3 id="导体圆柱面的镜像ppt-159"><a href="#导体圆柱面的镜像ppt-159" class="headerlink" title="导体圆柱面的镜像ppt 159"></a>导体圆柱面的镜像ppt 159</h3><h4 id="线电荷对接地导体圆柱面的镜像"><a href="#线电荷对接地导体圆柱面的镜像" class="headerlink" title="线电荷对接地导体圆柱面的镜像"></a>线电荷对接地导体圆柱面的镜像</h4><h4 id="平行圆柱导体的电轴"><a href="#平行圆柱导体的电轴" class="headerlink" title="平行圆柱导体的电轴"></a>平行圆柱导体的电轴</h4><h4 id="半径不同的两平行圆柱导体问题"><a href="#半径不同的两平行圆柱导体问题" class="headerlink" title="半径不同的两平行圆柱导体问题"></a>半径不同的两平行圆柱导体问题</h4><h3 id="线电流对无限大磁介质平面的镜像（矢量位）"><a href="#线电流对无限大磁介质平面的镜像（矢量位）" class="headerlink" title="线电流对无限大磁介质平面的镜像（矢量位）"></a>线电流对无限大磁介质平面的镜像（矢量位）</h3><h3 id="线电流对无限大磁介质平面的镜像（磁场强度）"><a href="#线电流对无限大磁介质平面的镜像（磁场强度）" class="headerlink" title="线电流对无限大磁介质平面的镜像（磁场强度）"></a>线电流对无限大磁介质平面的镜像（磁场强度）</h3><h3 id="镜像法-小结"><a href="#镜像法-小结" class="headerlink" title="镜像法 小结"></a>镜像法 小结</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113161316255.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113161415047.png"></p><h2 id="§3-7-分离变量法"><a href="#§3-7-分离变量法" class="headerlink" title="§3.7 分离变量法"></a>§3.7 分离变量法</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113161449821.png"></p><h3 id="0-双曲函数"><a href="#0-双曲函数" class="headerlink" title="0.双曲函数"></a>0.双曲函数</h3><p><a href="https://baike.baidu.com/item/%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0/8704306">双曲函数_百度百科 (baidu.com)</a></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113163125398.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113163152889.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 分离变量法解题的基本步骤<br><span class="hljs-bullet">2.</span> 直角坐标系中的分离变量法<br><span class="hljs-bullet">3.</span> 圆柱坐标系中的分离变量法<br><span class="hljs-bullet">4.</span> 球坐标系中的分离变量法<br><span class="hljs-bullet">5.</span> 复变函数法<br></code></pre></td></tr></table></figure><h3 id="1-分离变量法解题的基本步骤"><a href="#1-分离变量法解题的基本步骤" class="headerlink" title="1. 分离变量法解题的基本步骤"></a>1. 分离变量法解题的基本步骤</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113162132408.png"></p><h3 id="2-直角坐标系中的分离变量法"><a href="#2-直角坐标系中的分离变量法" class="headerlink" title="2. 直角坐标系中的分离变量法"></a>2. 直角坐标系中的分离变量法</h3><h4 id="二维拉普拉斯方程"><a href="#二维拉普拉斯方程" class="headerlink" title="二维拉普拉斯方程"></a>二维拉普拉斯方程</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113162155544.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113162208994.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113162223354.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113162238219.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113162254005.png"></p><h4 id="三维拉普拉斯方程"><a href="#三维拉普拉斯方程" class="headerlink" title="三维拉普拉斯方程"></a>三维拉普拉斯方程</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113164652716.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113164711143.png"></p><h3 id="3-圆柱坐标系中的分离变量法"><a href="#3-圆柱坐标系中的分离变量法" class="headerlink" title="3. 圆柱坐标系中的分离变量法"></a>3. 圆柱坐标系中的分离变量法</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113164753029.png"></p><h3 id="4-球坐标系中的分离变量法"><a href="#4-球坐标系中的分离变量法" class="headerlink" title="4. 球坐标系中的分离变量法"></a>4. 球坐标系中的分离变量法</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113164820879.png"></p><h3 id="5-复变函数法"><a href="#5-复变函数法" class="headerlink" title="5. 复变函数法"></a>5. 复变函数法</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113164858877.png"></p><h1 id="第四章-恒定电场和恒定磁场"><a href="#第四章-恒定电场和恒定磁场" class="headerlink" title="第四章 恒定电场和恒定磁场"></a>第四章 恒定电场和恒定磁场</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">§4.1 恒定电场<br><br>§4.2 恒定磁场的基本方程和边界条件<br><br>§4.3 恒定磁场的矢量磁位<br><br>§4.4 电感Inductance<br></code></pre></td></tr></table></figure><h2 id="§4-1-恒定电场"><a href="#§4-1-恒定电场" class="headerlink" title="§4.1 恒定电场"></a>§4.1 恒定电场</h2><h3 id="1-恒定电场的基本方程-⭐"><a href="#1-恒定电场的基本方程-⭐" class="headerlink" title="1. 恒定电场的基本方程 ⭐"></a>1. 恒定电场的基本方程 ⭐</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113171459132.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211113171749804.png"></p><h3 id="2-恒定电场的边界条件"><a href="#2-恒定电场的边界条件" class="headerlink" title="2. 恒定电场的边界条件"></a>2. 恒定电场的边界条件</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225219431.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225246330.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225251220.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225258622.png"></p><h3 id="3-静电比拟法"><a href="#3-静电比拟法" class="headerlink" title="3. 静电比拟法"></a>3. 静电比拟法</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225209261.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225321844.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225327316.png"></p><h2 id="§4-2-恒定磁场的基本方程和边界条件"><a href="#§4-2-恒定磁场的基本方程和边界条件" class="headerlink" title="§4.2 恒定磁场的基本方程和边界条件"></a>§4.2 恒定磁场的基本方程和边界条件</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225351070.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225359342.png"></p><h2 id="§4-3-恒定磁场的矢量磁位"><a href="#§4-3-恒定磁场的矢量磁位" class="headerlink" title="§4.3 恒定磁场的矢量磁位"></a>§4.3 恒定磁场的矢量磁位</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225453243.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225459232.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225509219.png"></p><h2 id="§4-4-电感Inductance"><a href="#§4-4-电感Inductance" class="headerlink" title="§4.4 电感Inductance"></a>§4.4 电感Inductance</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225522839.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225528702.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225532383.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225537311.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225541421.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115225545132.png"></p><h1 id="第五章-时变电磁场和平面电磁波"><a href="#第五章-时变电磁场和平面电磁波" class="headerlink" title="第五章 时变电磁场和平面电磁波"></a>第五章 时变电磁场和平面电磁波</h1><h2 id="§5-1-时谐电磁场的复数表示"><a href="#§5-1-时谐电磁场的复数表示" class="headerlink" title="§5.1 时谐电磁场的复数表示"></a>§5.1 时谐电磁场的复数表示</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205162937027.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205162954483.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205163005230.png"></p><h2 id="§5-2-复数形式Maxwell方程组"><a href="#§5-2-复数形式Maxwell方程组" class="headerlink" title="§5.2 复数形式Maxwell方程组"></a>§5.2 复数形式Maxwell方程组</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205163116315.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205163621662.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205163648286.png"> </p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205163543134.png"></p><h2 id="§5-3-复坡印廷矢量和复坡印廷定理"><a href="#§5-3-复坡印廷矢量和复坡印廷定理" class="headerlink" title="§5.3 复坡印廷矢量和复坡印廷定理"></a>§5.3 复坡印廷矢量和复坡印廷定理</h2><p>电磁场是具有能量的，时谐电磁场的能量在空间以电磁波形式传播</p><p>Poynting定理是时变电磁场中能量守恒定律的表达形式</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205171919922.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205172934251.png"></p><h2 id="§5-4-理想介质中的平面波"><a href="#§5-4-理想介质中的平面波" class="headerlink" title="§5.4 理想介质中的平面波"></a>§5.4 理想介质中的平面波</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205175853218.png"></p><h3 id="均匀平面波满足一维波动方程"><a href="#均匀平面波满足一维波动方程" class="headerlink" title="均匀平面波满足一维波动方程"></a>均匀平面波满足一维波动方程</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211205184247237.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212220519191.png"></p><h3 id="均匀平面波是横电磁波（TEM波）"><a href="#均匀平面波是横电磁波（TEM波）" class="headerlink" title="均匀平面波是横电磁波（TEM波）"></a>均匀平面波是横电磁波（TEM波）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212221810798.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212221903605.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212221515813.png"></p><h3 id="波动方程的解"><a href="#波动方程的解" class="headerlink" title="波动方程的解"></a>波动方程的解</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212223852001.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212223914162.png"></p><h3 id="相位常数k"><a href="#相位常数k" class="headerlink" title="相位常数k"></a>相位常数k</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212223629504.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212223653278.png"></p><h3 id="相速-v"><a href="#相速-v" class="headerlink" title="相速 v"></a>相速 v</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212223737222.png"></p><h3 id="介质的本质阻抗-η"><a href="#介质的本质阻抗-η" class="headerlink" title="介质的本质阻抗 η"></a>介质的本质阻抗 η</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212223510695.png"></p><h2 id="§5-5-导电介质中的平面波"><a href="#§5-5-导电介质中的平面波" class="headerlink" title="§5.5 导电介质中的平面波"></a>§5.5 导电介质中的平面波</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232326569.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232407405.png"></p><h3 id="复介电常数和复本质阻抗"><a href="#复介电常数和复本质阻抗" class="headerlink" title="复介电常数和复本质阻抗"></a>复介电常数和复本质阻抗</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232548361.png"></p><h3 id="相位常数和衰减系数"><a href="#相位常数和衰减系数" class="headerlink" title="相位常数和衰减系数"></a>相位常数和衰减系数</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232558326.png"></p><h3 id="相速和色散现象"><a href="#相速和色散现象" class="headerlink" title="相速和色散现象"></a>相速和色散现象</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232606654.png"></p><h3 id="有耗媒质中电磁场表示"><a href="#有耗媒质中电磁场表示" class="headerlink" title="有耗媒质中电磁场表示"></a>有耗媒质中电磁场表示</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232616032.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232623694.png"></p><h3 id="有耗媒质中的坡印廷矢量"><a href="#有耗媒质中的坡印廷矢量" class="headerlink" title="有耗媒质中的坡印廷矢量"></a>有耗媒质中的坡印廷矢量</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232631980.png"></p><h3 id="趋肤效应和趋肤深度"><a href="#趋肤效应和趋肤深度" class="headerlink" title="趋肤效应和趋肤深度"></a>趋肤效应和趋肤深度</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233004769.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232642053.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232655844.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232703840.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232710784.png"></p><h2 id="§5-7-电磁波的极化"><a href="#§5-7-电磁波的极化" class="headerlink" title="§5.7 电磁波的极化"></a>§5.7 电磁波的极化</h2><p> <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115232055601.png"></p><h3 id="极化的概念"><a href="#极化的概念" class="headerlink" title="极化的概念"></a>极化的概念</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233154484.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233208237.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233224588.png"></p><h3 id="线极化波"><a href="#线极化波" class="headerlink" title="线极化波"></a>线极化波</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233234040.png"></p><h3 id="圆极化波"><a href="#圆极化波" class="headerlink" title="圆极化波"></a>圆极化波</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233243205.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233250322.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233300384.png"></p><h3 id="椭圆极化波"><a href="#椭圆极化波" class="headerlink" title="椭圆极化波"></a>椭圆极化波</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233307644.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233315960.png"></p><h3 id="极化波的分解"><a href="#极化波的分解" class="headerlink" title="极化波的分解"></a>极化波的分解</h3><h3 id="极化波的工程应用"><a href="#极化波的工程应用" class="headerlink" title="极化波的工程应用"></a>极化波的工程应用</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233412119.png"></p><h1 id="第六章-平面电磁波的反射和折射"><a href="#第六章-平面电磁波的反射和折射" class="headerlink" title="第六章 平面电磁波的反射和折射"></a>第六章 平面电磁波的反射和折射</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211211170529332.png"></p><p>平面波在边界上的反射及透射规律与媒质特性及边界形状有关。</p><p>仅讨论平面波在无限大的平面边界上的反射及透射特性</p><h2 id="§6-1-平面波对平面边界的垂直入射"><a href="#§6-1-平面波对平面边界的垂直入射" class="headerlink" title="§6.1  平面波对平面边界的垂直入射"></a>§6.1  平面波对平面边界的垂直入射</h2><p>入射波 (Incident Wave) </p><p>反射波 (Reflected Wave) —- 一部分能量被反射回来形成 </p><p>透射波 (Transmitted Wave) —- 另一部分能量穿过边界形成</p><p>反射波与折射波的特性由分界面两侧媒质的参数确定。</p><h3 id="•-对理想导体的垂直入射"><a href="#•-对理想导体的垂直入射" class="headerlink" title="• 对理想导体的垂直入射"></a>• 对理想导体的垂直入射</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212161626467.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212161641355.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212161655007.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212161723274.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212161815773.png"></p><p>驻波</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212162303962.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212162316963.png"></p><p>•空间各点的电场都随时间t按正弦规律变化，但是波腹和波节点的位置均固定不变。</p><p>•这种波与行波不同，它是驻立不动的，称之为驻波。 </p><p>•驻波就是波腹点和波节点固定不动的电磁波。</p><p><strong>磁场的波腹点是电场的波节点， 磁场的波节点是电场的波腹点。</strong></p><p>面电流</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212162458358.png"></p><p>功率流密度</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212162932274.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212163002765.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212163108385.png"></p><p>当均匀平面波垂直入射到理想导体表面时，在表面上发生全 反射，反射波与入射波的迭加在自由空间中形成驻波。</p><p>在理想导体表面上，电场为零，磁场为最大值。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212163240126.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212163312227.png"></p><p>YXR——PPT 6.1 P27例题   P31例题</p><h3 id="•-对理想介质的垂直入射"><a href="#•-对理想介质的垂直入射" class="headerlink" title="• 对理想介质的垂直入射"></a>• 对理想介质的垂直入射</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212214859148.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212214916781.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212214928885.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212214936777.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212215313184.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212215736824.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212215806727.png"></p><p>入射波能量、反射波能量和透射波能量间的关系——坡印廷矢量平均值</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212215941040.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/em/image-20211212215950682.png"></p><p>区域1中传输的合成场功率等于向区域2透射的功率</p><p>YXR_PPT_P53——例题</p><h3 id="•-对多层边界的垂直入射"><a href="#•-对多层边界的垂直入射" class="headerlink" title="• 对多层边界的垂直入射"></a>• 对多层边界的垂直入射</h3><p>PPT 58页</p><h2 id="§6-2-平面波对平面边界的斜入射"><a href="#§6-2-平面波对平面边界的斜入射" class="headerlink" title="§6.2  平面波对平面边界的斜入射"></a>§6.2  平面波对平面边界的斜入射</h2><h3 id="斜入射的概念"><a href="#斜入射的概念" class="headerlink" title="斜入射的概念"></a>斜入射的概念</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233634212.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233641202.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115233650466.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234341011.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234351315.png"></p><h3 id="垂直极化波的斜入射"><a href="#垂直极化波的斜入射" class="headerlink" title="垂直极化波的斜入射"></a>垂直极化波的斜入射</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234401476.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234407183.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234412864.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234417762.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234425888.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234435648.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234442465.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234456158.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234502661.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234510130.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234517529.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234527346.png"></p><h3 id="平行极化波的斜入射"><a href="#平行极化波的斜入射" class="headerlink" title="平行极化波的斜入射"></a>平行极化波的斜入射</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234541775.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234547224.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234553207.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234601229.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234608655.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234617419.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234624647.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234630013.png"></p><h2 id="§6-3-全反射-全折射"><a href="#§6-3-全反射-全折射" class="headerlink" title="§6.3  全反射 全折射"></a>§6.3  全反射 全折射</h2><h3 id="全反射"><a href="#全反射" class="headerlink" title="全反射"></a>全反射</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234036598.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234053341.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234106066.png"></p><h3 id="全折射"><a href="#全折射" class="headerlink" title="全折射"></a>全折射</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234113487.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234120337.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234130863.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220115234136186.png"></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息论</title>
    <link href="/blog/post/Knowledge/InformationTheory/"/>
    <url>/blog/post/Knowledge/InformationTheory/</url>
    
    <content type="html"><![CDATA[<p>这门课学的过程很痛苦，太多定义了，到期末的时候完全不懂，即使已经复习完了前四章的知识点，但是对基本的定义都没有掌握，因此复习到第四章感觉效果很差，我果断放弃了自己看课本理解，而是去找了一个老师讲课的视频，跟着老师串了一遍课本知识，老师在讲课的时候也给出了很多的例题！这个视频是北邮杨洁老师录制的<a href="https://space.bilibili.com/453434943">B站：北邮杨洁老师</a></p><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><p>信息的定义</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">哈莱特：发信者所发出的信息，就是他在通信符号表中选择符号的具体方式。用自由度来度量时间。<br>维纳：信息是信息，不是物质也不是能量。<br>香农：信息是事物运动状态或存在方式的不确定性的描述。<br><span class="hljs-code">信息的根本问题是在某一点精确地或近似地重现另选则的一点的消息。</span><br></code></pre></td></tr></table></figure><p>物质世界的三大支柱：物质，信息，能量</p><p>区分定义：</p><ul><li><p>信息：<strong>事物运动状态或存在方式的不确定性的描述</strong></p></li><li><p>消息：含有信息的语言，文字，图像等</p></li><li><p>信号： </p><ul><li>信息的物理层表示，传递信息的载体</li><li>消息的物理体现，光、点信号等</li></ul></li><li><p>信息的特征</p><ul><li>不确定性：接收者在收到信息之前，对它的内容是不知道的</li><li>信息可以使认识主体对某一事物的未知性或不确定性减少</li><li>信息是可以度量的</li></ul></li></ul><p>信息论所研究的对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs flow">op0=&gt;operation: 信源<br>op1=&gt;operation: 编码器<br>op2=&gt;operation: 信道<br>op3=&gt;operation: 译码器<br>op4=&gt;operation: 信宿<br><br>op5=&gt;operation: 噪声源<br><br><br>op0(right)-&gt;op1(right)-&gt;op2(right)-&gt;op3(right)-&gt;op4<br>op5-&gt;op2<br></code></pre></td></tr></table></figure><p>噪声源：主要干扰信道</p><p>信息论研究的目的</p><ul><li>可靠性$\stackrel{信道编码}{\longrightarrow}$多冗余</li><li>有效性$\stackrel{信源编码}{\longrightarrow}$少冗余</li><li>保密性</li><li>认证性</li></ul><p>信息论的研究内容</p><ul><li>狭义的信息论&#x2F;经典信息论&#x2F;香农基本理论<ul><li>信息的测度</li><li>信道容量</li><li>信源编码</li><li>信道编码</li></ul></li><li>一般信息论&#x2F;工程信息论</li><li>广义信息论</li></ul><p>香农信息论的建立和发展</p><p><strong>香农信息论的核心</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">在通信系统中采用适当的编码后能够实现高效率和高可靠性地传输信息，并得出了信源编码定理和信道编码定理。<br>从数学上看，这些定理是最后编码存在定理。<br>从工程上看，这些定理不是结构性的，不能从定理的结果直接得出实现最优编码的具体途径。<br>然而它们给出了编码的性能极限。<br></code></pre></td></tr></table></figure><ul><li>无失真信源编码定理</li><li>信道纠错编码</li><li>限失真信源编码定理</li><li>多用户、网络信息论的发展</li><li>信息保密与安全定理</li></ul><h1 id="第二章-离散信源及其信息测度✔"><a href="#第二章-离散信源及其信息测度✔" class="headerlink" title="第二章 离散信源及其信息测度✔"></a>第二章 离散信源及其信息测度✔</h1><h2 id="2-1-信源的数学模型及其分类"><a href="#2-1-信源的数学模型及其分类" class="headerlink" title="2.1 信源的数学模型及其分类"></a>2.1 信源的数学模型及其分类</h2><p>信源是信息的来源，是产生消息或消息序列的源泉。</p><p>信息是抽象的，而消息是具体的。</p><p>消息不是信息本身，但它包含着和携带这消息。</p><p><strong>我们研究的是信源各种可能的输出以及输出各种可能消息的不确定性。</strong></p><p>信源的描述：用一个<strong>样本空间及其概率测度</strong>，也就是<strong>概率空间</strong>&#x2F;<strong>信源空间</strong>。</p><p>根据消息的不用的随机性质来对信源进行分类：</p><ul><li>信源输出的消息用随机变量描述</li><li>信源可能输出的消息是有限的或可数的，并且每次只输出其中一个消息。</li><li>信源的概率空间必定是一个完备集；</li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105175349341.png" alt="image-20211105175349341"></li><li>信源输出的消息用随机矢量描述</li><li></li><li>信源输出的消息用随机过程描述</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/%E4%BF%A1%E6%BA%90%E7%9A%84%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%88%86%E7%B1%BB.png" alt="信源的数学模型及分类"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021173814410.png" alt="image-20211021173814410"></p><h2 id="2-2-离散信源的信息熵"><a href="#2-2-离散信源的信息熵" class="headerlink" title="2.2 离散信源的信息熵"></a>2.2 离散信源的信息熵</h2><ul><li>信息量的定义：</li></ul><p>收到某信息获得的信息量（即收到某信息后获得关于某基本事件发生的信息量）</p><p>&#x3D; 不确定性减少的量</p><p>&#x3D; （收到此消息前关于某事件发生的不确定性）-（收到此消息后关于某事件发生的不确定性）</p><p>无噪声的情况下：收到某消息获得的信息量&#x3D;收到消息前关于事件发生的不确定性&#x3D;信源输出的某消息中所含有的信息量</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021155556459.png" style="zoom:200%;" /><p><strong>信息量是事件发生的先验概率的函数——自信息量</strong></p><p>信息量的单位</p><ul><li>以2为底：bit</li><li>以e为底：nat</li><li>以10为底：hart</li><li>换底公式</li></ul><hr><p><strong>信息熵</strong></p><p>自信息是信源发出某一消息所含有的信息量，信源所发出的消息不同，所含有的信息量也就不同。自信息就是一个随机变量，不能用来作为整个信源的信息测度</p><p>信息熵——信源的平均自信息：自信息的数学期望</p><p>单位：bit&#x2F;符号——nat&#x2F;符号——hart&#x2F;符号</p><p>信息熵的物理含义</p><ul><li>表示信源输出后，每个消息（符号）所提供的平均信息量</li><li>表输信源输出前，信源的平均不确定性</li><li>用来表征变量X的随机性</li></ul><h2 id="2-3-信息熵的基本性质"><a href="#2-3-信息熵的基本性质" class="headerlink" title="2.3 信息熵的基本性质"></a>2.3 信息熵的基本性质</h2><p>概率矢量——熵函数</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021155621553.png" style="zoom: 200%;" /><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%20%E4%BF%A1%E6%81%AF%E7%86%B5%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%A7%E8%B4%A8.png" alt="第二章： 信息熵的基本性质"></p><h2 id="2-5-离散无记忆信源的扩展信源"><a href="#2-5-离散无记忆信源的扩展信源" class="headerlink" title="2.5 离散无记忆信源的扩展信源"></a>2.5 离散无记忆信源的扩展信源</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021160324381.png" style="zoom:200%;" /><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021162146280.png" alt="image-20211021162146280"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021162209890.png" alt="image-20211021162209890"></p><h2 id="2-6-离散平稳信源"><a href="#2-6-离散平稳信源" class="headerlink" title="2.6 离散平稳信源"></a>2.6 离散平稳信源</h2><p><strong>联合熵</strong></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021164222475.png" alt="image-20211021164222475"></p><p><strong>条件熵</strong></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021164150338.png" alt="image-20211021164150338"></p><p>贝叶斯公式</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021165835882.png" alt="image-20211021165835882"></p><p>有限定条件的熵小于无限定条件的熵</p><p>熵的强可加性</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021170727577.png" alt="image-20211021170727577"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021170740145.png" alt="image-20211021170740145"></p><hr><p>离散平稳信源的极限熵</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021171029500.png" alt="image-20211021171029500"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021171336940.png" alt="image-20211021171336940"></p><p>使用<strong>条件熵</strong>近似<strong>极限熵</strong></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021171445412.png" alt="image-20211021171445412"></p><p><strong>记忆长度为m（即某时刻输出什么符号只能与前m个符号有关），则得离散平稳信源得极限熵等于有限记忆长度为m的条件熵</strong></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021171841918.png" alt="image-20211021171841918"></p><h2 id="2-7-马尔可夫信源"><a href="#2-7-马尔可夫信源" class="headerlink" title="2.7 马尔可夫信源"></a>2.7 马尔可夫信源</h2><p>马尔可夫信源——非平稳有记忆信源</p><p><strong>未来不依赖于过去的演变，只取决于现在</strong></p><p>有许多信源是非平稳信源，但在其输出的符号序列中符号之间的依赖关系是有限的</p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021174014771.png" style="zoom:200%;" /><p><strong>马尔可夫信源的定义</strong></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021174220227.png" alt="image-20211021174220227"></p><p><strong>m阶马尔可夫信源</strong></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021174524581.png" alt="image-20211021174524581"></p><p>状态转移图与一次转移概率</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021175446870.png" alt="image-20211021175446870"></p><p><strong>时齐，遍历的马尔可夫信源的熵</strong></p><p><strong>时齐，遍历的m阶马尔可夫信源的熵</strong></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021175200856.png" style="zoom:200%;" /><h2 id="2-8-信源剩余度与自然语言的熵"><a href="#2-8-信源剩余度与自然语言的熵" class="headerlink" title="2.8 信源剩余度与自然语言的熵"></a>2.8 信源剩余度与自然语言的熵</h2><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021175547869.png" style="zoom:150%;" /><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021175602866.png" alt="image-20211021175602866"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211021175619334.png" alt="image-20211021175619334"></p><h1 id="第三章-离散信道及其信道容量✔"><a href="#第三章-离散信道及其信道容量✔" class="headerlink" title="第三章 离散信道及其信道容量✔"></a>第三章 离散信道及其信道容量✔</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">1</span>信道的数学模型及其分类<br><span class="hljs-attribute">3</span>.<span class="hljs-number">2</span>平均互信息及平均条件互信息<br><span class="hljs-attribute">3</span>.<span class="hljs-number">3</span>平均互信息的特性<br><span class="hljs-attribute">3</span>.<span class="hljs-number">4</span>信道容量及其一般计算方法<br><span class="hljs-attribute">3</span>.<span class="hljs-number">6</span>离散无记忆扩展信道及其信道容量<br></code></pre></td></tr></table></figure><h2 id="3-1信道的数学模型及其分类"><a href="#3-1信道的数学模型及其分类" class="headerlink" title="3.1信道的数学模型及其分类"></a>3.1信道的数学模型及其分类</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161709790.png" alt="image-20211104161709790"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161647533.png" alt="image-20211104161647533"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161740811.png" alt="image-20211104161740811"></p><h3 id="二元对称信道"><a href="#二元对称信道" class="headerlink" title="二元对称信道"></a>二元对称信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161436894.png" alt="image-20211104161436894"></p><h3 id="二元删除信道"><a href="#二元删除信道" class="headerlink" title="二元删除信道"></a>二元删除信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161456192.png" alt="image-20211104161456192"></p><h3 id="四种概率"><a href="#四种概率" class="headerlink" title="四种概率"></a>四种概率</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161525342.png" alt="image-20211104161525342"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161801562.png" alt="image-20211104161801562"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104164155961.png" alt="image-20211104164155961"></p><h2 id="3-2平均互信息及平均条件互信息"><a href="#3-2平均互信息及平均条件互信息" class="headerlink" title="3.2平均互信息及平均条件互信息"></a>3.2平均互信息及平均条件互信息</h2><h3 id="四种熵"><a href="#四种熵" class="headerlink" title="四种熵"></a>四种熵</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161842223.png" alt="image-20211104161842223"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161911154.png" alt="image-20211104161911154"></p><h3 id="平均互信息"><a href="#平均互信息" class="headerlink" title="平均互信息"></a>平均互信息</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104161940480.png" alt="image-20211104161940480"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162013849.png" alt="image-20211104162013849"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104164238198.png" alt="image-20211104164238198"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162128782.png" alt="image-20211104162128782"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111162730372.png" alt="image-20211111162730372"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105203206248.png" alt="image-20211105203206248"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162159806.png" alt="image-20211104162159806"></p><h3 id="条件互信息"><a href="#条件互信息" class="headerlink" title="条件互信息"></a>条件互信息</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162214705.png" alt="image-20211104162214705"></p><h3 id="平均条件互信息"><a href="#平均条件互信息" class="headerlink" title="平均条件互信息"></a>平均条件互信息</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162226539.png" alt="image-20211104162226539"></p><h2 id="3-3平均互信息的特性"><a href="#3-3平均互信息的特性" class="headerlink" title="3.3平均互信息的特性"></a>3.3平均互信息的特性</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162302473.png" alt="image-20211104162302473"></p><h2 id="3-4信道容量及其一般计算方法"><a href="#3-4信道容量及其一般计算方法" class="headerlink" title="3.4信道容量及其一般计算方法"></a>3.4信道容量及其一般计算方法</h2><h3 id="信道容量"><a href="#信道容量" class="headerlink" title="信道容量"></a>信道容量</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162355930.png" alt="image-20211104162355930"></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105203317905.png" style="zoom:150%;" /><h3 id="无噪无损一一对应信道"><a href="#无噪无损一一对应信道" class="headerlink" title="无噪无损一一对应信道"></a>无噪无损一一对应信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162422686.png" alt="image-20211104162422686"></p><h3 id="有噪无损信道"><a href="#有噪无损信道" class="headerlink" title="有噪无损信道"></a>有噪无损信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162441185.png" alt="image-20211104162441185"></p><h3 id="无噪有损信道（确定信道）"><a href="#无噪有损信道（确定信道）" class="headerlink" title="无噪有损信道（确定信道）"></a>无噪有损信道（确定信道）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104162455091.png" alt="image-20211104162455091"></p><h3 id="对称离散信道"><a href="#对称离散信道" class="headerlink" title="对称离散信道"></a>对称离散信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104173557599.png" alt="image-20211104173557599"></p><h3 id="准对称信道"><a href="#准对称信道" class="headerlink" title="准对称信道"></a>准对称信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104175101792.png" alt="image-20211104175101792"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104174830722.png" alt="image-20211104174830722"></p><h3 id="一般离散信道"><a href="#一般离散信道" class="headerlink" title="一般离散信道"></a>一般离散信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104175330014.png" alt="image-20211104175330014"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211104174848018.png" alt="image-20211104174848018"></p><p>（这个定理不懂）</p><h2 id="3-6离散无记忆扩展信道及其信道容量"><a href="#3-6离散无记忆扩展信道及其信道容量" class="headerlink" title="3.6离散无记忆扩展信道及其信道容量"></a>3.6离散无记忆扩展信道及其信道容量</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105161949672.png" alt="image-20211105161949672"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105162003540.png" alt="image-20211105162003540"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105203407885.png" alt="image-20211105203407885"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105170405056.png" alt="image-20211105170405056"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105170433871.png" alt="image-20211105170433871"></p><h2 id="3-7-独立并联信道及其信道容量"><a href="#3-7-独立并联信道及其信道容量" class="headerlink" title="3.7 独立并联信道及其信道容量"></a>3.7 独立并联信道及其信道容量</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105203423844.png" alt="image-20211105203423844"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105174507437.png" alt="image-20211105174507437"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105174516865.png" alt="image-20211105174516865"></p><h2 id="3-8-串联信道的互信息和数据处理定理"><a href="#3-8-串联信道的互信息和数据处理定理" class="headerlink" title="3.8 串联信道的互信息和数据处理定理"></a>3.8 串联信道的互信息和数据处理定理</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105174641080.png" alt="image-20211105174641080"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105174652219.png" alt="image-20211105174652219"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105174716362.png" alt="image-20211105174716362"></p><h2 id="3-9-信源与信道匹配"><a href="#3-9-信源与信道匹配" class="headerlink" title="3.9 信源与信道匹配"></a>3.9 信源与信道匹配</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211105200158291.png" alt="image-20211105200158291"></p><h1 id="第四章-波形信源和波形信道"><a href="#第四章-波形信源和波形信道" class="headerlink" title="第四章 波形信源和波形信道"></a>第四章 波形信源和波形信道</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean">## <span class="hljs-number">4.1</span> 波形信源的统计特性和离散化<br>## <span class="hljs-number">4.2</span>连续波形信源和波形信源的信息测度<br>## <span class="hljs-number">4.3</span> 连续信源熵的性质及最大差熵定理<br>## <span class="hljs-number">4.4</span> 连续信源熵的变换<br>## <span class="hljs-number">4.5</span> 熵功率<br>## <span class="hljs-number">4.6</span> 连续信道和波形信道的分类<br>## <span class="hljs-number">4.7</span> 连续信道和波形信道的信息传输律<br>## <span class="hljs-number">4.8</span> 连续信道和波形信道的信道容量<br></code></pre></td></tr></table></figure><h2 id="4-1-波形信源的统计特性和离散化"><a href="#4-1-波形信源的统计特性和离散化" class="headerlink" title="4.1 波形信源的统计特性和离散化"></a>4.1 波形信源的统计特性和离散化</h2><p>随机波形信源输出的消息是随机的，因此，可以用随机过程{x(t)}来描述；</p><ul><li>随机波形信源中的消息数是无限的；</li><li>对于随机波形信源，也用有限维概率密度函数族及与各维概率密度函数有关的统计量来描述；</li></ul><p>就其统计特性来分类：平稳随机过程——非平稳随机过程</p><ul><li>平稳随机过程：各维概率密度函数不随时间平移而发生变化的随机过程；</li><li>非平稳随机过程：</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111161525774.png" alt="image-20211111161525774"></p><p><img src="C:/Users/DELL/AppData/Roaming/Typora/typora-user-images/image-20211111161600210.png" alt="image-20211111161600210"></p><h2 id="4-2连续波形信源和波形信源的信息测度"><a href="#4-2连续波形信源和波形信源的信息测度" class="headerlink" title="4.2连续波形信源和波形信源的信息测度"></a>4.2连续波形信源和波形信源的信息测度</h2><h3 id="差熵"><a href="#差熵" class="headerlink" title="差熵"></a>差熵</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111174646208.png" alt="image-20211111174646208"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111174706566.png" alt="image-20211111174706566"></p><h3 id="连续平稳信源的差熵"><a href="#连续平稳信源的差熵" class="headerlink" title="连续平稳信源的差熵"></a>连续平稳信源的差熵</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111174748801.png" alt="image-20211111174748801"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111174808837.png" alt="image-20211111174808837"></p><h3 id="波形信源的差熵"><a href="#波形信源的差熵" class="headerlink" title="波形信源的差熵"></a>波形信源的差熵</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111174824633.png" alt="image-20211111174824633"></p><h3 id="特殊连续信源1——均匀分布连续信源的差熵"><a href="#特殊连续信源1——均匀分布连续信源的差熵" class="headerlink" title="特殊连续信源1——均匀分布连续信源的差熵"></a>特殊连续信源1——均匀分布连续信源的差熵</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111174901845.png" alt="image-20211111174901845"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111175019277.png" alt="image-20211111175019277"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111174957776.png" alt="image-20211111174957776"></p><h3 id="特殊连续信源2——高斯信源的差熵"><a href="#特殊连续信源2——高斯信源的差熵" class="headerlink" title="特殊连续信源2——高斯信源的差熵"></a>特殊连续信源2——高斯信源的差熵</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111175038509.png" alt="image-20211111175038509"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211111175121203.png" alt="image-20211111175121203"></p><h2 id="4-3-连续信源熵的性质及最大差熵定理"><a href="#4-3-连续信源熵的性质及最大差熵定理" class="headerlink" title="4.3 连续信源熵的性质及最大差熵定理"></a>4.3 连续信源熵的性质及最大差熵定理</h2><h3 id="可加性"><a href="#可加性" class="headerlink" title="可加性"></a>可加性</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211112095338788.png" alt="image-20211112095338788"></p><h3 id="上凸性"><a href="#上凸性" class="headerlink" title="上凸性"></a>上凸性</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211112095352717.png" alt="image-20211112095352717"></p><h3 id="差熵可取负值"><a href="#差熵可取负值" class="headerlink" title="差熵可取负值"></a>差熵可取负值</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211112095400092.png" alt="image-20211112095400092"></p><h3 id="变换性"><a href="#变换性" class="headerlink" title="变换性"></a>变换性</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211112095416977.png" alt="image-20211112095416977"></p><h3 id="极值性（最大差熵定理）"><a href="#极值性（最大差熵定理）" class="headerlink" title="极值性（最大差熵定理）"></a>极值性（最大差熵定理）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211112095429101.png" alt="image-20211112095429101"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211112223908130.png" alt="image-20211112223908130"></p><h3 id="峰值功率受限条件下信源的最大熵"><a href="#峰值功率受限条件下信源的最大熵" class="headerlink" title="峰值功率受限条件下信源的最大熵"></a>峰值功率受限条件下信源的最大熵</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211112095441143.png" alt="image-20211112095441143"></p><h3 id="平均功率受限条件下信源的最大熵"><a href="#平均功率受限条件下信源的最大熵" class="headerlink" title="平均功率受限条件下信源的最大熵"></a>平均功率受限条件下信源的最大熵</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211112095453929.png" alt="image-20211112095453929"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211112095503949.png" alt="image-20211112095503949"></p><h2 id="4-4-连续信源熵的变换"><a href="#4-4-连续信源熵的变换" class="headerlink" title="4.4 连续信源熵的变换"></a>4.4 连续信源熵的变换</h2><h2 id="4-5-熵功率⭐（不是很懂）"><a href="#4-5-熵功率⭐（不是很懂）" class="headerlink" title="4.5 熵功率⭐（不是很懂）"></a>4.5 熵功率⭐（不是很懂）</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211114191705406.png" alt="image-20211114191705406"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211114191720076.png" alt="image-20211114191720076"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211114191736931.png" alt="image-20211114191736931"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211114191803009.png" alt="image-20211114191803009"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211114180410720.png" alt="image-20211114180410720"></p><h2 id="4-6-连续信道和波形信道的分类"><a href="#4-6-连续信道和波形信道的分类" class="headerlink" title="4.6 连续信道和波形信道的分类"></a>4.6 连续信道和波形信道的分类</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211230211709615.png" alt="image-20211230211709615"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211230211748749.png" alt="image-20211230211748749"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211230212005879.png" alt="image-20211230212005879"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211230212050871.png" alt="image-20211230212050871"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211230212200595.png" alt="image-20211230212200595"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211230212213555.png" alt="image-20211230212213555"></p><h2 id="4-7-连续信道和波形信道的信息传输律"><a href="#4-7-连续信道和波形信道的信息传输律" class="headerlink" title="4.7 连续信道和波形信道的信息传输律"></a>4.7 连续信道和波形信道的信息传输律</h2><h3 id="基本连续信道"><a href="#基本连续信道" class="headerlink" title="基本连续信道"></a>基本连续信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211230212308544.png" alt="image-20211230212308544"></p><h3 id="多维连续信道"><a href="#多维连续信道" class="headerlink" title="多维连续信道"></a>多维连续信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211230212349596.png" alt="image-20211230212349596"></p><h3 id="波形信道"><a href="#波形信道" class="headerlink" title="波形信道"></a>波形信道</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211230212424433.png" alt="image-20211230212424433"></p><h3 id="连续信道平均互信息的特性"><a href="#连续信道平均互信息的特性" class="headerlink" title="连续信道平均互信息的特性"></a>连续信道平均互信息的特性</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211231105118884.png" alt="image-20211231105118884"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211231105102184.png" alt="image-20211231105102184"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211231105150992.png" alt="image-20211231105150992"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/informationtheory/image-20211231105327978.png" alt="image-20211231105327978"></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通信电子电路</title>
    <link href="/blog/post/Knowledge/CommunicationElectronicCircuits/"/>
    <url>/blog/post/Knowledge/CommunicationElectronicCircuits/</url>
    
    <content type="html"><![CDATA[<p>通信电子电路就是模电的升级版，信号从模电的低频变成了高频，研究的数学原理从线性变成了非线性。<br>这么课是前后关系联系比较紧密的，前面的知识点需要充分的理解，在学习后面知识点时，才能更快速的跟上老师的思路。</p><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%AA%E8%AE%BA.png" alt="第一章绪论"></p><h2 id="1-1-通信系统的概念"><a href="#1-1-通信系统的概念" class="headerlink" title="1.1 通信系统的概念"></a>1.1 通信系统的概念</h2><ul><li>信息源</li><li>发送设备</li><li>信道（噪声源）</li><li>接收设备</li><li>收信装置</li></ul><h2 id="1-2-无线电波的传播特性"><a href="#1-2-无线电波的传播特性" class="headerlink" title="1.2 无线电波的传播特性"></a>1.2 无线电波的传播特性</h2><p>不同频段的无线电信号，其传播特性不同。</p><p>同一信道对不同频率的信号传播特性是不同的。</p><p>传播方式</p><ul><li>绕射——超视距通信<ul><li>地波</li><li>中长波信号</li></ul></li><li>折射与反射——超视距通信<ul><li>利用电离层</li><li>天波</li><li>短波</li></ul></li><li>直射——视距通信<ul><li>超短波</li><li>对流层散射<ul><li>散射通信已经成为超短波甚至微波的长距离通信的有力手段</li></ul></li></ul></li></ul><p><strong>只有当天线的尺寸大到可以与信号的波长相比拟时，天线才具有较高的辐射效率。</strong></p><h2 id="1-3-无线电波的频段划分"><a href="#1-3-无线电波的频段划分" class="headerlink" title="1.3 无线电波的频段划分"></a>1.3 无线电波的频段划分</h2><p>波长λ</p><p>频率f</p><p>电磁波传播速度c</p><p>c&#x3D;λ*f</p><table><thead><tr><th><strong>波段（频段）</strong></th><th align="center"><strong>符号</strong></th><th><strong>波长范围</strong></th><th><strong>频率范围</strong></th><th><strong>应用范围</strong></th></tr></thead><tbody><tr><td>超长波（甚低频）</td><td align="center">VLF</td><td>100000-10000m</td><td>3-30kHz</td><td>1.海岸——潜艇通信；2.海上导航。</td></tr><tr><td>长波（低频）</td><td align="center">LF</td><td>10000-1000m</td><td>30-300kHz</td><td>1.大气层内中等距离通信；2.地下岩层通信；3.海上导航。</td></tr><tr><td>中波（中频）</td><td align="center">MF</td><td>1000-100m</td><td>300kHz-3MHz</td><td>1.广播；2.海上导航。</td></tr><tr><td>短波（高频）</td><td align="center">HF</td><td>100-10m</td><td>3-30MHz</td><td>1.远距离短波通信；2.短波广播。</td></tr><tr><td>超短波（甚高频）</td><td align="center">VHF</td><td>10-1m</td><td>30-300MHz</td><td>1.电离层散射通信（30-60MHz）；2.流星余迹通信（30-100MHz）；3.人造电离层通信（30-144MHz）；4.对大气层内、外空间飞行体（飞机、导弹、卫星）的通信；电视、雷达、导航、移动通信。</td></tr><tr><td>分米波（特高频）</td><td align="center">UHF</td><td>1-0.1m</td><td>300-3000MHz</td><td>1.对流层工散射通信（700-1000MHz）；2.小容量（8-12路）微波接力通信（352-420MHz）；3.中容量（120路）微波接力通信（1700-2400MHz）。</td></tr><tr><td>厘米波（超高频）</td><td align="center">SHF</td><td>10-1cm</td><td>3-30GHz</td><td>1.大容量（2500路、6000路）微波接力通信（3600-4200MHz，5850-8500MHz）；2.数字通信；3.卫星通信；4.波导通信。</td></tr><tr><td>毫米波（极高频）</td><td align="center">EHF</td><td>10-1mm</td><td>30-300GHz</td><td>穿入大气层时的通信</td></tr></tbody></table><h2 id="1-4-调制的通信系统（难点）"><a href="#1-4-调制的通信系统（难点）" class="headerlink" title="1.4 调制的通信系统（难点）"></a>1.4 调制的通信系统（难点）</h2><ul><li>无线电广播发射系统</li><li>超外差式接受系统</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/CEC.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/CEC2.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/CEC3.jpg"></p><h1 id="第二章-小信号调谐放大电路"><a href="#第二章-小信号调谐放大电路" class="headerlink" title="第二章 小信号调谐放大电路"></a>第二章 小信号调谐放大电路</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">主要是接收信号部分的电路，与接受天线相连<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%BC%95%E8%A8%80.png"></p><h2 id="2-2-LC谐振回路"><a href="#2-2-LC谐振回路" class="headerlink" title="2.2 LC谐振回路"></a>2.2 LC谐振回路</h2><p> <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/QQ%E5%9B%BE%E7%89%8720211008112640.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20LC%E8%B0%90%E6%8C%AF%E5%9B%9E%E8%B7%AF.png"></p><h2 id="2-3-放大器"><a href="#2-3-放大器" class="headerlink" title="2.3 放大器"></a>2.3 放大器</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%94%BE%E5%A4%A7%E5%99%A8.png"></p><h1 id="第三章-高频功率放大器"><a href="#第三章-高频功率放大器" class="headerlink" title="第三章  高频功率放大器"></a>第三章  高频功率放大器</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">主要是发射信号部分的电路，与发射天线相连<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%A6%82%E8%BF%B0.png"></p><h2 id="3-2-高频调谐功率放大器的工作原理"><a href="#3-2-高频调谐功率放大器的工作原理" class="headerlink" title="3.2 高频调谐功率放大器的工作原理"></a>3.2 高频调谐功率放大器的工作原理</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/%E9%AB%98%E9%A2%91%E8%B0%83%E8%B0%90%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%B5%E8%B7%AF.jpg"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211010203806166.png"></p><p>输出的电压信号和输入的电压信号同频，但是幅值变大</p><p>输出的电流信号：尖顶余弦脉冲</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211010205100710.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/3.2%E9%AB%98%E9%A2%91%E8%B0%83%E8%B0%90%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></p><h2 id="3-3-功率和效率"><a href="#3-3-功率和效率" class="headerlink" title="3.3 功率和效率"></a>3.3 功率和效率</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/3.3%20%E5%8A%9F%E7%8E%87%E5%92%8C%E6%95%88%E7%8E%87.png"></p><h2 id="3-4-高频调谐功率放大器的工作状态分析"><a href="#3-4-高频调谐功率放大器的工作状态分析" class="headerlink" title="3.4 高频调谐功率放大器的工作状态分析"></a>3.4 高频调谐功率放大器的工作状态分析</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/3.4%20%E9%AB%98%E9%A2%91%E8%B0%83%E8%B0%90%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81%E5%88%86%E6%9E%90.png"></p><h2 id="3-7-倍频器"><a href="#3-7-倍频器" class="headerlink" title="3.7 倍频器"></a>3.7 倍频器</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/3.5%20%E5%80%8D%E9%A2%91%E5%99%A8.png"></p><h1 id="第四章-正弦波振荡器"><a href="#第四章-正弦波振荡器" class="headerlink" title="第四章 正弦波振荡器"></a>第四章 正弦波振荡器</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/4.1%20%E6%A6%82%E8%BF%B0.png"></p><h2 id="4-2-反馈型正弦自激振荡器基本原理"><a href="#4-2-反馈型正弦自激振荡器基本原理" class="headerlink" title="4.2 反馈型正弦自激振荡器基本原理"></a>4.2 反馈型正弦自激振荡器基本原理</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211023143502233.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/4.2%20%E5%8F%8D%E9%A6%88%E5%9E%8B%E6%AD%A3%E5%BC%A6%E6%B3%A2%E8%87%AA%E6%BF%80%E6%8C%AF%E8%8D%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.png"></p><h2 id="4-3-三点式LC振荡器"><a href="#4-3-三点式LC振荡器" class="headerlink" title="4.3 三点式LC振荡器"></a>4.3 三点式LC振荡器</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/4.3%20%E4%B8%89%E7%82%B9%E5%BC%8FLC%E6%8C%AF%E8%8D%A1%E5%99%A8.png"></p><h2 id="4-4-改进型电容三点式振荡器"><a href="#4-4-改进型电容三点式振荡器" class="headerlink" title="4.4 改进型电容三点式振荡器"></a>4.4 改进型电容三点式振荡器</h2><h2 id="4-5-振荡器的频率稳定"><a href="#4-5-振荡器的频率稳定" class="headerlink" title="4.5 振荡器的频率稳定"></a>4.5 振荡器的频率稳定</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/4.4%20%E6%94%B9%E8%BF%9B%E5%9E%8B%E7%94%B5%E5%AE%B9%E4%B8%89%E7%82%B9%E5%BC%8F%E6%8C%AF%E8%8D%A1%E5%99%A8.png"></p><h2 id="4-6-石英晶体振荡器"><a href="#4-6-石英晶体振荡器" class="headerlink" title="4.6 石英晶体振荡器"></a>4.6 石英晶体振荡器</h2><p>LC振荡器的频率稳定度不能做的很高，主要原因是LC回路的Q值不能做的很高</p><p>石英晶体振荡器是以石英晶体谐振器取代LC振荡器中构成谐振回路的电感，电容元件所组成的正弦波振荡，频率稳定度高</p><p>石英片是从石英晶体柱中切割下来的一种弹性体，有一 固有振动频率，其值与石英片的形状、尺寸、切型有关。</p><p>当 外加交流电压的频率等于晶体固有频率时，晶体片的机械振 动最大，晶体表面电荷量最多，外电路中的交流电流最强， 于是产生了谐振。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211031142136753.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211031142113658.png"></p><p>晶片可用一个串联LC回路表示，L_q为动态电感，C_q为动态电容，r_q为动态电阻</p><p>切片与金属极板构成的静电电容C_0，即使石英晶片不震动，C_0仍然存在！</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114144254883.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211031142136753.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211031143346149.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211031143414023.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114144323874.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114144343687.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114144406406.png"></p><h2 id="4-7-石英晶体振荡器电路"><a href="#4-7-石英晶体振荡器电路" class="headerlink" title="4.7 石英晶体振荡器电路"></a>4.7 石英晶体振荡器电路</h2><h1 id="第五章-振幅调制与解调"><a href="#第五章-振幅调制与解调" class="headerlink" title="第五章 振幅调制与解调"></a>第五章 振幅调制与解调</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/5.1%20%E8%B0%83%E5%88%B6%E4%B8%8E%E8%A7%A3%E8%B0%83.png"></p><h2 id="5-2-调幅信号的分析"><a href="#5-2-调幅信号的分析" class="headerlink" title="5.2 调幅信号的分析"></a>5.2 调幅信号的分析</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/5.2%20%E8%B0%83%E5%B9%85%E4%BF%A1%E5%8F%B7%E7%9A%84%E5%88%86%E6%9E%90.png"></p><h3 id="5-2-1-普通调幅波"><a href="#5-2-1-普通调幅波" class="headerlink" title="5.2.1 普通调幅波"></a>5.2.1 普通调幅波</h3><h4 id="调幅波的表达式"><a href="#调幅波的表达式" class="headerlink" title="调幅波的表达式"></a>调幅波的表达式</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114145422863.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211203154930691.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211113230535442.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114150501235.png"></p><h4 id="调幅波的频谱"><a href="#调幅波的频谱" class="headerlink" title="调幅波的频谱"></a>调幅波的频谱</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114152207017.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114152223582.png"></p><h4 id="调幅波的功率"><a href="#调幅波的功率" class="headerlink" title="调幅波的功率"></a>调幅波的功率</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114153355502.png"></p><h3 id="5-2-2-抑制载波双边带调幅（DSB）"><a href="#5-2-2-抑制载波双边带调幅（DSB）" class="headerlink" title="5.2.2 抑制载波双边带调幅（DSB）"></a>5.2.2 抑制载波双边带调幅（DSB）</h3><p>由于载波不携带信息，因此为了节省发射功率，可以只发送含有信息的上下两个边带，而不发送载波；</p><p>可将调制信号和载波信号直接加到乘法器或者平衡调幅器电路得到；</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114155420246.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114154901811.png"></p><p>相位发生180°突变的原因是，调制信号的由正变成负或者说由负变成正；</p><p>对于正弦信号而言，系数变为原来的相反数，等效与加了一个180°的相位；</p><p>特点:</p><ul><li>DSB信号的幅值仍然随调制信号而变化，但与普通调制不同的是，DSB的包络不再反映调制信号的形状，仍保持调幅波频谱搬移的特征</li><li>在调制信号的正负半周，载波的相位反相；</li><li>信号仍然集中在载频ω_c附近，所占频带B&#x3D;2*F_max</li></ul><h3 id="5-2-3-抑制载波单边带调幅-SSB"><a href="#5-2-3-抑制载波单边带调幅-SSB" class="headerlink" title="5.2.3 抑制载波单边带调幅(SSB)"></a>5.2.3 抑制载波单边带调幅(SSB)</h3><ul><li>减小了发射功率</li><li>减小了频带宽度</li></ul><p>获得单边带的方法</p><ul><li>滤波法</li><li>相移法</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114161159957.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/113645865.jpg"></p><h2 id="5-3-调幅波产生的原理的理论分析"><a href="#5-3-调幅波产生的原理的理论分析" class="headerlink" title="5.3 调幅波产生的原理的理论分析"></a>5.3 调幅波产生的原理的理论分析</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114162048640.png"></p><h3 id="幂级数分析法（泰勒展开）"><a href="#幂级数分析法（泰勒展开）" class="headerlink" title="幂级数分析法（泰勒展开）"></a>幂级数分析法（泰勒展开）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211203163137776.png"></p><h3 id="线性时变分析法"><a href="#线性时变分析法" class="headerlink" title="线性时变分析法"></a>线性时变分析法</h3><hr><h3 id="指数函数分析法"><a href="#指数函数分析法" class="headerlink" title="指数函数分析法"></a>指数函数分析法</h3><hr><h3 id="开关函数分析法"><a href="#开关函数分析法" class="headerlink" title="开关函数分析法"></a>开关函数分析法</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211203163150671.png"></p><h2 id="5-4-普通调幅波产生电路"><a href="#5-4-普通调幅波产生电路" class="headerlink" title="5.4 普通调幅波产生电路"></a>5.4 普通调幅波产生电路</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/5.3%20%E6%99%AE%E9%80%9A%E8%B0%83%E5%B9%85%E6%B3%A2%E7%9A%84%E4%BA%A7%E7%94%9F%E7%94%B5%E8%B7%AF.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/5.4%20%E6%99%AE%E9%80%9A%E8%B0%83%E5%B9%85%E6%B3%A2%E7%9A%84%E8%A7%A3%E8%B0%83%E7%94%B5%E8%B7%AF.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114162933771.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114162957234.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114163053057.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211114163442288.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211203161147505.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/MD_2022-01-14_20-58-26.png"></p><h1 id="第六章-角度调制与解调"><a href="#第六章-角度调制与解调" class="headerlink" title="第六章 角度调制与解调"></a>第六章 角度调制与解调</h1><h2 id="6-2-角度调制信号分析"><a href="#6-2-角度调制信号分析" class="headerlink" title="6.2 角度调制信号分析"></a>6.2 角度调制信号分析</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211205184659352.png"></p><h3 id="调幅推导"><a href="#调幅推导" class="headerlink" title="调幅推导"></a>调幅推导</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213194014046.png"></p><h3 id="调频推导（角度调制）"><a href="#调频推导（角度调制）" class="headerlink" title="调频推导（角度调制）"></a>调频推导（角度调制）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211205184746597.png"></p><h3 id="调相推导（角度调制）"><a href="#调相推导（角度调制）" class="headerlink" title="调相推导（角度调制）"></a>调相推导（角度调制）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211205184804574.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/MS_2022-01-14_21-19-24.png"></p><h2 id="6-3-调频信号的产生"><a href="#6-3-调频信号的产生" class="headerlink" title="6.3 调频信号的产生"></a>6.3 调频信号的产生</h2><h2 id="6-4-调频电路"><a href="#6-4-调频电路" class="headerlink" title="6.4 调频电路"></a>6.4 调频电路</h2><h3 id="直接调频电路"><a href="#直接调频电路" class="headerlink" title="直接调频电路"></a>直接调频电路</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213214052716.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213214110648.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213214124187.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/MS_2022-01-14_20-51-50.png"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213213838548.png" alt="image-20211213213838548"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213213851813.png" alt="image-20211213213851813"></p><p>高频电路部分，工作在谐振频率w_c频率处</p><h3 id="间接调频"><a href="#间接调频" class="headerlink" title="间接调频"></a>间接调频</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213221429473.png" alt="image-20211213221429473"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/faabrwvgeth.jpg" alt="faabrwvgeth"></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213222143670.png" alt="" style="zoom:200%;" /><h2 id="6-5-调频波的解调"><a href="#6-5-调频波的解调" class="headerlink" title="6.5 调频波的解调"></a>6.5 调频波的解调</h2><h3 id="鉴频"><a href="#鉴频" class="headerlink" title="鉴频"></a>鉴频</h3><h4 id="直接鉴频"><a href="#直接鉴频" class="headerlink" title="直接鉴频"></a>直接鉴频</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213222649985.png" alt="image-20211213222649985"></p><h4 id="间接鉴频"><a href="#间接鉴频" class="headerlink" title="间接鉴频"></a>间接鉴频</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213230211347.png" alt="image-20211213230211347"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213230225517.png" alt="image-20211213230225517"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213230241571.png" alt="image-20211213230241571"></p><hr><hr><h3 id="鉴相"><a href="#鉴相" class="headerlink" title="鉴相"></a>鉴相</h3><p>相位鉴频器：LC失谐</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213223112508.png" alt="image-20211213223112508"></p><h4 id="乘积鉴相"><a href="#乘积鉴相" class="headerlink" title="乘积鉴相"></a>乘积鉴相</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213225921699.png" alt="image-20211213225921699"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213225940985.png" alt="image-20211213225940985"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213230049346.png" alt="image-20211213230049346"></p><h4 id="叠加鉴相"><a href="#叠加鉴相" class="headerlink" title="叠加鉴相"></a>叠加鉴相</h4><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20211213230107462.png" alt="image-20211213230107462"></p><hr><hr><h1 id="第七章-变频器"><a href="#第七章-变频器" class="headerlink" title="第七章 变频器"></a>第七章 变频器</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114221448695.png" alt="image-20220114221448695"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114221844995.png" alt="image-20220114221844995"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114222219113.png" alt="image-20220114222219113"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114222647124.png" alt="image-20220114222647124"> </p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114222840694.png" alt="image-20220114222840694"></p><p>变频和混频的区别：本振是否由单独的电路产生</p><p>本振由非线性元件产生——变频器</p><p>本振由单独的电路产生——混频器</p><p>实际情况不用区分两者，认为相同就行</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114223135336.png" alt="image-20220114223135336"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114223420769.png" alt="image-20220114223420769"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114223440058.png" alt="image-20220114223440058"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114223725558.png" alt="image-20220114223725558"></p><p>变频器在频域中起加法器和减法器的作用</p><h2 id="7-4-晶体管变频电路"><a href="#7-4-晶体管变频电路" class="headerlink" title="7.4 晶体管变频电路"></a>7.4 晶体管变频电路</h2><p>共射电路——用于频率较低</p><p>共基电路——频率较高</p><h2 id="7-6-环形混频器"><a href="#7-6-环形混频器" class="headerlink" title="7.6 环形混频器"></a>7.6 环形混频器</h2><h2 id="7-9-变频干扰"><a href="#7-9-变频干扰" class="headerlink" title="7.9 变频干扰"></a>7.9 变频干扰</h2><h3 id="7-9-1-信号与本振的自身组合频率干扰"><a href="#7-9-1-信号与本振的自身组合频率干扰" class="headerlink" title="7.9.1 信号与本振的自身组合频率干扰"></a>7.9.1 信号与本振的自身组合频率干扰</h3><h3 id="7-9-2-外来干扰和本振频率产生的副波道干扰"><a href="#7-9-2-外来干扰和本振频率产生的副波道干扰" class="headerlink" title="7.9.2 外来干扰和本振频率产生的副波道干扰"></a>7.9.2 外来干扰和本振频率产生的副波道干扰</h3><ol><li>中频干扰</li><li>镜频干扰</li><li>组合副波道干扰</li></ol><h3 id="7-9-3-交调和互调干扰"><a href="#7-9-3-交调和互调干扰" class="headerlink" title="7.9.3 交调和互调干扰"></a>7.9.3 交调和互调干扰</h3><ol><li>交调干扰</li><li>互调干扰</li></ol><h1 id="第八章-锁相环"><a href="#第八章-锁相环" class="headerlink" title="第八章 锁相环"></a>第八章 锁相环</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/MS_2022-01-14_22-48-08.png" alt="MS_2022-01-14_22-48-08"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/image-20220114224947240.png" alt="image-20220114224947240"></p><p> <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/MS_2022-01-14_22-58-24.png" alt="MS_2022-01-14_22-58-24"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/cec/MS_2022-01-14_22-58-31.png" alt="MS_2022-01-14_22-58-31"></p>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《鸟哥的Linux私房菜》</title>
    <link href="/blog/post/Knowledge/LearnLinux/"/>
    <url>/blog/post/Knowledge/LearnLinux/</url>
    
    <content type="html"><![CDATA[<p><font face="黑体" size=10 color=MediumPurple>《鸟哥的Linux私房菜》</font></p><h1 id="第一部分-Linux的规则与安装"><a href="#第一部分-Linux的规则与安装" class="headerlink" title="第一部分 Linux的规则与安装"></a><font color=DarkSeaGreen>第一部分 Linux的规则与安装</font></h1><h1 id="第三部分-学习设shell和shell-script"><a href="#第三部分-学习设shell和shell-script" class="headerlink" title="第三部分 学习设shell和shell script"></a><font color=DarkSeaGreen>第三部分 学习设shell和shell script</font></h1><h1 id="第四部分-Linux使用者管理"><a href="#第四部分-Linux使用者管理" class="headerlink" title="第四部分 Linux使用者管理"></a><font color=DarkSeaGreen>第四部分 Linux使用者管理</font></h1><h1 id="第五部分-Linux系统管理员"><a href="#第五部分-Linux系统管理员" class="headerlink" title="第五部分 Linux系统管理员"></a><font color=DarkSeaGreen>第五部分 Linux系统管理员</font></h1><h1 id="第0章-计算机概论"><a href="#第0章-计算机概论" class="headerlink" title="第0章 计算机概论"></a>第0章 计算机概论</h1><h2 id="0-1-电脑"><a href="#0-1-电脑" class="headerlink" title="0.1 电脑"></a>0.1 电脑</h2><ul><li>接受用户 输入的命令与数据，经由中央处理器的算术和逻辑单元运算处理后，产生或存储成有用的信息</li></ul><h3 id="0-1-1-硬件五大单元"><a href="#0-1-1-硬件五大单元" class="headerlink" title="0.1.1 硬件五大单元"></a>0.1.1 硬件五大单元</h3><ul><li>输入单元,输出单元,控制单元,算数逻辑单元,记忆单元<ul><li>CPU包括控制单元和算数逻辑单元</li><li>记忆单元包含内存和辅助存储</li></ul></li><li>数据会流进或流出内存是CPU所发布的控制命令，CPU实际要处理的数据则完全来自于内存</li></ul><h3 id="0-1-2-CPU的架构"><a href="#0-1-2-CPU的架构" class="headerlink" title="0.1.2 CPU的架构"></a>0.1.2 CPU的架构</h3><p>目前世界上最常见的两种CPU架构：精简指令集（RISC）——复杂指令集（CICS）</p><ul><li>精简指令集（Reduced Instruction Set Computer,RISC）<ul><li>指令较为精简，每个指令的运行时间都很短，完成的操作很简单，指令的执行性能较佳；</li><li>做复杂的事情需要多个指令来完成；</li><li>甲骨文公司——SPARC系列<ul><li>学术领域的大型工作站</li><li>金融体系服务器</li></ul></li><li>IBM公司——Power Architecture（包括<a href="https://baike.baidu.com/item/PowerPC/7381773">PowerPC</a>）<ul><li>Sony的PS3</li></ul></li><li>ARM公司——ARM CPU<ul><li>移动设备（手机等），网络设备（路由器，交换机等）</li></ul></li></ul></li><li>复杂指令集（Complex Instruction Set Computer,CICS）<ul><li>指令集的每个小指令可以执行一些较低级的硬件操作，指令数目多而复杂，每条指令的长度不同；</li><li>指令执行较为复杂，每条指令执行花费的时间长，每个单条指令可以处理工作比较丰富；</li><li>X86架构（Intel,AMD,<a href="https://baike.baidu.com/item/VIA/24460">VIA</a>)<ul><li>X86——8位，16位，32位</li><li>X86-64——64位</li></ul></li></ul></li></ul><h3 id="0-1-3-其他单元的设备"><a href="#0-1-3-其他单元的设备" class="headerlink" title="0.1.3  其他单元的设备"></a>0.1.3  其他单元的设备</h3><ul><li>系统单元：CPU与内存及主板相关组件</li><li>存储单元：内存（RAM）和辅助存储</li><li>输入输出单元</li></ul><h3 id="0-1-4-运作流程"><a href="#0-1-4-运作流程" class="headerlink" title="0.1.4  运作流程"></a>0.1.4  运作流程</h3><h3 id="0-1-5-电脑的分类"><a href="#0-1-5-电脑的分类" class="headerlink" title="0.1.5 电脑的分类"></a>0.1.5 电脑的分类</h3><ul><li>超级计算机（Supercomputer）</li><li>大型计算机(Mainframe Computer)</li><li>迷你计算机(Minicomputer)</li><li>工作站(Workstation)</li><li>微电脑(Microcomputer)</li></ul><h3 id="0-1-6-计算单位"><a href="#0-1-6-计算单位" class="headerlink" title="0.1.6 计算单位"></a>0.1.6 计算单位</h3><ul><li>容量<ul><li>Kilo</li><li>Mega</li><li>Giga</li><li>Tera</li><li>Peta</li><li>Exa</li><li>Zetta</li></ul></li><li>速度<ul><li>MB&#x2F;s</li><li>Mbit&#x2F;s</li></ul></li></ul><h2 id="0-2-PC架构与设备组件"><a href="#0-2-PC架构与设备组件" class="headerlink" title="0.2 PC架构与设备组件"></a>0.2 PC架构与设备组件</h2><p>主板芯片组</p><ul><li>北桥：负责链接速度较快的CPU，内存与显卡等组件</li><li>南桥：负责连接速度较慢的设备接口（硬盘，USB，网卡等）</li><li>目前，北桥大多都集成在了CPU中</li></ul><h3 id="0-2-1-CPU"><a href="#0-2-1-CPU" class="headerlink" title="0.2.1 CPU"></a>0.2.1 CPU</h3><ul><li><p>工作频率：外频和倍频</p><p>外频指的是CPU与外部组件进行数据传输时的速度，倍频则是CPU内部用来加速工作性能的一个倍数，两者相乘就是CPU的频率速度；</p><ul><li>超频：将CPU的倍频或者是外频通过主板提供的设置功能更改成较高频率的一种方式，CPU倍频一般是被厂商锁定的，因此超频是提高外频；</li><li>Intel的CPU会主动帮助超频，使用的是Turbo技术，即睿频；</li></ul></li><li><p>CPU位数与总线位宽</p></li><li><p>CPU等级</p></li><li><p>超线程（Hyper-Threading）</p></li></ul><h3 id="0-2-2-内存"><a href="#0-2-2-内存" class="headerlink" title="0.2.2 内存"></a>0.2.2 内存</h3><p>个人电脑的内存主要组件位动态随机存取内存（DRAM），即断电数据就消失</p><p>发展：</p><ul><li><p>SDRAM</p></li><li><p>DDR SDRAM（Double Date Rate）</p><ul><li>DDR</li><li>DDR2</li><li>DDR3</li><li>DDR4</li></ul></li><li><p>多通道设计</p></li></ul><p>​传统的总线位宽一般大约位64位，为了加大这个位宽，芯片组厂商就将两个内存集合在一起，如果一根内存可达到64位，两个内存就是128位，这就是双通道</p><ul><li><p>DRAM与SRAM</p><ul><li><p>DRAM是内存</p></li><li><p>SRAM是CPU内部的Cache</p><ul><li><pre><code class="markdown">**CPU一级缓存、二级缓存、三级缓存是什么意思？****一级缓存（L1 Cache）**CPU一级缓存，就是指CPU的第一层级的高速缓存，主要当担的工作是缓存指令和缓存数据。一级缓存的容量与结构对CPU性能影响十分大，但是由于它的结构比较复杂，又考虑到成本等因素，一般来说，CPU的一级缓存较小，通常CPU的一级缓存也就能做到256KB左右的水平。**二级缓存（L2 Cache）**CPU二级缓存，就是指CPU的第二层级的高速缓存，而二级缓存的容量会直接影响到CPU的性能，二级缓存的容量越大越好。例如intel的第八代i7-8700处理器，共有六个核心数量，而每个核心都拥有256KB的二级缓存，属于各核心独享，这样二级缓存总数就达到了1.5MB。**三级缓存（L3 Cache）**CPU三级缓存，就是指CPU的第三层级的高速缓存，其作用是进一步降低内存的延迟，同时提升海量数据量计算时的性能。和一级缓存、二级缓存不同的是，三级缓存是核心共享的，能够将容量做的很大。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> ROM（只读存储器）<br><br><span class="hljs-section">### 0.2.3 显卡</span><br><br><span class="hljs-bullet">-</span> 一般对于图形影像的显示重点在于<span class="hljs-strong">**分辨率**</span>与<span class="hljs-strong">**颜色深度**</span>，因为每个图像显示的颜色会占用内存，因此在显卡上面会集成内存并称为显存，这个显存容量将会影响到你的屏幕分辨率和颜色深度；<br><br><span class="hljs-bullet">-</span> 显卡主要是通过GPU的控制芯片来与CPU，内存等通信；<br><br><span class="hljs-bullet">-</span> 显卡与主板连接接口规格的更新：PCI-&gt;AGP-&gt;PCI-Express(PCIe);<br><span class="hljs-bullet">-</span> 显卡与显示器连接接口规格：<br><span class="hljs-bullet">  -</span> D-Sub（VGA）<br><span class="hljs-bullet">  -</span> DVI<br><span class="hljs-bullet">  -</span> HDMI<br><span class="hljs-bullet">  -</span> DisplayPort<br><br><span class="hljs-section">### 0.2.4硬盘与存储设备</span><br><br><span class="hljs-bullet">-</span> 物理组成：圆形碟片，机械手臂，磁头，主轴马达；<br><span class="hljs-bullet">  -</span> 主轴马达让碟片转动，然后机械手臂可伸展让磁头在碟片上面进行读写的操作；<br><span class="hljs-bullet">-</span> ![<span class="hljs-string">961754-20170731180025880-471442869</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/961754-20170731180025880-471442869.png</span>)<br><span class="hljs-bullet">-</span> ![<span class="hljs-string">2843224-46fb935cd31addbd</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/2843224-46fb935cd31addbd.png</span>)<br><span class="hljs-bullet">-</span> 扇区：最小物理存储单位<br><span class="hljs-bullet">-</span> 磁道：同一个同心圆的扇区组合成的圆<br><span class="hljs-bullet">-</span> 所有碟片上面的同一个磁道<br><span class="hljs-bullet">-</span> 磁盘分区<br><span class="hljs-bullet">  -</span> （旧式）<span class="hljs-strong">**MBR**</span>（MS-DOS兼容）：通过<span class="hljs-strong">**柱面号码**</span>来划分磁盘的分区<br><span class="hljs-bullet">  -</span> （新式）<span class="hljs-strong">**GPT**</span>：使用<span class="hljs-strong">**扇区号码**</span>来划分磁盘的分区<br><span class="hljs-bullet">-</span> 传输接口<br><span class="hljs-bullet">  -</span> SATA<br><span class="hljs-bullet">    -</span> 注意：SATA传输接口传输时，通过数据算法的关系，当传输10位编码时，仅有8位为数据，其余两位为检验位。因此带宽计算，使用1B=10bits(而不是1B=8bits)<br><span class="hljs-bullet">  -</span> SAS<br><span class="hljs-bullet">    -</span> 速度更快，支持热插拔<br><span class="hljs-bullet">  -</span> USB<br><span class="hljs-bullet">-</span> SSD与HDD<br><span class="hljs-bullet">  -</span> 固态硬盘（Solid State Disk）：闪存，没有碟片和磁头等机械设备<br><span class="hljs-bullet">  -</span> 机械磁盘（Hard Disk Drive）<br><br><span class="hljs-section">### 0.2.5 扩展卡与接口</span><br><br><span class="hljs-section">### 0.2.6 主板</span><br><br><span class="hljs-bullet">-</span> 发挥拓展卡的性能必须要考虑插槽的位置<br><span class="hljs-bullet">  -</span> 主板上靠近CPU的PCIe插槽直接与CPU通信，远离CPU插槽的PCIe插槽是南桥提供的，先于南桥进行通信再通过南桥与CPU进行通信（CPU与南桥进行通信的管导称为DMI2.0总线）<br><span class="hljs-bullet">-</span> 设备IO地址与IRQ中断请求<br><span class="hljs-bullet">-</span> CMOS与BIOS<br><span class="hljs-bullet">  -</span> CMOS主要的功能为记录主板上面的重要参数，包括系统时间、CPU电压与频率、各项设备的IO地址与IRQ等，由于这些数据的记录要用电，因此主板上面大都有一颗纽扣电池<br><span class="hljs-bullet">    -</span> 百度：是主板上的一块可读写的<span class="hljs-strong">**RAM芯片**</span>，用来保存当前系统的硬件配置和用户对参数的设定，其内容可通过设置程序进行读写。 CMOS芯片由主板上的钮扣电池供电，即使系统断电，参数也不会丢失。<br><span class="hljs-bullet">  -</span> BIOS是写入到主板上某一块flash或EEPROM（<span class="hljs-strong">**很久之前是ROM**</span>）的<span class="hljs-strong">**程序**</span>，它可以在计算机启动的时候执行，以加载CMOS当中的参数，并尝试调用存储设备中的引导程序，进一步进入操作系统中<br><span class="hljs-bullet">  -</span> BIOS程序也可以修改CMOS中的数据，一般是通过开机时按下DELETE进入BIOS设置界面<br><span class="hljs-bullet">-</span> 连接外设的接口<br><span class="hljs-bullet">  -</span> PS/2：老式的键盘鼠标接口，现在已经被USB取代了<br><span class="hljs-bullet">  -</span> USB<br><span class="hljs-bullet">  -</span> 声音输入输出与麦克风<br><span class="hljs-bullet">  -</span> RJ-45：内部8个芯片触点，网口<br><span class="hljs-bullet">  -</span> HDMI：连接主板上的显示芯片<br><br><span class="hljs-section">### 0.2.7 主机电源</span><br><br><span class="hljs-section">### 0.2.8 选购须知</span><br><br><span class="hljs-section">## 0.3 数据表示方式</span><br><br><span class="hljs-section">### 0.3.1数字系统</span><br><br><span class="hljs-bullet">-</span> 数字进制<br><br><span class="hljs-section">### 0.3.2 字符编码系统</span><br><br><span class="hljs-bullet">-</span> 英文编码表：ASCII——英文，数字，符号占用一个字节<br><span class="hljs-bullet">-</span> 中文编码：台湾地区：Big5，大陆：GB2312或GBK<br><span class="hljs-bullet">-</span> Unicode编码系统（UTF-8或万国码）：用ISO/IEC指定，打破了所有国家使用不同的编码，目前是互联网是使用最多的编码系统<br><br><span class="hljs-section">## 0.4 软件程序运行</span><br><br><span class="hljs-section">### 0.4.1 机器语言程序与编译型程序</span><br><br><span class="hljs-section">### 0.4.2操作系统</span><br><br>OS（Operating System）<br><br><span class="hljs-section">#### 操作系统内核 Kernel</span><br>Kernel  [&#x27;kɜrn(ə)l]<br><br>OS其实就是一组程序，这组程序的重点在于管理电脑的所有活动以及驱动系统中的所有硬件<br><br>为了防止用户修改内核程序，造成系统崩溃，内核程序放置到内存当中的区块是受保护的，并且启动后就一直常驻在内存当中<br><br><span class="hljs-section">#### 系统调用System Call</span><br><br>API：应用程序编程接口<br><br><span class="hljs-bullet">-</span> 操作系统的<span class="hljs-strong">**内核层**</span>直接参考<span class="hljs-strong">**硬件规格**</span>写成，所以同一操作系统程序<span class="hljs-strong">**不能够**</span>在不一样的硬件架构下运行<br><span class="hljs-bullet">-</span> 操作系统只是管理整个硬件资源，包括CPU,内存，输入输出设备及文件系统等。<br><span class="hljs-bullet">  -</span> 如果没有其他的应用程序辅助，操作系统只能让电脑主机准备妥当（Ready）而已，无法运行其他功能。<br><span class="hljs-bullet">-</span> 应用程序的开发都是参考操作系统提供的API，所以该应用程序只能在该操作系统上面运行而已，不可以在其他操作系统上运行<br><br><span class="hljs-section">#### 内核功能</span><br><br><span class="hljs-bullet">-</span> 系统调用接口<br><span class="hljs-bullet">-</span> 进程管理<br><span class="hljs-bullet">-</span> 内存管理<br><span class="hljs-bullet">-</span> 文件系统管理<br><span class="hljs-bullet">-</span> 设备驱动<br><br><span class="hljs-section">#### 操作系统与驱动程序</span><br><br><span class="hljs-bullet">-</span> 操作系统必须要能够<span class="hljs-strong">**驱动硬件**</span>，如此应用程序才能使用该硬件功能；<br><span class="hljs-bullet">-</span> 一般来说，操作系统会提供API，让开发商编写他们的驱动程序；<br><span class="hljs-bullet">-</span> 要使用新硬件功能，必须要安装厂商提供的驱动程序才行；<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**驱动程序是由厂商提供，与操作系统无关**</span>。<br><br><span class="hljs-section">### 0.4.应用程序</span><br><br>应用程序是参考操作系统提供的API所开发出来的软件；<br><br>应用程序是与操作系统有关的<br><br><span class="hljs-section">## 0.5 重点回顾</span><br><br><br><br><br><br><span class="hljs-section"># 第1章 Linux是什么与如何学习</span><br><br><span class="hljs-section">## 1.1 Linux是什么</span><br><br>Linux提供了一个操作系统中对底层的硬件控制资源与资源管理的完整架构，这个架构是继承了UNIX良好的传统而来，所以相当的稳定且功能强大；<br><br><span class="hljs-section">### 1.1.2 UNIX</span><br><br><span class="hljs-bullet">-</span> 1969年之前，Bell，MIT与GE的“Mutics”<br><span class="hljs-bullet">-</span> 1969年，Ken Thompson的小型file server system<br><span class="hljs-bullet">  -</span> UNIX的原型<br><span class="hljs-bullet">  -</span> 汇编语言：内核程序（内核工具程序和文件系统）<br><span class="hljs-bullet">  -</span> 提出重要概念<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**所有的程序或系统设备都是文件；**</span><br><span class="hljs-bullet">    -</span> 不管程序本书还是附属文件，所写的程序只有一个目的，且要有效地完成目标；<br><span class="hljs-bullet">-</span> 1973年，UNIX正式诞生，Ritchie等人用C语言写出第一次正式UNIX内核<br><span class="hljs-bullet">-</span> 1977年，重要的UNIX分支——BSD的诞生<br><span class="hljs-bullet">-</span> 1979年，重要的System V架构与版权声明<br><span class="hljs-bullet">  -</span> 支持x86架构的个人计算机<br><span class="hljs-bullet">  -</span> AT&amp;T收回UNIX的版权<br><span class="hljs-bullet">-</span> 1984，x86架构的Minix操作系统开始编写并于两年后诞生<br><span class="hljs-bullet">  -</span> 类UNIX的内核程序<br><span class="hljs-bullet">  -</span> Minix与UNIX兼容<br><span class="hljs-bullet">  -</span> 只用于教育教学<br><span class="hljs-bullet">-</span> 1984，GNU计划于FSF基金会的成立<br><span class="hljs-bullet">  -</span> 大佬：斯托曼<br><span class="hljs-bullet">  -</span> 开源<br><span class="hljs-bullet">  -</span> GNU：建立一个自由、开放的UNIX操作系统<br><span class="hljs-bullet">  -</span> 斯托曼开发C语言的编译器GNU Compiler（gcc）<br><span class="hljs-bullet">  -</span> FSF：自由软件基金会<br><span class="hljs-bullet">  -</span> C函数库：GNU C library<br><span class="hljs-bullet">  -</span> 运行操作系统的基本接口：Bash Shell<br><span class="hljs-bullet">  -</span> GNU的通用公共许可证：GPL<br><span class="hljs-bullet">-</span> 1988 图形用户界面模式XFree86计划<br><span class="hljs-bullet">  -</span> 图形用户接口 GUI<br><span class="hljs-bullet">  -</span> XFree86=X Windw System+Free+x86<br><span class="hljs-bullet">-</span> 1991：芬兰大学生Linus Torvalds<br><span class="hljs-bullet">  -</span> 以bash，gcc等GNU的工具写了一个小小的内核程序<br><br><span class="hljs-section">### 1.1.3  GUN 自由软件 开放源代码</span><br><br>使用GPL版权声明的软件就是自由软件，有以下特色<br><br><span class="hljs-bullet">-</span> 取得软件与源代码：可以根据自己的需求来使用这个自由软件<br><span class="hljs-bullet">-</span> 复制：可以自由地复制该软件<br><span class="hljs-bullet">-</span> 修改：可以将取得的源代码进行程序修改工作，使之适合你的工作<br><span class="hljs-bullet">-</span> 再发行：你可以将你修改过的程序，再度自由发行，而不会与原先的编者冲突<br><span class="hljs-bullet">-</span> 回馈：应该将你修改过的程序代码发聩于社区<br><span class="hljs-bullet">-</span> 不可以修改授权：不能把GPL授权的自由软件在经过你的修改后而取消GPL授权<br><span class="hljs-bullet">-</span> 不能销售自由软件<br><br>开放源代码<br><br><span class="hljs-bullet">-</span> 1988年诞生了开源这一名词（open source）<br><br><span class="hljs-section">## 1.2 托瓦兹的Linux的发展</span><br><br><span class="hljs-section">### 1.2.3 初次发布Linux 0.02</span><br><br>在BBS上发布了Linux 内核，之后从Linus单人维护到广大志愿者参与维护<br><br><span class="hljs-section">### 1.2.5 Linux的内核版本</span><br><br>Linux的内核版本与Linux的发行版本<br><br><span class="hljs-section">### 1.2.6 Linux发行版</span><br><br>![<span class="hljs-string">image-20210826170424750</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210826170424750.png</span>)<br><br><span class="hljs-section">## 1.3 Linux当前应用的角色</span><br><br><span class="hljs-section">## 1.4 Linux该如何学习</span><br><br><span class="hljs-section"># 第2章 主机规划与磁盘分区</span><br><br>磁盘阵列（RAID）是利用硬件技术将整个硬盘整合成为一个大硬盘的方法，操作系统只会看到最后被整合起来的大硬盘。由于磁盘阵列是由多个硬盘组成，所以可完成提升速度和性能，备份等任务。<br><br><span class="hljs-section">## 2.1 Linux与硬件的搭配</span><br><br><span class="hljs-section">### 2.1.3 各硬件设备在Linux中的文件名</span><br><br><span class="hljs-strong">**在Linux系统中，每个设备都被当作一个文件来对待**</span><br><br>![<span class="hljs-string">image-20210826222907635</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210826222907635.png</span>)<br><br><span class="hljs-section">## 2.2 磁盘分区</span><br><br><span class="hljs-section">### 2.2.1 磁盘连接方式与设备文件名的关系</span><br><br>设备文件名与Linux内核检测到的磁盘的顺序来命名<br><br>整个磁盘中并不是每个扇区都同等重要，第一个扇区特别重要，因为加鲁鲁整块磁盘的重要信息；<br><br><span class="hljs-bullet">-</span> 早期磁盘第一个扇区里面包含的重要信息称为MBR（Master Boot Record），硬盘容量过大之后，操作系统会读取MBR会有困难<br><span class="hljs-bullet">-</span> 目前新的磁盘分区格式称为GPT（GUID partition table）<br><br><span class="hljs-section">### 2.2.2 MBR与GPT磁盘分区表</span><br><br>![<span class="hljs-string">partition-1</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/partition-1.png</span>)<br><br>![<span class="hljs-string">partition-2</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/partition-2.png</span>)<br><br><span class="hljs-bullet">-</span> MBR（MS-DOS）分区表格式与限制<br><br><span class="hljs-bullet">  -</span> 第一个扇区存放的内容<br><span class="hljs-bullet">    -</span> 主引导记录（MBR）：可以安装启动引导程序的地方（446字节）；<br><span class="hljs-bullet">    -</span> 分区表：记录整块硬盘分区的状态（16字节）；<br><span class="hljs-bullet">  -</span> MBR主要分区，拓展分区，逻辑分区<br><span class="hljs-bullet">    -</span> 主要分区与拓展分区最多可以有4个（硬盘限制）<br><span class="hljs-bullet">    -</span> 拓展分区最多只能有1个（操作系统限制）<br><span class="hljs-bullet">    -</span> 逻辑分区是由扩展分区持续划分出来的分区<br><span class="hljs-bullet">    -</span> 能够被格式化后作为数据存取的分区是主要分区和逻辑分区，拓展分区无法格式化<br><span class="hljs-bullet">    -</span> 逻辑分区的数量依操作系统而不同<br><span class="hljs-bullet">  -</span> MBR分区的问题<br><span class="hljs-bullet">    -</span> 操作系统无法使用2.2TB以上的磁盘<br><span class="hljs-bullet">    -</span> MBR仅有一个区块，如果损坏，就有大问题了<br><span class="hljs-bullet">    -</span> MBR内存放启动引导程序的区块仅有446字节<br><br><span class="hljs-bullet">-</span> GPT磁盘分区表<br><br>  扇区定义，大多使用所谓的逻辑区块地址（LBA），GPT将磁盘所有区块以此LBA（默认大小521字节）来规划，而第一个LBA被称为LBA0<br><br>  MBR仅使用一个第一个512字节大学奥的区块来记录分区信息<br><br>  GPT使用34个LBA区块来记录分区信息，同时整个磁盘最后面的34个LBA作为备份<br><br>  ![<span class="hljs-string">gpt_partition_1</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/gpt_partition_1.jpg</span>)<br><br><span class="hljs-bullet">  -</span> LBA0 （MBR 兼容区块）<br><br><span class="hljs-code">    与 MBR 模式相似的，这个兼容区块也分为两个部份，一个就是跟之前 446 bytes 相似的区块，保存了第一阶段的启动引导程序！ 而在原本的**分区表的纪录区**内，这个兼容模式仅放入一个**特殊标志的分割**，用来表示**此磁盘为 GPT 格式**之意。 而不懂 GPT 分割表的磁盘管理程序， 就不会认识这颗磁盘，除非用户有特别要求要处理这颗磁盘，否则该管理软件不能修改此分割信息，进一步保护了此磁盘喔！</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">  -</span> LBA1 （GPT 表头纪录）<br><br><span class="hljs-code">    这个部分纪录了分割表本身的位置与大小，同时纪录了备份用的 GPT 分割 （就是前面谈到的在最后 34 个 LBA 区块） 放置的位置， 同时放置了分割表的检验机制码 （CRC32），操作系统可以根据这个检验码来判断 GPT 是否正确。 若有错误，还可以通过这个记录区来取得备份的 GPT（磁盘最后的那个备份区块） 来恢复 GPT 的正常运作！</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">  -</span> LBA2-33 （实际日志分信息处）<br><br><span class="hljs-code">    从 LBA2 区块开始，每个 LBA 都可以纪录 4 笔分割纪录，所以在默认的情况下，总共可以有 4*32 = 128 笔分割日志喔！ 因为每个 LBA 有 512bytes，因此每笔纪录用到 128 bytes 的空间，除了每笔纪录所需要的识别码与相关的纪录之外，GPT 在每笔纪录中分别提供了 64bits 来记载开始/结束的磁区号码，因此，GPT 分割表对于单一分割槽来说， 他的最大容量限制就会在&#x27; 264 * 512bytes = 263 * 1Kbytes = 233*TB = 8 ZB &#x27;，要注意 1ZB = 230TB 啦！ 你说有没有够大了？</span><br><span class="hljs-code"></span><br>GPT 分割已经没有所谓的主、延伸、逻辑分割的概念，既然每笔纪录都可以独立存在， 当然每个都可以视为是主分割！ 每一个分割都可以拿来格式化使用喔！<br><br><span class="hljs-section">### 2.2.3 BIOS与UEFI</span><br><br>早期的BIOS与新的UEFI<br><br><span class="hljs-emphasis">*（拓展知识：[<span class="hljs-string">UEFI和Legacy及UEFI+Legacy启动的区别</span>](<span class="hljs-link">https://www.cnblogs.com/net5x/p/6850801.html</span>)）*</span><br><br><span class="hljs-section">#### 1.BIOS搭配MBR/GPT的启动流程</span><br>（如果支持GPT的话，步骤类似，BIOS读取启动引导程序是从LBA0的MBR兼容区块读取0）<br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**CMOS**</span>是记录各项硬件参数且嵌入主板上面的<span class="hljs-strong">**存储器**</span><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**BIOS**</span>是一个写入主板上的一个<span class="hljs-strong">**固件**</span>（<span class="hljs-strong">**固件就是写入到硬件上的一个软件程序**</span>）<br><span class="hljs-bullet">  -</span> BIOS就是在启动的时候，计算机系统会主动执行的第一个程序<br><span class="hljs-bullet">-</span> 开机时，计算机首先执行BIOS程序，接下来BIOS去分析计算中里面有哪些存储设备，找到用户设置的能够启动的硬盘，并且到该硬盘里面去读取第一个扇区的MBR位置；<br><span class="hljs-bullet">  -</span> MBR这个仅有446字节的硬盘容量里面放置了最基本的<span class="hljs-strong">**启动引导程序**</span>。（此时,BIOS就完成工作了，接下来就是MBR内的启动引导程序的工作了）<br><span class="hljs-bullet">-</span> 启动引导程序的目的是加载内核文件，内核文件工作就开启了操作系统<br><br><span class="hljs-section">#### 2.UEFI BIOS搭配GPT启动的流程</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**统一可扩展固件接口**</span>（英语：Unified Extensible Firmware Interface，缩写<span class="hljs-strong">**UEFI**</span>）是一种[<span class="hljs-string">个人电脑</span>](<span class="hljs-link">https://baike.baidu.com/item/个人电脑</span>)系统规格，用来定义[<span class="hljs-string">操作系统</span>](<span class="hljs-link">https://baike.baidu.com/item/操作系统</span>)与系统[<span class="hljs-string">固件</span>](<span class="hljs-link">https://baike.baidu.com/item/固件</span>)之间的[<span class="hljs-string">软件界面</span>](<span class="hljs-link">https://baike.baidu.com/item/软件界面</span>)，作为[<span class="hljs-string">BIOS</span>](<span class="hljs-link">https://baike.baidu.com/item/BIOS</span>)的替代方案。可扩展固件接口负责[<span class="hljs-string">加电自检</span>](<span class="hljs-link">https://baike.baidu.com/item/加电自检</span>)（POST）、联系操作系统以及提供连接操作系统与硬件的接口。<br><span class="hljs-bullet">-</span> UEFI BIOS与UEFI 两种名称是一样的<br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20210826233859729</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210826233859729.png</span>)<br><br><span class="hljs-section">### 2.2.4 Linux安装模式下，磁盘分区的选择</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**目录树结构**</span><br><span class="hljs-bullet">  -</span> 所谓的目录树架构（directory tree）就是以根目录为主，然后向下呈现分支状的目录结构的一种档案架构。 所以，整个目录树架构最重要的就是那个根目录（root directory），这个根目录的表示方法为一条斜线<span class="hljs-strong">**/**</span>，<br><span class="hljs-bullet">  -</span> ![<span class="hljs-string">image-20210826234704573</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210826234704573.png</span>)<br><span class="hljs-bullet">  -</span> 如上图所示，所有的档案都是由根目录（/）衍生来的，而次目录之下还能够有其他的资料存在。 上图中长方形为目录， 波浪形则为档案。 那当我们想要取得mydata那个档案时，系统就得由根目录开始找，然后找到home接下来找到dmtsai， 最终的文件名为：/home/dmtsai/mydata的意思。<br><span class="hljs-bullet">-</span> 文件系统与目录树的关系（挂载）<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**挂载：就是利用一个目录当成进入点，将磁盘分区的数据放置在该目录下；也就是说进入该目录就可以读取该分区的意思。**</span><br><span class="hljs-bullet">  -</span> 进入点的目录称为挂载点；<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**Linux最重要的就是根目录，因此根目录一定需要挂载到某个分区**</span><br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**Linux上的挂载和Windows中的分区代号是不一样的**</span><br><span class="hljs-bullet">-</span> 发行版安装时，挂载点与磁盘分区的规划<br><span class="hljs-bullet">  -</span> “/”根目录<br><span class="hljs-bullet">  -</span> “swap” 交换分区<br><span class="hljs-bullet">  -</span> 预留一个备份的剩余磁盘容量<br><span class="hljs-bullet">  -</span> 默认硬盘分区方式<br><br><br><br><br><br><span class="hljs-section">## 2.3 安装Linux前的规划</span><br><br><span class="hljs-section">### 2.3.1 发行版</span><br><br><span class="hljs-bullet">-</span> 每个Linux的发行版都是使用来自[<span class="hljs-string">The Linux Kernel Archives</span>](<span class="hljs-link">https://www.kernel.org/</span>)官方网站提供的Linux内核<br><br><span class="hljs-section">### 2.3.2 主机的服务规划与硬件的关系</span><br><br><span class="hljs-bullet">-</span> NAT：IP分享器的功能<br><span class="hljs-bullet">-</span> SAMBA：加入Windows网络邻居<br><span class="hljs-bullet">-</span> Mail：邮件服务器<br><span class="hljs-bullet">-</span> Web：WWW服务器<br><span class="hljs-bullet">-</span> DHCP：提供客户端自动获取IP的功能<br><span class="hljs-bullet">-</span> FTP：文件传输服务器<br><br><span class="hljs-section">### 2.3.3 主机硬盘的主要规划</span><br><br><span class="hljs-bullet">-</span> 最简单的分区<br><span class="hljs-bullet">  -</span> 仅划分根目录和内存交换分区（/和swap）<br><span class="hljs-bullet">  -</span> 遇了一些剩余的磁盘空间<br><span class="hljs-bullet">-</span> 稍微复杂<br><span class="hljs-bullet">  -</span> 将频繁使用的分区从根目录下独立出来<br><span class="hljs-bullet">  -</span> /boot<br><span class="hljs-bullet">  -</span> /<br><span class="hljs-bullet">  -</span> /home<br><span class="hljs-bullet">  -</span> /var<br><span class="hljs-bullet">  -</span> swap<br><br><br><br><span class="hljs-section"># 第3章 安装CentOS 7.x</span><br><br>[<span class="hljs-string">kickstart详解(超级详细)_Be_Nice的博客-CSDN博客_kickstart</span>](<span class="hljs-link">https://blog.csdn.net/mpu_nice/article/details/107922312</span>)<br><br><span class="hljs-section">## 3.2 安装CentOS</span><br><br><span class="hljs-section">### 3.2.1 BIOS</span><br><br><span class="hljs-section">### 3.2.2 选择安装模式与启动（inst.gpt）</span><br><br><span class="hljs-section">### 3.2.5  磁盘分区与文件系统设置</span><br><br><span class="hljs-bullet">-</span> 这是最重要的部分，这一部分得需要多安装几次Linux才能掌握理解<br><br><span class="hljs-section"># 第4章 首次登陆与在线求助</span><br><br><span class="hljs-section">## 4.1 首次登陆系统</span><br><br><span class="hljs-section">### 4.1.2GNOME的操作与注销</span><br><br><span class="hljs-bullet">-</span> 文件名开头是小数点，那么该文件就不会在一般观察模式中被显示出来<br><br>  ![<span class="hljs-string">2021-08-28 10-27-36屏幕截图</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/2021-08-28%2010-27-36%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png</span>)<br><br><span class="hljs-bullet">-</span> 带着箭头的文件：链接文件（类似Windows中的快截方式）<br><br>  ![<span class="hljs-string">image-20210828103148301</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828103148301.png</span>)<br><br><span class="hljs-bullet">-</span> 带着X号的图标：账号没有权限进入该目录<br><br>  ![<span class="hljs-string">image-20210828103609210</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828103609210.png</span>)<br><br><span class="hljs-bullet">-</span> 优化:<br><br>  ![<span class="hljs-string">image-20210828105330328</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828105330328.png</span>)<br><br><span class="hljs-section">### 4.1.3 X Window 与命令行模式的切换</span><br><br><span class="hljs-bullet">  -</span> ctrl+alt+【F1-F6】<br><br><span class="hljs-section">### 4.1.4 在终端登陆Linux</span><br><br><br><br><span class="hljs-section">## 4.2 命令行模式下的命令的执行</span><br><br>命令行模式登陆后所运行的程序被称为壳（Shell），这是因为这个程序负责最外面跟用户沟通<br><br><br>&gt;[dmtsai@study ~]$ command  [-options]  parameter1  parameter2 ...<br><span class="hljs-quote">&gt;                   指令     選項        參數(1)     參數(2)</span><br><br><br><br><br>![<span class="hljs-string">image-20210828113804400</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828113804400.png</span>)<br><br><span class="hljs-section">### 4.2.2 基础命令操作</span><br><br><span class="hljs-bullet">-</span> date 日期<br><span class="hljs-bullet">-</span> cal 日历<br><span class="hljs-bullet">-</span> bc 简易计算器<br><br><span class="hljs-section">### 4.2.3 热键</span><br><br><span class="hljs-bullet">-</span> 【tab】：命令补全与文件补齐<br><span class="hljs-bullet">  -</span> 我们按【tab】按键的地方如果在command（第一个输入的数据）的后面，就代表着【命令补全】，如果是在第二个字段后面就变成【文件补齐】功能<br><span class="hljs-bullet">  -</span> ![<span class="hljs-string">image-20210828121239694</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828121239694.png</span>)<br><span class="hljs-bullet">-</span> 【CTRL】+C:中断目前的程序<br><span class="hljs-bullet">-</span> 【CTRL】+D：键盘结束输入<br><span class="hljs-bullet">  -</span> 退出root程序<br><span class="hljs-bullet">  -</span> 退出terminal<br><span class="hljs-bullet">  -</span> 类似exit<br><span class="hljs-bullet">-</span> 【shift】+&#123;【page up】【page down】&#125;：翻页<br><br><br><br><span class="hljs-section">## 4.3 在线求助</span><br><br><span class="hljs-section">### 4.3.1 【--help】</span><br><br><span class="hljs-section">### 4.3.2  man page</span><br><br><span class="hljs-bullet">-</span> man(manual的缩写)<br><br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20210828133956061</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828133956061.png</span>)<br><br><span class="hljs-bullet">-</span> 重点记忆:1,5,8<br><br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20210828134140153</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828134140153.png</span>)<br><br><span class="hljs-quote">&gt;   通常鸟哥在查询某个资料时是这样来查阅的：</span><br><br><span class="hljs-quote">&gt;  1.先察看NAME的项目，约略看一下这个资料的意思;</span><br><span class="hljs-quote">&gt;  2.再详看一下DESCRIPTION，这个部分会提到很多相关的数据与使用时机，从这个地方可以学&gt;到很多小细节呢;</span><br><span class="hljs-quote">&gt;  3.而如果这个指令其实很熟悉了（例如上面的date），那么鸟哥主要就是查询关于OPTIONS的&gt;部分了！ 可以知道每个选项的意义，这样就可以下达比较细部的指令内容呢！</span><br><span class="hljs-quote">&gt;  4.最后，鸟哥会再看一下，跟这个资料有关的还有哪些东西可以使用的？ 举例来说，上面的&gt;SEE ALSO就告知我们还可以利用&#x27;info coreutils date&#x27;来进一步查阅资料;</span><br> 5.某些说明内容还会列举有关的文件（FILES 部分）来提供我们参考！ 这些都是很有帮助的！<br><br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20210828134412302</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828134412302.png</span>)<br><br><span class="hljs-bullet">-</span> [man -f 命令]：获取更多与man相关的信息<br><br><span class="hljs-bullet">-</span> 【man -k 命令】：只要有“命令”这个关键词就将该说说明列出来<br><br><span class="hljs-bullet">-</span> 【whatis [命令或文件]】======等价于  man -f [命令或文件]<br><br><span class="hljs-bullet">-</span> 【apropos  [命令或文件]】====等价于 man -k [命令或文件]<br><br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20210828140027144</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828140027144.png</span>)<br><br><br><br><span class="hljs-section">### 4.3.3 info page(《鸟哥》P139 不太会用)</span><br><br>info命令与man命令类似，只不过info page是命令行模式的网页显示数据<br><br>![<span class="hljs-string">image-20210828144418231</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828144418231.png</span>)<br><br><span class="hljs-section">### 4.3.4 其他有用的文件</span><br><br>/usr/share/doc<br><br>![<span class="hljs-string">image-20210828144702840</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828144702840.png</span>)<br><br><span class="hljs-section">## 4.4 文本编辑器：nano</span><br><br>![<span class="hljs-string">image-20210828145922567</span>](<span class="hljs-link">https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210828145922567.png</span>)<br><br><br><br><span class="hljs-section">## 4.5 关机方法</span><br><br><span class="hljs-bullet">-</span> 观察系统的使用状态<br><br><span class="hljs-bullet">  -</span> 【who】:查看目前有谁在线<br><span class="hljs-bullet">  -</span> 【netstat -a】：网络的联机状态<br><span class="hljs-bullet">  -</span> 【ps -aux】：查看后台执行的程序<br><br><span class="hljs-bullet">-</span> 数据同步写入磁盘：【sync】<br><br><span class="hljs-bullet">-</span> 关机命令：【shutdown】<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">``` bash</span><br><span class="hljs-code">    [root@study ~]# shutdown -h now</span><br><span class="hljs-code">    立刻關機，其中 now 相當於時間為 0 的狀態</span><br><span class="hljs-code">    [root@study ~]# shutdown -h 20:25</span><br><span class="hljs-code">    系統在今天的 20:25 分會關機，若在21:25才下達此指令，則隔天才關機</span><br><span class="hljs-code">    [root@study ~]# shutdown -h +10</span><br><span class="hljs-code">    系統再過十分鐘後自動關機</span><br><span class="hljs-code">    [root@study ~]# shutdown -r now</span><br><span class="hljs-code">    系統立刻重新開機</span><br><span class="hljs-code">    [root@study ~]# shutdown -r +30 &#x27;The system will reboot&#x27; </span><br><span class="hljs-code">    再過三十分鐘系統會重新開機，並顯示後面的訊息給所有在線上的使用者</span><br><span class="hljs-code">    [root@study ~]# shutdown -k now &#x27;This system will reboot&#x27; </span><br><span class="hljs-code">    僅發出警告信件的參數！系統並不會關機啦！嚇唬人！</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>重新启动，关机:reboot,halt,poweroff</p></li><li><p>实际使用管理工具：systemctl</p></li></ul><h1 id="第二部分-Linux文件、目录与磁盘格式"><a href="#第二部分-Linux文件、目录与磁盘格式" class="headerlink" title="第二部分 Linux文件、目录与磁盘格式"></a><font color=DarkSeaGreen>第二部分 Linux文件、目录与磁盘格式</font></h1><h1 id="第5章-Linux的文加权限与目录配置"><a href="#第5章-Linux的文加权限与目录配置" class="headerlink" title="第5章 Linux的文加权限与目录配置"></a>第5章 Linux的文加权限与目录配置</h1><p>Linux一般将文件可读写的身份分为三个类别，分别是拥有者（owner），所属群组（group），其他人（others），且三种身份各有读(read),写（write），执行（execute）等权限。</p><h2 id="5-1-用户与用户组"><a href="#5-1-用户与用户组" class="headerlink" title="5.1 用户与用户组"></a>5.1 用户与用户组</h2><ol><li>文件拥有者</li><li>用户组的概念</li><li>其他人的概念</li></ol><p>在Linux系统当中，。默认情况下所有的系统上的账号与一般身份用户，还有那个root的相关信息都记录在&#x2F;etc&#x2F;passwd这个文件内，个人密码则是记录在&#x2F;etc&#x2F;shadow这个文件内。</p><p>Linux所有的组名记录在&#x2F;etc&#x2F;group中。</p><h2 id="5-2-Linux文件权限"><a href="#5-2-Linux文件权限" class="headerlink" title="5.2 Linux文件权限"></a>5.2 Linux文件权限</h2><h3 id="5-2-1-Linux文件属性"><a href="#5-2-1-Linux文件属性" class="headerlink" title="5.2.1 Linux文件属性"></a>5.2.1 Linux文件属性</h3><p>使用【su -】这个命令来切换身份，离开【su -】则使用【exit】</p><p>【ls -a】：【ls】表示list，重点在显示文件的文件名和属性，选项【-al】则表示列出所有的文件详细的权限和属性</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210903221654870.png" alt="image-20210903221654870"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210904101341980.png" alt="image-20210904101341980"></p><p>【文件类型权限】【链接数】【文件拥有者】【文件所属用户组】【文件大小】【文件最后被修改的时间】【文件名】</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/1.jpg" alt="1"></p><ul><li>文件类型与权限（permission）<ul><li>第一个字符代表这个文件是目录、文件或链接文件等；<ul><li>[d] ：目录</li><li>[-]  ： 文件</li><li>[l]：链接文件</li><li>[b]：设备文件里面的可供存储的周边设备</li><li>[c]：设备文件里面的串行端口设备</li></ul></li><li>之后的九个字符，每三个为一组，且均为【rwx】的三个参数组合。【r】：read，【w】:write， 【x】：execute，【-】：无权限<ul><li>第一组：文件拥有者可具备的权限</li><li>第二组：加入此用户组之账号的权限</li><li>第三组：非本人且没有加入本用户组的其他账号的权限</li></ul></li></ul></li></ul><p><strong>目录与文件的权限意义并不相同，是因为目录与文件所记录的数据内容不相同</strong></p><ul><li>链接数<ul><li>有多少文件名链接到此节点（inode）</li></ul></li><li>文件或目录的拥有者账号</li><li>文件所属的用户组</li><li>文件的容量大小，默认单位是Byte</li><li>创建日期或最近修改日期</li></ul><p>注意：<strong>目录与文件的权限意义并不相同，是因为目录与文件所记录的数据内容不相同</strong></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210904101541238.png" alt="image-20210904101541238"></p><h3 id="5-2-2-修改文件属性与权限"><a href="#5-2-2-修改文件属性与权限" class="headerlink" title="5.2.2 修改文件属性与权限"></a>5.2.2 修改文件属性与权限</h3><ul><li>【chgrp】：修改文件所属用户组</li><li>【chown】：修改文件拥有者</li><li>【chmod】：修改文件的权限</li></ul><h3 id="5-2-3-目录与文件的权限意义"><a href="#5-2-3-目录与文件的权限意义" class="headerlink" title="5.2.3 目录与文件的权限意义"></a>5.2.3 目录与文件的权限意义</h3><ul><li>文件：存放实际数据<ul><li>【r】：读取此文件的实际内容</li><li>【w】：可以编辑、新增或是修改改文件的内容，不具备删除此文件本身的权限</li><li>【x】：该文件具有可以被系统执行的权限<ul><li>Windows下文件是否可以被执行是由文件的拓展名决定，Linux下文件能否被执行，是由权限决定</li></ul></li></ul></li><li><h2 id="目录：主要内容在记录文件名列表，文件名与目录有强烈的关联。-【r】：读取目录结构列表的权限，意味着可以在该文件夹下使用【ls】命令-【w】：具有改动该目录结构列表的权限-建立新的文件与目录-删除已存在的文件与目录（不管该文件的权限是什么）-将已存在的文件或目录进行更名-移动该目录内的文件、目录位置-【x】：用户进入该目录成为工作目录-有【x】权限意味着能使用【cd】命令，将该目录变成工作目录"><a href="#目录：主要内容在记录文件名列表，文件名与目录有强烈的关联。-【r】：读取目录结构列表的权限，意味着可以在该文件夹下使用【ls】命令-【w】：具有改动该目录结构列表的权限-建立新的文件与目录-删除已存在的文件与目录（不管该文件的权限是什么）-将已存在的文件或目录进行更名-移动该目录内的文件、目录位置-【x】：用户进入该目录成为工作目录-有【x】权限意味着能使用【cd】命令，将该目录变成工作目录" class="headerlink" title="目录：主要内容在记录文件名列表，文件名与目录有强烈的关联。- 【r】：读取目录结构列表的权限，意味着可以在该文件夹下使用【ls】命令- 【w】：具有改动该目录结构列表的权限  - 建立新的文件与目录  - 删除已存在的文件与目录（不管该文件的权限是什么）  - 将已存在的文件或目录进行更名  - 移动该目录内的文件、目录位置- 【x】：用户进入该目录成为工作目录  - 有【x】权限意味着能使用【cd】命令，将该目录变成工作目录"></a>目录：主要内容在记录文件名列表，文件名与目录有强烈的关联。<br>- 【r】：读取目录结构列表的权限，意味着可以在该文件夹下使用【ls】命令<br>- 【w】：具有改动该目录结构列表的权限<br>  - 建立新的文件与目录<br>  - 删除已存在的文件与目录（不管该文件的权限是什么）<br>  - 将已存在的文件或目录进行更名<br>  - 移动该目录内的文件、目录位置<br>- 【x】：用户进入该目录成为工作目录<br>  - 有【x】权限意味着能使用【cd】命令，将该目录变成工作目录</h2></li></ul><h3 id="5-2-4-Linux文件种类与扩展名"><a href="#5-2-4-Linux文件种类与扩展名" class="headerlink" title="5.2.4 Linux文件种类与扩展名"></a>5.2.4 Linux文件种类与扩展名</h3><h4 id="文件种类"><a href="#文件种类" class="headerlink" title="文件种类"></a>文件种类</h4><ul><li>常规文件（regular file）：【ls -al】命令下，文件类型与权限的十个字符中，第一个字符为【-】的文件<ul><li>纯文本文件（ASCII）</li><li>二进制文件（binary）</li><li>数据文件（data）</li></ul></li><li>目录（directory）：【ls -al】命令下，文件类型与权限的十个字符中，第一个字符为【d】的文件</li><li>链接文件（link）：【ls -al】命令下，文件类型与权限的十个字符中，第一个字符为【l】的文件<ul><li>类似于Windows中的快截方式</li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210904114026148.png" alt="image-20210904114026148"></li></ul></li><li>设备与设备文件（device）<ul><li>区块（block）设备文件：【ls -al】命令下，文件类型与权限的十个字符中，第一个字符为【b】的文件<ul><li>存储数据，以提供系统随机存取的接口设备（硬盘等）</li></ul></li><li>字符（character）设备文件：【ls -al】命令下，文件类型与权限的十个字符中，第一个字符为【c】的文件<ul><li>串行端口设备（鼠标键盘等）</li><li>这些设备的特色是一次性读取，不能够截断输出</li></ul></li><li><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210904114223200.png" alt="image-20210904114223200"></li></ul></li><li>数据接口文件（sockets）：【ls -al】命令下，文件类型与权限的十个字符中，第一个字符为【s】的文件<ul><li>通常被用在网络上的数据交换（&#x2F;run或&#x2F;tmp目录下）</li></ul></li><li>数据输送文件（FIFO，pipe）：【ls -al】命令下，文件类型与权限的十个字符中，第一个字符为【p】的文件<ul><li>FIFO是一种特殊的文件类型，主要目的是解决多个程序同时读写一个文件所造成的错误问题</li><li>FIFO（fist-in-first-out）</li></ul></li></ul><h4 id="Linux文件扩展名"><a href="#Linux文件扩展名" class="headerlink" title="Linux文件扩展名"></a>Linux文件扩展名</h4><p>基本上，Linux的文件是没有所谓的扩展名的，一个Linux文件能否被执行，与她的第一栏的十个属性有关，与文件名根本没有一点关系</p><ul><li><pre><code class="bash">*sh:脚本或批处理文件（scripts），处理文件使用shell写成<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">- ``` bash<br>  *Z、*<span class="hljs-string">.tar</span>、*<span class="hljs-string">.tar.gz</span>、*<span class="hljs-string">.zip</span>、*<span class="hljs-string">.tag</span>:经过打包的压缩文件<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="bash">*.html、*.php:网页相关文件<figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><br><br><br><br><br>#### Linux文件名长度限制<br><br>&gt;在Linux底下，使用传统的Ext2/Ext3/Ext4文件系统以及近来被CentOS 7当作默认文件系统的xfs而言，针对文件的文件名长度限制为：<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;- 单一档案或目录的最大容许文件名为 255bytes，以一个 ASCII 英文占用一个 bytes 来说，则大约可达 255 个字符长度。 若是以每个中文字占用 2bytes 来说， 最大档名就是大约在 128 个中文字之谱！<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;是相当长的档名喔！ 我们希望Linux的文件名称可以一看就知道该档案在干嘛的， 所以文件名通常是很长很长！ 而用惯了Windows的人可能会受不了，因为档案名称通常真的都很长， 对于用惯Windows而导致打字速度不快的朋友来说，嗯！ 真的是很困扰..... 不过，只得劝你好好的加强打字的训练啰！<br><br>#### Linux文件名的限制<br><br>&gt;由于Linux在文字界面下的一些指令操作关系，一般来说，你在设定Linux底下的档案名称时， 最好可以避免一些特殊字符比较好！ 例如底下这些：<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;&gt; \* ? &gt; &lt; ; &amp; ! [ ] | \ &#x27; &quot; ` ( ) &#123; &#125;<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;因为这些符号在文字界面下，是有特殊意义的！ 另外，文件名的开头为小数点&#x27;.&#x27; 时， 代表这个文件为『隐藏档』喔！ 同时，由于指令下达当中，常常会使用到 -option 之类的选项， 所以你最好也避免将档案文件名的开头以 - 或 + 来命名啊！<br><br><br><br><br><br><br><br><br><br>## 5.3 Linux目录配置<br><br>### 5.3.1 Linux目录配置的依据——FHS<br><br>标准：FHS:Filesystem Hisrarchy Standard<br><br>FHS的重点在于规范每个特性的目录下应该要放置什么样的数据<br><br>![image-20210904122155729](https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210904122155729.png)<br><br>&gt;- 可分享的：可以分享给其他系统挂载使用的目录，所以包括执行文件与使用者的邮件等资料， 是能够分享给网络上其他主机挂载用的目录;<br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> </span><br><span class="hljs-meta prompt_">&gt;</span><br>&gt;- 不可分享的：自己机器上面运作的设备档案或者是与程序有关的socket档案等， 由于仅与自身机器有关，所以当然就不适合分享给其他主机了。<br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> </span><br><span class="hljs-meta prompt_">&gt;</span><br>&gt;- 不变的：有些数据是不会经常变动的，跟随着distribution而不变动。 例如函式库、文档说明文件、系统管理员所管理的主机服务配置文件等等;<br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> </span><br><span class="hljs-meta prompt_">&gt;</span><br>&gt;- 可变动的：经常改变的数据，例如登录文件、一般用户可自行收受的新闻群组等。<br><br>事实上，FHS 针对目录树架构仅定义出三层目录底下应该放置什么数据而已，分别是底下这三个目录的定义：<br><br>- / （root， 根目录）：与开机系统有关;<br>- /usr （unix software resource）：与软件安装/执行有关;<br>- /var （variable）：与系统运作过程有关。<br><br>![image-20210904144038187](https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/image-20210904144038187.png)<br><br>#### 根目录（/）的意义与内容<br><br>不但所有的目录都是由根目录衍生出来的，同时根目录也与启动、还原、系统修复等操作有关。<br><br>FHS要求根目录不要放在非常大的分区内，因为越大的分区会放置越多的文件，出错的机率也会越大<br><br>**根目录（/）所在的分区应该越小越好，且应用程序所安装的软件最好不要与根目录放在同一个分区内，保持根目录越小越好。**<br><br>有鉴于上述的说明，因此FHS定义出根目录（/）底下应该要有底下这些次目录的存在才好，即使没有实体目录，FHS也希望至少有链接文件存在才好：<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br># &lt;font color=DarkSeaGreen&gt;实际中遇到的问题&lt;/font&gt;<br><br>## 系统信息<br><br>设置root用户<br><br>``` bash<br>ubuntu@VM-8-15-ubuntu:~$ sudo passwd root<br>New password:<br>Retype new password:<br>passwd: password updated successfully<br>ubuntu@VM-8-15-ubuntu:~$ su<br>Password:<br>root@VM-8-15-ubuntu:/home/ubuntu#<br></code></pre></td></tr></table></figure></code></pre></li></ul><p>系统信息 20.04</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-8-15-ubuntu:~$ neofetch<br>            .-/+oossssoo+/-.               ubuntu@VM-8-15-ubuntu<br>        `:+ssssssssssssssssss+:`           ---------------------<br>      -+ssssssssssssssssssyyssss+-         OS: Ubuntu 20.04 LTS x86_64<br>    .ossssssssssssssssssdMMMNysssso.       Host: CVM 3.0<br>   /ssssssssssshdmmNNmmyNMMMMhssssss/      Kernel: 5.4.0-121-generic<br>  +ssssssssshmydMMMMMMMNddddyssssssss+     Uptime: 21 hours, 19 mins<br> /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Packages: 959 (dpkg)<br>.ssssssssdMMMNhsssssssssshNMMMdssssssss.   Shell: bash 5.0.17<br>+sssshhhyNMMNyssssssssssssyNMMMysssssss+   Resolution: 1024x768<br>ossyNMMMNyMMhsssssssssssssshmmmhssssssso   Terminal: /dev/pts/0<br>ossyNMMMNyMMhsssssssssssssshmmmhssssssso   CPU: Intel Xeon Platinum 8255C (2) @ 2.494GHz<br>+sssshhhyNMMNyssssssssssssyNMMMysssssss+   GPU: 00:02.0 Cirrus Logic GD 5446<br>.ssssssssdMMMNhsssssssssshNMMMdssssssss.   Memory: 196MiB / 1982MiB<br> /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/<br>  +sssssssssdmydMMMMMMMMddddyssssssss+<br>   /ssssssssssshdmNNNNmyNMMMMhssssss/<br>    .ossssssssssssssssssdMMMNysssso.<br>      -+sssssssssssssssssyyyssss+-<br>        `:+ssssssssssssssssss+:`<br>            .-/+oossssoo+/-.<br></code></pre></td></tr></table></figure><h2 id="Conda"><a href="#Conda" class="headerlink" title="Conda"></a>Conda</h2><p>Miniconda依旧是首选：<a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda — conda documentation</a></p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/image-20220908092714214.png"/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget <br><span class="hljs-built_in">chmod</span><br>./Miniconda3-latest-Linux-x86_64.sh <span class="hljs-comment"># .sh文件可以直接运行</span><br><span class="hljs-built_in">cat</span> ~/.bashrc <br><span class="hljs-built_in">source</span> ~/.bashrc <span class="hljs-comment"># 安装后环境变量不能立即生效，运行该命令后激活环境</span><br></code></pre></td></tr></table></figure><p>关于退出环境的报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这个错误信息是你在当前的conda虚拟环境里，只需要执行conda deactivate 命令即可，不能加参数</span><br>(base) ubuntu@VM-8-15-ubuntu:~$ conda deactivate base<br>deactivate does not accept arguments<br>remainder_args: [<span class="hljs-string">&#x27;base&#x27;</span>]<br><br>(base) ubuntu@VM-8-15-ubuntu:~$ conda deactivate<br>ubuntu@VM-8-15-ubuntu:~$<br></code></pre></td></tr></table></figure><h2 id="apt源"><a href="#apt源" class="headerlink" title="apt源"></a>apt源</h2><p><a href="https://blog.csdn.net/WU2629409421perfect/article/details/110881141">Ubuntu 20.04 &amp;&amp; Ubuntu 18.04 修改 apt 源_星汉空兮的博客-CSDN博客</a></p><p>服务器本身配置的就是腾讯的源，不需要更换。在WSL上，更换源时遇到了有一些问题，一定要搞清楚期间的Ubuntu是什么版本的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">murphy-dell@Murphy-DELL:/etc/apt$ lsb_release -a<br>No LSB modules are available.<br>Distributor ID: Ubuntu<br>Description:    Ubuntu 20.04.3 LTS<br>Release:        20.04<br>Codename:       focal<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">部分ubuntu系统LTS版本代号<br>Ubuntu 16.04代号为：xenial<br>Ubuntu 17.04代号为：zesty<br>Ubuntu 18.04代号为：bionic<br>Ubuntu 19.04代号为：disco<br>Ubuntu 20.04代号为：focal<br></code></pre></td></tr></table></figure><h2 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h2><p><a href="https://developer.aliyun.com/article/766146">如何在 Ubuntu 20.04 上安装 GCC(build-essential)-阿里云开发者社区 (aliyun.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install build-esstential<br>gcc --version<br>    gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0<br>    Copyright (C) 2019 Free Software Foundation, Inc.<br>    This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>    warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br></code></pre></td></tr></table></figure><h2 id="文本工具"><a href="#文本工具" class="headerlink" title="文本工具"></a>文本工具</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">常见的基于控制台的文本编辑器有以下几种：<br>emacs 综合性的GNU emacs 编辑环境<br>nano  一个类似于经典的pico的文本编辑器，内置了一个pine邮件程序<br>vim   一个改进的vi文本编辑器<br><br>注意并不是所有的文本编辑器都是基于控制台的，也就是说支持终端使用的。有一些文本编辑器被设计用来提供带有菜单栏，按钮，进度条等的图形界面。例如：<br>gedit 一个GUI的文本编辑器，Ubuntu默认安装<br>kate  一个简单的KDE文本编辑器<br>kedit 另外一个简单的KDE文本编辑器<br></code></pre></td></tr></table></figure><p>目前主要用的还是Vim，nano未来也可以学习一下。(其实能熟练用起vim来估计都是一件很难的事情！</p><h2 id="apt-apt-get"><a href="#apt-apt-get" class="headerlink" title="apt &amp; apt-get"></a>apt &amp; apt-get</h2><p>不是很懂</p><blockquote><p>简单来说就是：apt &#x3D; apt-get、apt-cache 和 apt-config 中最常用命令选项的集合。</p></blockquote><p><a href="https://blog.csdn.net/liudsl/article/details/79200134">apt 和 apt-get的区别_御龙冀人的博客-CSDN博客_apt get和apt</a></p><h2 id="vimrc"><a href="#vimrc" class="headerlink" title=".vimrc"></a>.vimrc</h2><p><a href="https://www.bilibili.com/video/BV1JE411G7N9/?spm_id_from=333.788.recommend_more_video.-1&vd_source=6d46640a443a49f050af078d1f65143e">如何使用 Vim 的配置文件 .vimrc_哔哩哔哩_bilibili</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) ubuntu@VM-8-15-ubuntu:~$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOME</span><br>/home/ubuntu<br>(base) ubuntu@VM-8-15-ubuntu:~$ ll<br>total 116<br>drwx------ 11 ubuntu ubuntu  4096 Sep 13 21:54 ./<br>drwxr-xr-x  4 root   root    4096 Sep  8 19:41 ../<br>-rw-r--r--  1 ubuntu ubuntu  6300 Sep 13 21:58 .bash_history<br>-rw-r--r--  1 ubuntu ubuntu   220 Jan 19  2021 .bash_logout<br>-rw-rw-r--  1 ubuntu ubuntu 13123 Jun 23 15:34 .bash-preexec.sh<br>-rw-r--r--  1 ubuntu ubuntu  4254 Sep  8 10:54 .bashrc<br>drwx------  2 ubuntu ubuntu  4096 Nov 10  2021 .cache/<br>drwxrwxr-x  2 ubuntu ubuntu  4096 Sep  8 10:54 .conda/<br>drwxrwxr-x  3 ubuntu ubuntu  4096 Sep  8 09:23 .config/<br>drwxrwxr-x  2 ubuntu ubuntu  4096 Sep  8 10:48 download/<br>drwx------  2 ubuntu ubuntu  4096 Jan 26  2022 .<span class="hljs-built_in">local</span>/<br>drwxrwxr-x 16 ubuntu ubuntu  4096 Sep  8 10:54 miniconda3/<br>drwxr-xr-x  2 ubuntu ubuntu  4096 Jun  5  2021 .pip/<br>-rw-r--r--  1 ubuntu ubuntu   807 Jan 19  2021 .profile<br>-rw-r--r--  1 ubuntu ubuntu    73 Sep  7 10:34 .pydistutils.cfg<br>-rw-------  1 ubuntu ubuntu  1520 Sep 13 20:16 .python_history<br>drwx------  2 ubuntu ubuntu  4096 Sep  7 10:34 .ssh/<br>-rw-r--r--  1 ubuntu ubuntu     0 Sep  8 09:09 .sudo_as_admin_successful<br>drwxrwxr-x  4 ubuntu ubuntu  4096 Sep 13 20:16 userDoc/<br>-rw-------  1 ubuntu ubuntu 10282 Sep 13 21:54 .viminfo<br>-rw-rw-r--  1 ubuntu ubuntu  8506 Sep 13 21:53 .vimrc         <span class="hljs-comment"># 新建这个.vimrc文件，写入vim配置文件</span><br></code></pre></td></tr></table></figure><p>.vimrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot; All system-wide defaults are set in <span class="hljs-variable">$VIMRUNTIME</span>/debian.vim and sourced by</span><br><span class="hljs-string">&quot;</span> the call to :runtime you can find below.  If you wish to change any of those<br><span class="hljs-string">&quot; settings, you should do it in this file (/etc/vim/vimrc), since debian.vim</span><br><span class="hljs-string">&quot;</span> will be overwritten everytime an upgrade of the vim packages is performed.<br><span class="hljs-string">&quot; It is recommended to make changes after sourcing debian.vim since it alters</span><br><span class="hljs-string">&quot;</span> the value of the <span class="hljs-string">&#x27;compatible&#x27;</span> option.<br><br><span class="hljs-string">&quot; This line should not be removed as it ensures that various options are</span><br><span class="hljs-string">&quot;</span> properly <span class="hljs-built_in">set</span> to work with the Vim-related packages available <span class="hljs-keyword">in</span> Debian.<br>runtime! debian.vim<br><br><span class="hljs-string">&quot; Vim will load <span class="hljs-variable">$VIMRUNTIME</span>/defaults.vim if the user does not have a vimrc.</span><br><span class="hljs-string">&quot;</span> This happens after /etc/vim/vimrc(.<span class="hljs-built_in">local</span>) are loaded, so it will override<br><span class="hljs-string">&quot; any settings in these files.</span><br><span class="hljs-string">&quot;</span> If you don<span class="hljs-string">&#x27;t want that to happen, uncomment the below line to prevent</span><br><span class="hljs-string">&quot; defaults.vim from being loaded.</span><br><span class="hljs-string">&quot; let g:skip_defaults_vim = 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot; Uncomment the next line to make Vim more Vi-compatible</span><br><span class="hljs-string">&quot; NOTE: debian.vim sets &#x27;</span>nocompatible<span class="hljs-string">&#x27;.  Setting &#x27;</span>compatible<span class="hljs-string">&#x27; changes numerous</span><br><span class="hljs-string">&quot; options, so any other options should be set AFTER setting &#x27;</span>compatible<span class="hljs-string">&#x27;.</span><br><span class="hljs-string">&quot;set compatible</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot; Vim5 and later versions support syntax highlighting. Uncommenting the next</span><br><span class="hljs-string">&quot; line enables syntax highlighting by default.</span><br><span class="hljs-string">if has(&quot;syntax&quot;)</span><br><span class="hljs-string">  syntax on</span><br><span class="hljs-string">endif</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot; If using a dark background within the editing area and syntax highlighting</span><br><span class="hljs-string">&quot; turn on this option as well</span><br><span class="hljs-string">&quot;set background=dark</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot; Uncomment the following to have Vim jump to the last position when</span><br><span class="hljs-string">&quot; reopening a file</span><br><span class="hljs-string">&quot;if has(&quot;autocmd&quot;)</span><br><span class="hljs-string">&quot;  au BufReadPost * if line(&quot;&#x27;</span>\&quot;<span class="hljs-string">&quot;) &gt; 1 &amp;&amp; line(&quot;</span><span class="hljs-string">&#x27;\&quot;&quot;) &lt;= line(&quot;$&quot;) | exe &quot;normal! g&#x27;</span>\&quot;<span class="hljs-string">&quot; | endif</span><br><span class="hljs-string">&quot;</span>endif<br><br><span class="hljs-string">&quot; Uncomment the following to have Vim load indentation rules and plugins</span><br><span class="hljs-string">&quot;</span> according to the detected filetype.<br><span class="hljs-keyword">if</span> has(<span class="hljs-string">&quot;autocmd&quot;</span>)<br>  filetype plugin indent on<br>endif<br><br><span class="hljs-string">&quot; The following are commented out as they cause vim to behave a lot</span><br><span class="hljs-string">&quot;</span> differently from regular Vi. They are highly recommended though.<br><span class="hljs-string">&quot;set showcmd        &quot;</span> Show (partial) <span class="hljs-built_in">command</span> <span class="hljs-keyword">in</span> status line.<br><span class="hljs-string">&quot;set showmatch      &quot;</span> Show matching brackets.<br><span class="hljs-string">&quot;set ignorecase     &quot;</span> Do <span class="hljs-keyword">case</span> insensitive matching<br><span class="hljs-string">&quot;set smartcase      &quot;</span> Do smart <span class="hljs-keyword">case</span> matching<br><span class="hljs-string">&quot;set incsearch      &quot;</span> Incremental search<br><span class="hljs-string">&quot;set autowrite      &quot;</span> Automatically save before commands like :next and :make<br><span class="hljs-string">&quot;set hidden     &quot;</span> Hide buffers when they are abandoned<br><span class="hljs-string">&quot;set mouse=a        &quot;</span> Enable mouse usage (all modes)<br><br><span class="hljs-string">&quot; Source a global configuration file if available</span><br><span class="hljs-string">if filereadable(&quot;</span>/etc/vim/vimrc.local<span class="hljs-string">&quot;)</span><br><span class="hljs-string">  source /etc/vim/vimrc.local</span><br><span class="hljs-string">endif</span><br><span class="hljs-string">let mapleader=&quot;</span> <span class="hljs-string">&quot;           &quot;</span> 设置leader键为空格键<br><span class="hljs-built_in">set</span> nocompatible            <span class="hljs-string">&quot; 不以兼容模式运行</span><br><span class="hljs-string">set encoding=utf-8          &quot;</span> utf-8编码<br><span class="hljs-built_in">set</span> helplang=cn             <span class="hljs-string">&quot; 中文帮助文档</span><br><span class="hljs-string">set number              &quot;</span> 显示行号<br><span class="hljs-built_in">set</span> wrap                <span class="hljs-string">&quot; 自动换行</span><br><span class="hljs-string">set showcmd             &quot;</span> 显示输入信息<br><span class="hljs-built_in">set</span> cursorline              <span class="hljs-string">&quot; 显示光标所在行</span><br><span class="hljs-string">set wildmenu                &quot;</span> 显示补全提示<br><span class="hljs-built_in">set</span> hlsearch                <span class="hljs-string">&quot; 高亮搜索结果</span><br><span class="hljs-string">&quot;</span><span class="hljs-built_in">set</span> foldenable                 <span class="hljs-string">&quot; 允许折叠 </span><br><span class="hljs-string">&quot;</span><span class="hljs-built_in">set</span> foldmethod=manual          <span class="hljs-string">&quot; 手动折叠  </span><br><span class="hljs-string">&quot;</span>打开vim运行nohlsearch，取消高亮<br><span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;nohlsearch&quot;</span>       <br><span class="hljs-built_in">set</span> ts=4                <span class="hljs-string">&quot; 设置tab键长度为四个空格</span><br><span class="hljs-string">set expandtab           &quot;</span> 设置tab键替换为四个空格键<br><span class="hljs-string">&quot; 将文件中的tab键替换成空格</span><br><span class="hljs-string">map &lt;LEADER&gt;    :retab!&lt;CR&gt;</span><br><span class="hljs-string">set incsearch               &quot;</span> 一边输入一边高亮  <br><span class="hljs-built_in">set</span> ignorecase              <span class="hljs-string">&quot; 忽略大小写</span><br><span class="hljs-string">set smartcase               &quot;</span> 智能大小写 <br><span class="hljs-built_in">set</span> laststatus=2            <span class="hljs-string">&quot; 设置状态栏在倒数第2行</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 设置状态栏格式<br><span class="hljs-string">&quot;set statusline=%&lt;%F%=%y%m%r%h%w%&#123;&amp;ff&#125;\[%&#123;&amp;fenc&#125;]0x%02B@%040h#%n\(%3l/%3L,%3c\|%3v\)%3p%%</span><br><span class="hljs-string">set statusline=%1*\%&lt;%.50F\             &quot;</span>显示文件名和文件路径 <br><span class="hljs-built_in">set</span> statusline+=%=%2*\%y%m%r%h%w\ %*        <span class="hljs-string">&quot;显示文件类型及文件状态</span><br><span class="hljs-string">set statusline+=%3*\%&#123;&amp;ff&#125;\[%&#123;&amp;fenc&#125;]\ %*   &quot;</span>显示文件编码类型<br><span class="hljs-built_in">set</span> statusline+=%4*\ row:%l/%L,col:%c\ %*   <span class="hljs-string">&quot;显示光标所在行和列</span><br><span class="hljs-string">set statusline+=%5*\%3p%%\%*            &quot;</span>显示光标前文本所占总文本的比例<br>hi User1 cterm=none ctermfg=25 ctermbg=0 <br>hi User2 cterm=none ctermfg=208 ctermbg=0<br>hi User3 cterm=none ctermfg=169 ctermbg=0<br>hi User4 cterm=none ctermfg=100 ctermbg=0<br>hi User5 cterm=none ctermfg=green ctermbg=0<br><br><span class="hljs-built_in">set</span> mouse=a             <span class="hljs-string">&quot; 启用鼠标</span><br><span class="hljs-string">set backspace=indent,eol,start      &quot;</span> 退格键可以退到上一行<br><span class="hljs-built_in">set</span> scrolloff=5             <span class="hljs-string">&quot; 光标行上下移动范围各缩小5行</span><br><span class="hljs-string">&quot;</span><span class="hljs-built_in">set</span> ruler<br><span class="hljs-string">&quot;set transparency=11</span><br><span class="hljs-string">&quot;</span> 设置背景透明<br>hi Normal ctermfg=252 ctermbg=none<br><span class="hljs-string">&quot;寻找下一搜索结果，并将其置于屏幕中心</span><br><span class="hljs-string">noremap = nzz               </span><br><span class="hljs-string">&quot;</span>寻找上一搜索结果，并将其置于屏幕中心<br>noremap - Nzz<br><span class="hljs-string">&quot;取消高亮</span><br><span class="hljs-string">noremap &lt;LEADER&gt;&lt;CR&gt; :nohlsearch&lt;CR&gt;</span><br><span class="hljs-string">map s &lt;nop&gt;</span><br><span class="hljs-string">&quot;</span>保存<br>map S :w&lt;CR&gt;<br><span class="hljs-string">&quot;退出</span><br><span class="hljs-string">map Q :q&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>右分屏，聚焦右窗口<br>map sl :<span class="hljs-built_in">set</span> splitright&lt;CR&gt;:vsplit&lt;CR&gt;<br><span class="hljs-string">&quot;左分屏，聚焦左窗口</span><br><span class="hljs-string">map sh :set nosplitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>上分屏，聚焦上窗口<br>map sk :<span class="hljs-built_in">set</span> nosplitbelow&lt;CR&gt;:<span class="hljs-built_in">split</span>&lt;CR&gt;<br><span class="hljs-string">&quot;下分屏，聚焦下窗口</span><br><span class="hljs-string">map sj :set splitbelow&lt;CR&gt;:split&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>光标移至右窗口<br>map &lt;LEADER&gt;l &lt;C-w&gt;l<br><span class="hljs-string">&quot;光标移至上窗口</span><br><span class="hljs-string">map &lt;LEADER&gt;k &lt;C-w&gt;k</span><br><span class="hljs-string">&quot;</span>光标移至下窗口<br>map &lt;LEADER&gt;j &lt;C-w&gt;j<br><span class="hljs-string">&quot;光标移至左窗口</span><br><span class="hljs-string">map &lt;LEADER&gt;h &lt;C-w&gt;h</span><br><span class="hljs-string">&quot;</span>窗口上移<br>map &lt;up&gt; :res +5&lt;CR&gt;<br><span class="hljs-string">&quot;窗口下移</span><br><span class="hljs-string">map &lt;down&gt; :res -5&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>窗口左移<br>map &lt;left&gt; :vertical resize-5&lt;CR&gt;<br><span class="hljs-string">&quot;窗口右移</span><br><span class="hljs-string">map &lt;right&gt; :vertical resize+5&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>新建标签页<br>map &lt;C-n&gt; :tabe&lt;CR&gt;<br><span class="hljs-string">&quot;前一标签页</span><br><span class="hljs-string">map t- :-tabnext&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>后一标签页<br>map t= :+tabnext&lt;CR&gt;<br><span class="hljs-string">&quot;重新加载vim配置文件</span><br><span class="hljs-string">map rc :source <span class="hljs-variable">$MYVIMRC</span>&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>寻找两个相等的单词<br>map &lt;LEADER&gt;fd /\(\&lt;\w\+\&gt;\)\_s*\1<br><span class="hljs-string">&quot;替换占空符&lt;++&gt;</span><br><span class="hljs-string">map &lt;LEADER&gt;&lt;LEADER&gt; &lt;ESC&gt;/&lt;++&gt;&lt;CR&gt;:nohlsearch&lt;CR&gt;c4l</span><br><span class="hljs-string">&quot;</span>全选<br>map &lt;C-a&gt; ggVG<br><span class="hljs-string">&quot;打开我的vimrc</span><br><span class="hljs-string">map &lt;LEADER&gt;rc :e ~/.vimrc&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>复制到系统剪切板<br>map +y <span class="hljs-string">&quot;+y</span><br><span class="hljs-string">&quot;</span>从系统剪切板粘贴<br>map +p <span class="hljs-string">&quot;+p</span><br><span class="hljs-string"></span><br><span class="hljs-string">set list</span><br><span class="hljs-string">set listchars=tab:&gt;-,trail:-</span><br><span class="hljs-string">&quot;</span>自动匹配括号<br>:inoremap ( ()&lt;ESC&gt;i<br>:inoremap ) &lt;c-r&gt;=ClosePair(<span class="hljs-string">&#x27;)&#x27;</span>)&lt;CR&gt; <br>:inoremap &#123; &#123;&#125;&lt;ESC&gt;i<br>:inoremap &#125; &lt;c-r&gt;=ClosePair(<span class="hljs-string">&#x27;&#125;&#x27;</span>)&lt;CR&gt;<br>:inoremap [ []&lt;ESC&gt;i<br>:inoremap ] &lt;c-r&gt;=ClosePair(<span class="hljs-string">&#x27;]&#x27;</span>)&lt;CR&gt;<br>:inoremap &lt; &lt;&gt;&lt;ESC&gt;i<br>:inoremap &gt; &lt;c-r&gt;=ClosePair(<span class="hljs-string">&#x27;&gt;&#x27;</span>)&lt;CR&gt;<br><span class="hljs-keyword">function</span>! ClosePair(char)<br>    <span class="hljs-keyword">if</span> getline(<span class="hljs-string">&#x27;.&#x27;</span>)[col(<span class="hljs-string">&#x27;.&#x27;</span>) - 1] == a:char<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;\&lt;Right&gt;&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">return</span> a:char<br>    endif<br>endfunction<br><span class="hljs-string">&quot;不同模式下光标样式不同</span><br><span class="hljs-string">let &amp;t_SI = &quot;</span>\&lt;Esc&gt;]50;CursorShape=1\x7<span class="hljs-string">&quot; </span><br><span class="hljs-string">let &amp;t_SR = &quot;</span>\&lt;Esc&gt;]50;CursorShape=2\x7<span class="hljs-string">&quot; </span><br><span class="hljs-string">let &amp;t_EI = &quot;</span>\&lt;Esc&gt;]50;CursorShape=0\x7<span class="hljs-string">&quot; </span><br><span class="hljs-string">&quot;</span>打开文件，光标回到上次编辑的位置<br>au BufReadPost * <span class="hljs-keyword">if</span> line(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &gt; 1 &amp;&amp; line(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &lt;= line(<span class="hljs-string">&quot;$&quot;</span>) | exe <span class="hljs-string">&quot;normal! g&#x27;\&quot;&quot;</span> | endif<br><span class="hljs-string">&quot;创建文件头</span><br><span class="hljs-string">autocmd BufNewFile *.py,*.tex exec &quot;</span>:call SetTitle()<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">func! SetTitle() </span><br><span class="hljs-string">    if &amp;filetype == &#x27;python&#x27;</span><br><span class="hljs-string">        call setline(1,&quot;</span>#!/usr/bin/env python3<span class="hljs-string">&quot;)</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;),&quot;</span># -*- coding:UTF-8 -*-<span class="hljs-string">&quot;)</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;)+1,&quot;</span>##########################################################################<span class="hljs-string">&quot;)</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;)+2, &quot;</span># File Name: <span class="hljs-string">&quot;.expand(&quot;</span>%<span class="hljs-string">&quot;))</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;)+3, &quot;</span># Author: stubborn vegeta<span class="hljs-string">&quot;)</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;)+4, &quot;</span># Created Time: <span class="hljs-string">&quot;.strftime(&quot;</span>%c<span class="hljs-string">&quot;))</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;)+5, &quot;</span>##########################################################################<span class="hljs-string">&quot;)</span><br><span class="hljs-string">    endif</span><br><span class="hljs-string">    if &amp;filetype == &#x27;plaintex&#x27;</span><br><span class="hljs-string">        call setline(1,&quot;</span>% -*- coding:UTF-8 -*-<span class="hljs-string">&quot;)</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;),&quot;</span>%#########################################################################<span class="hljs-string">&quot;)</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;)+1, &quot;</span>% File Name: <span class="hljs-string">&quot;.expand(&quot;</span>%<span class="hljs-string">&quot;))</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;)+2, &quot;</span>% Author: stubborn vegeta<span class="hljs-string">&quot;)</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;)+3, &quot;</span>% Created Time: <span class="hljs-string">&quot;.strftime(&quot;</span>%c<span class="hljs-string">&quot;))</span><br><span class="hljs-string">        call append(line(&quot;</span>.<span class="hljs-string">&quot;)+4, &quot;</span>%#########################################################################<span class="hljs-string">&quot;)</span><br><span class="hljs-string">    endif</span><br><span class="hljs-string">    &quot;</span>autocmd BufNewFile * normal G <br>    normal G <br>endfunc<br><span class="hljs-string">&quot; 设置注释快捷键 </span><br><span class="hljs-string">map &lt;LEADER&gt;r :call Note()&lt;CR&gt;</span><br><span class="hljs-string">func! Note()</span><br><span class="hljs-string">    if &amp;filetype == &#x27;python&#x27;</span><br><span class="hljs-string">        normal 0i# </span><br><span class="hljs-string">    endif</span><br><span class="hljs-string">    if &amp;filetype == &#x27;vim&#x27;</span><br><span class="hljs-string">        normal 0i&quot;</span> <br>    endif<br>    <span class="hljs-keyword">if</span> &amp;filetype == <span class="hljs-string">&#x27;plaintex&#x27;</span><br>        normal 0i% <br>    endif<br>endfunc<br><span class="hljs-string">&quot; 设置取消注释  </span><br><span class="hljs-string">map &lt;LEADER&gt;t 0df j</span><br><span class="hljs-string">&quot;</span>编译运行<br>map &lt;F5&gt; :call RunPython()&lt;CR&gt;<br>func! RunPython()<br>    <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;W&quot;</span><br>    <span class="hljs-keyword">if</span> &amp;filetype == <span class="hljs-string">&#x27;python&#x27;</span><br>       <span class="hljs-string">&quot; exec &quot;</span>!<span class="hljs-keyword">time</span> python3.6 %<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &quot;</span><span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;:set splitbelow&lt;CR&gt;:split&lt;CR&gt;&quot;</span><br>    <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;!time python3.6 %&quot;</span><br><br>    endif<br>    <span class="hljs-keyword">if</span> &amp;filetype == <span class="hljs-string">&#x27;dot&#x27;</span><br>    <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;!dot % -T png -o %.png&quot;</span><br>    <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;!feh %.png&quot;</span><br>    endif<br>endfunc<br><br><span class="hljs-string">&quot;colorscheme molokai</span><br><span class="hljs-string">set t_Co=256            &quot;</span>开启256色支持<br><span class="hljs-string">&quot;set background=dark</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="su-su"><a href="#su-su" class="headerlink" title="su &amp; su -"></a>su &amp; su -</h2><p><a href="http://c.biancheng.net/view/3089.html">Linux su命令：用户间切换（包含su和su -的区别） (biancheng.net)</a></p><p>su 是最简单的用户切换命令，通过该命令可以实现任何身份的切换，包括从普通用户切换为 root 用户、从 root 用户切换为普通用户以及普通用户之间的切换。</p><p>普通用户之间切换以及普通用户切换至 root 用户，都需要知晓对方的密码，只有正确输入密码，才能实现切换；从 root 用户切换至其他用户，无需知晓对方密码，直接可切换成功。</p><p>su 命令的基本格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# su [选项] 用户名<br></code></pre></td></tr></table></figure><blockquote><p>选项：</p><ul><li>-：当前用户不仅切换为指定用户的身份，同时所用的<strong>工作环境</strong>也切换为此<strong>用户的环境（包括 PATH 变量、MAIL 变量等）</strong>，使用 - 选项可省略用户名，默认会切换为 root 用户。</li><li>-l：同 - 的使用类似，也就是在切换用户身份的同时，完整切换工作环境，但后面需要添加欲切换的使用者账号。</li><li>-p：表示切换为指定用户的身份，但不改变当前的工作环境（不使用切换用户的配置文件）。</li><li>-m：和 -p 一样；</li><li>-c 命令：仅切换用户执行一次命令，执行后自动切换回来，该选项后通常会带有要执行的命令。</li></ul></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="*参考资料"></a>*参考资料</h2><p><a href="https://blog.csdn.net/weixin_38936626/article/details/86679070">腾讯云服务器获取root权限（ubuntu系统）_Foley_Zhao的博客-CSDN博客_云服务器root权限</a></p><p><a href="https://blog.csdn.net/sunny_day_day/article/details/108714946">ppc64，ppc64le，ARM，AMD，X86，i386，x86_64（AMD64），AArch64的概念_ac.char的博客-CSDN博客_ppc64le</a></p><p><a href="https://blog.csdn.net/m0_46278037/article/details/120213833">如何查看 Ubuntu 版本和其他系统信息_BugMiaowu2021的博客-CSDN博客_ubuntu查看系统信息</a></p><p><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://blog.csdn.net/msq16021/article/details/118992379">Anaconda环境的 创建、激活、退出、删除_fish-aroma的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/WU2629409421perfect/article/details/110881141">Ubuntu 20.04 &amp;&amp; Ubuntu 18.04 修改 apt 源_星汉空兮的博客-CSDN博客</a></p><p><a href="https://developer.aliyun.com/article/766146">如何在 Ubuntu 20.04 上安装 GCC(build-essential)-阿里云开发者社区 (aliyun.com)</a></p><p><a href="https://blog.csdn.net/lifuxiangcaohui/article/details/20221625">Ubuntu下几种常用的文本编辑器_Java海洋的博客-CSDN博客_ubuntu编辑器</a></p><p><a href="https://www.bilibili.com/video/BV1JE411G7N9/?spm_id_from=333.788.recommend_more_video.-1&vd_source=6d46640a443a49f050af078d1f65143e">如何使用 Vim 的配置文件 .vimrc_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/l_changyun/article/details/98252459">vim配置（无插件，含状态栏，背景透明等）_stubborn vegeta的博客-CSDN博客_vim 状态栏</a></p><h2 id="查看yum源（CentOS）"><a href="#查看yum源（CentOS）" class="headerlink" title="查看yum源（CentOS）"></a>查看yum源（CentOS）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZ0jlftcfs16k3ahu5mu80Z ~]# <span class="hljs-built_in">cat</span> /etc/yum.repos.d/CentOS-Base.repo<br>[base]<br>name=CentOS-<span class="hljs-variable">$releasever</span><br>enabled=1<br>failovermethod=priority<br>baseurl=http://mirrors.cloud.aliyuncs.com/centos/<span class="hljs-variable">$releasever</span>/os/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=1<br>gpgkey=http://mirrors.cloud.aliyuncs.com/centos/RPM-GPG-KEY-CentOS-7<br><br>[updates]<br>name=CentOS-<span class="hljs-variable">$releasever</span><br>enabled=1<br>failovermethod=priority<br>baseurl=http://mirrors.cloud.aliyuncs.com/centos/<span class="hljs-variable">$releasever</span>/updates/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=1<br>gpgkey=http://mirrors.cloud.aliyuncs.com/centos/RPM-GPG-KEY-CentOS-7<br><br>[extras]<br>name=CentOS-<span class="hljs-variable">$releasever</span><br>enabled=1<br>failovermethod=priority<br>baseurl=http://mirrors.cloud.aliyuncs.com/centos/<span class="hljs-variable">$releasever</span>/extras/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=1<br>gpgkey=http://mirrors.cloud.aliyuncs.com/centos/RPM-GPG-KEY-CentOS-7<br><br>[root@iZ0jlftcfs16k3ahu5mu80Z ~]#<br></code></pre></td></tr></table></figure><h2 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h2><p>tree命令的下载<code>yum -y install tree</code></p><blockquote><ul><li>-a 显示所有文件和目录。</li><li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li><li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li><li>-d 显示目录名称而非内容。</li><li>-D 列出文件或目录的更改时间。</li><li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li><li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”&#x2F;“,”&#x3D;”,”@”,”|”号。</li><li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li><li>-i 不以阶梯状列出文件或目录名称。</li><li>-L level 限制目录显示层级。</li><li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li><li>-n 不在文件和目录清单加上色彩。</li><li>-N 直接列出文件和目录名称，包括控制字符。</li><li>-p 列出权限标示。</li><li>-P&lt;范本样式&gt; 只显示符合范本样式的文件或目录名称。</li><li>-q 用”?”号取代控制字符，列出文件和目录名称。</li><li>-s 列出文件或目录大小。</li><li>-t 用文件和目录的更改时间排序。</li><li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li><li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li></ul></blockquote><p><strong>&#x2F; 目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZ0jlftcfs16k3ahu5mu80Z ~]# <span class="hljs-built_in">pwd</span><br>/root<br>[root@iZ0jlftcfs16k3ahu5mu80Z ~]# tree / -L 1<br>/<br>├── bin -&gt; usr/bin<br>├── boot<br>├── dev<br>├── etc<br>├── home<br>├── lib -&gt; usr/lib<br>├── lib64 -&gt; usr/lib64<br>├── lost+found<br>├── media<br>├── mnt<br>├── opt<br>├── proc<br>├── root<br>├── run<br>├── sbin -&gt; usr/sbin<br>├── srv<br>├── sys<br>├── tmp<br>├── usr<br>└── var<br><br><br>[root@iZ0jlftcfs16k3ahu5mu80Z ~]# <span class="hljs-built_in">cd</span> /<br>[root@iZ0jlftcfs16k3ahu5mu80Z /]# ll<br>total 60<br>lrwxrwxrwx.  1 root root     7 Sep 14  2020 bin -&gt; usr/bin<br>dr-xr-xr-x.  5 root root  4096 Nov 30  2021 boot<br>drwxr-xr-x  19 root root  2980 Aug 18 08:20 dev<br>drwxr-xr-x. 76 root root  4096 Aug 16 14:29 etc<br>drwxr-xr-x.  3 root root  4096 Aug 16 14:13 home<br>lrwxrwxrwx.  1 root root     7 Sep 14  2020 lib -&gt; usr/lib<br>lrwxrwxrwx.  1 root root     9 Sep 14  2020 lib64 -&gt; usr/lib64<br>drwx------.  2 root root 16384 Sep 14  2020 lost+found<br>drwxr-xr-x.  2 root root  4096 Apr 11  2018 media<br>drwxr-xr-x.  2 root root  4096 Apr 11  2018 mnt<br>drwxr-xr-x.  2 root root  4096 Apr 11  2018 opt<br>dr-xr-xr-x  92 root root     0 Aug 18 08:19 proc<br>dr-xr-x---.  7 root root  4096 Aug 18 10:10 root<br>drwxr-xr-x  23 root root   620 Aug 18 14:11 run<br>lrwxrwxrwx.  1 root root     8 Sep 14  2020 sbin -&gt; usr/sbin<br>drwxr-xr-x.  2 root root  4096 Apr 11  2018 srv<br>dr-xr-xr-x  13 root root     0 Aug 18  2022 sys<br>drwxrwxrwt.  8 root root  4096 Aug 18 14:11 tmp<br>drwxr-xr-x. 13 root root  4096 Sep 14  2020 usr<br>drwxr-xr-x. 19 root root  4096 Sep 14  2020 var<br></code></pre></td></tr></table></figure><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/d0c50-linux2bfile2bsystem2bhierarchy.jpg"/><blockquote><ul><li><p><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>&#x2F;boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br> 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all<br></code></pre></td></tr></table></figure><ul><li><p><strong>&#x2F;root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p></li></ul><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p><ul><li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>&#x2F;usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微机原理与单片机</title>
    <link href="/blog/post/Knowledge/MicrocomputerPrincipleAndSinglechipMicrocomputer/"/>
    <url>/blog/post/Knowledge/MicrocomputerPrincipleAndSinglechipMicrocomputer/</url>
    
    <content type="html"><![CDATA[<p>微机原理是我第一次用网络博客的形式学习整理课本知识。<br>微机原理的需要记忆的东西太多了，并且需要多做题目。<br>期末的时候微机原理学的很不好，临近期末做了一些课后的章节练习，根据做的题目总结了一下知识点，考试的结果还算很不错！</p><h1 id="8086"><a href="#8086" class="headerlink" title="8086"></a>8086</h1><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8086 ——16位处理器<br>数据总线DB——16位<br>地址总线AB——20位<br></code></pre></td></tr></table></figure><h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p><strong>内存的读步骤</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.CPU把要读的内存单元的地址放到AB上<br><span class="hljs-bullet">2.</span> CPU发出读命令<br><span class="hljs-bullet">3.</span> 内存将数据从指定单元读到DB上<br><span class="hljs-bullet">4.</span> CPU从DB上取回数据<br></code></pre></td></tr></table></figure><p><strong>内存的写操作</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> CPU把要写的内存单元的地址放到AB上<br><span class="hljs-bullet">2.</span> CPU把要写的数据放到DB上<br><span class="hljs-bullet">3.</span> CPU发出写的命令<br><span class="hljs-bullet">4.</span> 数据被内存写到指定的单元<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">外存中的数据使用前必须先读到内存中，然后CPU才能访问<br></code></pre></td></tr></table></figure><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">总线宽度：一次可以同时传输的数据位数<br>8086，数据总线宽度为16位，地址总线宽度位20位<br></code></pre></td></tr></table></figure><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">异号相加不会溢出<br>同号相加可能溢出<br></code></pre></td></tr></table></figure><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><h2 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">用二进制编码表示十进制数<br>一位十进制数需要用四位二进制编码表示<br>压缩BCD码——一个字节表示两位十进制数<br>非压缩BCD码——一个字节表示一位十进制数（使用低四位）<br></code></pre></td></tr></table></figure><h1 id="第二章-8086"><a href="#第二章-8086" class="headerlink" title="第二章 8086"></a>第二章 8086</h1><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">字长——CPU能够同时处理的数据的位数，也称为数据位宽<br>8086——16位<br>主频——时钟频率<br></code></pre></td></tr></table></figure><h2 id="8086的编程结构"><a href="#8086的编程结构" class="headerlink" title="8086的编程结构"></a>8086的编程结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdwon">16位数据线；<br>20位地址线——寻址空间:1MB（2^20）<br>寄存器：数值逻辑部件，用来暂存数码和信息；由触发器和门电路阻成；<br></code></pre></td></tr></table></figure><h2 id="总线接口部件BIU"><a href="#总线接口部件BIU" class="headerlink" title="总线接口部件BIU"></a><strong>总线接口部件BIU</strong></h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 从内存取指令到指令队列<br><span class="hljs-bullet">2.</span> CPU执行指令时，BIU配合执行部件从指定内存单元或外设端口中取数据，将数据传送给执行部件<br><span class="hljs-bullet">3.</span> BIU配合执行部件把操作结果传送到指定的内存单元或外设接口<br></code></pre></td></tr></table></figure><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">a) 16位段地址寄存器（sgement）——4个<br><span class="hljs-code">    i) CS CODE</span><br><span class="hljs-code">    ii) DS DATA</span><br><span class="hljs-code">    iii) ES EXTRA</span><br><span class="hljs-code">    iv) SS STACK</span><br><span class="hljs-code">b) 16位指令指针寄存器——IP（instruction pointer）</span><br><span class="hljs-code">c) 20位地址加法器</span><br><span class="hljs-code">    i) 用来产生20位的地址</span><br><span class="hljs-code">        One. 8086用20位地址寻址1MB的内存，但是8086内部的寄存器都是16位的</span><br><span class="hljs-code">        Two. 地址加法器就是根据16位寄存器提供的信息计算出20位的物理地址</span><br><span class="hljs-code">            First. CS左移四位再与IP相加</span><br><span class="hljs-code">d) 6字节的指令队列缓冲器</span><br><span class="hljs-code">    i) 指令队列缓冲器——CPU在执行指令的同时，从内存中取下面一条指令或几条指令放在指令队列中</span><br><span class="hljs-code"></span><br><br></code></pre></td></tr></table></figure><h3 id="BIU的执行方式"><a href="#BIU的执行方式" class="headerlink" title="BIU的执行方式"></a>BIU的执行方式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 顺序执行方式：功能部件交替工作，按顺序完成指令的执行过程<br>| 并行流水线方式：各功能部件并行工<br></code></pre></td></tr></table></figure><h2 id="执行部件EU"><a href="#执行部件EU" class="headerlink" title="执行部件EU"></a><strong>执行部件EU</strong></h2><h3 id="组成-1"><a href="#组成-1" class="headerlink" title="组成"></a>组成</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs markdown">算数逻辑部件ALU<br><br>16位的通用寄存器——4个<br><br><span class="hljs-code">    AX——累加器</span><br><span class="hljs-code"></span><br><span class="hljs-code">    BX</span><br><span class="hljs-code"></span><br><span class="hljs-code">    CX</span><br><span class="hljs-code"></span><br><span class="hljs-code">    DX</span><br><span class="hljs-code"></span><br><span class="hljs-code">16位通用寄存器可以当作8位来使用，高八位和低八位</span><br><span class="hljs-code"></span><br>16位的专用寄存器——4个<br><br><span class="hljs-code">    BP——BASE POINTER基数指针寄存器</span><br><span class="hljs-code">    SP——STACK POINTER堆栈指针寄存器</span><br><span class="hljs-code">    SI——SOURCE INDEX源变址寄存器</span><br><span class="hljs-code">    DI——DESTINATION           INDEX目的变址寄存器。</span><br><span class="hljs-code"></span><br>16位标志寄存器——九个使用，七个未用<br><br>状态标志位——6个<br><br><span class="hljs-code">    | SF   | Sign flag            | 符号标志       | 与运算结果的最高位相同，运算结果为正数SF=0,运算结果为负数，SF=1</span><br><span class="hljs-code">    | ZF   | Zero flag            | 零标志         | 运算结果为0，ZF=1，运算结果为非零，ZF=0 </span><br><span class="hljs-code">    | PF   | Parity flag          | 奇/偶标志位    | 运算结果中，低八位中所含1的个数为偶数，PF=1；低八位中所含1的个数为奇数，PF=0</span><br><span class="hljs-code">    | CF   | Carry flag           | 进位标志位     | 加法运算——最高位产生进位，CF=1；减法运算——最高位产生借位,CF=1</span><br><span class="hljs-code">    | AF   | Auxiliary carry flag | 辅助进位标志位 | 加法运算——第三位往第四位进位，AF=1；减法运算——第三位从第四位借位，AF=1</span><br><span class="hljs-code">    | OF   | Overflow flage       | 溢出标志位     | 产生溢出——OF=1</span><br><span class="hljs-code"></span><br>控制标志位——3个<br><br><span class="hljs-code">    | DF   | Direction flag        | 方向标志     | 控制串操作指令用的标志：DF=0，串操作过程中地址会不断增值；DF=1，串操作过程中，地址会不断减值</span><br><span class="hljs-code">    | IF   | Interrupt enable flag | 中断允许标志 | 控制可屏蔽中断用的标志：IF=0，CPU不能相应可屏蔽中断的中断请求；IF=1，CPU可接受可屏蔽中断的中断请求</span><br><span class="hljs-code">    | TF   | Trap flag             | 跟踪标志     | TF=1，CPU按跟踪方式，执行指令</span><br></code></pre></td></tr></table></figure><h2 id="总线周期（机器周期）"><a href="#总线周期（机器周期）" class="headerlink" title="总线周期（机器周期）"></a><strong>总线周期（机器周期）</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">CPU通过总线与存储器或IO接口进行一次数据传输所需的时间<br><span class="hljs-code">    | T1 | CPU往多路复用总线上发出地址信息，以指出寻址的存储单元或外设端口的地址</span><br><span class="hljs-code">    | T2 | CPU从总线上撤销地址，使总线的低十六位为高阻态，为数据传输准备</span><br><span class="hljs-code">    | T3 | 总线低十六位上出现由CPU写出的数据或者CPU从存储器或端口读入的数据</span><br><span class="hljs-code">    | Tw | 一个或者多个，等待状态，等待外设或存储器的READY信号</span><br><span class="hljs-code">    | T4 | 总线周期结束</span><br><span class="hljs-code">空闲周期Ti，在一个总线周期结束后，若不执行下一个总线周期，则总线周期处于空闲状态</span><br></code></pre></td></tr></table></figure><h2 id="引脚信号与工作模式"><a href="#引脚信号与工作模式" class="headerlink" title="引脚信号与工作模式"></a><strong>引脚信号与工作模式</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 最小工作模式 | 一个8086,总线控制信号都是8086发出<br>| 最大工作模式 | 多个处理器，主处理器：8086，协处理器：8087，8089等<br></code></pre></td></tr></table></figure><h3 id="引脚和信号"><a href="#引脚和信号" class="headerlink" title="引脚和信号"></a>引脚和信号</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs markdown">引脚总数：20，双列直插封装<br><br>A,D复用——AD0..AD15<br><br>数据线——16位<br><br><span class="hljs-code">    可用高八位传送一个字节</span><br><span class="hljs-code">    可用低八位传送一个字节</span><br><span class="hljs-code">    也可以用16位数据线传送一个字</span><br><span class="hljs-code">    通过/BHE（BUS HIGH ENABLE）信号区分</span><br><span class="hljs-code"></span><br>RESET系统复位信号<br><br>READY<br><br>/RD：读<br><br>/WR：写<br><br>M//IO：区分CPU与内存之间传输数据还是CPU与IO接口传送数据<br><br>A/S：高四位地址和状态线复用<br><br>VCC:+5V<br><br>GND：地<br><br>AD[0..15]<br><br><span class="hljs-code">    AD0信号可以作为低八位数据的选通信号</span><br><span class="hljs-code">    CPU的传输特性决定了只要是和偶地址单元或偶地址端口交换数据，那么，CPU必定通过总线低八位传输数据</span><br><span class="hljs-code"></span><br>A19/S6A16/S3（输出）<br><br><span class="hljs-code">    地址/状态复用引脚</span><br><span class="hljs-code">    S6=0：8086当前与总线相连</span><br><span class="hljs-code">    S5=1：允许可屏蔽中断请求</span><br><span class="hljs-code">    S4与S3：指出当前正在使用哪个段寄存器</span><br><span class="hljs-code"></span><br>/BHE/S7：高八位数据允许总线/状态复用引脚（输出）<br><br>NMI:非屏蔽中断引脚（输入）<br><br>INTR:可屏蔽中断请求信号（输入）<br><br><span class="hljs-code">    可屏蔽中断请求信号位高电平有效</span><br><span class="hljs-code">    CPU在执行每条指令的最后一个时钟周期会对INTR信号进行采样，如果CPU的中断允许标志位（IF）为1，并且又接收到INTR信号，那么，CPU就会在结束当前指令后，响应中断请求，执行一个中断处理子程序。</span><br><span class="hljs-code"></span><br>/RD: 读信号（输出）<br><br><span class="hljs-code">    指出将要执行对内存或IO端口的读操作</span><br><span class="hljs-code">    与M/IO引脚信号配合，决定读取哪个设备</span><br><span class="hljs-code"></span><br>CLK：时钟（输入）<br><br><span class="hljs-code">    8086要求：1/3周期为高电平（33%占空比）</span><br><span class="hljs-code"></span><br>RESET:复位信号（输入）<br><br><span class="hljs-code">    至少维持四个时钟周期的高电平才有效</span><br><span class="hljs-code"></span><br><span class="hljs-code">    复位执行的操作是</span><br><span class="hljs-code"></span><br><span class="hljs-code">        CS：设置为FFFFH</span><br><span class="hljs-code">        其他：清零</span><br><span class="hljs-code"></span><br>READY：准备好，输入<br><br>/TEST:输入<br><br>MN//MX:最小和最大模式控制信号，（输入）<br></code></pre></td></tr></table></figure><h3 id="最小工作模式"><a href="#最小工作模式" class="headerlink" title="最小工作模式"></a>最小工作模式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/INTA:中断响应信号，输出<br><br>对外设的中断请求做出回应<br><br>ALE:地址锁存信号，输出<br><br>在任何一个总线周期的T1状态，ALE输出有效电平，以表示当前在地址/数据复用总线上输出的是地址信息，地址锁存器将ALE作为锁存信号，对地址进行锁存。<br><br>/DEN：数据允许信号，输出<br><br>表示CPU当前准备发送/接收一个数据<br><br>DT//R：数据收发信号，输出<br><br>M//IO<br><br>/WR：写，输出<br><br>HOLD:hold          request，总线保持请求信号<br><br>HLDA:hold          acknowledge 总线保持响应信号<br><br></code></pre></td></tr></table></figure><h3 id="最小工作模式下的典型配置"><a href="#最小工作模式下的典型配置" class="headerlink" title="最小工作模式下的典型配置"></a>最小工作模式下的典型配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mark"><br><br>锁存芯片——8282或者74ls373<br>数据总线驱动芯片——8286<br></code></pre></td></tr></table></figure><h2 id="8086的操作和时序"><a href="#8086的操作和时序" class="headerlink" title="8086的操作和时序"></a><strong>8086的操作和时序</strong></h2><h3 id="复位"><a href="#复位" class="headerlink" title="复位"></a>复位</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">RESET：CPU将CS设置为初值为0FFFFH，其他内部寄存器设置为0<br>CS被初始化为FFFFH，IP被初始化为0000F，那么复位之后，8086从FFF0H开始执行程序<br></code></pre></td></tr></table></figure><h3 id="总线操作"><a href="#总线操作" class="headerlink" title="总线操作"></a>总线操作</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">总线读操作和总线写操作<br></code></pre></td></tr></table></figure><h3 id="中断操作和中断系统"><a href="#中断操作和中断系统" class="headerlink" title="中断操作和中断系统"></a>中断操作和中断系统</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>8086可以处理256种不同的中断，中断类型号（0255）<br></code></pre></td></tr></table></figure><h4 id="硬件中断——外部中断"><a href="#硬件中断——外部中断" class="headerlink" title="硬件中断——外部中断"></a>硬件中断——外部中断</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">非屏蔽中断<br><br><span class="hljs-code">    通过CPU的NMI引脚进入，不受中断允许标志IF的屏蔽</span><br><span class="hljs-code">    整个系统种只能有一个非屏蔽中断</span><br><span class="hljs-code"></span><br>可屏蔽中断<br><br><span class="hljs-code">    通过CPU的INTR引脚进入的，当IF=1时，可屏蔽中断才可以进入</span><br></code></pre></td></tr></table></figure><h4 id="软件中断"><a href="#软件中断" class="headerlink" title="软件中断"></a>软件中断</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">CPU根据某条指令或者软件对标志寄存器中某个标志的设置而产生的<br></code></pre></td></tr></table></figure><h4 id="中断向量和中断向量表"><a href="#中断向量和中断向量表" class="headerlink" title="中断向量和中断向量表"></a>中断向量和中断向量表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>中断系统以位于内存0段的03FFH（01023D）区域中的中断向量表为基础，中断向量表中最多可以容纳256个中断向量<br><br>中断向量就是中断处理子程序的入口地址，每一个中断类型对应一个中断向量<br><br>一个中断向量占4个存储单元<br><br><span class="hljs-code">    前(低位)</span><br><span class="hljs-code">    </span><br><span class="hljs-code">    | IPL |</span><br><span class="hljs-code">    | IPH |</span><br><span class="hljs-code">    | CSL |</span><br><span class="hljs-code">    | CSH |</span><br><span class="hljs-code">    </span><br><span class="hljs-code">    后（高位）</span><br><span class="hljs-code"></span><br>256个中断的前5个（04号）中断是专用中断<br><br>431号中断为保留的中断<br><br>其余中断：用户自定义<br><br></code></pre></td></tr></table></figure><h3 id="8086的存储器编址和IO编址"><a href="#8086的存储器编址和IO编址" class="headerlink" title="8086的存储器编址和IO编址"></a>8086的存储器编址和IO编址</h3><h4 id="存储器编址"><a href="#存储器编址" class="headerlink" title="存储器编址"></a>存储器编址</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs markdown">20根地址线=1MB（2^20）的存储地址空间：（00000-FFFFFH）<br><br>寄存器不能直接对1MB的内存空间进行寻址，引入分段的概念<br><br>一个段最长64KB（2^16）<br><br>各段的地址分别由CS,DS,SS,ES给出，寄存器为16位<br><br>存储单元的物理地址：（5位）<br><br>段地址左移四位(从16位变成20位)再加16位的偏移量<br><br>偏移量又称有效地址：可以放在IP,SP,BP,SI,DI,BX中<br><br>8086运行过程中，物理地址的形成因操作而异<br><br><span class="hljs-code">    | 取指令                       | CS+IP</span><br><span class="hljs-code">    | 堆栈操作                     | SS+SP或者SS+BP</span><br><span class="hljs-code">    | 往内存写数据或者从内存读数据   | DS+SI或DS+DI或DS+BX</span><br><span class="hljs-code"></span><br>存储器的操作数可以是一个字节，也可以是一个字<br><br>如果是字操作数，低位字节放在较低的地址单元，高位字节放在较高的地址单元<br>字的地址以低位地址来表示<br></code></pre></td></tr></table></figure><h4 id="存储器编址的注意事项"><a href="#存储器编址的注意事项" class="headerlink" title="存储器编址的注意事项"></a>存储器编址的注意事项</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">根据一个物理地址可以反推出多个段地址和偏移量的组合<br><br>CS,DS,SS,ES的空间大小为64KB.但是在实际应用中，这些段之间可以有相互覆盖的部分<br><br>存储器中有的区域的功能是固定的<br><br><span class="hljs-code">    中断向量表:00000-003FFH</span><br><span class="hljs-code">    单色显示器的显示缓冲区</span><br><span class="hljs-code">    彩色显示器的显示缓冲区</span><br><span class="hljs-code">    无条件转移指令</span><br></code></pre></td></tr></table></figure><h4 id="奇地址和偶地址"><a href="#奇地址和偶地址" class="headerlink" title="奇地址和偶地址"></a>奇地址和偶地址</h4><h3 id="8086的IO编址"><a href="#8086的IO编址" class="headerlink" title="8086的IO编址"></a>8086的IO编址</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8086允许有65536（64K）个8为的IO端口<br><br>两种编址方式<br>统一编址<br><br><span class="hljs-code">    可以用访问存储器的指令来实现对IO端口的读写，不需要设置专用的IO指令</span><br><span class="hljs-code"></span><br>独立编址<br><br><span class="hljs-code">    使用指令系统中的专用的IO指令</span><br></code></pre></td></tr></table></figure><h1 id="第三章-指令系统"><a href="#第三章-指令系统" class="headerlink" title="第三章 指令系统"></a>第三章 指令系统</h1><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><p>寻址就是寻找操作数得来源</p><h3 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">所调用得操作数就在指令中直接给出<br>一般用与对寄存器赋值<br></code></pre></td></tr></table></figure><h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br><span class="hljs-built_in">AX</span> <span class="hljs-built_in">BX</span> <span class="hljs-built_in">CX</span> <span class="hljs-built_in">DX</span> <span class="hljs-built_in">SI</span> <span class="hljs-built_in">DI</span> <span class="hljs-built_in">SP</span> <span class="hljs-built_in">BP</span><br>对段寄存器不能直接赋值&gt;<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">AX</span>,<span class="hljs-number">0FFFFH</span> <br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DS</span>, <span class="hljs-built_in">AX</span><br><br></code></pre></td></tr></table></figure><h3 id="IO端口寻址"><a href="#IO端口寻址" class="headerlink" title="IO端口寻址"></a>IO端口寻址</h3><h4 id="IO直接寻址"><a href="#IO直接寻址" class="headerlink" title="IO直接寻址"></a>IO直接寻址</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">    IO端口的地址直接在指令中给出</span><br><span class="hljs-code">    寻址范围：0-255（00-FFH）</span><br><span class="hljs-code">````</span><br><span class="hljs-code">#### IO间接寻址</span><br><span class="hljs-code">``` markdown</span><br><span class="hljs-code">    先把DX寄存器中设置好IO端口的地址，IO指令用DX用寄存器间接寻址</span><br><span class="hljs-code">    寻址范围：0-655536（0-FFFFH）</span><br></code></pre></td></tr></table></figure><h3 id="存储器寻址"><a href="#存储器寻址" class="headerlink" title="存储器寻址"></a>存储器寻址</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">存储器单元的地址由段基地址+偏移量组成<br>偏移量就是有效地址EA<br><br>有效地址EA = 基址 + 变址 * 比例因子 + 位移量<br></code></pre></td></tr></table></figure><h4 id="1直接寻址"><a href="#1直接寻址" class="headerlink" title="1直接寻址"></a>1直接寻址</h4><pre><code class="hljs">存储单元的有效地址由指令直接给出MOV        AX,[1070H] ；将**段的1070H（4位）和1071H（4位）两单元的内容取到AX（16位）中MOV        AX,ES:[1000H]  ;(带超越前缀)</code></pre><h4 id="2寄存器间接寻址"><a href="#2寄存器间接寻址" class="headerlink" title="2寄存器间接寻址"></a>2寄存器间接寻址</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">存储单元的有效地址由寄存器指出<br>MOV AX,[BX]<br>MOV CX,ES:[BX]<br><br>默认<br>SS:BP<br><br><br>DS:SI<br>DS:DI<br>DS:BX<br></code></pre></td></tr></table></figure><h4 id="3寄存器相对寻址"><a href="#3寄存器相对寻址" class="headerlink" title="3寄存器相对寻址"></a>3寄存器相对寻址</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">带位移量的寄存器相对寻址<br>MOV AX,[BX+100H]<br>寄存器的相对寻址常用做表格处理：将表格的首地址作为位移量，通过修改寄存器的内容指向表格的某一项<br></code></pre></td></tr></table></figure><h4 id="4基址-变址的寻址"><a href="#4基址-变址的寻址" class="headerlink" title="4基址+变址的寻址"></a>4基址+变址的寻址</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">基址寄存器BX,BP<br>变址寄存器SI,DI<br>段地址寄存器为DS时基址寄存器用BX<br>段地址寄存器位SS时基址寄存器用BP<br><br>当基址寄存器为BX时，段寄存器使用DS，当基址寄存器为BP时，段寄存器用SS。<br><br>MOV AX,[BX+SI]<br>MOV AX,[BX+DI]<br>MOV AX,[BP+SI]<br>MOV AX,[BP+DI]<br>等价写法：MOV AX,[<span class="hljs-string">BX+SI</span>]=======MOV AX,[<span class="hljs-string">BX</span>][<span class="hljs-symbol">SI</span>]<br></code></pre></td></tr></table></figure><h4 id="5相对的基址-变址寻址"><a href="#5相对的基址-变址寻址" class="headerlink" title="5相对的基址+变址寻址"></a>5相对的基址+变址寻址</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">带有位移量的基址+变址寻址<br>MOV AX,[BX+SI+0050H]<br></code></pre></td></tr></table></figure><h4 id="6相对的带比例因子的变址寻址（8086没有此功能）"><a href="#6相对的带比例因子的变址寻址（8086没有此功能）" class="headerlink" title="6相对的带比例因子的变址寻址（8086没有此功能）"></a>6相对的带比例因子的变址寻址（8086没有此功能）</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">MOV BX,[SI<span class="hljs-emphasis">*4+7]</span><br></code></pre></td></tr></table></figure><h4 id="7基址-比例因子的变址寻址（8086没有此功能）"><a href="#7基址-比例因子的变址寻址（8086没有此功能）" class="headerlink" title="7基址+比例因子的变址寻址（8086没有此功能）"></a>7基址+比例因子的变址寻址（8086没有此功能）</h4><h4 id="8相对的基址-比例因子的寻址（8086没有此功能）"><a href="#8相对的基址-比例因子的寻址（8086没有此功能）" class="headerlink" title="8相对的基址+比例因子的寻址（8086没有此功能）"></a>8相对的基址+比例因子的寻址（8086没有此功能）</h4><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><h3 id="传送指令"><a href="#传送指令" class="headerlink" title="传送指令"></a>传送指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown">CPU的内存寄存器之间，CPU和存储器之间，CPU和IO端口之间的数据交换<br><br><br>MOV：两操作数的位数相同<br><br><span class="hljs-code">    | MOV AL,BL               | 8位的数据从BL送到AL </span><br><span class="hljs-code">    | MOV ES,DX               | 16位的数据从DX从到段寄存器ES中</span><br><span class="hljs-code">    | MOV AX,[BX]             | 寄存器寻址方式：间接寻址！BX寄存器中存储的是某个存储单元的偏移地址(eg:1070H)，假设地址为1070H的存储单元中的内容是12H，假设地址为1071H的存储单元中的内容是34H，[BX]的意思时是，取出1070H和1071H这两个存储单元中所存储的内容，也就是1234H，然后MOV，AX,[BX]的意思也就是把取出来的值赋给AX，因此AX中存放的值就是1234H</span><br><span class="hljs-code">    | MOV [DI],AX             | 假如AX中的值是1234H，I的值是1070H，那么意思就是，把1234H放到两个偏移地址分别是1070H和1071H的内存单元中，偏移地址为1070H的内存单元中的值是34，偏移地址为1071H的内存单元中的值是12</span><br><span class="hljs-code">    | MOV DI,[BX]             |</span><br><span class="hljs-code">    | MOV CX,[1000H]          | </span><br><span class="hljs-code">    | MOV WORD PTR [SI],1234H |</span><br><span class="hljs-code">    | MOV DX,5040H            | 立即数送到DX</span><br><span class="hljs-code"></span><br><span class="hljs-code">    MOVZX,MOVSX:两操作数的位数不相同</span><br><span class="hljs-code"></span><br>注意<br><br><span class="hljs-code">    CS,IP寄存器不能作为目的操作数</span><br><span class="hljs-code">    SI,DI来间接寻址时，默认的段寄存器为DS</span><br><span class="hljs-code">    BP,SP来间接寻址时，默认的段寄存器为SS</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h3 id="堆栈指令"><a href="#堆栈指令" class="headerlink" title="堆栈指令"></a>堆栈指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">PUSH：把一个2字节或者4字节的数据推入堆栈<br><br>POP:<br><br><span class="hljs-code">    | PUSH BX                | 将BX的内容推入堆栈，堆栈指针减2</span><br><span class="hljs-code">    | PUSH [BX+DI]           | 把BX+DI和BX+DI+1所指的两内存单元的值压入堆栈</span><br><span class="hljs-code">    | PUSH 0870H             | 把立即数压栈</span><br><span class="hljs-code">    | PUSH DWORD PTR [BX+SI] | 双字压栈</span><br><span class="hljs-code">    | POP BX                 | 栈顶两单元弹出送给BX，栈顶地址+2</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h3 id="交换指令"><a href="#交换指令" class="headerlink" title="交换指令"></a>交换指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">XCHG：字节，字，双字的交换<br><br>实现通用寄存器之间，通用寄存器和存储单元之间，不能在两存储单元之间<br><br><span class="hljs-code">    | XCHG AL,BL     |</span><br><span class="hljs-code">    | XCHG BX,CX     |</span><br><span class="hljs-code">    | XCHG [2530],CX |</span><br></code></pre></td></tr></table></figure><h3 id="输入输出指令"><a href="#输入输出指令" class="headerlink" title="输入输出指令"></a>输入输出指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在主机和外部设备之间传送信息时，用输入输出指令<br><br>寻址方式<br><br><span class="hljs-code">    | 直接的IO指令  | 在指令中直接提供了IO端口号码(寻址范围0255)</span><br><span class="hljs-code">    | IN AL,50H    | 把端口50H的内容读入AL</span><br><span class="hljs-code">    | IN AX,70H    | 把端口70H的内容读入AL，把端口71H的内容读入AH</span><br><span class="hljs-code">    | OUT 80H,AX   | 把AL的内容输出到端口80H，把AH的内容输出到端口81H</span><br><span class="hljs-code">    | 间接的IO指令  | 用寄存器DX设置端口号（寻址范围065536）</span><br><span class="hljs-code">    | IN AL,DX     | （DX式唯一的，其他的都不可以）</span><br><span class="hljs-code">    | IN AX,DX     |</span><br><span class="hljs-code">    | OUT DX,AL    |</span><br><span class="hljs-code">    | OUT DX,AX    |</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h3 id="换码指令"><a href="#换码指令" class="headerlink" title="换码指令"></a>换码指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">XLAT:将累加器中的一个值变换成内存表格中的某一个值，一般用来实现编码制的转换<br></code></pre></td></tr></table></figure><h3 id="地址传送指令"><a href="#地址传送指令" class="headerlink" title="地址传送指令"></a>地址传送指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">LEA:取有效地址：将存储器的有效地址送到一个寄存器，常用来使一个寄存器作为地址指针<br><br><span class="hljs-code">    | LEA AX,[3820H]          | AX=3820H</span><br><span class="hljs-code">    | LEA BX,[BP+SI]          | BX=BP+SI</span><br><span class="hljs-code">    | LEA BX,[BP+SI+10H]      | BX=BP+SI+10H</span><br><span class="hljs-code">    | LDS DI,[2530H]          | 把2530H，2531H的16位偏移量送到DI，把2532H，2533H的16位段码送到DS</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h3 id="标志传送指令"><a href="#标志传送指令" class="headerlink" title="标志传送指令"></a>标志传送指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| LAHF | 将标志寄存器中的低八位传送到AH中<br>| SAHF | 将AH中的内容送到标志寄存器的低八位<br></code></pre></td></tr></table></figure><h3 id="算数运算指令"><a href="#算数运算指令" class="headerlink" title="算数运算指令"></a>算数运算指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs markdown">加法<br><br><span class="hljs-code">    | ADD  | 不带进位ADD CX,1000H</span><br><span class="hljs-code">    | ADC  | 带进位</span><br><span class="hljs-code">    | INC  | a++ INC不会影响CF，即使用INC不会产生进位</span><br><span class="hljs-code"></span><br>减法<br><br><span class="hljs-code">    | SUB  | 不考虑借位</span><br><span class="hljs-code">    | SBB  | 考虑借位</span><br><span class="hljs-code">    | DEC  | a--</span><br><span class="hljs-code">    | NEG  | 求补</span><br><span class="hljs-code">    | CMP  | 比较指令：执行两个数相减但不送回相减的结果，只影响结果的标志位</span><br><span class="hljs-code"></span><br>乘法（和AX或AL进行运算，隐含寻址）<br><br><span class="hljs-code">    | MUL  | 无符号数的乘法 |</span><br><span class="hljs-code">    | IMUL | 有符号数的乘法 |</span><br><span class="hljs-code"></span><br>除法（和AX或AL进行运算，隐含寻址）<br><br><span class="hljs-code">    | DIV  | 无符号数的除法 |</span><br><span class="hljs-code">    | IDIV | 有符号数的除法 |</span><br><span class="hljs-code"></span><br>类型转换<br><br><span class="hljs-code">    | CBW  | 字节转换成字 |</span><br><span class="hljs-code">    | CWD  | 字转换成双字 |</span><br><span class="hljs-code"></span><br>BCD码<br><span class="hljs-code">BCD码加法十进制调整指令</span><br><span class="hljs-code">        AAA:用与两个非组合的BCD码相加进行调整，产生有个非组合的BCD码</span><br><span class="hljs-code">        DAA:用与两个组合的BCD码相加结果进行调整，产生一个组合的BCD码</span><br><span class="hljs-code">        </span><br><span class="hljs-code">        MOV AL,37H</span><br><span class="hljs-code">        MOV BL,35H</span><br><span class="hljs-code">        ADD AL,BL ;两个16进制数相加，AL此时为37H+35H=6C</span><br><span class="hljs-code">        DAA ;DAA调整，这时AL为72H。</span><br><span class="hljs-code">        </span><br><span class="hljs-code">        组合BCD码是通常的8421码，它用4个二进制位表示一个十进制位，一个字节可以表示两个十进制位，即00~99。</span><br><span class="hljs-code">        MOV AL，68H ；AL=68H，表示压缩BCD码68</span><br><span class="hljs-code">        MOV BL，28H ；BL=28H；表示压缩BCD码28</span><br><span class="hljs-code">        ADD AL，BL ；二进制加法：AL=68H+28H=90H</span><br><span class="hljs-code">        DAA ； 十进制调整：AL=96H</span><br><span class="hljs-code"></span><br><span class="hljs-code">        非组合BCD码用8个二进制位表示一个十进制位，实际上只是用低4个二进制位表示一个十进制位0~9，高4位任意，但通常默认为0。ASCII码中0~9的编码是30H~39H，所以0~9的ASCII码（高4位变为0）就可以认为是非压缩BCD码。</span><br><span class="hljs-code">        MOV AX，0608H ；AX=0608H，表示非压缩BCD码68</span><br><span class="hljs-code">        MOV BL，09H ；BL=09H，表示非压缩BCD码9</span><br><span class="hljs-code">        ADD AL，BL ；二进制加法：AL=08H+09=11H</span><br><span class="hljs-code">        AAA ；十进制调整：AX=0707H</span><br><span class="hljs-code">    ------------------------------------------------------------------------</span><br><span class="hljs-code">减法</span><br><span class="hljs-code">AAS  非组合</span><br><span class="hljs-code"></span><br><span class="hljs-code">DAS  组合</span><br><span class="hljs-code">------------------------------------------------------------------------</span><br><span class="hljs-code">AAM 乘法</span><br><span class="hljs-code"></span><br><span class="hljs-code">AAD  除法</span><br><span class="hljs-code"></span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h3 id="逻辑运算和移位"><a href="#逻辑运算和移位" class="headerlink" title="逻辑运算和移位"></a>逻辑运算和移位</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs markdown">逻辑运算<br><br><span class="hljs-code">    | AND  | 与 AND AX,1000H，结果放到AX</span><br><span class="hljs-code">    | OR   | 或 OR AX,1000H，结果放到AX</span><br><span class="hljs-code">    | NOT  | 非 NOT AX，结果放到AX，非运算的操作数不能是立即数</span><br><span class="hljs-code">    | XOR  | 异或 XOR AX，1000H，结果放到AX</span><br><span class="hljs-code">    | TEST | 测试：TEST AL,01H，进行与计算，但是不送回结果，仅改变标志位</span><br><span class="hljs-code"></span><br><br>移位<br><span class="hljs-code">    移动一位时，由指令直接给出；移动两位及以上，则移动次数由CL指定</span><br><span class="hljs-code">非循环移位指令</span><br><span class="hljs-code"></span><br><span class="hljs-code">    | SAL  | 算数左移 |</span><br><span class="hljs-code">    | SHL  | 逻辑左移 |</span><br><span class="hljs-code">    | SAR  | 算数右移 |</span><br><span class="hljs-code">    | SHR  | 算数右移 |</span><br><span class="hljs-code"></span><br><br>循环移位指令<br><br><span class="hljs-code">    | ROL  | 不带进位的循环左移 |</span><br><span class="hljs-code">    | ROR  | 不带进位的循环右移 |</span><br><span class="hljs-code">    | RCL  | 带进位的循环左移   |</span><br><span class="hljs-code">    | RCR  | 带进位的循环右移   |</span><br></code></pre></td></tr></table></figure><h3 id="串操作"><a href="#串操作" class="headerlink" title="串操作"></a>串操作</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">    | 源串一般放在数据段，偏移地址由SI指定 目标串一般放在附加段，偏移地址由DI指定</span><br><span class="hljs-code">    | 指令自动修改地址指针，修改方向由DF指定</span><br><span class="hljs-code">    | 数据块长度由CX指定</span><br><span class="hljs-code">    | CLD与STD是用来操作方向标志位DF（Direction Flag）。CLD使DF复位，即DF=0，STD使DF置位，即DF=1.用于串操作指令中。</span><br><span class="hljs-code"></span><br>重复前缀指令<br><br><span class="hljs-code">    | REP   | 无条件重复 |</span><br><span class="hljs-code">    | REPE  | 相等重复   |</span><br><span class="hljs-code">    | REPZ  | 为零重复   |</span><br><span class="hljs-code">    | REPNE | 不相等重复 |</span><br><span class="hljs-code">    | REPNZ | 不为零重复 |</span><br><span class="hljs-code"></span><br><span class="hljs-code">    | 字符串传送指令：MOVS</span><br><span class="hljs-code">    | 字符串比较指令： COMPS</span><br><span class="hljs-code">    | 字符串检索指令：SCAS</span><br><span class="hljs-code">    | 取字符串：LODS</span><br><span class="hljs-code">    | 存字符串：STOS</span><br><span class="hljs-code"></span><br>IO串操作<br></code></pre></td></tr></table></figure><h3 id="调用，转移，循环，中断"><a href="#调用，转移，循环，中断" class="headerlink" title="调用，转移，循环，中断"></a>调用，转移，循环，中断</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs markdown">转移和调用<br><span class="hljs-code">    段内直接转移方式</span><br><span class="hljs-code">    段内间接转移方式</span><br><span class="hljs-code">    段间直接转移方式</span><br><span class="hljs-code">    段间间接寻址方式</span><br><span class="hljs-code">子程序调用和返回</span><br><span class="hljs-code"></span><br><span class="hljs-code">    CALL</span><br><span class="hljs-code">        | CALL 1000H         | 段内直接调用 |</span><br><span class="hljs-code">        | CALL AX            | 段内间接调用 |</span><br><span class="hljs-code">        | CALL 2500H:3600H   | 段间直接调用 |</span><br><span class="hljs-code">        | CALL DWORD PTR[DI] | 段间间接调用 |</span><br><span class="hljs-code">    RET</span><br><span class="hljs-code"></span><br>无条件转移和条件转移<br><br><span class="hljs-code">    | 无条件转移指令 ： JMP</span><br><span class="hljs-code">    | 条件转移指令：</span><br><span class="hljs-code">    JE/JZ  结果为0则转移</span><br><span class="hljs-code">    JNE/JNZ结果不为0</span><br><span class="hljs-code">    JG/JNLE 大于（有符号数）</span><br><span class="hljs-code">    JNG/JLE不大于（有符号数）</span><br><span class="hljs-code">    JL/JNGE小于（有符号数）</span><br><span class="hljs-code">    JNL/JGE不小于（有符号数）</span><br><span class="hljs-code">    JB/JNAE 低于（无符号数）</span><br><span class="hljs-code">    JNB/JAE不低于（无符号数）</span><br><span class="hljs-code">    JA/JNBE高于（无符号数）</span><br><span class="hljs-code">    JNA/JBE不高于（无符号数）</span><br><span class="hljs-code"></span><br>循环<br><br><span class="hljs-code">    | LOOP   | </span><br><span class="hljs-code">      loop指令的格式是：loop标号，cpu执行loop指令的时候，要进行两步操作</span><br><span class="hljs-code">             1：（cx）=（cx）-1   </span><br><span class="hljs-code">            2：判断cx中的值，不为零则转至标号处执行，如果为零，则向下执行</span><br><span class="hljs-code">    | LOOPZ  |</span><br><span class="hljs-code">    | LOOPNZ |</span><br><span class="hljs-code"></span><br>中断<br><br><span class="hljs-code">    | INT n      | 执行中断类型n的中断服务程序 |</span><br><span class="hljs-code">    | INT0       | 执行溢出中断的中断服务程序  |</span><br><span class="hljs-code">    | IRET/IRETD | 从中断服务程序返回调用程序  |</span><br><span class="hljs-code"></span><br>中断指令的执行过程<br><span class="hljs-code">    将FLAGS压入堆栈；</span><br><span class="hljs-code">    将INT指令的下一条指令的CS,IP压栈</span><br><span class="hljs-code">    由n*4得到存放中断向量表的地址</span><br><span class="hljs-code">    将中断向量（中断服务程序入口地址）送CS和IP寄存器</span><br><span class="hljs-code">    转入中断服务程序</span><br><span class="hljs-code">    </span><br><span class="hljs-code">    IRET 是中断服务子程序的返回指令。</span><br><span class="hljs-code">用于从中断返回， 等价于</span><br><span class="hljs-code">POP CS</span><br><span class="hljs-code">POP IP</span><br><span class="hljs-code">POPF（标志传送指令（标志位出栈指令） POPF）</span><br></code></pre></td></tr></table></figure><h3 id="标志操作和处理器控制"><a href="#标志操作和处理器控制" class="headerlink" title="标志操作和处理器控制"></a>标志操作和处理器控制</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">标志操作<br>暂停指令<br>交权，等待<br>总线封锁<br></code></pre></td></tr></table></figure><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><h4 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">标识符<br>保留字<br>分界符<br>常数<br></code></pre></td></tr></table></figure><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs markdown">操作数<br><br>运算符<br><br><span class="hljs-code">    算数运算符：+*/和MOD</span><br><span class="hljs-code"></span><br><span class="hljs-code">    逻辑运算符：AND OR NOT XOR</span><br><span class="hljs-code"></span><br><span class="hljs-code">    关系运算符：EQ NE LT GT LE GE</span><br><span class="hljs-code"></span><br>分析运算符<br><br><span class="hljs-code">    OFFSET：取存储单元地址的偏移量</span><br><span class="hljs-code">    SGE:取存储单元地址的断码</span><br><span class="hljs-code">    </span><br><span class="hljs-code">    MOV SI,OFFSET BUFFER</span><br><span class="hljs-code">    MOV DX,SEG BUFFER</span><br><span class="hljs-code">    </span><br><span class="hljs-code">    LEA AX,BUFFER</span><br><span class="hljs-code"></span><br>综合运算符<br><br><span class="hljs-code">    PTR:用来对存储单元规定类型，通常和后面讲述的伪指令BYTE,WORD,DWORD等连用</span><br><span class="hljs-code">    </span><br><span class="hljs-code">MOV BYTE PTR[1000],0</span><br><span class="hljs-code">MOV WORD PTR[1000],0</span><br><span class="hljs-code">MOV DWORD PTR[1000],0</span><br><span class="hljs-code"></span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 指令性语句 标志性语句<br><span class="hljs-bullet">-</span> 一条指令性语句实际上就是一条指令<br><span class="hljs-bullet">-</span> 指示性语句也叫伪指令<br><span class="hljs-bullet">-</span> 每条指令性语句在汇编过程中都会产生对应的目标代码<br><span class="hljs-bullet">-</span> 指示性语句为汇编程序提供某些信息，让汇编程序在汇编过程中执行某些特定的功能<br></code></pre></td></tr></table></figure><h4 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs markdown">标号赋值伪指令<br><span class="hljs-code">EQU</span><br><span class="hljs-code">MAXNUM EQU 200 </span><br><span class="hljs-code"></span><br>定义存储单元的伪指令：<br><br><span class="hljs-code">    | DB   | 字节     | AA DB 0AH</span><br><span class="hljs-code">    | DW   | 字       | BB DW 10 DUP(?) </span><br><span class="hljs-code">    | DD   | 双字     |</span><br><span class="hljs-code">    | DQ   | 四字     |</span><br><span class="hljs-code">    | DT   | 10个字节 |</span><br><span class="hljs-code"></span><br>定义存储单元类型的伪指令：必须与PTR配合使用<br><br><span class="hljs-code">    | BYTE  | BYTE PTR  |</span><br><span class="hljs-code">    | WORD  | WORD PTR  |</span><br><span class="hljs-code">    | DWORD | DWORD PTR |</span><br><span class="hljs-code"></span><br>段定义伪指令<br><br><span class="hljs-code">    | SEGMENT |</span><br><span class="hljs-code">    | ENDS    |</span><br><span class="hljs-code">    | ASSUME  | 告诉汇编程序，哪个段为数据段，哪个段为堆栈段，哪个段为代码段</span><br><span class="hljs-code">    | ORG     | 用来规定目标程序存放单元的偏移量   ORG  2000H</span><br><span class="hljs-code"></span><br>简约段定义伪指令<br><br>定义过程的伪指令<br><br><span class="hljs-code">    | PROC | 子程序</span><br><span class="hljs-code">    | ENDP | </span><br><span class="hljs-code">    | NEAR | 段内调用 </span><br><span class="hljs-code">    | FAR  | 段间调用</span><br><span class="hljs-code"></span><br>源程序结束伪指令<br><br><span class="hljs-code">    | END  | 源程序的结束标志 |</span><br></code></pre></td></tr></table></figure><h1 id="IO-1"><a href="#IO-1" class="headerlink" title="IO"></a>IO</h1><h1 id="Ⅰ、接口综述"><a href="#Ⅰ、接口综述" class="headerlink" title="Ⅰ、接口综述"></a>Ⅰ、接口综述</h1><p>存储器可以直接挂在到系统总线上，外设不能直接挂在系统总线上</p><h2 id="接口的基本功能"><a href="#接口的基本功能" class="headerlink" title="接口的基本功能"></a>接口的基本功能</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">数据的缓冲与暂存<br>信号电平与类型的转换<br>增加信号的驱动能力<br>对外设进行监测、控制与管理、中断<br></code></pre></td></tr></table></figure><h2 id="CPU与IO设备之间的信号"><a href="#CPU与IO设备之间的信号" class="headerlink" title="CPU与IO设备之间的信号"></a>CPU与IO设备之间的信号</h2><h3 id="①数据信息"><a href="#①数据信息" class="headerlink" title="①数据信息"></a>①数据信息</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">数字量<br>模拟量<br>开关量<br></code></pre></td></tr></table></figure><h3 id="②状态信息"><a href="#②状态信息" class="headerlink" title="②状态信息"></a>②状态信息</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">外设-&gt;CPU<br><span class="hljs-bullet">    -</span> BUSY<br><span class="hljs-bullet">    -</span> READY<br></code></pre></td></tr></table></figure><h3 id="③控制信息"><a href="#③控制信息" class="headerlink" title="③控制信息"></a>③控制信息</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">CPU-&gt;外设：控制外设的工作<br></code></pre></td></tr></table></figure><h2 id="接口的功能"><a href="#接口的功能" class="headerlink" title="接口的功能"></a>接口的功能</h2><p>CPU和外设之间的数据传送方式—&gt;解决CPU与外设之间数据传输时速度不匹配问题</p><h3 id="①程序方式"><a href="#①程序方式" class="headerlink" title="①程序方式"></a>①<strong>程序方式</strong></h3><h4 id="无条件传送方式"><a href="#无条件传送方式" class="headerlink" title="无条件传送方式"></a>无条件传送方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">如果CPU能够确信一个外设已经准备就绪，那就不必查询外设的状态而直接进行数据传输，这就是无条件传送方式<br>只适用于简单的外设的操作：开关，数码管<br>输入需要缓冲，输出需要锁存<br></code></pre></td></tr></table></figure><h4 id="条件传送方式"><a href="#条件传送方式" class="headerlink" title="条件传送方式"></a>条件传送方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">又名“查询方式”<br>用条件传送方式时，CPU通过执行程序不断读取并测试外设的状态，当外设处于READY或空闲状态时，CPU输入输出指令与外设进行数据交换<br>在查询方式下，CPU不断读取状态字和检测状态字，如状态字表明外设并未准备好，则CPU等待，占用CPU的时间<br></code></pre></td></tr></table></figure><h3 id="②中断方式"><a href="#②中断方式" class="headerlink" title="②中断方式"></a>②中断方式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">由外设中断CPU的工作，CPU暂停执行当前程序，而去执行一个数据输入输出的程序，此程序称为中断处理子程序或中断服务子程序，中断子程序执行完后，CPU又转回来执行原来的程序<br>外设主动发起中断请求<br>CPU本身的功能：<br><span class="hljs-code">    每条指令执行完后，如有中断请求，那么在中断允许标志位为1的情况下，CPU保留下一条指令的地址和当前的标志，转去执行中断服务子程序</span><br><span class="hljs-code">多个中断源产生中断，中断优先级问题？</span><br></code></pre></td></tr></table></figure><h3 id="③DMA（直接存储器存取方式）"><a href="#③DMA（直接存储器存取方式）" class="headerlink" title="③DMA（直接存储器存取方式）"></a>③DMA（直接存储器存取方式）</h3><h1 id="Ⅱ、串行接口和串行通信"><a href="#Ⅱ、串行接口和串行通信" class="headerlink" title="Ⅱ、串行接口和串行通信"></a>Ⅱ、串行接口和串行通信</h1><p>数据是一位一位进行传输的</p><p>每一位数据占用一个固定的时间长度</p><h2 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">全双工<br>半双工<br>单工<br></code></pre></td></tr></table></figure><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">异步方式：收发双方不用统一时钟进行定时<br>两个字符之间的传输间隔是任意的，每一个字符的前后都要用一些数位来作为分隔位<br>起始位：每个字符开始传送的标志，起始位采用逻辑0电平<br>数据位：数据位紧跟着起始位传送；由5-8个二进制位阻成，低位先传；<br>校验位：奇校验，偶校验，不传送校验位<br><span class="hljs-section">停止位：表示该字符传送结束。停止位采用逻辑电平1，可选择1，1.5或2位</span><br><span class="hljs-section">---------------------------------------------------------------------------------------------------------------</span><br>同步方式：收发双方采用同一个时钟信号定时<br>以一个固定长度的字符阻成的数据块为传输单位，每个数据块附加一个或两个同步字符，最后以校验字符结束<br></code></pre></td></tr></table></figure><h2 id="串行通信的传输率"><a href="#串行通信的传输率" class="headerlink" title="串行通信的传输率"></a>串行通信的传输率</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">波特率：指的单位时间内传送二进制数据的位数，单位为位/秒（bps）<br><br>发送时钟：决定数据位宽度的时钟<br><br>接收时钟：用与测定每一位输入数据位宽度的时钟<br><br>发送/接收时钟=n<span class="hljs-emphasis">*波特率</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- n为波特率因子，表征多少个时钟周期传输一个bit</span><br><span class="hljs-emphasis">- n=1或16或32或64</span><br><span class="hljs-emphasis">- 接收端一般n远大于1</span><br></code></pre></td></tr></table></figure><h1 id="Ⅲ、8251A"><a href="#Ⅲ、8251A" class="headerlink" title="Ⅲ、8251A"></a>Ⅲ、8251A</h1><h2 id="1-基本性能"><a href="#1-基本性能" class="headerlink" title="1.基本性能"></a>1.基本性能</h2><p>可以工作在同步或异步方式<br><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/1.png" alt="1"></p><h2 id="2-基本工作原理"><a href="#2-基本工作原理" class="headerlink" title="2.基本工作原理"></a>2.基本工作原理</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/2.png" alt="2"></p><h3 id="七个模块"><a href="#七个模块" class="headerlink" title="七个模块"></a>七个模块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs markdown">接收缓冲器<br><span class="hljs-code">从RXD引脚上接收串行数据，并按照相应的格式将串行数据转换成并行数据</span><br><span class="hljs-code"></span><br>接收控制电路<br><span class="hljs-code">对接收的数据进行检测，检测起始位，校验位，停止位等</span><br><span class="hljs-code"></span><br>发送缓冲器<br><span class="hljs-code">把来自CPU的并行数据加上相应的控制信息，然后转换成串行数据从TXD引脚发送出去</span><br><span class="hljs-code"></span><br>发送控制电路<br><span class="hljs-code">控制插入起始位，校验位，停止位，同步字符等</span><br><span class="hljs-code"></span><br>数据总线缓冲器<br><span class="hljs-code">把8251和系统总线相连，在CPU执行输入/输出指令时，游数据总线缓冲器发送和接收数据</span><br><span class="hljs-code">控制字，命令字和状态信息也通过数据总线缓冲区传输</span><br><span class="hljs-code"></span><br>读/写控制逻辑电路<br><br><span class="hljs-code">    接收写信号 /WR，并将来自数据总线的数据和控制字写入8251A</span><br><span class="hljs-code">    接收读信号 /RD，并将数据或状态字从8251A送往数据总线</span><br><span class="hljs-code">    - C//D：控制/数据信号；C//D   /WR   /RD三个信号组合起来通知8251A当前读写的是数据，控制字，还是状态字</span><br><span class="hljs-code">    - CLK：时钟信号</span><br><span class="hljs-code">    - RESET：复位信号</span><br><span class="hljs-code"></span><br>调制/解调控制电路<br><span class="hljs-code">实现 8251A与调制/解调器的连接</span><br></code></pre></td></tr></table></figure><h3 id="8251A的发送和接收"><a href="#8251A的发送和接收" class="headerlink" title="8251A的发送和接收"></a>8251A的发送和接收</h3><h4 id="异步方式"><a href="#异步方式" class="headerlink" title="异步方式"></a>异步方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">接收<br><br><span class="hljs-code">    在异步方式准备接收一个字符的时候，RxD就在线上检测低电平（没有检测的时候就是高电平），假如这个时候检测到了低电平，8251A就会以这个低电平作为起始位，并且启动内部定时计数器，当计数器到一半数位传输时间（比如初始设置时间脉冲为波特率的16倍），则定时器到第八个脉冲的时候，又重新对RxD进行取样，如果仍为低电平就确定是一个有效的起始位，（如果这个时候为高电平了，8251A会认为刚刚低电平是一个干扰信号，这个过程就重头开始了），8251就开始进行常规取样并进行字符装配（就是每隔一段时间对RxD进行采样）数据进入移位寄存器后（并进行去掉奇偶校验位和停止位），变成并行数据，在通过内部总线送到数据输入寄存器，同时发出RxRDY信号到CPU，表示外设的数据已经收到了，是可用的。对于少于八位的，高位自动填零</span><br><span class="hljs-code"></span><br>发送<br><br><span class="hljs-code">    当程序把TxEn（允许发送信号）和CTS#（清除请求发送信号，不懂的朋友再仔细看看上文）后就开始发送。在发送的时候，发送器自动添加1个起始位，再按照初始化的格式添加奇偶校验位，停止位。数据及起始位，校验位，停止位总是在发送时钟的TxC下降沿时发出</span><br></code></pre></td></tr></table></figure><h4 id="同步方式"><a href="#同步方式" class="headerlink" title="同步方式"></a>同步方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">接收<br><br><span class="hljs-code">    其实和异步也差不多，就是RxD先进行搜索同步字符，找到第一个数据了，送到移位寄存器移位，然后和同步字符的内容进行比较，相等就是找到了，SYNRET=1；开始接收数据块，不相等就重新来（双同步也差不多，就是第一次找到了再来一次，第二次找不到重头开始找第一个字符）,如果是外同步的话，如果SYNDET=1；的时候，直接开始，RxD就不用找起始位了直接开始采样数据块。</span><br><span class="hljs-code">    实现同步之后，就利用时钟信号对RxD进行数据采样，送到移位寄存器移位，然后从RxRDY引脚发出一个信号，表示已经收到了一个字符，一旦CPU读完之后，这个RxRDY=0；</span><br><span class="hljs-code"></span><br>发送<br><br><span class="hljs-code">    发送也差不多，程序先对TxEN和CTS#初始化了，这个时候就开始发送，程序会先发1/2个同步字符，然后发送数据块，发送数据块的时候，发送器自动按初始化要求添加奇偶校验位（没有就不加）。如果8251正在发送的时候CPU来不及发送数据了（比如说遇到了中断之类的），那么就会重新发1/2个同步字符，等待CPU。满足了同步字符之间没有空隙。</span><br></code></pre></td></tr></table></figure><h2 id="3-8251A的对外信号"><a href="#3-8251A的对外信号" class="headerlink" title="3.8251A的对外信号"></a>3.8251A的对外信号</h2><h3 id="8251A和CPU之间的连接信号"><a href="#8251A和CPU之间的连接信号" class="headerlink" title="8251A和CPU之间的连接信号"></a>8251A和CPU之间的连接信号</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/9.png" alt="9"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>片选信号<br><br><span class="hljs-code">/CS：CS#，片选信号，由M/IO#和地址译码器得到</span><br><span class="hljs-code"></span><br>数据信号<br><br><span class="hljs-bullet">    -</span> D0-D7：D0-D7        数据传输信号<br><span class="hljs-code">    8251A的8根数据线D7-D0与8086的数据总线相连</span><br><span class="hljs-code"></span><br>读/写控制信号<br><br><span class="hljs-code">    /RD：RD# 读信号，CPU从8251A中读信息</span><br><span class="hljs-code">    /WD：WR# 写信号，CPU写入8251A</span><br><span class="hljs-code"></span><br><span class="hljs-code">    8251只有两个端口地址，数据端口是偶地址（输入输出是一个端口），控制信息是奇地址，在8086中是用A1来区分奇偶地址的，如果A1是0，就是偶地址，A1为1就是奇地址，这刚好和C/D#对应了，所以A1脚通常连接C/D#</span><br><span class="hljs-code"></span><br><span class="hljs-code">    | C//D    | /RD     | /WD     | 操作                   |</span><br><span class="hljs-code">    |—————————|—————————|—————————|————————————————————————|</span><br><span class="hljs-code">    | 0       | 0       | 1       | CPU从8251A输入数据      |</span><br><span class="hljs-code">    | 0       | 1       | 0       | CPU往8251A输出数据      |</span><br><span class="hljs-code">    | 1       | 0       | 1       | CPU读取8251A的状态      |</span><br><span class="hljs-code">    | 1       | 1       | 0       | CPU往8251A写入控制命令  |</span><br><span class="hljs-code"></span><br>收发联络信号<br><br><span class="hljs-bullet">    -</span> TXRDY：发送准备好信号，用来通知CPU，8251A已经准备好发送一个字符<br><br><span class="hljs-bullet">    -</span> TxRDY：发送器准备好，输出，high，表示发送器已经准备好了，这表示发送数据缓冲器空的（没空怎么发啊），CPU可以向8251A发送数据。如果用中断形式的话，这个TxRDY也可以做中断请求信号，如果是查询方式就不断查询它就完事了<br><br><span class="hljs-bullet">    -</span> TxE 发送空信号，输出，high，表示并串转化器为空（数据要经过并串转化器把并行数据转化成串行数据才能发送）。如果8251获得一个数据，TxE就为低。在同步方式下不允许字符串有间隔，但如果CPU来不及给8251A发送数据，则TxE就为1，插入同步字符<br><br><span class="hljs-bullet">    -</span> RxRDY，表示接受器准备好了，可以接受数据了，如果从外设接收到一个数据，等待CPU处理，当然也可以用中断了，把这个当成中断请求信号，程序查询就查他就完事了<br><br><span class="hljs-bullet">    -</span> SYNDET：同步检测信号（只用于同步方式）<br><span class="hljs-code">    同步检测/断电检测信号，高有效，输出/输入 同步方式时表示同步检测，如果为内同步，作为输出，输出为1，表示找到同步字了；在外同步的时候，作为输入，变高后，在RxC#（接收器时钟）的下一个下降沿装配字符，在异步方式下，作为空白检测信号，输出，如果接收到全0的字符，输出高电平</span><br></code></pre></td></tr></table></figure><h3 id="8251A与外设的连接信号"><a href="#8251A与外设的连接信号" class="headerlink" title="8251A与外设的连接信号"></a>8251A与外设的连接信号</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/3.png" alt="3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdwon">数据信号<br>    - TXD<br>    发送数据信号TXD用来输出数据，CPU送往8251A的并行数据转换为串行数据后，通过TXD送往外设<br>    - RXD<br>    接收数据信号RXD用来接收外设送来的串行数据，数据进入8251A后，转换为并行方式<br><br>和外设的联络信号<br>    - DTR#  数据终端准备好了，由8251A发给外设，表示CPU准备就绪<br>    - DER#  数据设备请求好了，由外设发给8251A，表示外设已经准备就绪<br>    - RTS#  请求发送信号，由8251A发送给外设，表示CPU已经准备好发送<br>    - CTS#  清除请求发送信号，由外设发送8251A，表示可以往外设发送数据<br>    - CLK          8251A的内部时序时钟，同步要求是波特率的30倍，异步的话要求波特率的4.5倍<br>    - TxC，发送时钟，输入，控制字符的发送速度，同步是等于字符传送的波特率，异步方式是初始化定义的<br>    - RxC，和TxC差不多，是控制接受端的接受速度<br><br>时钟、电源、地<br>    - CLK：用来产生8251A器间的内部时序<br>    - TXC:发送器时钟输入，用来控制发送字符的速度<br>    - RXC:接收器时钟输入，用来控制接收字符的速度<br>    - VCC<br>    - GND<br></code></pre></td></tr></table></figure><h2 id="4-编程"><a href="#4-编程" class="headerlink" title="4.编程"></a>4.编程</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/4.png" alt="4"></p><h3 id="8251A的初始化"><a href="#8251A的初始化" class="headerlink" title="8251A的初始化"></a>8251A的初始化</h3><p>8251A有一个奇一个偶两个端口地址；</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">偶地址端口对应数据输入寄存器和数据输出寄存器；<br>奇地址端口对应状态寄存器，模式寄存器，控制寄存器，同步字符寄存器<br></code></pre></td></tr></table></figure><h4 id="用偶地址端口时-A1-0"><a href="#用偶地址端口时-A1-0" class="headerlink" title="用偶地址端口时(A1&#x3D;0)"></a>用偶地址端口时(A1&#x3D;0)</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">写入：数据输入寄存器<br>读出：数据输出寄存器<br></code></pre></td></tr></table></figure><h4 id="用奇地址端口时（A1-1-8251A初始化的约定"><a href="#用奇地址端口时（A1-1-8251A初始化的约定" class="headerlink" title="用奇地址端口时（A1&#x3D;1)(8251A初始化的约定)"></a>用奇地址端口时（A1&#x3D;1)(8251A初始化的约定)</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">第一种描述方法（来自课本）<br><span class="hljs-code">    芯片复位以后，第一次用奇地址端口写入的值作为模式字送入模式寄存器</span><br><span class="hljs-code">    如果模式字中规定了8251A工作在同步模式，那么，CPU接着往奇地址端口输出的就是同步字符，同步字符被写入同步字符寄存器。如此前规定同步字符为两个，则会按先后次序分别写入第一个同步字符寄存器和第二个同步字符寄存器</span><br><span class="hljs-code">    此后，只要不是复位命令，不管是同步模式，还是异步模式，由CPU往奇地址端口写入的值都将作为控制字送到控制寄存器，而往偶地址端口写入的值将作为数据，送到数据发送缓冲器</span><br><span class="hljs-code"></span><br>第二种描述方法（来自网络）<br><span class="hljs-code">    芯片复位之后，第一次用奇地址写控制字，在控制字中规定是同步还是异步；</span><br><span class="hljs-code">    如果是同步方式，CPU会接着发1或者2个字节就是同步字符，写入同步字符寄存器，然后再把控制命令字写入奇端口；</span><br><span class="hljs-code">    如果是异步方式，CPU往奇端口输出的一个字就是命令控制字；</span><br><span class="hljs-code">    在相关命令设置好了之后，只要不复位，用奇端口写控制字，偶端口写的是数据，送到数据输出缓冲器中</span><br></code></pre></td></tr></table></figure><h4 id="地址说明"><a href="#地址说明" class="headerlink" title="地址说明"></a>地址说明</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 关于8位接口芯片和16位数据总线的连接问题<br><span class="hljs-bullet">    -</span> 8086CPU有一个必须遵守的约定，即低八位数据线总是与偶地址存储单元或端口关联；<br><span class="hljs-bullet">    -</span> 而高八位数据线总是与奇地址存储单元或端口关联；<br><span class="hljs-bullet">    -</span> 为了满足这一个要求，连接时在硬件上将总线的A1与8251A的C//D引脚相连接，而在软件设计的时候，用连续的偶地址代替端口的奇偶地址，就解决了8位接口芯片与16位数据总线的连接<br></code></pre></td></tr></table></figure><h4 id="初始化的概述"><a href="#初始化的概述" class="headerlink" title="初始化的概述"></a>初始化的概述</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 模式字决定了8251A将工作在同步模式还是异步模式，如果工作在同步模式，还会指出同步字符的个数是一个还是两个；同步字符被写入同步字符寄存器<br><span class="hljs-bullet">-</span> 如果是异步模式，则在设置完模式字后，接着便要设置控制字<br>控制字的主要含义相同，控制字就是各种控制命令，包括复位命令<br><span class="hljs-bullet">-</span> CPU向8251A发送控制字之后，8251A首先判断控制字是否为复位命令：如果是复位命令，则返回重新接收模式字；如果不是复位命令，则8251A开始进行数据传输。<br></code></pre></td></tr></table></figure><h3 id="模式寄存器的格式"><a href="#模式寄存器的格式" class="headerlink" title="模式寄存器的格式"></a>模式寄存器的格式</h3><p>模式字<strong>8位</strong></p><h4 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h4><p>需要考虑的量：停止位&#x2F;校验位&#x2F;校验允许位&#x2F;数据位的数目&#x2F;波特率因子</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/5.png" alt="5"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown">（从高到低）<br>前两位是停止位的数目，00非法，01是1位，10是1.5位，11是2位停止位<br>第三位是EP（奇偶校验类型），0为奇校验，1为偶校验<br>第四位是有无校验，0是无，1是有<br>第五第六位是数据的大小，00是5位，01是6位，10是7位，11是8位<br>最后两位是决定波特率因子（不能是00，00就表示同步通信了），01表示波特率因子为1，10表示波特率因子为16，11表示波特率因子为64<br>举个例子，异步通信，1个停止位，无校验，8个数据位（刚好最近在做单片机的串口通信，这就是8N1格式）波特率因子为16，则应该向奇端口（假设还是FFF2H吧）写入01001110B，HEX格式为4EH、<br><span class="hljs-bullet">-</span> MOV DX,       FFFEH（端口地址）<br><span class="hljs-bullet">-</span> MOV AL, 4EH（模式字）<br><span class="hljs-bullet">-</span> OUT DX, AL<br><br><br>波特率<br>同步模式下，发送和接收的波特率分别和/TxC引脚，/RxC引脚上的输入时钟的频率相同<br>异步模式下，要用模式寄存器中的最低2位来确定波特率因子，<br>此时满足: /TxC引脚，/RxC引脚上的输入时钟的频率=波特率因子<span class="hljs-emphasis">*波特率</span><br></code></pre></td></tr></table></figure><h4 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h4><p>需要考虑的量:同步字符的数目&#x2F;同步方式&#x2F;奇偶校验&#x2F;奇偶校验允许位&#x2F;数据位的数目&#x2F;同步模式<br><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8.png" alt="8"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs markdown">（从高到低）<br>第一位是同步字符的位数，0是2个同步字符，1是1个同步字符<br>第二位决定是内同步还是外同步，0是内同步，1是外同步<br>第三位是奇偶校验位，0是奇校验，1是偶校验<br>第四位是有没有校验，0是没有校验，1是有校验<br>第五第六位是决定数据块的位数，00是5位，01是6位，10是7位，11是8位<br>最后两位必定是00<br>举个例子，比如说现在要求发送的是同步方式，1个同步字符外同步，偶校验，数据位是8位，那么初始化命令字就应该向奇端口（假如为FFF2H）写01111100B，换成16进制就是79H<br>汇编初始化就应该是<br><span class="hljs-bullet">-</span> MOV DX FFF2H<br><span class="hljs-bullet">-</span> MOV AL 79H<br><span class="hljs-bullet">-</span> OUT DX AL<br><span class="hljs-code">````</span><br><span class="hljs-code">### 控制寄存器的格式</span><br><span class="hljs-code"></span><br><span class="hljs-code">![6](https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/6.png)</span><br><span class="hljs-code">``` markdown</span><br><span class="hljs-code">从高到低</span><br><span class="hljs-code">第七位：检索同步字符，只用在内同步模式，为1时，8251A会对同步字符进行检索</span><br><span class="hljs-code">第六位：使8251A复位，从而重新进入初始化流程</span><br><span class="hljs-code">第五位：用来设置发送请求，此位置为1会使得/RTS引脚输出为低电平</span><br><span class="hljs-code">第四位：1将清楚状态寄存器中所有的出错指示位</span><br><span class="hljs-code">第三位：为1使得引脚TxD变为低电平，于是输出一个空白字符</span><br><span class="hljs-code">第二位：接收允许信号，在CPU从8251A接收数据前，先使此位为1</span><br><span class="hljs-code">第一位：DTR</span><br><span class="hljs-code">第零位：发送允许信号，只有将此位是1时，才能使数据从8251A接口往外设传输</span><br></code></pre></td></tr></table></figure><h3 id="状态寄存器的格式"><a href="#状态寄存器的格式" class="headerlink" title="状态寄存器的格式"></a>状态寄存器的格式</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/7.png" alt="7"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">当需要检测8251A的工作状态时，需要用到状态字。<br>状态字存放在状态寄存器中。<br></code></pre></td></tr></table></figure><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><h3 id="异步模式下的初始化程序举例"><a href="#异步模式下的初始化程序举例" class="headerlink" title="异步模式下的初始化程序举例"></a>异步模式下的初始化程序举例</h3><p>设8251A工作在<strong>异步模式</strong>，波特率系数(因子)为16，7个数据位&#x2F;字符，偶校验，2个停止位，发送、接收允许，设端口地址为0042H。完成初始化程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;- 模式字：1111010B-&gt;FAH<br>;- 控制字：00110111B-&gt;37H (?)<br>;- 端口地址:对于CPU来说是偶地址，对于接口是奇地址<br><br>;- 初始化：<br>MOV AL,0FAH;送模式字<br>OUT 42H,AL ;异步方式，7位字符，偶校验,2个停止位  <br>MOV AL,37H;设置控制字，使发送、接收允许，清出错标志，使 /RTS和/DTR有效 <br>OUT 42H,AL ;送控制字<br></code></pre></td></tr></table></figure><h3 id="同步模式下初始化程序举例"><a href="#同步模式下初始化程序举例" class="headerlink" title="同步模式下初始化程序举例"></a>同步模式下初始化程序举例</h3><p>设端口地址为42H，采用内同步方式，2个同步字符（设同步字符为16H），偶校验，7位数据位&#x2F;字符 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;- 模式字00111000B 即38H<br>;- 控制字为：10010111B 即97H（？）。它使8251A对同步字符进行检索；同时使状态寄存器中的3个出错标志复位；此外，使8251A的发送器启动，接收器也启动；控制字还通知8251A，CPU当前已经准备好进行数据传输。 <br><br>;具体程序段如下：  <br>MOV AL，38H  ;设置模式字，同步模式，  用2个同步字符，<br>OUT 42H，AL   ; 7个数据位，偶校验<br>MOV AL，16H  <br>OUT 42H，AL   ;送同步字符16H<br>OUT 42H，AL    ;同步字符有两个一样的，因此送两次<br>MOV AL， 97H   ;设置控制字，使发送器和接收器启动<br>OUT 42H，AL<br></code></pre></td></tr></table></figure><h3 id="利用状态字进行编程的举例"><a href="#利用状态字进行编程的举例" class="headerlink" title="利用状态字进行编程的举例"></a>利用状态字进行编程的举例</h3><p>先对8251A进行初始化，然后对状态字进行测试，以便输入字符。本程序段用来输入80个字符。</p><p>分析：8251A的控制和状态端口地址为42H，数据输入和输出端口地址为40H。字符输入后，放在BUFFER标号所指的内存缓冲区中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;具体的程序段如下：<br>    MOV AL,0FAH <br>    OUT 42H,AL<br>    MOV AL,35H<br>    OUT 42H,AL<br>    MOV DI,0<br>    MOV CX,80<br>B：<br>    IN AL,42H<br>    TEST AL,02H<br>    JZ B  <br>    IN AL,40H<br>    MOV BX,OFFSET BUFFER<br>    MOV [BX+DI],AL<br>    INC DI<br>    IN AL,42H<br>    TEST AL,38H <br>    JNZ E<br>    LOOP B<br>    JMP EXIT<br>E： <br>    CALL ERR-OUT      <br>    EXIT:... ...<br></code></pre></td></tr></table></figure><h1 id="Ⅳ、并行接口和并行芯片"><a href="#Ⅳ、并行接口和并行芯片" class="headerlink" title="Ⅳ、并行接口和并行芯片"></a>Ⅳ、并行接口和并行芯片</h1><ul><li><p>并行通信就是把一个字符的各位用几条线同时进行传输；</p></li><li><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/10.png" alt="10"></p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 控制寄存器<br><br><span class="hljs-bullet">-</span> - 用来接收CPU的控制命令<br><br><span class="hljs-bullet">-</span> 状态寄存器<br><br><span class="hljs-bullet">-</span> - 提供各种状态位供CPU查询<br><br><span class="hljs-bullet">-</span> 输入缓冲寄存器<br><br><span class="hljs-bullet">-</span> 输出缓冲寄存器<br><br></code></pre></td></tr></table></figure><h1 id="Ⅴ、8255A"><a href="#Ⅴ、8255A" class="headerlink" title="Ⅴ、8255A"></a>Ⅴ、8255A</h1><p>可编程并行通信接口8255A</p><h2 id="1-8255A的内部结构"><a href="#1-8255A的内部结构" class="headerlink" title="1.8255A的内部结构"></a>1.8255A的内部结构</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/11.png" alt="11"></p><h3 id="①数据端口A-B-C"><a href="#①数据端口A-B-C" class="headerlink" title="①数据端口A,B,C"></a>①数据端口A,B,C</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Port A<br><span class="hljs-code">    端口A具有一个8位数据输入锁存器和一个数据输出锁存器/缓冲器；</span><br><span class="hljs-code">    用端口A做输入口或输出口时，数据均受到锁存</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> Port B<br><span class="hljs-code">    端口B具有一个8位数据输入缓冲器和一个数据输出锁存器/缓冲器；</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> Port C<br><span class="hljs-code">    端口C具有一个8位数据输入缓冲器和一个数据输出锁存器/缓冲器，一般作为控制或状态信息端口</span><br><span class="hljs-code">    当端口C作为输入口时，对数据不锁存</span><br><span class="hljs-code">    当端口C作为输出口时，对数据进行锁存</span><br><span class="hljs-code"></span><br>使用中，A，B口为两个独立的数据输入输出端口，C口配合A口和B口的工作<br>C口常常通过控制命令被分成2个四位的端口，分别用来为端口A和B提供控制信号和状态信号<br></code></pre></td></tr></table></figure><h3 id="②A组控制和B组控制"><a href="#②A组控制和B组控制" class="headerlink" title="②A组控制和B组控制"></a>②A组控制和B组控制</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">控制端口A与端口C的高4位（PC7-PC4）<br>控制端口B与端口C的低4位（PC3-PC0）<br></code></pre></td></tr></table></figure><h3 id="③读-写控制逻辑电路"><a href="#③读-写控制逻辑电路" class="headerlink" title="③读&#x2F;写控制逻辑电路"></a>③读&#x2F;写控制逻辑电路</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">功能：管理数据传输过程。<br><br>CS#-片选信号<br><br>A0、A1-端口选择信号<br><br>RD#-读信号<br><br>WR#-写信号<br><br>RESET-复位信号<br><br>读写控制逻辑：接收/CS信号以及来自地址总线的选择端口信号（A2 A1），还接收控制总线的信号/WR,/RD,REST，并将其组合成A和B组的控制信号<br></code></pre></td></tr></table></figure><h3 id="④数据总线缓冲器"><a href="#④数据总线缓冲器" class="headerlink" title="④数据总线缓冲器"></a>④数据总线缓冲器</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">双向三态的8位数据缓冲器，8255A正是通过它与系统数据总线相连<br></code></pre></td></tr></table></figure><h2 id="2-芯片引脚信号"><a href="#2-芯片引脚信号" class="headerlink" title="2.芯片引脚信号"></a>2.芯片引脚信号</h2><h3 id="和外设相连的信号"><a href="#和外设相连的信号" class="headerlink" title="和外设相连的信号"></a>和外设相连的信号</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">PA0－PA7：A口的8条输入输出信号线。<br>PB0－PB7：B口的8条输入输出信号线。<br>PC0－PC7：C口的8条输入输出信号线。<br></code></pre></td></tr></table></figure><h3 id="和CPU相连的信号"><a href="#和CPU相连的信号" class="headerlink" title="和CPU相连的信号"></a>和CPU相连的信号</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">D0－D7：双向数据信号线。和系统总线相连<br>/RD：读信号线。<br>/WR：写信号线。<br>/CS：片选信号线。当片选信号有效时，读信号和写信号才对8255A有效<br>A1、A0：口地址选择信号线。8255A有四个端口地址<br>00--A端口；01--B端口；10--C端口；11--控制口。<br>RESET：复位输入信号，复位时内部寄存器都被清除，同时，三个数据端口自动置为输入口<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/12.jpg" alt="12"></p><h3 id="端口地址举例说明"><a href="#端口地址举例说明" class="headerlink" title="端口地址举例说明"></a>端口地址举例说明</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/13.png" alt="13"></p><h2 id="3-控制字"><a href="#3-控制字" class="headerlink" title="3.控制字"></a>3.控制字</h2><p>控制字分为两类：各端口的方式选择控制字和C端口的按位置1&#x2F;置0控制字</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">控制字的D7位称为标识位<br>D7=1---&gt;方式选择控制字的标识符<br>D7=0---&gt;C端口的按位置1/置0控制字的标识符<br></code></pre></td></tr></table></figure><h3 id="方式选择控制字"><a href="#方式选择控制字" class="headerlink" title="方式选择控制字"></a>方式选择控制字</h3><p>方式选择控制字的格式</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/14.jpg" alt="14"></p><p>说明</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8255A的[三种工作方式]<br><span class="hljs-code">    方式0：基本的输入/输出方式</span><br><span class="hljs-code">    方式1：选通的输入/输出方式</span><br><span class="hljs-code">    方式2：双向传输方式</span><br><span class="hljs-code"></span><br>端口A可以工作在三种工作方式的任意一种，端口B只能工作在方式0或方式1，端口C则常配合端口A和B的工作，为这两个端口的输入/输出提供控制信号和状态信号<br>归为同一组的两个端口可以分别工作在输入或输出方式，不要求其工作同输入或输出<br></code></pre></td></tr></table></figure><h3 id="端口C置1-置0控制字"><a href="#端口C置1-置0控制字" class="headerlink" title="端口C置1&#x2F;置0控制字"></a>端口C置1&#x2F;置0控制字</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/15.jpg" alt="15"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">○ 8255A的端口C的各位均可用置1/置0控制字单独设置，因此C端口很适合做控制位使用<br>○ 当8255A收到控制字时，就对最高位即标识位进行检测，D7=1，将此字节作为方式选择控制字写入控制寄存器，D7=0，将此字节作为端口C置1/置0控制字<br>○ C端口的按位置1/置0控制字注意：<br><span class="hljs-code">    § C端口的按位置1/置0控制字尽管时对C端口进行操作，但必须写入控制端口，而不是写入C端口</span><br><span class="hljs-code">    § D0位决定置1或置0 ，D0=0置0; D0=1置1</span><br><span class="hljs-code">    § D3、D2、D1位决定了对C端口中的哪一位操作 </span><br><span class="hljs-code">    § D4 5 6无影响</span><br><span class="hljs-code">    § D7位必须为0 </span><br></code></pre></td></tr></table></figure><h2 id="4-工作方式"><a href="#4-工作方式" class="headerlink" title="4.工作方式"></a>4.工作方式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">方式0：基本输入输出方式适用于无条件传送和查询方式的接口电路（传输方式转8086页面）<br>方式1：选通输入输出方式适用于查询和中断方式的接口电路<br>方式2：双向选通传送方式适用于双向传送数据的外设适用于查询和中断方式的接口电路<br></code></pre></td></tr></table></figure><h3 id="①方式0"><a href="#①方式0" class="headerlink" title="①方式0"></a>①方式0</h3><p>基本的输入&#x2F;输出方式</p><p>特点</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> PA和PB可通过方式选择控制字规定为输入或者输出端口- PC分为两个四位端口，高四位一个端口，第四位一个端口；这两个四位端口，也可以通过方式选择控制字规定为输入或输出端口端口可作为输入口，也可作为输出口，各端口之间没有规定必然的联系。可以有16种不同的组合，适用于多种不同的场合。 <br><br><br>8255A中方式0对输出进行锁存（和总线相连肯定要锁存的），输入不锁存<br>8255A中没有时钟输入信号，所有的时序都是由引脚控制信号定时的<br>当CPU执行IN指令的时候，产生RD#信号，控制8255A从端口读取外设的输入数据，然后从D0-D7中输入到CPU<br>当CPU执行OUT指令的时候，产生WD#信号，完成CPU从端口向外传输数据<br></code></pre></td></tr></table></figure><p>时序</p><p>输入（CPU从8255A读取数据）时序要求</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">发出读信号前，先发出地址信号，从而使得8255A的片选信号和端口选择信号A1         A0有效，于是启动8255A输入数据要领先于读信号（要求在CPU发出读信号之前，外设已经将数据送到8255A的输入缓冲器中） <br></code></pre></td></tr></table></figure><p>输出（将数据有效传输到8255A）时序要求</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">略<br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">用于连接简单外设。适用于：（1）无条件输入输出方式。（2）查询输入输出方式：A、B口作为8位数据的输入或输出口，C口的高/低4位分别定义为A、B口的控制位和状态  位，作为A（B）的应答信号。应答信号不固定，可自由定义应用实例：作为主机和打印机的接口<br></code></pre></td></tr></table></figure><h3 id="②方式1"><a href="#②方式1" class="headerlink" title="②方式1"></a>②方式1</h3><p>选通的输入&#x2F;输出方式</p><p>特点</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> PA和PB用方式1进行输入/输出，端口C自动提供选通信号和应答信号<br><span class="hljs-bullet">-</span> PA和PB端口只有一个工作在方式1，那么PC一个端口中有3位被规定为配合方式1工作的信号，PC的另一个端口可以工作在方式0，PC的其他位以可工作在方式0，即作为输入/输出<br><span class="hljs-bullet">-</span> PA和PB都工作在方式1，那么PC中就需要6位用来作为配合方式1工作的信号，剩下的两位可以作为输入和输出<br><br><br><br><br>方式1是单方向的输入/输出工作模式<br><br>将3个端口分成两组，端口A和B可以两个数据口，分别工作在方式1，而端口C用来配合端口A和B在方式1下进行工作，作为选通信号<br><br>注：<br><br>A口工作于方式1输入，固定用PC5-PC3作联络信号线；<br><br>A口工作在方式1输出的时候，PC7，PC6和PC3作为选通信号<br><br>B口工作于方式1输入输出的时候，固定用PC2-PC0作联络信号线。<br><br>如果AB都用方式1进行传输，C口剩下的两位可以工作在方式0下<br></code></pre></td></tr></table></figure><p>时序</p><p>输入信号和输入时序</p><p> <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/16.jpg" alt="16"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">所用到的控制信号的定义如下：<br><br>  ① STB为低电平有效的输入选通信号，由外设提供的输入信号，当它有效时，把输入装置来的数据送入输入锁存器。<br><br>  ② IBF为高电平有效的输入缓冲器满信号，通知外设送来的数据已被接收，由STB信号的前沿产生。当CPU用输入指令读走数据后，此信号被清除。 <br><br>  ③ INTR为中断请求信号，高电平有效。CPU响应中断请求后在服务程序中读走数据时，由RD信号将其清除。<br><br>  ④ INTE为中断允许状态，可事先用位控方式写入。<br></code></pre></td></tr></table></figure><p>输出信号和输出时序</p><p> <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/17.jpg" alt="17"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">当CPU相应了8255的中断后，发出WD#信号，输出数据到锁存器中。输送完了之后，WD有效的时候，打开OBF#为0，缓冲器满，告诉CPU不要写数据到8255A了，（OBF#也是外设的选通信号）同时INTR为0（已经响应了中断）。当外设读完了数据，WD为1，发送响应信号ACK#，ACK#的上升沿也把OBF置为1，缓冲器空，INTR为1，发送下一个中断，可以读下一个数据了<br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br></code></pre></td></tr></table></figure><h3 id="③方式2"><a href="#③方式2" class="headerlink" title="③方式2"></a>③方式2</h3><p>双向传输方式</p><p>特点</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">方式2将方式1的选通输入输出功能组合成一个双向数据端口，可以发送数据和接收数据；只有端口A可以工作于方式2，需要利用端口C的5个信号线，其作用与方式1相同；方式2的数据输入过程与方式1的输入方式一样；方式2的数据输出过程与方式1的输出方式有一点不同：数据输出时8255A不是在OBF#有效时向外设输出数据，而是在外设提供响应信号ACK#时才送出数据<br><br>当A端口工作方式2的时候（需要PC3-PC7），B口还可以工作在方式1（需要PC0-PC2）和方式0（PC0-PC2可以在方式0啦）<br></code></pre></td></tr></table></figure><p>时序</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/18.png" alt="18"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">如果A口外设输入数据到8255中的时候，STB#有效，外设数据输入到A的PA0-PA7，输完数据后，STB为1，同时IBF为1，触发中断，INTR为1，CPU响应中断，发出IN指令，RD为0，当RD有效的时候，INTR为0（表示已经响应了中断），数据传输到数据总线中，读完后，INFA为0，继续开始读取数据<br><br>如果8255发送了一个中断，CPU响应了中断，发出WR#信号，数据从总线中到锁存器中，在WR有效的时候清除INTR（响应了中断）。同时让OBFA为0（PC7），告诉外设要读数据了，外设读完后发出响应信号ACK#，ACK上升沿恢复为1的时候，触发OBFA为1，又触发了中断<br><br>注意，由于A口的输入锁存器和输出锁存器是互相独立的，故当CPU向A口输出数据时，外部设备也可同时向A口输入数据。反之亦然。<br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">磁盘驱动器<br></code></pre></td></tr></table></figure><h2 id="5-应用举例"><a href="#5-应用举例" class="headerlink" title="5.应用举例"></a>5.应用举例</h2><h1 id="Ⅵ、8259A"><a href="#Ⅵ、8259A" class="headerlink" title="Ⅵ、8259A"></a>Ⅵ、8259A</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">中断控制器的功能：<br><span class="hljs-code">    接收外部的中断请求，进行判断，选中优先级最高的中断请求，送到CPU的INTR端；CPU响应中断进入中断子程序时，负责对外部中断请求管理，可实现中断嵌套。</span><br><span class="hljs-code"></span><br>8259A的工作特点： <br><br><span class="hljs-code">    ① 能管理8级中断，可与其它8个8259A芯片组成主从式中断系统，实现64级中断源控制；</span><br><span class="hljs-code"></span><br><span class="hljs-code">    ② 可编程使用，非常灵活；</span><br><span class="hljs-code"></span><br><span class="hljs-code">    ③ 只需一组5V电源。</span><br></code></pre></td></tr></table></figure><h2 id="1-外部信号和含义"><a href="#1-外部信号和含义" class="headerlink" title="1.外部信号和含义"></a>1.外部信号和含义</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/19.png" alt="19"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs markdown">① D7～D0 数据线：在系统中，他们和数据总线相连<br><br>② INT 中断请求信号：和CPU的INTR端相连，向CPU发送中断请求<br><br>③ INTA# 中断应答信号：接收来自CPU的中断应答信号，如果CPU接收到中断请求信号，而此时中断允许位标志为1，并且正好一条指令执行完毕，那么在当前总线周期和下一个总线周期中，CPU将在/TNTA引脚上分别分发一个负脉冲作为中断响应信号，在第二个/INTA脉冲结束时，CPU读取8259A送到数据总线上的中断类型号<br><br>④ RD# 读出信号：将8259A某个内部寄存器的内容送达数据总线<br><br>⑤ WR# 写入信号：使8259A从数据总线上接收数据<br><br>⑥ CS# 片选信号<br><br>⑦ A0 端口选择信号：8259A有两个端口地址，一个为奇地址，一个为偶地址，奇地址较高，偶地址较低<br><br>⑧ IR7～IR0 I/O中断请求信号：与IO设备相连或者说连接从片的INT引脚，接收其中断请求<br><br>⑨ CAS2～CAS0 从片选择信号<br><br>⑩ SP#/EN# 主片和从片的选择和驱动信号<br><br><span class="hljs-code">    /SP//EN：双功能引脚</span><br><span class="hljs-code"></span><br><span class="hljs-code">    （1）输出，低电平有效</span><br><span class="hljs-code"></span><br><span class="hljs-code">        8259A工作在缓冲方式时，该引脚输出低电平控制信号，用来使能系统总线与8259A数据引脚之间的数据缓冲器，使中断向量码能在第二个INTA周期正常从8259A输出。</span><br><span class="hljs-code"></span><br><span class="hljs-code">    （2）输入</span><br><span class="hljs-code"></span><br><span class="hljs-code">        当8259A工作在主从级联方式时，该引脚为输入：</span><br><span class="hljs-code"></span><br><span class="hljs-code">        SP=1，设定8259A为主片；</span><br><span class="hljs-code"></span><br><span class="hljs-code">        SP=0，设定8259A为从片</span><br><span class="hljs-code">        </span><br><span class="hljs-code">        </span><br></code></pre></td></tr></table></figure><h2 id="2-编程结构和工作原理"><a href="#2-编程结构和工作原理" class="headerlink" title="2.编程结构和工作原理"></a>2.编程结构和工作原理</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/20.jpg" alt="20"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/22.jpg" alt="22"></p><h3 id="组成-2"><a href="#组成-2" class="headerlink" title="组成"></a>组成</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown">控制部分——7个寄存器（八位的寄存器）<br><br>   初始化命令字ICW（1-4）<br>   功能：决定8259A的工作方式<br><span class="hljs-code">        通常是在计算机系统启动时在初始程序设置，一旦设定，一般在系统工作过程不再改变。</span><br><span class="hljs-code">   操作命令字OCW（1-3）</span><br><span class="hljs-code">       功能:在应用程序中设定，动态地控制CPU处理中断的过程</span><br><span class="hljs-code">       中断屏蔽寄存器IMR（OCW1）</span><br><span class="hljs-code">       保存对中断请求信号IR的屏蔽状态,Di位为1表示IRi中断被屏蔽（禁止）；为0表示允许</span><br><span class="hljs-code"></span><br>处理部件（8位的寄存器）<br><br>   功能：接收和处理从IR0-IR7进入的中断<br><span class="hljs-bullet">   -</span> IRR——中断请求寄存器<br><span class="hljs-code">       保存8个外界中断请求信号IR0～IR7的请求状态</span><br><span class="hljs-code">       - Di位为1表示IRi引脚有中断请求；为0表示无请求</span><br><span class="hljs-code">       </span><br><span class="hljs-code">   - PR——中断优先级裁决器</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">   -</span> ISR——当前中断服务寄存器<br><span class="hljs-code">       保存正在被8259A服务着的中断状态</span><br><span class="hljs-code">       Di位为1表示IRi中断正在服务中；为0表示没有被服务</span><br></code></pre></td></tr></table></figure><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/21.jpg"></p><p>（1）接收、处理外设中断申请，决定是否向CPU发中断申请信号。<br>（2）若CPU响应中断，则在CPU中断响应周期送出中断类型号。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">中断请求寄存器IRR接收外部中断请求，IRR有8位，分别和引脚IR7-IR0相对应;<br>接收来自某一引脚的中断请求后，IRR寄存器的对应位置便置1，即对此中断请求锁存;<br>此后，逻辑电平根据中断屏蔽寄存器IMR中对应位决定时候让此请求通过;<br>决定IRR中的中断申请是否进入优先级裁决器PR。<br><span class="hljs-code">    IMR对应位为0，允许中断申请进入优先级裁决器，</span><br><span class="hljs-code">    IMR对应位为1，不允许进入，中断申请被IMR屏蔽。</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">中断优先级裁决器PR把新进入的中断请求和当前正在处理的中断比较，从而决定哪一个优先级更高<br>当前中断服务寄存器 ISR 记录CPU正在响应的中断。<br><span class="hljs-bullet">-</span> ISR中的某位为1，表示CPU正在响应此级中断，即正在执行此中断源的中断子程；<br><span class="hljs-bullet">-</span> ISR中的某位为 0，表示CPU没有或已响应完此级中断，即不在执行此中断源的中断子程<br><br>如果进入的中断申请比ISR中记录的中断优先级高，则通过8259A的INT引脚 CPU发出中断请求信号；<br>如果进入的中断申请不比 ISR 中记录的中断优先级高，     同级或低级，则不向 CPU 发中断请求信号。<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">如果CPU的中断允许标志位IF为1,那么CPU执行完当前指令后，就可响应中断，这时，CPU从/INTA端往8259A送出两个负脉冲:<br><br><br>第一个负脉冲到达时，8259A完成三个动作<br><span class="hljs-bullet">    -</span> 使IRR锁存功能失效。对IR7-IR0线上的中断请求信号就不再接收；直到第二个负脉冲到达时，才使IRR锁存功能有效<br><span class="hljs-bullet">    -</span> 使当前中断服务服务器ISR中的相应位置1，以便中断优先级裁决寄存器以后的工作提供判断依据<br><span class="hljs-bullet">    -</span> 使IRR寄存器中的相应位清零（之前接收中断请求时设置的1，现在需要清零）<br><br><br>第二个负脉冲到达时，8259A完成两个动作<br><span class="hljs-bullet">    -</span> 将中断类型寄存器中的内容ICW2送到数据总线的D7-D0，CPU将此作为中断类型号<br><span class="hljs-bullet">    -</span> 如ICW4中的中断自动结束位为1，则将当前中断服务寄存器ISR的相应位清零<br></code></pre></td></tr></table></figure><h2 id="3-工作方式"><a href="#3-工作方式" class="headerlink" title="3.工作方式"></a>3.工作方式</h2><h3 id="设置优先级的方式"><a href="#设置优先级的方式" class="headerlink" title="设置优先级的方式"></a>设置优先级的方式</h3><h4 id="全嵌套方式"><a href="#全嵌套方式" class="headerlink" title="全嵌套方式"></a>全嵌套方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">最常用的方式<br><br>8259A的中断优先权顺序固定不变，从高到低依次为IR0、IR1、IR2、……IR7。0级优先级最高<br>中断请求后，8259A对当前请求中断中优先权最高的中断IRi予以响应，将其中断类型码送上数据总线，对应ISR的Di位置位，直到中断结束（ISR的Di位复位）。<br>在ISR的Di位置位期间，禁止再发生同级和低级优先权的中断，但允许高级优先权中断的嵌套。<br></code></pre></td></tr></table></figure><h4 id="特殊全嵌套方式"><a href="#特殊全嵌套方式" class="headerlink" title="特殊全嵌套方式"></a>特殊全嵌套方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">与全嵌套方式基本相同，只有一点不同：当处理某一级中断时，如果有同级的中断请求，也会给予响应。<br><br>特殊全嵌套方式一般用在8259A级联系统中。<br><br>一方面，CPU对于优先级别较高的主片的中断输入是允许的；<br>另一方面，CPU对于来自同一从片的优先级别较高（但对于主片来讲，优先级别是相同的）的中断也是允许、能够响应的。<br></code></pre></td></tr></table></figure><h4 id="优先级自动循环方式"><a href="#优先级自动循环方式" class="headerlink" title="优先级自动循环方式"></a>优先级自动循环方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">适用场合：系统中多个中断源优先级相等。<br>初始优先级队列规定为：IR0~IR7。从IR0～IR7引入的中断轮流具有最高优先权。当任何一级中断被处理完，它的优先级别就被改变为最低，而最高优先级分配给该中断的下一级中断。<br>例如：现正为IR3引入的中断服务，若服务完毕，IR3为最低优先级，IR4有最高优先级，优先级顺序为 IR4,IR5,IR6,…IR2,IR3。<br>优先级自动循环方式——由OCW2决定<br></code></pre></td></tr></table></figure><h4 id="优先级特殊循环方式"><a href="#优先级特殊循环方式" class="headerlink" title="优先级特殊循环方式"></a>优先级特殊循环方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">与优先级自动循环方式相比，只有一点不同：初始优先级是由编程决定的。<br>例如：编程确定IR5为最低优先级，则IR6为最高优先级，初始优先级顺序为IR6,IR7,IR0…IR4,IR5。<br>优先级特殊循环方式——由OCW2决定<br></code></pre></td></tr></table></figure><h3 id="屏蔽中断源的方式"><a href="#屏蔽中断源的方式" class="headerlink" title="屏蔽中断源的方式"></a>屏蔽中断源的方式</h3><h4 id="普通屏蔽方式"><a href="#普通屏蔽方式" class="headerlink" title="普通屏蔽方式"></a>普通屏蔽方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8259A的每个中断请求输入端都可通过对应屏蔽位的设置而被屏蔽<br><br>将OCW1（IMR）的Di位置1，则对应的中断IRi被屏蔽，该中断请求不能从8259A送到CPU。<br>如果OCW1（IMR）的Di位置0，则允许IRi中断产生。<br>撤销屏蔽：可以再程序中根据需要设置OCW1（IMR）寄存器的值。<br></code></pre></td></tr></table></figure><h4 id="特殊屏蔽方式"><a href="#特殊屏蔽方式" class="headerlink" title="特殊屏蔽方式"></a>特殊屏蔽方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">将OCW1（IMR）的Di位置1，对应的中断IRi被屏蔽的同时，使ISR的Di位置0；<br>开放了其他级别较低的中断。<br><br>特殊屏蔽是在中断处理程序中使用的，用了这种方式之后，尽管系统正在处理高级中断，但对外界来讲，只有同级中断被屏蔽，而允许其它任何级别的中断请求。<br>应用场合： 一个中断服务程序的运行过程中，需要动态地改变系统中的中断优先级结构，即：在中断处理的一部分，禁止低级中断嵌套；而在中断处理的另一部分，允许低级中断嵌套<br></code></pre></td></tr></table></figure><h3 id="结束中断处理的方式"><a href="#结束中断处理的方式" class="headerlink" title="结束中断处理的方式"></a>结束中断处理的方式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">中断结束是什么：<br><br>CPU响应某级中断后，8259A自动将ISR的对应位置1，如果CPU已执行完中断子程，而ISR中的对应位仍为1,8259A的优先级裁决器仍会据ISR的内容做裁决，从而会屏蔽同级或低级的中断申请。在中断响应后，对 ISR中相应位的清0很重要，  它是8259A认为中断结束的标志。<br></code></pre></td></tr></table></figure><h4 id="中断自动结束方式"><a href="#中断自动结束方式" class="headerlink" title="中断自动结束方式"></a>中断自动结束方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">适用于系统中只有一片8259A且多个中断不会嵌套的情况。<br>系统进入中断过程，8259A就自动将当前中断服务寄存器中对应位ISn清除。<br>方法：ICW4中AEOI位为1。<br></code></pre></td></tr></table></figure><h4 id="中断一般结束方式"><a href="#中断一般结束方式" class="headerlink" title="中断一般结束方式"></a>中断一般结束方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">配合全嵌套优先权方式使用。<br>当CPU用输出指令往8259A发出一般中断结束命令（EOI）时，8259A就会把当前中断服务寄存器优先权最高的IS位复位。<br>方法:在程序中，往8259A的偶地址端口输出一个操作命令字OCW2,OCW2的EOD=1,SL=0,R=0z<br></code></pre></td></tr></table></figure><h4 id="特殊的中断结束方式"><a href="#特殊的中断结束方式" class="headerlink" title="特殊的中断结束方式"></a>特殊的中断结束方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">配合非全嵌套方式使用。<br><span class="hljs-bullet">-</span> CPU在程序中向8259A发送一条特殊中断结束命令（SEOI），这个命令中指出了要清除哪个IS位。<br>方法：OCW2中的EOI=1,SL=1,R=0<br><br>8259A级联方式下，一般采用非自动结束方式。CPU应发出两个中断结束命令，一个送主8259A，用来将其主8259A的ISR寄存器相应位清“0”；另一个送从8259A，用来将其从8259A中的ISR寄存器相应位清“0”。<br></code></pre></td></tr></table></figure><h3 id="连接系统总线的方式"><a href="#连接系统总线的方式" class="headerlink" title="连接系统总线的方式"></a>连接系统总线的方式</h3><h4 id="缓冲方式"><a href="#缓冲方式" class="headerlink" title="缓冲方式"></a>缓冲方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8259A的数据线需加总线驱动器予以驱动。<br>8259A把 SP#/EN#       引脚作为输出端，输出允许信号（低电平），作为总线驱动器的启动信号。<br><br>由ICW4设置<br></code></pre></td></tr></table></figure><h4 id="非缓冲方式"><a href="#非缓冲方式" class="headerlink" title="非缓冲方式"></a>非缓冲方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8259A直接与数据总线相连。<br><span class="hljs-bullet">-</span> SP#/EN#引脚为输入端。<br>若8259A级联，由其确定是主片（SP#/EN#       为高）或从片 （SP#/EN# 为低）。<br><br>由ICW4设置<br></code></pre></td></tr></table></figure><h3 id="引入中断请求方式"><a href="#引入中断请求方式" class="headerlink" title="引入中断请求方式"></a>引入中断请求方式</h3><h4 id="边沿触发方式"><a href="#边沿触发方式" class="headerlink" title="边沿触发方式"></a>边沿触发方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8259A将中断请求输入端出现的上升沿作为中断请求信号。<br><br><span class="hljs-bullet">-</span> ICW1设置<br></code></pre></td></tr></table></figure><h4 id="电平触发方式"><a href="#电平触发方式" class="headerlink" title="电平触发方式"></a>电平触发方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">中断请求端出现的高电平是有效的中断请求信号。<br><br><span class="hljs-bullet">-</span> ICW1设置<br></code></pre></td></tr></table></figure><h4 id="中断查询方式"><a href="#中断查询方式" class="headerlink" title="中断查询方式"></a>中断查询方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">中断查询方式的特点：<br><span class="hljs-bullet">    -</span> 8259A不使用INT向CPU发中断请求信号。<br><span class="hljs-bullet">    -</span> CPU内部的中断允许触发器复位，禁止外部对CPU的中断请求。<br><span class="hljs-bullet">    -</span> CPU要使用软件查询来确认中断源。<br><br>查询软件：关中断、送查询命令、读取查询字。<br></code></pre></td></tr></table></figure><h2 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4.初始化"></a>4.初始化</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8259A的命令控制字包括两类<br><br>初始化命令字和操作命令字<br><br>初始化命令字：一般在系统复位后的初始化编程中设置，用于确定8259A的基本工作方式，设置以后一般保持不变<br><br>初始化编程：指系统在上电或复位后对可编程器件进行控制字设定的一段程序<br><br>操作命令字：是在初始化以后应用程序随时写入的，它实现对8259A的状态，中断方式和过程的动态控制，在工作中可随时写入操作命令字，以修改某些控制方式<br></code></pre></td></tr></table></figure><h3 id="初始化编程"><a href="#初始化编程" class="headerlink" title="初始化编程"></a>初始化编程</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8259A开始工作前，必须进行初始化编程；<br>给8259A写入初始化命令字ICW。<br></code></pre></td></tr></table></figure><h3 id="中断操作编程"><a href="#中断操作编程" class="headerlink" title="中断操作编程"></a>中断操作编程</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在8259A工作期间；<br>可以写入操作命令字OCW将选定的操作传送给8259A，使之按新的要求工作；<br>还可以读取8259A的信息，以便了解它的工作状态。<br></code></pre></td></tr></table></figure><h2 id="5-初始化命令字"><a href="#5-初始化命令字" class="headerlink" title="5.初始化命令字"></a>5.初始化命令字</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8259A有两个连续的端口地址<br>偶地址较低，奇地址较高<br><br>初始化命令字ICW1～ICW4必须按照顺序填写；<br><span class="hljs-bullet">-</span> ICW1写入偶地址端口，ICW2～ICW4写入奇地址端口。<br></code></pre></td></tr></table></figure><h3 id="ICW1-（芯片控制初始化命令字）"><a href="#ICW1-（芯片控制初始化命令字）" class="headerlink" title="ICW1:（芯片控制初始化命令字）"></a>ICW1:（<em>芯片控制初始化命令字</em>）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/23.png" alt="23"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> A0=0 偶地址端口<br><span class="hljs-bullet">-</span> D7       D6 D5 ：8086系统中不使用，设置1和0都可以<br><span class="hljs-bullet">-</span> D4：D4=1，作为OCW1的标识位，用与区分OCW2和OCW3，因为二者也是写到偶地址端口的<br><span class="hljs-bullet">-</span> D3：设置中断请求方式。边沿触发/电平触发<br><span class="hljs-bullet">-</span> D2：8086系统中不使用，设置1和0都可以<br><span class="hljs-bullet">-</span> D1：规定单片或级联方式：SNGL＝1，单片方式；SNGL＝0，级联方式<br><span class="hljs-bullet">-</span> D0：8086系统中设置为1，用来指出后面还将要设置ICW4<br></code></pre></td></tr></table></figure><h3 id="ICW2（中断类型号初始化命令字）"><a href="#ICW2（中断类型号初始化命令字）" class="headerlink" title="ICW2（中断类型号初始化命令字）"></a>ICW2（中断类型号初始化命令字）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/24.png" alt="24"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">中断类型号的高五位也就是ICW2的高五位，低三位的值则却决于引入中断的引脚序号<br> ICW2是任选的；一旦ICW2确定下来，IR0-IR7所对应的八个中断类型号也就确定了<br> ICW2高5位影响中断类型码，而中断类型码的低3位由IR0～IR7决定。<br><br>例：ICW2为20H，8259A的IR0-IR7的中断类型码为20H,21H,22H…,27H<br></code></pre></td></tr></table></figure><h3 id="ICW3（主片-从片初始化命令字）"><a href="#ICW3（主片-从片初始化命令字）" class="headerlink" title="ICW3（主片&#x2F;从片初始化命令字）"></a>ICW3（主片&#x2F;从片初始化命令字）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">系统中包含多片8259A时，才需要ICW3。<br>由ICW1的D1位（SNGL）指示，SNGL=0时，才需要设置ICW3。<br></code></pre></td></tr></table></figure><p>如是主片,则ICW3的格式如下： </p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/25.png" alt="25"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">IRi＝1说明对应的IRi引脚上接有从片；<br><br>IRi＝0则表示IRi没有连接从片<br></code></pre></td></tr></table></figure><p>如是从片，则ICW3的格式如下： </p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/26.png" alt="26"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ID2～ID0编码说明从片INT引脚接到主片哪个IR引脚<br></code></pre></td></tr></table></figure><h3 id="ICW4（方式控制初始化命令字）"><a href="#ICW4（方式控制初始化命令字）" class="headerlink" title="ICW4（方式控制初始化命令字）"></a>ICW4（方式控制初始化命令字）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/27.png" alt="27"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> ICW1的第D0位为1时，才写入ICW4；<br>16位或32位系统必须设置ICW4。<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> D7-D5:全为0，作为ICW4的标识码<br><br><span class="hljs-bullet">-</span> D4:嵌套方式:<br><br><span class="hljs-code">    特殊全嵌套方式（SFNM＝1）</span><br><span class="hljs-code">    普通全嵌套方式（SFNM＝0）</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> D3:数据线的缓冲方式：<br><br><span class="hljs-code">    缓冲方式（BUF＝1）</span><br><span class="hljs-code">    非缓冲方式（BUF＝0） </span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> D2:<br><br><span class="hljs-code">    BUF=0时,M/S#不起作用</span><br><span class="hljs-code"></span><br><span class="hljs-code">    BUF=1时主片/从片选择：</span><br><span class="hljs-code"></span><br><span class="hljs-code">    主片（M/S#=1）</span><br><span class="hljs-code">    从片（M/S#=0）</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> D1:中断结束方式：<br><br><span class="hljs-code">    自动中断结束（AEOI＝1）</span><br><span class="hljs-code">    非自动中断结束（AEOI＝0）</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> D0:微处理器类型：<br><br><span class="hljs-code">    16位或32位系统（mPM＝1）</span><br><span class="hljs-code">    8位系统8080/8085（mPM＝0）</span><br></code></pre></td></tr></table></figure><h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">8259A在进入工作之前，必须先使用初始化命令字将每片8259A进行初始化。8259A的初始化流程应该遵循固定的次序<br><br>① ICW1写入偶端口，ICW2～ICW4写入奇端口；<br><br>② ICW1～ICW4的设置次序固定；<br><br>③ ICW1和ICW2必须设置，ICW3和ICW4非必须 ；16位和32位系统中ICW4必须设置，多8259A级联时，ICW3要设置<br><br>④ 在级联时，主片和从片各设置ICW3；注意其ICW3的格式并不相同<br></code></pre></td></tr></table></figure><h2 id="6-操作命令字"><a href="#6-操作命令字" class="headerlink" title="6.操作命令字"></a>6.操作命令字</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">操作命令字是在应用程序中设置的<br><br>设置次序没用要求<br><br><span class="hljs-bullet">-</span> OCW1写入奇地址端口<br><br><span class="hljs-bullet">-</span> OCW2 OCW3写入偶地址端口<br></code></pre></td></tr></table></figure><h3 id="OCW1（中断屏蔽操作命令字）"><a href="#OCW1（中断屏蔽操作命令字）" class="headerlink" title="OCW1（中断屏蔽操作命令字）"></a>OCW1（中断屏蔽操作命令字）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/28.png" alt="28"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">中断屏蔽操作命令字：内容写入中断屏蔽寄存器IMR<br><span class="hljs-bullet">-</span> Di＝Mi对应IRi为1禁止IRi中断；为0允许IRi中断。各位互相独立。<br></code></pre></td></tr></table></figure><h3 id="OCW2（优先级循环方式和中断结束方式操作命令字）"><a href="#OCW2（优先级循环方式和中断结束方式操作命令字）" class="headerlink" title="OCW2（优先级循环方式和中断结束方式操作命令字）"></a>OCW2（优先级循环方式和中断结束方式操作命令字）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/29.png" alt="29"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> R、SL和EOI配合使用产生中断结束EOI命令和改变优先权顺序<br><span class="hljs-bullet">-</span> D4D3=00  为OCW2的标志位<br><span class="hljs-bullet">-</span> L2～L0的3位编码指定IR引脚 <br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/30.jpg" alt="30"></p><h3 id="OCW3（状态操作命令字）"><a href="#OCW3（状态操作命令字）" class="headerlink" title="OCW3（状态操作命令字）"></a>OCW3（状态操作命令字）</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/31.png" alt="31"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">（1）设置和撤销特殊屏蔽方式<br><br>（2）设置中断查询方式<br><br>（3）设置对内部寄存器的读出命令<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> ESMM称为SMM的允许位<br><span class="hljs-bullet">    -</span> SMM为特殊屏蔽模式位<br><span class="hljs-bullet">    -</span> ESMM为特殊屏蔽模式允许位<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/32.jpg" alt="32"></p><p>P：查询方式位</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/33.jpg" alt="33"></p><p>RR RIS</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/34.jpg" alt="34"></p><h2 id="7-使用举例"><a href="#7-使用举例" class="headerlink" title="7.使用举例"></a>7.使用举例</h2><h1 id="Ⅶ、8253"><a href="#Ⅶ、8253" class="headerlink" title="Ⅶ、8253"></a>Ⅶ、8253</h1><h2 id="定时信号"><a href="#定时信号" class="headerlink" title="定时信号"></a>定时信号</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">一般来说，定时信号可用软件和硬件两种方法得到<br><br>软件定时:<br><br>根据所需要的时间常数来设计一个延时子程序；<br>当延时时间较长时，可循环该延时子程序<br><br>硬件定时<br><br>计数器/定时器：计数时不会占用CPU的资源<br></code></pre></td></tr></table></figure><h2 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8253_1.png" alt="8253_1"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>计数器：在设置好计数初值（即定时常数）后，便开始减1计数，减为0时，输出一个信号<br><br><span class="hljs-section">计数器在减到0以后，输出一个信号便结束了，除非重新触发</span><br><span class="hljs-section">--------------------------------------------</span><br>定时器：在设置好定时常数后，便进行减1计数，并按定时常数不断地输出为时钟周期整数倍的定时间隔<br><br>定时器减到0以后，自动恢复初值重新奇数，并不断产生信号<br><br><br>3个独立的16位计数器通道；<br>共用1个控制寄存器和1个状态寄存器（只有8254有状态寄存器）。<br>每个计数器有6种工作方式；<br>按二进制或十进制（BCD码）计数。<br></code></pre></td></tr></table></figure><h2 id="编程结构"><a href="#编程结构" class="headerlink" title="编程结构"></a>编程结构</h2><p>8253 内部没有状态寄存器</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8253_2.png" alt="8253_2"></p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>8253内部有三个计数器：计数器0，计数器1，计数器2，其结构完全相同<br><br>每个计数器的输入和输出都决定于设置控制寄存器中的控制字，他们共用一个控制寄存器，但相互之间完全独立<br><br>内部结构<br><br><span class="hljs-code">    三个引脚：时钟输入CLK,门控信号输入端GATE,输出端OUT</span><br><span class="hljs-code">    内部部件：16位计数初值寄存器CR,计数执行部件CE,输出锁存器OL</span><br><span class="hljs-code"></span><br><span class="hljs-code">    执行部件实际上就是一个16位的减法计数器，其起始值就是初值寄存器的值，初值寄存器的值是通过程序设置的</span><br><span class="hljs-code"></span><br><span class="hljs-code">    输出锁存器OL用来锁存计数执行部件CE的内容，从而使得CPU可对此进行读操作</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">    -</span> CE CR OL 都是十六位的寄存器，但也可用作为8位寄存器来用<br><br><span class="hljs-code">    计数器的工作方式决定于控制寄存器中的控制字</span><br></code></pre></td></tr></table></figure><h3 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>\1. 设置8253\8254的工作方式；<br><br>\2. 设置计数初值到计数初值寄存器CR；<br><br>\3. 第一个CLK信号使计数初值寄存器的内容置入<br><br>计数执行部件CE；<br><br>\4. 以后每来一个CLK信号，CE减1； <br><br>\5. OUT端输出一特殊波形的信号；<br><br>注：以上计数过程中还受到GATE信号的控制。<br></code></pre></td></tr></table></figure><h2 id="外部信号"><a href="#外部信号" class="headerlink" title="外部信号"></a>外部信号</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> CLK0-CLK2：三个计数器的时钟信号<br><br><span class="hljs-bullet">-</span> GATE0-GATE2：三个计数器的门控信号<br><br><span class="hljs-bullet">-</span> OUT0-OUT2：三个计数器的输出信号<br><br><span class="hljs-bullet">-</span> A1,A0：地址线，对三个计数器和控制寄存器进行寻址<br><br><span class="hljs-code">        8253有四个端口地址</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">        -</span> A1A0=00,计数器0<br><span class="hljs-bullet">        -</span> A1A0=01，计数器1<br><span class="hljs-bullet">        -</span> A1A0=10，计数器2<br><span class="hljs-bullet">        -</span> A1A0=11，控制端口<br><br>/RD，/RD有效时，CPU对8253的输出锁存器进行读操作<br><br>/WR,/RD有效时，CPU对8253的一个计数器写入计数初值或对控制寄存器写入控制字<br><br><span class="hljs-bullet">-</span> CS：/CS有效时，/WR,/RD才会有效<br></code></pre></td></tr></table></figure><h2 id="控制寄存器与控制字"><a href="#控制寄存器与控制字" class="headerlink" title="控制寄存器与控制字"></a>控制寄存器与控制字</h2><p>8253内部的三个寄存器共用一个控制寄存器，通过对控制寄存器写入控制字，就可使得三个计数器处于不同的工作模式，控制端口是只写的；</p><h3 id="模式设置控制字"><a href="#模式设置控制字" class="headerlink" title="模式设置控制字"></a>模式设置控制字</h3><p>模式控制字：用来设置三个计数器的工作模式</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8253_3.png" alt="8253_3"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> BCD位：计数初值的格式<br><br>此位为0，后面设置的计数初值为BCD码格式，0-9999；<br>此位为1，后面设置的计数初值为二进制格式，为0-FFFFH<br><br><span class="hljs-bullet">-</span> M2 M1 M0：模式选择位<br><br>000 模式0<br>001 模式1<br>X10 模式2<br>X11 模式3<br>100 模式4<br>101 模式5<br><br><span class="hljs-bullet">-</span> RW1 RW0 读写指示位<br><br>00 对计数器进行锁存操作，使当前计数值在输出锁存器中锁定，以便读出<br>01 只读/只写低八位<br>10 只读/只写高八位<br>11 先读/写低八位，再读/写高八位<br><br><span class="hljs-bullet">-</span> SC1 SC0 选择计数器<br><br>设置模式控制器字时，指出时对哪一个计数器进行设置<br><br>00 计数器0<br>01 计数器1<br>10 计数器2<br>11 读出控制字的标识码<br></code></pre></td></tr></table></figure><h3 id="关于的控制字说明"><a href="#关于的控制字说明" class="headerlink" title="关于的控制字说明"></a>关于的控制字说明</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1、8253/8254只有一个工作方式控制字，但是对每个计数器而言，它们的工作方式控制字内容一定各不相同（前两位不同），所用各计数器的控制字需要分别设置，先后不计。<br><br>2、在工作方式控制字被设置之后，随后必须紧接着给计数器预设置计数初值，计数器方可开始工作。<br><br>8253/8254初始化的工作有两个内容：<br><br>（1）首先向控制寄存器写入控制字，以选择计数器（3个计数器之一），确定工作方式（6种方式之一），指定计数器计数初值的长度和装入顺序以及计数值的码制（BCD或二进制码）。<br><br>（2）然后向已选定的计数器按控制字要求写入计数初值。<br></code></pre></td></tr></table></figure><h3 id="读出控制字"><a href="#读出控制字" class="headerlink" title="读出控制字"></a>读出控制字</h3><p>读出控制字：用来读取计数器当前的计数值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">每个计数器的当前计数值可以被读取，因为计数值是不断变化的，所以在读取前要先进行锁存。读出控制字就是起锁存作用的，所以也叫做锁存命令<br><span class="hljs-bullet">-</span> D6 D7 D0：D7D6=11为读出控制字的标识码；D0=0必须是这样设置<br>/COUNT：如果为0，则将所选计数器的当前计数值进行锁存，以便后面读取<br>/STATUS：如果为零，则将所选计数器的状态进行锁存<br><span class="hljs-bullet">-</span> D3D2D1：分别对应于计数器2，1，0。在一个时刻只能对一个计数器进行锁存<br></code></pre></td></tr></table></figure><h2 id="编程命令"><a href="#编程命令" class="headerlink" title="编程命令"></a>编程命令</h2><p>对8253的编程没有顺序规定，非常灵活</p><h3 id="三条原则"><a href="#三条原则" class="headerlink" title="三条原则"></a>三条原则</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">对计数设置初值前必须先写控制字<br>初值设置时，要符合控制字中的格式规定<br>要读计数器的当前值和和状态字，必须用控制字先进行锁存<br></code></pre></td></tr></table></figure><h3 id="编程命令-1"><a href="#编程命令-1" class="headerlink" title="编程命令"></a>编程命令</h3><h4 id="写入命令——针对控制寄存器"><a href="#写入命令——针对控制寄存器" class="headerlink" title="写入命令——针对控制寄存器"></a>写入命令——针对控制寄存器</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">设置控制字命令，设置初值命令，锁存命令<br>一个计数器在工作之前，需要先设置控制字对所选择的计数器设定工作模式和计数格式；<br>设置初值命令用来给出计数的初值<br>锁存命令是配合读出命令使用的。在读取计数值时，必须先用锁存命令将当前计数值在输出锁存器中锁住，否则，在读数时，计数器的值在变化，就得到一个不确定的结果<br>当锁存命令到来时，计数执行部件到某一个值，因为锁存器是跟随计数执行部件工作的，所以锁存器中为同一值，此时这一计数被锁住<br><span class="hljs-bullet">-</span> CPU将此锁定值读走之后，锁存器自动失效，于是又跟随计数执行部件变化。<br>在锁存和读出计数值的过程中，计数执行部件仍在不停地作减一计数<br></code></pre></td></tr></table></figure><h4 id="读出命令——针对计数器"><a href="#读出命令——针对计数器" class="headerlink" title="读出命令——针对计数器"></a>读出命令——针对计数器</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">读出命令用来读取8253的某个计数器的当前计数值<br>读取计数器的值之前必须先锁存，再读取<br></code></pre></td></tr></table></figure><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">写入控制字时，所有的控制逻辑电路立即复位，输出端OUT进入初始状态（高或低电平）<br>初始值写入之后，要经过一个时钟上升沿和一个下降沿，计数执行部件才开始计数<br>通常，在时钟脉冲CLK上升沿时，门控信号GATE被采样<br>在时钟脉冲的下降沿，计数器作减一操作。<br><br>其中0是最大初值，1是最小初值；<br></code></pre></td></tr></table></figure><h3 id="模式0——计数结束产生中断"><a href="#模式0——计数结束产生中断" class="headerlink" title="模式0——计数结束产生中断"></a>模式0——计数结束产生中断</h3><p>不是连续波形，产生中断；计数期间为低电平，结束为高电平。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8253_00.png" alt="8253_00"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">①控制字写入之后，OUT变低；初值装入后，要经过1个CLK的周期（1个上升沿和1个下降沿）后，计数器才开始计数，所以，输出OUT要经过N+1个时钟周期后才有输出；<br><br>②输出OUT的有效电平为高电平，并可同时触发中断请求；<br><br>③门控GATE的作用：高电平时计数，低电平或下降沿时停止计数；<br><br>④CW为写入控制字，N=4表示写入初值，计数值一次有效。<br></code></pre></td></tr></table></figure><h3 id="模式1：可编程单稳态触发器"><a href="#模式1：可编程单稳态触发器" class="headerlink" title="模式1：可编程单稳态触发器"></a>模式1：可编程单稳态触发器</h3><p>周期性波形，计数期间为低电平，其余为高电平。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8253_11.png" alt="8253_11"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">①控制字和初值装入后，OUT变高，在门控GATE的上升沿触发下，经过1个CLK的上升沿和1个下降沿后，计数器开始从初值减1计数，同时使OUT=0；当计数结束（归0）时，OUT=1，使输出产生1个宽度为TW=N×TCLK的负脉冲——单稳态触发器。<br><br>②在GATE的上升沿触发下，输出可再次产生1个宽度为TW负脉冲——可重复触发。<br></code></pre></td></tr></table></figure><h3 id="模式2：分频器"><a href="#模式2：分频器" class="headerlink" title="模式2：分频器"></a>模式2：分频器</h3><p>连续波形产生负脉冲，在最后一个计数期间为低电平，其余为高电平。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8253_22.png" alt="8253_22"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">①控制字装入后，OUT=1为初始状态。<br><br>②初值装入后，经过1个CLK的周期，计数器开始从初值减1计数，计到1（不是0）时，使输出OUT=0并保持1个CLK周期，然后OUT=1，开始下一个新的计数周期，使输出为CLK的时钟1/N分频信号，占空比q=（N-1）/N。<br><br>③门控GATE的作用：高电平时计数，低电平停止计数；GATE再次变高后从初始值重新计数；而在GATE=1时，计数完成之后自动重新装入初值，循环计数。<br><br>④如果计数过程中写入新值.不影响当前计数.完成后重新装入新值<br></code></pre></td></tr></table></figure><h3 id="模式3：方波发生器"><a href="#模式3：方波发生器" class="headerlink" title="模式3：方波发生器"></a>模式3：方波发生器</h3><p>周期性方波（占空比1:1）。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8253_33.png" alt="8253_33"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">特点与方式2类似，主要区别：输出方波，其占空比q为<br><br>①当N为偶数时，q=0.5；<br><br>②当N为奇数时，q=(N+1)/2N。<br></code></pre></td></tr></table></figure><h3 id="模式4：软件触发的选通信号发生器"><a href="#模式4：软件触发的选通信号发生器" class="headerlink" title="模式4：软件触发的选通信号发生器"></a>模式4：软件触发的选通信号发生器</h3><p>单次波形输出，计数结束后输出一个CLK周期的低电平，其余为高电平，不能自动循环。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8253_44.png" alt="8253_44"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">①初值装入后，经过1个CLK的周期，计数器开始从初值减1计数，计数结束（归0）时，使输出OUT产生一个宽度为1个CLK周期的负脉冲——选通信号。<br><br>②（用指令）重新装入初值后，经过N+1个CLK周期，又可使OUT产生一个选通信号——（用软件）可重复触发。<br><br>③门控GATE的作用：高电平时计数，低电平时停止计数。<br></code></pre></td></tr></table></figure><h3 id="模式5：硬件触发的选通信号发生器"><a href="#模式5：硬件触发的选通信号发生器" class="headerlink" title="模式5：硬件触发的选通信号发生器"></a>模式5：硬件触发的选通信号发生器</h3><p>单次波形输出，波形特征同方式4，但重置初值和GATE上升沿之后可重新计时。</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/8253_55.png" alt="8253_55"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">①初值装入后，在GATE的上升沿的触发下，经过1个CLK的周期，计数器开始从初值减1计数，计数结束（归0）时，使输出OUT产生一个宽度为1个CLK周期的负脉冲——选通信号。<br><br>②用GATE的上升沿可重新触发，使OUT产生一个选通信号——（用硬件）可重复触发。<br></code></pre></td></tr></table></figure><h3 id="8253工作模式小结"><a href="#8253工作模式小结" class="headerlink" title="8253工作模式小结"></a>8253工作模式小结</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">模式2、4、5的输出波形是相同的，都是宽度为一个CLK周期的负脉冲。<br><br>但模式2是连续工作，模式4由软件（设置计数值）触发启动，模式5由门控脉冲触发启动<br><br>写入计数值后才能开始计数<br><br>模式0、2、3、4在写入计数值后，计数过程就开始了<br><br>模式1、5需要外部触发启动，才开始计数<br><br>6种方式中只有方式2、3是连续计数，其他4种方式都是一次计数，要继续工作需要重新启动，方式0、4由写入计数值（软件）启动，方式1、5要由外部信号（硬件）启动。<br><br></code></pre></td></tr></table></figure><h2 id="应用举例-1"><a href="#应用举例-1" class="headerlink" title="应用举例"></a>应用举例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;假设端口是<br>0123H;control<br>0120H;0<br>0121H;1<br>0122H<br><br><br>CNT0：<br>MOV DX,0123H            ;初始化<br>MOV AL,34H<br>OUT DX,AL<br>MOV DX,0120H            ;写入计数初值<br>MOV AX,20000            ;使用AX寄存器，分为低8位和高8位，即AL和AH<br>OUT DX,AL<br>MOV AL,AH<br>OUT DX,AL<br><br><br>CNT1：<br>MOV DX,0123H            ;初始化<br>MOV AL,56H<br>OUT DX,AL<br>MOV DX,0121H            ;写入计数初值<br>MOV AX,200              ;这里AX可以直接写AL,200用八位寄存器就够   <br>OUT DX,AL<br><br><br>CNT2：<br>MOV DX,0123H            ;初始化<br>MOV AL,B0H<br>OUT DX,AL<br>MOV DX,0122H            ;写入计数初值<br>MOV AX,10000<br>OUT DX,AL<br>MOV AL,AH<br>OUT DX,AL<br><br></code></pre></td></tr></table></figure><h1 id="80C51"><a href="#80C51" class="headerlink" title="80C51"></a>80C51</h1><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 8位微处理器<br><span class="hljs-bullet">-</span> 物理结构上具有两个寻址空间:寻址64KB程序空间，寻址64KB数据空间<br><span class="hljs-bullet">-</span> 分类:<br><span class="hljs-code">无片内ROM型：80C31 必须代价EPROM才能使用</span><br><span class="hljs-code">带片内ROM型</span><br><span class="hljs-code">片内EPROM型：87C51</span><br><span class="hljs-code">片内FLASH型：89C51</span><br><span class="hljs-code">片内掩膜ROM型：80C51</span><br><span class="hljs-code">片内一次性编程（OTP）ROM：97C51</span><br><span class="hljs-code">- 存储器配置：程序存储器和数据存储器分离，使用不同的指令和寻址方式进行访问</span><br><span class="hljs-code">寻址64KB程序空间，寻址64KB数据空间</span><br><span class="hljs-code">- 80C51共有111条指令</span><br><span class="hljs-code">- 80C51有分为2个中断优先级的5个中断源</span><br><span class="hljs-code">- 内部RAM</span><br><span class="hljs-code">4个通用工作寄存区</span><br><span class="hljs-code">32个通用寄存器</span><br><span class="hljs-code">1个位寻址区</span><br><span class="hljs-code">- 4个并行IO口（P0-P3）</span><br><span class="hljs-code">P0 P2可作为片外扩展地址总线使用</span><br><span class="hljs-code">- 内部集成一个全双工的异步串口接口，可同时发送和接收数据</span><br><span class="hljs-code"></span><br>------------------------------------------------<br>补充：<br>单片机按存储结构可分为二类：一类是哈佛结构，另一类是普林斯顿结构。<br><span class="hljs-code">       ①哈佛结构</span><br><span class="hljs-code">       所谓哈佛结构是指程序存储器地址空间与数据存储器地址空间分开的单片机结构，如80C51单片机采用哈佛结构，所以80C51单片机的程序存储器地址空间与数据存储器地址空间是分开的，各有64K存储空间。</span><br><span class="hljs-code">       ②普林斯顿结构</span><br><span class="hljs-code">       所谓普林斯顿结构是指程序存储器地址空间与数据存储器地址空间合并的单片机结构，如MCS-96单片机采用普林斯顿结构，所以MCS-96单片机的程序存储器地址空间与数据存储器地址空间是合并的，共有64K存储空间。</span><br></code></pre></td></tr></table></figure><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626102242.png" alt="QQ图片20210626102242"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626103208.png" alt="QQ图片20210626103208"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 80C51中没有单独的地址总线和数据总线，而是与通用并行口中的P0和P2口公用；<br><span class="hljs-code">8位数据线，16位地址线</span><br><span class="hljs-code">        P0口分时作为低八位地址线和8为数据线用；</span><br><span class="hljs-code">        P2口作为高八位地址线</span><br><span class="hljs-code">    单片机在进行外部扩展时的地址线和数据线都不是独立的总线，而是与并行口IO共用</span><br><span class="hljs-code">    来自网络：</span><br><span class="hljs-code">    8051单片机CPU是几位的?  </span><br><span class="hljs-code">    —— 8位,多少位机一般以数据总线的位数来确定的,8051的数据总线为P0口,8位分别为P0.0~P0.7,有16根地址总线,分别为P0和P2.</span><br><span class="hljs-code">    </span><br></code></pre></td></tr></table></figure><h2 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626103507.jpg" alt="QQ图片20210626103507"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs markdown">（来自网络）<br>若除去图中的存储器电路和I/O部件，剩下的便是CPU。它可以分为运算器和控制器两部分。<br><span class="hljs-code">运算器功能部件包括算术逻辑运算单元ALU、累加器ACC、寄存器B、暂存寄存器TMP1、TMP2、程序状态字寄存器PSW等。</span><br><span class="hljs-code">控制器功能部件包括 **程序计数器PC** 、指令寄存器IR、指令译码器ID、定时控制逻辑电路CU、**数据指针寄存器DPTR** 、**堆栈指针SP** 及时钟电路等。</span><br><span class="hljs-code"></span><br>（1）运算器<br><span class="hljs-code">    ①算术逻辑运算单元ALU（Arithmetic Logical Unit）</span><br><span class="hljs-code">    ALU可以进行算术、逻辑运算。算术运算有：加、减、乘、除，逻辑运算有：与、或、异或等。</span><br><span class="hljs-code">    ②累加器ACC</span><br><span class="hljs-code">    累加器ACC的主要功能是在运算前存放一个操作数，运算后存放一个操作结果。80C51系列单片机虽然在结构上仍然以累加器A作为重要部件。但由于内部电路采取了措施，使得累加器A在数据传送、逻辑操作等方面的核心作用有所削弱。数据可以在片内直接/间接地址的存储器之间直接传送，而不必经过累加器A。但，加、减、乘、除算术运算指令的运算结果都存放在累加器A或AB寄存器对中。</span><br><span class="hljs-code">    ③暂存器TMP1、TMP2</span><br><span class="hljs-code">    由80C51单片机的内部结构框图可知，ALU进行算术逻辑运算前的两个操作数来自暂存器TMP1、TMP2，所以暂存器TMP1、TMP2用于存放运算前的两个操作数。</span><br><span class="hljs-code">    ④程序状态字寄存器PSW</span><br><span class="hljs-code">    程序状态字寄存器PSW用来存放运算结果的状态标志。PSW寄存器各位的含义如下，其中PSW.1未定义，其它各位说明如下：</span><br><span class="hljs-code">        CY：进位标志。它是累加器A的进位位，如果操作结果在最高位有进位（加法）或借位（减法）时置1，否则清0。</span><br><span class="hljs-code">        AC：半进位标志。它是低半字节的进位位（累加器A中A3位向A4位的进位），主要用于BCD码调整。低4位有进位（加法时）或向高4位有借位时（减法时），AC是1，否则，AC清0。</span><br><span class="hljs-code">        F0：用户定义的状态标志位。可通过软件对它置位、复位或测试，以控制程序的流向。</span><br><span class="hljs-code">        RS1、RS0：工作寄存器区选择控制位，用于选择4组工作寄存器之一。可以用软件来置位或清零，以确定工作寄存器区。RS1、RS0与寄存器区的对应关系如下：</span><br><span class="hljs-code">        RS1、RS0=00——0区（地址00H~07H）</span><br><span class="hljs-code">        RS1、RS0=01——1区（地址08H~0FH）</span><br><span class="hljs-code">        RS1、RS0=10——2区（地址10H~17H）</span><br><span class="hljs-code">        RS1、RS0=11——3区（地址18H~1FH）</span><br><span class="hljs-code">        OV：溢出标志位，用于表示有符号数算术运算的溢出。溢出时OV为1，否则OV为0。</span><br><span class="hljs-code">        P：奇偶标志位。每个指令周期都由硬件来置位或清零，以表示累加器A中1的个数的奇偶性。若1的个数为奇数，则P置位；若1的个数为偶数，则清零。</span><br><span class="hljs-code">    ⑤寄存器B</span><br><span class="hljs-code">    在乘除指令中，用到了寄存器B。</span><br><span class="hljs-code">（2）控制器</span><br><span class="hljs-code">控制器是控制单片机各种操作的部件，用于完成指令规定的操作。它包括程序计数器PC、指令寄存器IR、指令译码器ID、定时控制逻辑、数据指针寄存器DPTR、时钟发生器、复位电路、堆栈指针SP等。</span><br><span class="hljs-code">①程序计数器 PC</span><br><span class="hljs-code">    程序计数器PC为16位寄存器，用于存放下一条要执行指令地址，具有自动加1功能。</span><br><span class="hljs-code">    ②指令寄存器IR、指令译码器ID、定时控制逻辑电路</span><br><span class="hljs-code">    指令寄存器IR用来暂时存放当前取出的指令，并由指令译码器ID译码，产生相应的译码信号，并传送给定时控制电路，定时控制电路发出各种控制信号控制各器件完成指令规定的操作。</span><br><span class="hljs-code">    ③数据指针DPTR</span><br><span class="hljs-code">    DPTR为16位寄存器。由于80C51单片机采用哈佛结构，因此，其程序存储器与地址存储器是分开的，程序存储器的地址是由程序计数器PC提供，而数据存储器的地址是由数据指针DPTR提供的，所以DPTR用于存放片外数据存储器及I/O口的地址。</span><br><span class="hljs-code">    ④时钟电路</span><br><span class="hljs-code">    时钟电路是计算机的心脏，它控制着计算机的工作节奏。</span><br><span class="hljs-code">    ⑤复位和复位电路</span><br><span class="hljs-code">    计算机在启动运行时都需要复位，复位就是使CPU和系统中的其它部件处于一个确定的初始状态，并从这个状态开始工作。</span><br><span class="hljs-code">    ⑥堆栈指针SP</span><br><span class="hljs-code">    堆栈指针SP用于存放栈顶单元的地址。</span><br></code></pre></td></tr></table></figure><h1 id="引脚"><a href="#引脚" class="headerlink" title="引脚"></a>引脚</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626105743.png" alt="QQ图片20210626105743"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Vss(20脚):接地<br><br>VCC（40脚）: 主电源+5V<br><br>XTAL1（19脚）:接外部晶体的一端。在片内它是振荡电路反相放大器的输入端。在采用外部时钟时，对于HMOS单片机，该端引脚必须接地；对于CHMOS单片机，此引脚作为驱动端。<br><br>XTAL2（18脚）: 接外部晶体的另一端。在片内它是一个振荡电路反相放大器的输出端，振荡电路的频率是晶体振荡频率。若需采用外部时钟电路，对于HMOS单片机，该引脚输入外部时钟脉冲；对于CHMOS单片机，此引脚应悬浮。<br><br><br>RST（9脚）: 单片机刚接上电源时，其内部各寄存器处于随机状态，在该脚输入24个时钟周期宽度以上的高电平将使单片机复位（RESET）<br><br> <br><br>PSEN（29脚）: 在访问片外程序存储器时，此端输出负脉冲作为存储器读选通信号。CPU在向片外存储器取指令期间，PSEN信号在12个时钟周期中两次生效。不过，在访问片外数据存储器时，这两次有效PSEN信号不出现。PSEN端同样可驱动8个LSTTL负载。我们根据PSEN、ALE和XTAL2输出端是否有信号输出，可以判别80C51是否在工作。<br><br> <br><br>ALE/PROG（30脚）:在访问片外程序存储器时，此端输出负脉冲作为存储器读选通信号。CPU在向片外存储器取指令期间，PSEN信号在12个时钟周期中两次生效。不过，在访问片外数据存储器时，这两次有效PSEN信号不出现。PSEN端同样可驱动8个LSTTL负载。我们根据PSEN、ALE和XTAL2输出端是否有信号输出，可以判别80C51是否在工作。<br><br> <br><br>EA/VPP（31脚）: 当EA端输入高电平时，CPU从片内程序存储器地址0000H单元开始执行程序。当地址超出4KB时，将自动执行片外程序存储器的程序。当EA输入低电平时，CPU仅访问片外程序存储器。在对87C51EPROM编程时，此引脚用于施加编程电压VPP。<br><br> <br><br>输入/输出引脚：<br><br><span class="hljs-code">    （1）P0.0—P0.7    (39脚—32脚)</span><br><span class="hljs-code"></span><br><span class="hljs-code">    （2）P1.0—P1.7   （1脚—8脚）</span><br><span class="hljs-code"></span><br><span class="hljs-code">    （3）P2.0—P2.7   （26脚—21脚）</span><br><span class="hljs-code"></span><br><span class="hljs-code">    （4）P3.0—P3.7   （10脚—17脚）</span><br><span class="hljs-code">    P3.0/RXD(串口收)</span><br><span class="hljs-code">    P3.1/TXD（串口发）</span><br></code></pre></td></tr></table></figure><h1 id="存储器-1"><a href="#存储器-1" class="headerlink" title="存储器"></a>存储器</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626110555.jpg" alt="QQ图片20210626110555"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">由于80C51单片机采用哈佛结构，所以其程序存储器和数据存储器是分开的，各有自身的寻址系统、控制信号和功能。<br>程序存储器用来存放程序和表格常数；数据存储器通常用来存放程序运行所需要的给定参数和运行结果。<br><span class="hljs-code">     从实际的物理存储介质来看，80C51有4种存储空间，它们是片内程序存储器、片外程序存储器（MOVC）、片内数据存储器（含特殊功能寄存器）和片外数据存储器(MOVX)。80C51的存储器配置情况如下图所示。</span><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626105940.png" alt="QQ图片20210626105940"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdwon">从逻辑地址空间来看，80C51单片机可分为三部分，即：程序存储器、片外数据存储器、片内数据存储器。这3部分分别使用不同的地址指针，不同的访问指令。因此，下面按逻辑结构介绍80C51的存储器结构。<br>（1）程序存储器<br>由下图可知，程序存储器以程序计数器PC作地址指针，通过16位地址总线，可寻址的地址空间为0000H~0FFFFH共64K(216=64K)字节，其访问指令为MOVC。用于存放程序指令码与固定的数据表格等。<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626111106.png" alt="QQ图片20210626111106"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">80C51单片机中内部和外部共64K字节程序存储器的地址空间是统一的。对于有内部ROM的单片机，在正常运行时，应把引脚接高电平，使程序从内部ROM开始执行。当PC值超出内部ROM的容量时，会自动转向外部程序存储器空间。<br><span class="hljs-code">      （2）片外数据存储器</span><br><span class="hljs-code">      由80C51的存储器配置图可知，片外数据存储器以DPTR作为地址指针，通过16位地址总线，可寻址的地址空间为0000H~0FFFFH共64K(216=64K)字节，其访问指令为MOVX。用于存放数据与运算结果。</span><br><span class="hljs-code">      （3）片内据存储器</span><br><span class="hljs-code">      片内数据存储器的地址空间从00H~FFH共256字节，其访问指令为MOV。其地址可由R0、R1寄存器提供。内部数据存储器是最灵活的地址空间，它分成物理上独立且性质上不同的2个区：00H~7FH单元组成的128字节RAM区，地址为80H~FFH的特殊功能寄存器区（简称SFR区）。</span><br><span class="hljs-code">      1）RAM区（00H~7FH）</span><br><span class="hljs-code">      又由80C51的存储器配置图可知，RAM区又分为3个区：工作寄存器区、位地址区与数据缓冲区。</span><br><span class="hljs-code">      ①工作寄存器区（00H~1FH）</span><br><span class="hljs-code">      80C51单片机的内部RAM区结构如80C51的存储器配置图所示。</span><br><span class="hljs-code">      ②位地址区（20H~2FH）</span><br><span class="hljs-code">      内部RAM的20H~2FH为位寻址区域，见表1所示。这16个单元的每一位都有一个位地址，位地址范围为00H~7FH。通常把各种程序状态标志、位控制变量设在位寻址区内。位寻址区的RAM单元也可以作为一般的数据缓冲区使用。</span><br><span class="hljs-code"></span><br><span class="hljs-code">      表1 内部RAM区的位地址映像表</span><br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626111229.png" alt="QQ图片20210626111229"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdwon">③数据缓冲区<br>      数据缓冲区的地址空间从30H~7FH共80个字节单元，用于存放数据与运算结果，如加法运算时，存放加数、被加数及运算和。通常堆栈区也设置在该区内。有些单片机将显示缓冲区设置在该区内。<br>      2）特殊功能寄存器SFR（80H~FFH）<br>      80C51单片机内的I/O口锁存器、状态标志寄存器、定时器、串行口、数据缓冲器以及各种控制寄存器统称为特殊功能寄存器，它们离散地分布在内部RAM地址空间（80H~0FFH）内，表2列出了这些特殊功能寄存器的标识符、名称及地址。由表2-2可知累加器ACC、寄存器B、程序状态字PSW、I/O口P0~P3等均为特殊功能寄存器。<br>      <br>      <br>      表2 特殊功能寄存器SFR<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626111242.png" alt="QQ图片20210626111242"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdwon">注：带“·”号的寄存器可按字节和按位寻址，其特征是直接地址能被8整除。带“*”号的寄存器是与定时器/计数器2有关的寄存器，仅在80C52系列中存在。下面以一个实例说明单片机的内部存储器。<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626111344.png" alt="QQ图片20210626111344"></p><h1 id="时序"><a href="#时序" class="headerlink" title="时序"></a>时序</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">震荡周期T:时序中最小的时间单位<br><span class="hljs-code">由外接晶体或者输入时钟决定</span><br><span class="hljs-code">时钟周期（状态周期）</span><br><span class="hljs-code">晶体振荡器的真当信号经过片内时钟发生器二分频后的信号</span><br><span class="hljs-code">时钟周期是振荡周期的2倍</span><br><span class="hljs-code">机器周期</span><br><span class="hljs-code">CPU执行一条指令所需要的时间的基本单位</span><br><span class="hljs-code">51单片机中的机器周期由12个振荡周期构成</span><br><span class="hljs-code">分为六个状态周期（S1-S6）</span><br><span class="hljs-code">每个状态又分为P1和P2两相时钟</span><br><span class="hljs-code">指令周期</span><br><span class="hljs-code">CPU执行一条指令所需要的时间，以机器周期位单位</span><br><span class="hljs-code"></span><br><span class="hljs-code">51单片机共111条指令</span><br><span class="hljs-code">单机器周期指令：64个</span><br><span class="hljs-code">双机器周期指令：45个</span><br><span class="hljs-code">四机器周期指令:2个（乘法指令和除法指令）</span><br></code></pre></td></tr></table></figure><h1 id="复位-1"><a href="#复位-1" class="headerlink" title="复位"></a>复位</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 在启动时需要复位，使CPU和系统的各个部件处于一种初始状态<br><span class="hljs-bullet">-</span> 复位信号从单片机的RST引脚输入，高电平有效，维持至少两个机器周期<br><span class="hljs-bullet">-</span> 上电自动复位<br><span class="hljs-bullet">-</span> 按键手动复位<br></code></pre></td></tr></table></figure><h1 id="并行I-O口"><a href="#并行I-O口" class="headerlink" title="并行I&#x2F;O口"></a>并行I&#x2F;O口</h1><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626111834.jpg" alt="QQ图片20210626111834"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626115604.jpg" alt="QQ图片20210626115604"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs markdwon">80C51单片机含有4 个8位并行I/O口P0、P1、P2和P3。<br>每个口有8个引脚，如图2-1所示，共有32个I/O引脚，每一个并行I/O口都能用作输入或输出。<br>每一条IO引脚都能独立地用作输入或输出，做输出时数据可以锁存，做输入时数据可以缓冲<br><br>        各口的第一、第二功能如下：<br>               I/O口     引脚       第一功能           第二功能<br>               P0口   P0.0~P0.7    输入与输出       分时的传送地址低8位与数据线<br>               P1口   P1.0~P0.7    输入与输出       无第二功能<br>               P2口   P2.0~P2.7    输入与输出       传送地址的高8位<br>               P3口   P3.0~P3.7    输入与输出       P3.0——RXD：串行口输入端<br>               P3.1——TXD：串行口输出端<br>               P3.2——INT0：外部中断0中断请求输入端<br>               P3.3——INT1：外部中断1中断请求输入端<br>               P3.4——T0：定时器/计数器0外部输入端<br>               P3.5——T1：定时器/计数器1外部输入端<br>               P3.6——WR：外部数据存储器写选通信号<br>               P3.7——RD：外部数据存储器读选通信号<br>               <br>               <br>       四个通道口都有一种特殊的线路结构，每个口都包含一个锁存器，即特殊功能寄存器P0~P3，一个输出驱动器和两个（P3口有三个）三态缓冲器。这种结构在数据输出时，可以锁存，即在重新输出新的数据之前，口上的数据一直保持不变。但对于输入信号是不锁存的，所以外设欲输入的数据必须保持到取数指令执行（把数据读取后）为止。<br>       <br>       <br>       <br>       下面分别叙述各个端口的结构、功能和使用方法。<br>       -------------------------------------------------------------------------------------------<br>（1）P0口的组成与功能————————三态双向口<br><br>       1）位结构<br>       在访问外部存储器时，P0口是一个真正的双向数据总线口，并分时送出地址的低8位。<br>       它包含两个输入缓冲器、一个输出锁存器以及输出驱动电路、输出控制电路。<br>       输出驱动电路由两只场效应管V1和V2组成，其工作状态受输出控制电路的控制。输出控制电路包括与门、反相器和多路模拟开关MUX。<br>       P0口既能用作通用I/O口（需要上拉电阻），又能用作地址/数据总线（不需要上拉电阻）。<br>       <br>       2）作为通用I/O口<br>       P0口作为通用I/O口使用时，CPU令控制信号为低电平。这时多路开关MUX接通B端即输出锁存器的 端，同时使与门输出低电平，场效应管V1截止，因而输出级为开漏输出电路。<br><br>           ①作为输出口<br>           当用P0口输出数据时，写信号加在锁存器的时钟端CL上，此时与内部总线相连的D端其数据经反相后出现的 端上，再经V2管反相，于是在P0口引脚上出现的数据正好是内部总线上的数据。由于输出级为开漏电路，所以用作输出口时应外接上拉电阻。<br>           ②作为输入口<br>           当P0口用于输入数据时，要使用端口中的两个三态输入缓冲器之一。这时有两种工作方式：读引脚和读锁存器。<br>           当CPU执行一般的端口输入指令时，“读引脚”信号使图2-4中下面一个缓冲器开通，于是端口引脚上的数据经过缓冲器输入到内部总线上。<br>           当CPU执行“读一修改一写”一类指令时，“读锁存器”信号使图2-4上面一个缓冲器开通，锁存器Ｑ端的数据经缓冲器输入内部数据总线。<br>           在P0口作为输入口使用时，必须首先向端口锁存器写入“1”。这是因为当进行读引脚操作时，如果V2是导通的，那么不论引脚上的输入状态如何，都会变为低电平。为了正确读入引脚上的逻辑电平，先要向锁存器写1，使其 端为0，V2截止。该引脚成为高阻抗的输入端。<br>           <br>       3）作为地址/数据总线<br>       P0口还能作为地址总线低8位或数据总线，供系统扩展时使用。这时控制信号为高电平，多路开关MUX接通A端。有两种工作情况：一种是总线输出，另一种是外部数据输入。作为总线输出时，从“地址/数据”端输入的地址或数据信号通过与门驱动V2，同时通过非门驱动V2，结果在引脚上得到地址或数据输出信号。<br>       作为数据总线输入数据时，从引脚上输入的外部数据经过读引脚缓冲器进入内部数据总线。对于80C51、87C51单片机，P0口能作为I/O口或地址/数据总线使用。对于80C31单片机，P0口只能用作地址/数据总线。<br>       综上所述，P0口既可以作为地址/数据总线口，这时它是真正的双向口，也可作通用的I/O口，但只是一个准双向口。准双向口的特点是：复位时，口锁存器均置“1”，8根引脚可当一般输入线使用，而在某引脚由原输出状态变成输入状态时，则应先写入“1”，以免错读引脚上的信息。一般情况下，P0口已当作地址/数据总线口使用时，就不能再作通用I/O口使用。<br><br><br>       -------------------------------------------------------------------------------------------<br>（2）P1口组成与功能————————准双向口<br><br>       P1口只用作通用I/O口，其一位结构图如图所示。与P0口相比，P1口的位结构图中少了地址/数据的传送电路和多路开关，上面一只MOS管改为上拉电阻。<br>       P1口作为一般I/O的功能和使用方法与P0口相似。当输入数据时，应先向端口写“1”。它也有读引脚和读锁存器两种方式。所不同的是当输出数据时，由于内部有了上拉电阻，所以不需要再外接上拉电阻。<br>       P1口作为输入口使用时，有两种工作方式：读端口   读引脚<br>       读端口:实际上并不从外部读入数据，只是把端口锁存器中的内容读入到内部总线，经过某种运算和变换后，再写回端口锁存器；<br>       读引脚:真正地把外部的输入信号读入到内部总线。<br>       <br>       <br>       <br>       -------------------------------------------------------------------------------------------      <br>（3）P2口的组成与功能————————准双向口<br><br>当系统中接有外部存储器时，P2口可用于输出高8位地址，若当作通用I/O口用，P2口则是一个准双向口。因此说P2口能用作通用I/O口或地址总线，其一位的结构如图所示。<br>       ①作为通用I/O口<br>       当控制信号为低电平时，多路开关接到B端，P2口作为通用I/O口使用，其功能和使用方法与P1口相同。<br>       ②作为地址总线<br>       当控制端输出高电平时，多路开关接到A端，地址信号经反相器、V从引脚输出。这时P2口输出地址总线高8位，供系统扩展使用。<br>       对80C51、87C51单片机，P2口能作为I/O口或地址总线作用。对于80C31单片机，P2口只能用作地址总线。<br>      <br>     -------------------------------------------------------------------------------------------     <br>（4）P3口组成与功能———————多功能口<br><br>P3口能作通用I/O口，同时每一引脚还有第二功能。P3口的一位结构如图2-7所示。<br>    作为通用I/O口：当“第二功能输出”端为高电平时，P3口用作通用I/O口。这时与非门对于输入端Q来说相当于非门，位结构与P2口完全相同，因此P3口用作通用I/O口时的功能和使用方法与P2口、P1口相同。<br>    用作第二功能： 当P3口的某一位作为第二功能输出使用时，应将该位的锁存器置“1”，使与非门的输出状态只受“第二功能输出”端的控制。“第二功能输出”端的状态经与非门和驱动管V输出到该位引脚上。<br>    当P3口的某一位作为第二功能输入使用时，该位的锁存器和“第二功能输出”端都应为“1”，这样，该位引脚上的输入信号经缓冲器送入“第二功能输入”端。<br>    <br>    <br>    <br>    <br>    <br>    <br>    <br>    至此，可以对组成一般单片机应用系统时各个并行口的分工小结如下：<br>    P0口：分时的用作地址低8位与数据线，低8位地址由PC低8位或DPL提供。<br>    P1口：按位可编址的输入输出口。<br>    P2口：地址线的高8位，高8位地址由PC高8位或DPH提供。<br>    P3口：双功能口，若不用第二功能，可作为一般的I/O口。<br></code></pre></td></tr></table></figure><h1 id="定时器-计数器"><a href="#定时器-计数器" class="headerlink" title="定时器&#x2F;计数器"></a>定时器&#x2F;计数器</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 80C51 单片机内部有两个可编程定时器/计数器，T0和T1<br><span class="hljs-bullet">-</span> 他们的工作方式指令对相应的特殊功能寄存器编程来设定，设置后用作定时器或计数器<br><span class="hljs-bullet">-</span> 定时器/计数器的硬件组成就是：双字节加法计数器TH和TL<br><span class="hljs-bullet">-</span> 作定时器使用时，计数器脉冲由单片机内部振荡器提供,计数频率为震荡频率的12分之一，即每个机器周期加1<br><span class="hljs-bullet">-</span> 作计数器使用时，计数脉冲由P3口的P3.4（或P3.5）即T0(或T1)引脚引入，外部脉冲的下降沿触发计数，计数器在每个机器周期的S5P2期间采样外部脉冲。<br><span class="hljs-code">若一个周期的采样值为1，下一个周期的采样值为0，则计数器加1，故识别一个从0到1的跳变需要两个机器周期</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">工作原理：<br>加1计数器输入的计数脉冲有两个来源，一个是由系统的时钟振荡器输出脉冲经12分频后送来，一个是T0或T1引脚输入的外部脉冲源。每来一个脉冲计数器加1，当加到计数器全为1时，再输入一个脉冲就使计数器回零，计数器的溢出使TCON中的TF0或TF1置1，向CPU发出中断请求（定时/计数器中断允许时）。如果定时/计数器工作于定时模式，则表示定时时间已到，如果工作于计数模式，则表示计数值已满。<br><br>可见，由溢出时计数器的值减去计数初值才是加1计数器的计数值。<br><br>设置为定时器模式时，加1计数器是对内部机器周期计数（1个机器周期等于12个振荡周期，即技术频率为晶振频率的1/12）。计数值N乘以机器周期Tcy就是定时时间t。<br><br>例：假设计数50个数，那么定时时间为：   （定时时间（μs）=计数数X1/(晶振频率)X12）。<br><br>16位寄存器能够计数的最大时间为65536μs。<br><br>设置为计数模式时，外部事件计数脉冲由T0或T1引脚输入到计数器。在每个机器周期的S5P2期间采样T0、T1引脚电平。当某周期采样到一高电平输入，而下一周期有采样到一低电平时，计数器加1，更新的计数值在下一机器周期得S3P1期间装入计数器。由于检测一个从1到0下降沿需要2个机器周期，因此要求被采样的电平至少要维持一个机器周期。当晶振频率为12MHz时，最高计数频率不超过1/2MHz，即计数脉冲的周期要大于2μs。<br></code></pre></td></tr></table></figure><p>TMOD：定时器&#x2F;计数器的工作方式</p><p>TCON：定时器&#x2F;计数器的启动运行</p><p>80C51单片机定时&#x2F;计数器的工作由两个特殊功能寄存器控制。<strong>TMOD用于设置其工作方式；TCON用于控制其启动和中断申请</strong>。</p><h2 id="方式控制寄存器-TMOD"><a href="#方式控制寄存器-TMOD" class="headerlink" title="方式控制寄存器 TMOD"></a>方式控制寄存器 TMOD</h2><p>地址：89H</p><p><strong>工作方式寄存器TMOD用于设置定时&#x2F;计数器的工作方式，</strong>低四位用于T0，高四位用于T1。其格式如下：</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627094607.png" alt="QQ图片20210627094607"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GATE：门控位。GATA=0时，只要用软件使TCON中的TR0或TR1为1，就可以启动定时/计数器工作；GATA=1时，要用软件使TR0或TR1为1，同时外部中断引脚也为高电平时，才能启动定时/计数器工作。<br><br>C//T：定时/计数模式选择位。C/=0时为定时模式；C/=1时为计数模式。<br><br>M1M0：工作方式设置位。定时/计数器有四种工作方式，由M1M0进行设置。<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627094610.png" alt="QQ图片20210627094610"></p><h2 id="运行控制寄存器-TCON"><a href="#运行控制寄存器-TCON" class="headerlink" title="运行控制寄存器 TCON"></a>运行控制寄存器 TCON</h2><p>TCON的低4位用于控制外部中断。TCON的高4位用于控制定时&#x2F;计数器的<strong>启动和中断申请</strong>。其格式如下：</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627094643.png" alt="QQ图片20210627094643"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">TF1（TCON.7）：T1溢出中断请求标志位。T1计数溢出时由硬件自动置TF1为1。CPU响应中断后TF1由硬件自动清0.T1工作时，CPU可随时查询TF1的状态。所以，TF1可用作查询测试的标志。TF1也可以用软件置1或清零，同硬件置1或清0的效果一样。<br><br>TR1（TCON.6）：T1运行控制位。TR置1时，T1开始工作；TR1置0时，T1停止工作。TR1由软件置1或清零。所以，软件可控制定时/计数器的启动与停止。<br><br>TF0（TCON.5）：T0溢出中断请求标志位，其功能与TF1类同。<br><br>TR0（TCON.4）：T0运行控制位，其功能与TR1类同。<br></code></pre></td></tr></table></figure><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627094923.png" alt="QQ图片20210627094923"></p><h3 id="方式0"><a href="#方式0" class="headerlink" title="方式0"></a>方式0</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095053.png" alt="QQ图片20210627095053"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095059.png" alt="QQ图片20210627095059"></p><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095112.png" alt="QQ图片20210627095112"></p><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095120.png" alt="QQ图片20210627095120"></p><h3 id="方式3"><a href="#方式3" class="headerlink" title="方式3"></a>方式3</h3><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095127.png"></p><h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1><h2 id="中断的概念"><a href="#中断的概念" class="headerlink" title="中断的概念"></a>中断的概念</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 单片机与外设交换信息可采用查询方式和中断方式<br><span class="hljs-bullet">-</span> 中断就是CPU暂时终止当前正在执行的程序而转去执行中断服务子程序，所有中断的方式CPU效率高！<br><br><br><span class="hljs-bullet">-</span> 中断类型<br><span class="hljs-bullet">-</span> 屏蔽中断<br><span class="hljs-code">又名：直接中断</span><br><span class="hljs-code">通过指令使中断系统与外界隔开，使外接发来的中断请求不起作用，不引起中断。</span><br><span class="hljs-code">- 非屏蔽中断</span><br><span class="hljs-code">计算机一定要处理的中断方式，不能用软件来加以屏蔽</span><br><span class="hljs-code">一般用与程序中掉电等紧急情况</span><br><span class="hljs-code">- 软件中断</span><br><span class="hljs-code">一种用指令系统中专门的中断指令来实现的一种中断，一般用与程序中断点的设置，以便于程序的调试！</span><br><span class="hljs-code"></span><br><span class="hljs-code">中断源:</span><br><span class="hljs-code">引起中断的原因，或是能发出中断申请的来源</span><br><span class="hljs-code"></span><br><span class="hljs-code">中断系统的任务：</span><br><span class="hljs-code">对于中断申请开放或屏蔽（开中断和关中断）</span><br><span class="hljs-code">只有在开中断的情况下，才有可能接受中断源的申请</span><br><span class="hljs-code">中断的排队</span><br><span class="hljs-code">中断优先级问题</span><br><span class="hljs-code">中断的响应</span><br><span class="hljs-code">单片机在响应了中断的申请后，应使CPU从主程序转去执行中断服务子程序；</span><br><span class="hljs-code">同时要把断点地址送人堆栈进行保护，以便在执行完中断服务子程序后能返回到原来的断点继续执行主程序。</span><br><span class="hljs-code">中断系统还要能够确定各个被响应中断源的中断服务子程序的入口</span><br><span class="hljs-code">中断的撤销</span><br><span class="hljs-code">在响应中断请求之后，返回主程序之前，中断申请应该撤销；</span><br><span class="hljs-code">否则就等于中断申请仍然存在，这将会影响其他中断申请的响应；</span><br><span class="hljs-code">        80C51只能对一部分中断申请在响应后自动撤销</span><br><span class="hljs-code">        </span><br></code></pre></td></tr></table></figure><h2 id="中断申请与控制"><a href="#中断申请与控制" class="headerlink" title="中断申请与控制"></a>中断申请与控制</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">5个中断源<br><br><span class="hljs-bullet">-</span> 两个外部中断<br><span class="hljs-bullet">  -</span> 两个外部中断源分别从/INT0（P3.2）和/INT1（P3.3）引脚输入<br><span class="hljs-bullet">  -</span> 外部中断请求信号：<br><span class="hljs-bullet">  -</span> 电平输入方式<br><span class="hljs-bullet">    -</span> /INT0（P3.2）和/INT1（P3.3）引脚检测到低电平为有效的中断申请<br><span class="hljs-bullet">  -</span> 负边沿输入方式<br><span class="hljs-bullet">    -</span> /INT0（P3.2）和/INT1（P3.3）引脚检测到从1到0的负脉冲跳变<br><span class="hljs-bullet">-</span> 两个定时器/计数器中断<br><span class="hljs-bullet">  -</span> 内部中断<br><span class="hljs-bullet">  -</span> 当T0或T1溢出（全1变成全0）时发出中断申请<br><span class="hljs-bullet">-</span> 一个串行口中断<br><span class="hljs-bullet">  -</span> 内部中断<br><span class="hljs-bullet">  -</span> 在串行口，每接受或发送完一组数据后自动发出的中断申请<br></code></pre></td></tr></table></figure><h3 id="TCON寄存区"><a href="#TCON寄存区" class="headerlink" title="TCON寄存区"></a>TCON寄存区</h3><ul><li>地址88H</li><li>其中各位都可以位寻址，位地址88H-8FH；</li><li>定时器&#x2F;计数器溢出中断和外部中断的申请标志，在CPU响应中断之后会自动撤除</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626140324.jpg" alt="QQ图片20210626140324"></p><h3 id="SCON寄存区"><a href="#SCON寄存区" class="headerlink" title="SCON寄存区"></a>SCON寄存区</h3><ul><li>地址98H</li><li>位寻址：98H-9FH</li><li>串行口的中断申请标志是由TI和RI相或以后产生的，并且串行口中断申请在得到CPU响应之后不会自动撤除</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626140340.jpg" alt="QQ图片20210626140340"></p><h3 id="IE-中断允许寄存区"><a href="#IE-中断允许寄存区" class="headerlink" title="IE 中断允许寄存区"></a>IE 中断允许寄存区</h3><ul><li>地址A8H</li><li>位寻址:A8H-AFH</li><li>80C51在复位时，IE各位的状态都是0，所以CPU处于关中断的状态</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626140355.jpg" alt="QQ图片20210626140355"></p><h3 id="IP-中断优先级寄存器"><a href="#IP-中断优先级寄存器" class="headerlink" title="IP 中断优先级寄存器"></a>IP 中断优先级寄存器</h3><ul><li>地址B8H</li><li>位寻址：B8H-BCH</li><li>IP寄存器的某一位为1则相应的中断源为高优先级</li><li>IP寄存器的某一位为0则相应的中断源为低优先级</li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626140414.jpg" alt="QQ图片20210626140414"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210626140414.jpg"></p><h2 id="中断响应"><a href="#中断响应" class="headerlink" title="中断响应"></a>中断响应</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627091716.jpg" alt="QQ图片20210627091716"></p><h2 id="中断响应的条件"><a href="#中断响应的条件" class="headerlink" title="中断响应的条件"></a>中断响应的条件</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">①、中断源有中断请求；<br>②、此中断源的中断允许为位1；<br>③、CPU开中断（即EA=1）。<br></code></pre></td></tr></table></figure><p>以外部中断0为例：</p><pre><code class="hljs">   主程序中需要的代码：</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">EA=<span class="hljs-number">1</span>；<span class="hljs-comment">//打开总中断开关</span><br>EX0=<span class="hljs-number">1</span>；<span class="hljs-comment">//开外部中断0</span><br>IT0=<span class="hljs-number">0</span>/<span class="hljs-number">1</span>；<span class="hljs-comment">//设置外部中断的触发方式</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">    中断服务函数： </code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//void 函数名（）interrupt(中断服务子程序) 0(优先级)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">int0</span> <span class="hljs-params">()</span> interrupt 0 <br><br>&#123;<br>　　<span class="hljs-keyword">do</span> anything that you want<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h1><h2 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095510.png" alt="QQ图片20210627095510"></p><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095754.png" alt="QQ图片20210627095754"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095758.png" alt="QQ图片20210627095758"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095800.png" alt="QQ图片20210627095800"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095802.png" alt="QQ图片20210627095802"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095808.png" alt="QQ图片20210627095808"></p><h2 id="串口结构"><a href="#串口结构" class="headerlink" title="串口结构"></a>串口结构</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627095919.png" alt="QQ图片20210627095919"></p><h2 id="串行口控制寄存器-SCON"><a href="#串行口控制寄存器-SCON" class="headerlink" title="串行口控制寄存器 SCON"></a>串行口控制寄存器 SCON</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627100401.png" alt="QQ图片20210627100401"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627100403.png" alt="QQ图片20210627100403"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627100406.png" alt="QQ图片20210627100406"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627100408.png" alt="QQ图片20210627100408"></p><h2 id="特殊功能寄存器-PCON"><a href="#特殊功能寄存器-PCON" class="headerlink" title="特殊功能寄存器 PCON"></a>特殊功能寄存器 PCON</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">只有D7位与串口工作有关<br>D7（SMOD）=1 串行口传送的波特率加倍<br></code></pre></td></tr></table></figure><h2 id="串行口的四种工作方式"><a href="#串行口的四种工作方式" class="headerlink" title="串行口的四种工作方式"></a>串行口的四种工作方式</h2><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627100702.png" alt="QQ图片20210627100702"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627100705.png" alt="QQ图片20210627100705"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627100707.png" alt="QQ图片20210627100707"></p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/microcomputer/QQ%E5%9B%BE%E7%89%8720210627100709.png" alt="QQ图片20210627100709"></p><h1 id="DA"><a href="#DA" class="headerlink" title="DA"></a>DA</h1><h1 id="AD"><a href="#AD" class="headerlink" title="AD"></a>AD</h1>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>悄无声息获取你的照片</title>
    <link href="/blog/post/Ideas/GetYourPhotos/"/>
    <url>/blog/post/Ideas/GetYourPhotos/</url>
    
    <content type="html"><![CDATA[<h1 id="关于项目"><a href="#关于项目" class="headerlink" title="关于项目"></a>关于项目</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><ul><li>很久之前学习了python的CV库调用并打开电脑摄像头的程序；</li><li>之后又增加了按键盘的某个键就会拍照的功能；</li><li>然后我想有没有可能通过一些别的功能，将拍下的照片发送给我，不是为了获取什么隐私，只是与朋友之间大玩笑而已；</li><li>首先是自动拍照的功能的实现，我选了监控键盘和鼠标的动作的python库–pyinput。如果打开了应用程序，通过监控鼠标的运动，如果鼠标动了，就激活了程序，拍摄一定数量的照片；</li><li>然后就是将照片发送给我的功能实现，这起初确实是一个比较困难的事情，发送文件得借助第三方软件；</li><li>在我苦思冥想的时候，我想到了邮件，邮件，邮件！！！</li><li>python有yagmail库，可以实现自动发送邮件；</li><li>QQ邮箱可以打开STMP,POP3,IMAP等协议，实现远程调用QQ邮箱发送邮件的功能；</li><li>所以这个程序的出现也就水到渠成了；</li></ul><h2 id="程序目标"><a href="#程序目标" class="headerlink" title="程序目标"></a>程序目标</h2><ul><li>捕获打开程序的人的图片</li><li>将图片自动发送给我</li><li>程序需要较强的娱乐性，简单性</li><li>程序最好只在自己的朋友圈子中传递</li></ul><h2 id="选择编程语言"><a href="#选择编程语言" class="headerlink" title="选择编程语言"></a>选择编程语言</h2><ul><li>python——Windows开发</li><li>python的第三方库很多，及其方便于做一些新奇的小玩意</li></ul><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><h4 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h4><ul><li>通过opencv拍摄程序调用者的照片</li><li>opencv可以方便的对拍摄的照片进行保存</li></ul><h4 id="程序触发方式"><a href="#程序触发方式" class="headerlink" title="程序触发方式"></a>程序触发方式</h4><ul><li>直接触发&#x2F;手动触发</li></ul><h4 id="图片发送方式"><a href="#图片发送方式" class="headerlink" title="图片发送方式"></a>图片发送方式</h4><ul><li>思来想去，觉得最方便的应该是邮件的方式了</li><li>自动化邮件之类的项目应该是一个比较成熟的了</li></ul><h4 id="程序测试方式"><a href="#程序测试方式" class="headerlink" title="程序测试方式"></a>程序测试方式</h4><ul><li>测试对象是：朋友们，因为使用照片拍摄，涉及到了个人隐私问题，程序不便于广泛地传播</li></ul><h1 id="项目完整代码"><a href="#项目完整代码" class="headerlink" title="项目完整代码"></a>项目完整代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">python:3.8.6<br>os<br>yamail<br>opencv<br>pynput<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Time       : 2021/7/26 10:08</span><br><span class="hljs-comment"># Author     : MurphyHou</span><br><span class="hljs-comment"># Proj_Name  : cv_capture</span><br><span class="hljs-comment"># File_Name  : capture_demo4.py</span><br><span class="hljs-comment"># Software   : PyCharm</span><br><span class="hljs-comment"># =======Here We Go!=======</span><br><br><span class="hljs-comment"># README：程序中标注的“xxx”是需要自己进行设置的</span><br><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> pynput.mouse <span class="hljs-keyword">import</span> Listener<br><span class="hljs-keyword">import</span> yagmail<br><span class="hljs-keyword">import</span> os<br><br>mouse_return=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_move</span>(<span class="hljs-params">x,y</span>):<span class="hljs-comment"># 监听鼠标的位置</span><br>    <span class="hljs-comment"># print(&quot;mouse:&#123;&#125;&quot;.format(x,y))</span><br>    <span class="hljs-keyword">global</span> mouse_return<br>    mouse_return=x<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <span class="hljs-comment"># 不能返回True,否则程序不会停止</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_mail</span>():<br>    <span class="hljs-comment"># 设置邮箱服务器</span><br>    mail_host=<span class="hljs-string">&quot;smtp.qq.com&quot;</span><br>    <span class="hljs-comment"># 设置发送方邮箱</span><br>    mail_sender=<span class="hljs-string">&#x27;xxx@qq.com&#x27;</span><br>    <span class="hljs-comment"># 设置发送方邮箱密码</span><br>    mail_pass=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment">#自助查询-设备管理-自动发送邮件</span><br>    <span class="hljs-comment"># 设置接收方邮箱</span><br>    mail_receiver=<span class="hljs-string">&#x27;xxx@qq.com&#x27;</span><br>    <span class="hljs-comment"># mail_receiver[&#x27;xxx.qq.com&#x27;,&#x27;xxx.163.com&#x27;,&#x27;xxx.outlook.com&#x27;] # 设置多个接收方</span><br><br>    yag = yagmail.SMTP(user=mail_sender,password=mail_pass,host=mail_host)<br><br>    contents=\<br>        [<span class="hljs-string">&#x27;CameraControl from yagmail&#x27;</span>,<span class="hljs-comment">#邮件正文中写入文字</span><br>         yagmail.inline(<span class="hljs-string">&#x27;MurphyHou_capture_5.jpg&#x27;</span>),<span class="hljs-comment"># 邮件正文中直接插入照片</span><br>         <span class="hljs-string">&#x27;MurphyHou_capture_1.jpg&#x27;</span>,<span class="hljs-comment"># 邮件中按附件方式发送图片</span><br>         <span class="hljs-string">&#x27;MurphyHou_capture_2.jpg&#x27;</span>,<br>         <span class="hljs-string">&#x27;MurphyHou_capture_3.jpg&#x27;</span>,<br>         <span class="hljs-string">&#x27;MurphyHou_capture_4.jpg&#x27;</span>,<br>         <span class="hljs-string">&#x27;MurphyHou_capture_6.jpg&#x27;</span>,<br>         <span class="hljs-string">&#x27;MurphyHou_capture_7.jpg&#x27;</span>,<br>         <span class="hljs-string">&#x27;MurphyHou_capture_8.jpg&#x27;</span>,<br>         <span class="hljs-string">&#x27;MurphyHou_capture_9.jpg&#x27;</span>,<br>         <span class="hljs-string">&#x27;MurphyHou_capture_10.jpg&#x27;</span><br>         ]<br>    <span class="hljs-keyword">try</span>:<br>        yag.send(to=mail_receiver,subject=<span class="hljs-string">&quot;CameraControl from yagmail&quot;</span>,contents=contents)<br>        <span class="hljs-comment"># print(&quot;Send Success!&quot;)</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> error:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error:&quot;</span>,error)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>        file_name=<span class="hljs-string">&quot;MurphyHou_capture_&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;.jpg&quot;</span><br>        <span class="hljs-keyword">if</span> os.path.isfile(file_name):<br>            os.remove(file_name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fie &#123;&#125; doesn&#x27;t exit!&quot;</span>.<span class="hljs-built_in">format</span>(file_name))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Delete Success!&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">with</span> Listener(on_move=on_move) <span class="hljs-keyword">as</span> listener:<br>        listener.join()<br><br>    cap=cv2.VideoCapture(<span class="hljs-number">0</span>)<span class="hljs-comment">#创建对象</span><br>    num=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span>(cap.isOpened()): <span class="hljs-comment"># 当摄像头被打开时，循环捕捉帧</span><br>        <span class="hljs-keyword">while</span>(num&lt;<span class="hljs-number">11</span>): <span class="hljs-comment"># 设置拍摄10张照片</span><br>            ret_flag, image_show = cap.read()  <span class="hljs-comment"># 函数返回值是有两个参数</span><br>            <span class="hljs-comment"># cv2.imshow(&quot;Capture&quot;, image_show)  # 创建窗口，窗口的显示值为捕捉的图像，名称为Capture。这句话注释了之后则不会显示拍照的窗口</span><br>            <span class="hljs-keyword">if</span> mouse_return!=<span class="hljs-number">0</span>:  <span class="hljs-comment"># 当鼠标发生移动时触发程序</span><br>                <span class="hljs-comment"># 设置窗口大小</span><br>                cap.get(<span class="hljs-number">4</span>)<br>                cap.get(<span class="hljs-number">3</span>)<br><br>                <span class="hljs-comment"># print(&quot;success:&quot;+str(num))</span><br>                cv2.imwrite(<span class="hljs-string">&quot;MurphyHou_capture_&quot;</span>+<span class="hljs-built_in">str</span>(num) + <span class="hljs-string">&quot;.jpg&quot;</span>, image_show)<br>                num += <span class="hljs-number">1</span><br><br>        cap.release()<br>        cv2.destroyAllWindows()   <span class="hljs-comment">#放到检测摄像头是否处于开状态的while循环之内，就能保证窗口在程序运行结束之后可以自动关闭</span><br><br>        send_mail()<br><br>        delete()<span class="hljs-comment">#绝对删除，不会存在回收站中</span><br></code></pre></td></tr></table></figure><h1 id="关于项目的思考"><a href="#关于项目的思考" class="headerlink" title="关于项目的思考"></a>关于项目的思考</h1><h2 id="程序的优点"><a href="#程序的优点" class="headerlink" title="程序的优点"></a>程序的优点</h2><ul><li>比较好得实现了目标的功能，符合预期</li><li>程序本身的功能并不是有多少很大的用处，更多的的是朋友之间的玩笑，更重要的是用程序实现了这个功能的过程中，学会了一点点OpenCV的一些基本的使用，以及yagmail自动化邮件的现实，总结就是，实现这个没有多少用的程序过程中学到的一些使用是重要的！</li></ul><h2 id="程序尚存的不足-可以改进的方向"><a href="#程序尚存的不足-可以改进的方向" class="headerlink" title="程序尚存的不足(可以改进的方向)"></a>程序尚存的不足(可以改进的方向)</h2><ul><li><del>程序运行结束后，拍摄的照片（程序运行过的证据doge），删除问题</del>（已添加此功能）</li><li>图片保存路径问题<ul><li>因为无法确定程序运行者将程序下载到了什么路径，目前采用的是将图片直接保存到改程序保存的路径下。这样做的问题是，如果将程序保存到了C盘（包括桌面）中，由于权限问题，图片可能因为没有权限，不能保存；</li><li>可能的改进方向是：首先检测计算机的磁盘信息，判断有多少个磁盘，如果有出去C盘外的其他盘，则将图片保存到其他盘，否则保存到程序所保存的位置！</li></ul></li><li>邮件发送的最大次数<ul><li>邮箱都有发送的最大次数，超过这个次数当日便不能发送了</li><li>这个问题好像不太容易解决，程序无法判断程序今天已经发送过多少次了</li></ul></li><li>对电脑硬件有要求<ul><li>现在很多电脑都没有摄像头，那肯定没办法拍照片的</li></ul></li></ul><h2 id="对程序本身的反思"><a href="#对程序本身的反思" class="headerlink" title="对程序本身的反思"></a>对程序本身的反思</h2><ul><li>因为涉及到人像的拍摄，会涉及到个人隐私问题，所以程序本身并不可以广泛传播</li></ul>]]></content>
    
    
    <categories>
      
      <category>奇思妙想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>Python</tag>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息记录生成词云</title>
    <link href="/blog/post/Ideas/WordCloudsForMessage/"/>
    <url>/blog/post/Ideas/WordCloudsForMessage/</url>
    
    <content type="html"><![CDATA[<p>做了这个程序之后，我才发现实现自己的想法对自己很有满足感，然后我逐步去搭建自己的博客网站，并且更迭了很多版本，在做博客网站的时候也学到了很多知识点，回过头来看，这就的我最初的起点！</p><h1 id="关于项目"><a href="#关于项目" class="headerlink" title="关于项目"></a>关于项目</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><ul><li>寒假的某一天，我躺在沙发上看手机，突然想到了数据分析这个东西，然后我就想，哪里有比较大量的数据，做一做简单的数据分析？</li><li>看这手里的手机，我想到了——聊天数据！</li><li>对于学生来说，比较有把握的说，每个人每天都会打开QQ，微信等社交软件，每天都会产生大量的聊天数据，有没有什么方式，可以做一个东西，分析统计一下聊天数据，将结果比较直观地呈现出来，然后我就想到了——词云。</li><li>确定好做什么东西之后，接下来就是编程语言的选择：当然是Python啦，Python自带了第三方库wordcloud。</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>总的来说这个项目还是非常简单的，主要处理两个问题：<ul><li>一个是怎么获取QQ（微信？）的聊天记录；</li><li>词云的使用<ul><li>jieba：jieba库是优秀的中文分词第三方库；</li><li>wordcloud：wordcloud是优秀的词云展示第三方库，以词语为基本单位，通过图形可视化的方式，更加直观和艺术的展示文本；</li><li>PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了；词云的图像需要我们自己输入，涉及到图像处理，因此也需要该库；</li></ul></li></ul></li></ul><h2 id="资料查阅"><a href="#资料查阅" class="headerlink" title="资料查阅"></a>资料查阅</h2><ul><li><p>主要查阅一下消息记录怎么导出为txt文件和词云的基本使用方法；</p></li><li><p>词云已经是一个非常成熟且简单的项目了，网上的资源一大堆，简单看一下，<strong>开整</strong>！！！！</p></li></ul><h1 id="项目解析"><a href="#项目解析" class="headerlink" title="项目解析"></a>项目解析</h1><ul><li>QQ消息记录的导出</li></ul><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/xxxxwordcloud_1.png" style="zoom:50%;" />  <img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/wordcloud_2.png" style="zoom:50%;" /><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/wordcloud_3.png" style="zoom:50%;" /></div><ul><li><p>打开pycharm（或者其他），建好项目，新建好文件，上号！冲冲冲！！（后记：当时的我还在用集成开发环境，现在的我几乎仅用命令行，或者是命令行+Sublime，这比集成开发环境快了太多了<br>！）</p></li><li><p>第三方库的导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> wordcloud <span class="hljs-keyword">import</span> WordCloud<br><span class="hljs-comment"># import matplotlib.pyplot as plt</span><br></code></pre></td></tr></table></figure></li><li><p>需要输入的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">txt_filename=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入导出的聊天记录的txt文件地址：&quot;</span>)<span class="hljs-comment">#聊天记录获取</span><br><span class="hljs-built_in">print</span>()<br>pic_filename=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入背景图片地址：&quot;</span>)<span class="hljs-comment"># 图片获取</span><br><span class="hljs-built_in">print</span>()<br>font_filename=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入字体的地址(如果不知道如何获取地址，可输入该地址:C:\Windows\Fonts\Dengb.ttf)：&quot;</span>)<span class="hljs-comment"># 字体获取</span><br><span class="hljs-comment">#font_filename=r&quot;C:\Windows\Fonts\Dengb.ttf&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>聊天记录读入和词云外形读入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#聊天记录获取</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span> (txt_filename,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    com_record=f.read()<br><span class="hljs-comment"># 图片获取</span><br>ground=np.array(Image.<span class="hljs-built_in">open</span>(pic_filename))<br></code></pre></td></tr></table></figure></li><li><p>jieba分词</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用jieba函数实现文件的分词转换</span><br>sep_list=jieba.lcut_for_search(com_record)<span class="hljs-comment">##（结巴有三种方式，全模式、精确模式、搜索引擎模式）</span><br>sep_list=<span class="hljs-string">&quot; &quot;</span>.join(sep_list)<br></code></pre></td></tr></table></figure></li><li><p>词云制作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#词云制作部分</span><br>wc=WordCloud\<br>(<br>    scale=<span class="hljs-number">4</span>,<span class="hljs-comment">#调整图片大小</span><br>    font_path=font_filename,<span class="hljs-comment">#使用的字体库</span><br>    <br>    max_words=<span class="hljs-number">500</span>,  <span class="hljs-comment">#词云显示的最大词数</span><br>    <br>    margin=<span class="hljs-number">2</span>,<span class="hljs-comment">#字体之间的间距</span><br>    mask=ground,<span class="hljs-comment">#背景图片</span><br>    background_color=<span class="hljs-string">&#x27;white&#x27;</span>, <span class="hljs-comment">#背景颜色</span><br><br>    max_font_size=<span class="hljs-number">200</span>,<br>    min_font_size=<span class="hljs-number">1</span>,<br><br>    collocations=<span class="hljs-literal">False</span>, <span class="hljs-comment">#避免重复单词</span><br>    width=<span class="hljs-number">1600</span>,height=<span class="hljs-number">1200</span>, <span class="hljs-comment">#图像宽高，字间距</span><br>    <br>    stopwords=exclude<span class="hljs-comment">#屏蔽的内容</span><br>)<br>wc.generate(sep_list) <span class="hljs-comment">#制作词云</span><br></code></pre></td></tr></table></figure></li><li><p>文件保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">save_file_name=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;WordCloud将以PNG格式保存，请输入保存的名称：&quot;</span>)<br><span class="hljs-built_in">print</span>()<br>save_file_name=save_file_name.lower()<br>save_file_name=save_file_name+<span class="hljs-string">&quot;.png&quot;</span><br>wc.to_file(save_file_name) <span class="hljs-comment">#保存到当地文件</span><br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;WordCloud制作完成！&quot;</span>)<br><span class="hljs-built_in">print</span>()<br>fffff=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入任意字符+回车即可退出：&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>因为聊天记录中有很多不需要的词语，我们可以将其屏蔽掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用集合实现屏蔽某些单词</span><br>exclude=<span class="hljs-built_in">set</span>()<br>flag=<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>()<br>ff=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;是否需要添加屏蔽的关键词？(Y/N):&quot;</span>)<br>ff=ff.upper()<br><span class="hljs-keyword">if</span> ff==<span class="hljs-string">&#x27;Y&#x27;</span>:<br>    <span class="hljs-keyword">while</span> flag:<br>        <span class="hljs-built_in">print</span>()<br>        ex_in = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入需要屏蔽的关键词（输入QUIT可停止添加屏蔽关键词）：&quot;</span>)<br>        <span class="hljs-keyword">if</span> ex_in == <span class="hljs-string">&quot;QUIT&quot;</span>:<br>            flag = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#exclude.update(ex_in)</span><br>            exclude.add(ex_in)<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;屏蔽关键词集合:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(exclude)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;屏蔽关键词集合为空&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>另外，还可以通过pyinstaller将python程序转化成exe文件，通过打包生成的exe文件，包含里该python文件运行的所以第三方库，因此，对于没有python环境的计算机也可以下载使用，非常便利！</p></li><li><p>在资源管理器的带有该py文件的文件夹下，输入 pyinstaller -F 文件名.py,回车键，等待一段时间，会生成exe文件，该exe文件在本文件下的dist文件夹下</p></li></ul><div align=center><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/wordcloud_5.png" alt="" style="zoom:50%;" /><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/wordcloud_6.png" alt="" style="zoom: 80%;" /></div><h1 id="项目完整代码"><a href="#项目完整代码" class="headerlink" title="项目完整代码"></a>项目完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding : utf-8 -*-</span><br><span class="hljs-comment"># Time      : 2021/2/11 12:16</span><br><span class="hljs-comment"># Author    : MurphyHou</span><br><span class="hljs-comment"># Proj_Name : WordCloud</span><br><span class="hljs-comment"># File_Name : wordcloud_demo_1.py</span><br><span class="hljs-comment"># Software  : PyCharm</span><br><span class="hljs-comment"># Here We Go!</span><br><br><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> wordcloud <span class="hljs-keyword">import</span> WordCloud<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tips：可以先将这个黑黑的框框全屏，然后按住ctrl+鼠标滚轮将文字放大到合适的尺寸&quot;</span>)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>()<br><br>txt_filename=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入导出的聊天记录的txt文件地址：&quot;</span>)<span class="hljs-comment">#聊天记录获取</span><br><span class="hljs-built_in">print</span>()<br><br>pic_filename=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入背景图片地址：&quot;</span>)<span class="hljs-comment"># 图片获取</span><br><span class="hljs-built_in">print</span>()<br><br>font_filename=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入字体的地址(如果不知道如何获取地址，可输入该地址:C:\Windows\Fonts\Dengb.ttf)：&quot;</span>)<span class="hljs-comment"># 字体获取</span><br><span class="hljs-comment">#font_filename=r&quot;C:\Windows\Fonts\Dengb.ttf&quot;</span><br><br><span class="hljs-comment">#聊天记录获取</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span> (txt_filename,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    com_record=f.read()<br><br><span class="hljs-comment"># 图片获取</span><br>ground=np.array(Image.<span class="hljs-built_in">open</span>(pic_filename))<br><br><span class="hljs-comment">#用集合实现屏蔽某些单词</span><br>exclude=<span class="hljs-built_in">set</span>()<br>flag=<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>()<br><br>ff=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;是否需要添加屏蔽的关键词？(Y/N):&quot;</span>)<br>ff=ff.upper()<br><span class="hljs-keyword">if</span> ff==<span class="hljs-string">&#x27;Y&#x27;</span>:<br>    <span class="hljs-keyword">while</span> flag:<br>        <span class="hljs-built_in">print</span>()<br>        ex_in = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入需要屏蔽的关键词（输入QUIT可停止添加屏蔽关键词）：&quot;</span>)<br>        <span class="hljs-keyword">if</span> ex_in == <span class="hljs-string">&quot;QUIT&quot;</span>:<br>            flag = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#exclude.update(ex_in)</span><br>            exclude.add(ex_in)<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;屏蔽关键词集合:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(exclude)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;屏蔽关键词集合为空&quot;</span>)<br><br><span class="hljs-comment">#用jieba函数实现文件的分词转换</span><br>sep_list=jieba.lcut_for_search(com_record)<span class="hljs-comment">##（结巴有三种方式，全模式、精确模式、搜索引擎模式）</span><br>sep_list=<span class="hljs-string">&quot; &quot;</span>.join(sep_list)<br><br><span class="hljs-comment">#词云制作部分</span><br>wc=WordCloud\<br>(<br>    scale=<span class="hljs-number">4</span>,<span class="hljs-comment">#调整图片大小</span><br>    font_path=font_filename,<span class="hljs-comment">#使用的字体库</span><br>    max_words=<span class="hljs-number">500</span>,  <span class="hljs-comment">#词云显示的最大词数</span><br>    margin=<span class="hljs-number">2</span>,<span class="hljs-comment">#字体之间的间距</span><br>    mask=ground,<span class="hljs-comment">#背景图片</span><br>    background_color=<span class="hljs-string">&#x27;white&#x27;</span>, <span class="hljs-comment">#背景颜色</span><br><br>    max_font_size=<span class="hljs-number">200</span>,<br>    min_font_size=<span class="hljs-number">1</span>,<br><br>    collocations=<span class="hljs-literal">False</span>, <span class="hljs-comment">#避免重复单词</span><br>    width=<span class="hljs-number">1600</span>,height=<span class="hljs-number">1200</span>, <span class="hljs-comment">#图像宽高，字间距</span><br><br>    stopwords=exclude<span class="hljs-comment">#屏蔽的内容</span><br>)<br><br>wc.generate(sep_list) <span class="hljs-comment">#制作词云</span><br><br>save_file_name=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;WordCloud将以PNG格式保存，请输入保存的名称：&quot;</span>)<br><span class="hljs-built_in">print</span>()<br><br>save_file_name=save_file_name.lower()<br>save_file_name=save_file_name+<span class="hljs-string">&quot;.png&quot;</span><br>wc.to_file(save_file_name) <span class="hljs-comment">#保存到当地文件</span><br><br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;WordCloud制作完成！&quot;</span>)<br><span class="hljs-built_in">print</span>()<br>fffff=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入任意字符+回车即可退出：&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="关于项目的思考"><a href="#关于项目的思考" class="headerlink" title="关于项目的思考"></a>关于项目的思考</h1><ul><li>关于数据分析可不仅仅是做词云这么简单，大数据时代对数据的分析肯定是重要的，不能仅仅局限于表面上的分析，如果能根据数据做用户画像那就更好了；</li><li>孰能生巧，对于第三方库的使用第一次肯定是不熟悉的，经过多几次的使用会更加熟悉的！</li></ul>]]></content>
    
    
    <categories>
      
      <category>奇思妙想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open source</tag>
      
      <tag>Python</tag>
      
      <tag>NumPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021读书记录</title>
    <link href="/blog/post/MyLife/Reading2021/"/>
    <url>/blog/post/MyLife/Reading2021/</url>
    
    <content type="html"><![CDATA[<h1 id="《球状闪电》"><a href="#《球状闪电》" class="headerlink" title="《球状闪电》"></a>《球状闪电》</h1><p>时间：2021.01</p><p>关键词：【中国】刘慈欣&#x2F;长篇科幻小说（纸质书）</p><p>记录：</p><ul><li>这是我第一次拿起刘慈欣的书来读，对科幻作品还是比较喜欢的，但也是主要集中在相关的影视作品类。之前对刘慈欣的作品的阅读基本上都是在高中的语文试卷上，刘慈欣在科幻作品领域获得了很高的称赞，并且《流浪地球》的大获成功，让我对刘慈欣的作品充满了好奇；</li><li>书中描写的这种球状闪电现象简直称得上是奇幻，经过一番查阅之后发现这居然是一种真实存在的自然现象，并且据网上的说法，刘慈欣亲眼见过这种现象，通过自己的想象把这一自然现象变成一部精妙绝伦的小说，不得不佩服大刘！</li><li>第一次读刘的作品，发现一个很有意思的事情，刘对女性的描写这也太网文的感觉了吧（doge🤣）</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这时一个白色的身影轻盈地超过了我和挑夫,这姑娘穿着一件白衬衣和一条白色的牛仔裤,像一道浓缩的白雾。在这缓缓移动的人流中,她的攀登速度快得引人注目。她的脚步轻快跳跃,没有一点儿沉重感,当她经过我身边时,也没有听到喘息声。她回头看了一眼,不是看我,是看那个挑夫,她的表情宁静,看不出一丝疲劳感,苗条的身体似乎没有重量一般,在这累人的山路上攀登,对她来说如同在林荫道上悠闲地散步一样。时间不长,她的身影就消失在白雾中。<br></code></pre></td></tr></table></figure><ul><li>陈博士居然不是主角……好像陈博士到底叫什么名字文中也没交代……</li><li>总体来说，《球状闪电》我觉得是一部非常好的科幻小说，第一次接触刘的小说就被这个男人深深吸引住了，书中的每个人物都对我产生的很强的吸引力，也特别喜欢刘在其作品中展现的世界观念，被深深吸引主了。</li></ul><h1 id="《超新星纪元》（长篇版）"><a href="#《超新星纪元》（长篇版）" class="headerlink" title="《超新星纪元》（长篇版）"></a>《超新星纪元》（长篇版）</h1><p>时间：2021.01</p><p>关键词：【中国】刘慈欣&#x2F;长篇科幻小说（纸质书）</p><p>记录：</p><ul><li>一个巨大的脑洞！</li><li>《超新星纪元》讲述的时御夫座一颗超新星爆发，对地球产生了巨大的影响，地球上12岁以上的人都患病逐渐离世，这个时间掌握在了一群12岁以下的孩子手中，不得不佩服这是一个巨大的脑洞；</li><li>最令我震撼的是，与我们所熟知的小孩子的纯洁不同的是，这个由小孩子领导的人类文明，是如此的美好而又可怕；</li><li>孩子们一开始对大人的离开而害怕，但是一步步地克服了困难，逐步使整个国家安定下来。第一次全国大会上，孩子们发表了自己对美好国家的愿景，开始经过糖城时期与沉睡时期；</li><li>大洋彼岸的美国的糖城时代居然是战争，讽刺！</li><li>当世界上的国家开始接触之后，矛盾逐渐显现出来，甚至将奥运会变成了一场战争，最后都动用了核弹！</li><li>我们所认知的孩子大多数都是纯洁的，但在这本书中，我们实实在在地看到了孩子们是扮演天使的恶魔，战争成了游戏，武器整理玩具，对生命如此漠视，最后甚至都交换了国土！</li></ul><h1 id="《漫长的告别》"><a href="#《漫长的告别》" class="headerlink" title="《漫长的告别》"></a>《漫长的告别》</h1><p>时间：2021.02</p><p>关键词：【美国】雷蒙德·钱德勒&#x2F;长篇推理小说（纸质书）</p><p>记录：</p><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/image/manchengdegaobie.png" alt="manchengdegaobie"></p><ul><li>这本书的结构与人物关系实在是太复杂了……</li><li>这小说与经典的推理小说《福尔摩斯探案集》的风格差别太大了，主人公马洛一点没有主角光环，是一个贫穷却又高贵的私家侦探形象。</li></ul><h1 id="《三体Ⅰ：地球往事》"><a href="#《三体Ⅰ：地球往事》" class="headerlink" title="《三体Ⅰ：地球往事》"></a>《三体Ⅰ：地球往事》</h1><p>时间：2021.02</p><p>关键词：【中国】刘慈欣&#x2F;长篇科幻小说（纸质书）</p><p>记录：</p><ul><li>地球往事讲的是在文化大革命时期，军方有一项致力于探索外星文明的工程——红岸工程，叶文洁对人类充满了失望，利用太阳向太空广播了地球的位置，正是这一个操作，即将影响这个地球文明。</li></ul><h1 id="《三体Ⅱ：黑暗森林》"><a href="#《三体Ⅱ：黑暗森林》" class="headerlink" title="《三体Ⅱ：黑暗森林》"></a>《三体Ⅱ：黑暗森林》</h1><p>时间：2021.02</p><p>关键词：【中国】刘慈欣&#x2F;长篇科幻小说（纸质书）</p><p>记录：</p><ul><li>在三体星人找到地球，并发送智子锁死地球科技时，人类也指定了面壁者计划，来对抗三体星人的入侵，这就是破壁者计划。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">黑暗森林法则 ：<br>一旦某个文明被发现，就必然遭到其他文明的打击。<br><br>点评 ：一旦被发现，能生存下来的是只有一方，或者都不能生存。<br><br>解析：<br>可以从地球中的国家间文明发展，以小看大分析宇宙文明发展方向.<br>宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的猎人，如果他发现了别的生命，能做的只有一件事：开枪消灭。<br>在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭，这就是宇宙文明的图景，这就是对费米悖论的一种解释 。<br></code></pre></td></tr></table></figure><h1 id="《三体Ⅲ：死神永生》"><a href="#《三体Ⅲ：死神永生》" class="headerlink" title="《三体Ⅲ：死神永生》"></a>《三体Ⅲ：死神永生》</h1><p>时间：2021.02</p><p>关键词：【中国】刘慈欣&#x2F;长篇科幻小说（纸质书）</p><p>记录：</p><ul><li>地球文明以位自己的科技足以抵挡三体的入侵，但是在三体面前，人类科技被轻松秒杀；</li><li>当黑暗森林法则生效时，三体被更高级的文明清楚，地球终有一天也被清除；</li><li>歌者使用二向箔，轻松将整个太阳系二维化。</li></ul><h1 id="《腾讯传》"><a href="#《腾讯传》" class="headerlink" title="《腾讯传》"></a>《腾讯传》</h1><p>时间：2021.02</p><p>关键词：【中国】吴晓波&#x2F;商业&#x2F;传记（纸质书）</p><p>记录：</p><ul><li>马化腾：大胆心细，谨慎沉稳，默默做事情！</li><li>企鹅帝国”三宗罪”<ul><li>一直在模仿从来不创新</li><li>走自己的路让别人无路可走</li><li>垄断平台拒绝开放</li></ul></li></ul><h1 id="《人生由我》"><a href="#《人生由我》" class="headerlink" title="《人生由我》"></a>《人生由我》</h1><p>时间：2021.02</p><p>关键词：【加拿大】梅耶·马斯克&#x2F;传记（纸质书）</p><p>记录：</p><ul><li>埃隆·马斯克的硬核妈妈也确实很硬核！</li><li>本书是站在女性角度去写的她自己的故事以及对女性的忠告，个人觉得还有有一定的深度的，但是她作为一个西方国家的人，我们应该考虑，这些建议对东方女性可能不是要全盘接收；</li><li>另外比较惊喜的是，全书对她三个孩子的着墨数量是相当的，并没有因为埃隆·马斯克最有效而大量地吹嘘，夸赞！</li></ul><h1 id="《华为成长之路》"><a href="#《华为成长之路》" class="headerlink" title="《华为成长之路》"></a>《华为成长之路》</h1><p>时间：2021.02</p><p>关键词：【中国】邓斌&#x2F;商业&#x2F;传记（纸质书）</p><p>记录：</p><ul><li>华为是我非常喜欢的一家公司，这本书总结华为发展史上的22个关键事件，给出了企业在不同成长阶段的不同的最重要的因素；</li><li>生命周期所经历的四大阶段：产品定位期（聚焦于“做成”）、市场复制期（聚焦于“做大”）、管理规范期（聚焦于“做强”）、生态联动期（聚焦于“做久”）；</li><li>书中让我最震撼的是”市场部集体大辞职“事件~<ul><li>一是开创了华为干部能上能下的文化，使得在华为“三上三下”的干部大有人在；二是加强了公司对干部的管理和控制力度；三是进一步树立了任正非的领导权威，让员工明白领导者的权威不容挑战。</li><li>我觉得这一步走的是非常的勇猛，对于一艘正在行驶的巨轮，突然面对集体大换血，是多么的不容易</li></ul></li><li>任正非的个人魅力在一定程度上对华为的影响非常之大！</li></ul><h1 id="《美国陷阱》"><a href="#《美国陷阱》" class="headerlink" title="《美国陷阱》"></a>《美国陷阱》</h1><p>时间：2021.02</p><p>关键词：【法国】弗雷德里克·皮耶鲁齐&#x2F;经济&#x2F;传记（纸质书）</p><p>记录：</p><ul><li>首先称赞一波这本书，这本书让我认清了美国丑恶的嘴脸！</li><li>法国能源巨头阿尔斯通高管皮耶鲁齐被美国司法部逮捕，作为美国通用收购阿尔斯通谈判的筹码，美国利用其《反海外腐败法》打击美国企业的竞争对手，美国利用其权力和暴力手段，直接或者间接扰乱世界秩序！</li><li>现在的华为也正面临着阿尔斯通相似的境地，孟晚舟在加拿大被捕，美国动用举国之力，去打压一家中国的私企！</li></ul><h1 id="《国家地理终极观星指南》"><a href="#《国家地理终极观星指南》" class="headerlink" title="《国家地理终极观星指南》"></a>《国家地理终极观星指南》</h1><p>时间：2021.03</p><p>关键词：【美国】霍华德·施耐德&#x2F;星空观察&#x2F;指导书（纸质书）</p><p>记录：</p><ul><li>初级星空观测书籍，是天文摄影师叶梓颐推荐的一本书；</li><li>对星空观测与星座等有了初步的认识</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 确认方位</span><br><br><span class="hljs-bullet">-</span> 视杆细胞<br><span class="hljs-bullet">  -</span> 感光细胞<br><span class="hljs-bullet">-</span> 视锥细胞<br><span class="hljs-bullet">-</span> 天球<br><span class="hljs-bullet">  -</span> 星图是以地球为中心来表示<br><span class="hljs-bullet">  -</span> 地球被一个巨大的球所包围，这个球就是天球<br><span class="hljs-bullet">  -</span> 天球赤道与地球赤道平行<br><span class="hljs-bullet">  -</span> 想象为所有的恒星都镶嵌在天球上<br><span class="hljs-bullet">  -</span> 坐标：赤经，赤纬<br><span class="hljs-bullet">-</span> 寻找北极星<br><span class="hljs-bullet">  -</span> 勾陈一<br><span class="hljs-bullet">  -</span> 北极星在天空的高度就是当地的地理纬度<br><br><span class="hljs-section"># 黄道</span><br><br><span class="hljs-bullet">-</span> 太阳在天球上的运行轨道称为黄道<br><span class="hljs-bullet">-</span> 斗转星移<br><span class="hljs-bullet">  -</span> 黄赤交角：23.5度<br><span class="hljs-bullet">-</span> 黄道上的天体<br><span class="hljs-bullet">  -</span> 太阳系所有行星都在同一平面上运行，从地球上看，就是在黄道附近出没<br><span class="hljs-bullet">  -</span> 黄道十二宫也沿着黄道带分布，因此地球绕太阳公转没过一个月，就会有一个新的星座出现在空中<br><br><span class="hljs-section"># 亮星引导</span><br><br><span class="hljs-bullet">-</span> 角度的测量<br><span class="hljs-bullet">  -</span> 把手臂向外伸直，在一个手臂的距离之外，<br><span class="hljs-bullet">    -</span> 你所见到的拇指的宽度大约是2度<br><span class="hljs-bullet">    -</span> 一个拳头约10度<br><span class="hljs-bullet">    -</span> 张开的手掌约20度<br><br><span class="hljs-section"># 计算时间</span><br><br><span class="hljs-bullet">-</span> 世界时UT<br><span class="hljs-bullet">-</span> 平太阳日：太阳通过同一条经线两次的时间间隔<br><span class="hljs-bullet">-</span> 恒星日 23h56min<br><br><span class="hljs-section"># 光污染</span><br><br><span class="hljs-section"># 在城市里观赏夜空</span><br><br><span class="hljs-bullet">-</span> 金星 -4.2<br><span class="hljs-bullet">-</span> 木星 -2.9<br><span class="hljs-bullet">-</span> 火星 -2.8<br><span class="hljs-bullet">-</span> 土星 0.7<br><br><span class="hljs-section"># 双筒望远镜</span><br><br><span class="hljs-section"># 为天体命名</span><br><br><span class="hljs-bullet">-</span> 新总表 NGC<br><br><span class="hljs-section"># 月亮有多高</span><br><br><span class="hljs-bullet">-</span> 日地平均距离 1.497亿千米=1AU<br><span class="hljs-bullet">-</span> 距离太阳10万AU，奥尔特云，太阳系残骸<br><span class="hljs-bullet">-</span> 光年 9.4<span class="hljs-emphasis">*10^12 KM</span><br><span class="hljs-emphasis">- 方法</span><br><span class="hljs-emphasis">  - 视差法</span><br><span class="hljs-emphasis">    - 秒差距</span><br><span class="hljs-emphasis">    - 1秒差距=3.26光年</span><br><span class="hljs-emphasis">  - 光谱仪</span><br><span class="hljs-emphasis"># 薄薄的地球大气层</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 垂直结构</span><br><span class="hljs-emphasis">  - 对流层</span><br><span class="hljs-emphasis">  - 平流层</span><br><span class="hljs-emphasis">  - 中间层</span><br><span class="hljs-emphasis">  - 热层</span><br><span class="hljs-emphasis">  - 散逸层</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 夜幕降临</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 地球反照</span><br><span class="hljs-emphasis">  - 地球反照会让未满的月亮看起来像满月</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 地球的磁场</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 磁层</span><br><span class="hljs-emphasis">- 范·艾伦辐射带</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 极光</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 太阳风的带电粒子比平常活跃时，会穿越磁层和范·艾伦辐射带，来到地表上方约80千米处，给大气中的氮和氧分子提供能量，进而让它们发光</span><br><span class="hljs-emphasis">- 当太阳风吹向地球时，会拉扯一部分的地球磁场，造成磁场断裂，磁感线重新连接后会释放能量，使得极光变亮并发生波动</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 天空中最酷的五件事</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 北斗七星和北极星</span><br><span class="hljs-emphasis">  - 北斗七星</span><br><span class="hljs-emphasis">    - 大熊座的尾巴</span><br><span class="hljs-emphasis">    - 一年四季可见</span><br><span class="hljs-emphasis">    - 秋季时勺口向上</span><br><span class="hljs-emphasis">    - 春季时勺口向下</span><br><span class="hljs-emphasis">    - 长度：25度（手臂甚至后握拳，伸出大拇指和小拇指）</span><br><span class="hljs-emphasis">    - 勺口最外侧两颗星连线，方向朝向勺口所指的方向，能找到北极星</span><br><span class="hljs-emphasis">  - 北极星</span><br><span class="hljs-emphasis">    - 第50亮的恒星</span><br><span class="hljs-emphasis">    - 属于小熊座</span><br><span class="hljs-emphasis">    - 黄巨星，430光年</span><br><span class="hljs-emphasis">    - 三星系统，不过另外两颗星肉眼不可见</span><br><span class="hljs-emphasis">    - 造父变星——亮度变化很规律</span><br><span class="hljs-emphasis">    - 正北方？No!  周期性摆动——进动</span><br><span class="hljs-emphasis">    - </span><br><span class="hljs-emphasis">- 金星</span><br><span class="hljs-emphasis">  - 夜空中仅次于月亮的第二亮的天体</span><br><span class="hljs-emphasis">  - </span><br><span class="hljs-emphasis">- 英仙座流星雨</span><br><span class="hljs-emphasis">- 昴星团</span><br><span class="hljs-emphasis">- 仙女星系</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">后面的几章内容就没记录了</span><br></code></pre></td></tr></table></figure><h1 id="《仿生人会梦见电子羊吗？》"><a href="#《仿生人会梦见电子羊吗？》" class="headerlink" title="《仿生人会梦见电子羊吗？》"></a>《仿生人会梦见电子羊吗？》</h1><p>时间：2021.04</p><p>关键词：【美国】菲利普·迪克&#x2F;科幻小说（纸质书）</p><p>记录：</p><ul><li>这本书所改变的影视作品《银翼杀手》是比较经典的科幻电影；</li><li>故事的背景在人类所生存的环境已经崩坏，出现了越来越多的仿生人，仿生人也在不断地更新迭代，以躲过赏金猎人的追杀</li><li>书的主人公就是这么一位追杀逃亡仿生人的赏金猎人。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 不管去哪里，你都不得不做一些错事。这是生命的基本条件，要求你违背自己认同的身份。在某些时候，每个活着的生命都必须这么做。这就是终极的阴影，造物的缺陷。这是终极诅咒，那个吞噬所有生命的诅咒。整个宇宙都是这样。<br><br><br><span class="hljs-bullet">-</span> 黑暗的火焰已经苍白，生命力渐渐离她而去，就跟他以前见过的许多仿生人一样。经典的听天由命。它们只会识时务地机械地接受即将到来的毁灭，而真正的生命---在二十亿年的生存压力下进化出来的生命---永远不会就这样认命。<br><br><br><span class="hljs-bullet">-</span> 遍地的野草开始生长前进，旋转着钻进他周围的墙壁里。野草在墙里钻来钻去，直到它们成了自己的孢子。那些孢子膨胀，分裂，在已经千疮百孔的钢筋和水泥墙碎片里爆炸。但墙壁消失后，孤寂仍在。孤寂会尾随任何东西而来。除了衰弱暗淡的默瑟身影。老人现在就站在他面前，一脸平和安详。<br><br><br><span class="hljs-bullet">-</span> 这就像生命之间的一种保险。当然，这是一把双刃剑。只要有某个生命经历了快乐，所有其他生命的体验就都会包含一丝快乐。但要是任何一个生命感受到痛苦，那其他生命也就挥不去那一片阴影。像人这样的群居动物，有了移情能力之后，生存率会显著提高。但对于猫头鹰和眼镜蛇，移情则意味着毁灭。<br><br><br><span class="hljs-bullet">-</span> 莫扎特写完《魔笛》后不久，才三十多岁，就因肾病去世了，葬在没有标志的贫民窟里。想到这里，他开始寻思，不知莫扎特当时有没有预感到已经没有未来了，预感到他的时间所剩无几了。也许我也一样，里克边想边看彩排。这场彩排总会结束，表演总会结束，演员会死去，乐曲的最后一个音符也会沉默。最终，“莫扎特”这个名字也会消失，尘埃会取得最后的胜利，即使不在这个星球，也会在别的星球。<br><br><br><span class="hljs-bullet">-</span> 没人能赢基皮。”他说，“只能是短暂的、局部的胜利。像我的房间里，我在和非基皮之间创造了一种平衡。但我会死去，或者离开，然后基皮又会占据上风。这是整个宇宙中的普适真理整个宇宙都在向着最终、最绝对的基皮状态演进。<br><br><br><span class="hljs-bullet">-</span> “如果我连自己都救不了，”老人说，“如何能救你?”他微微笑。“你难道不知道吗?世界上没有救世主。”<br><br><br><span class="hljs-bullet">-</span> 现在，尤其是今天。最初的八个仿生人一个一个被干掉，只剩下三个。而且剩下的这几个非法逃亡者也死定了，因为就算他失败了，还会有别人来干掉它们。时间如潮水，他想。生命循环。结束在这个最后的暮光中。最终是死亡的寂静。他在这件事里感觉到了一个完整的微缩宇宙。<br><br></code></pre></td></tr></table></figure><h1 id="《黑客与画家》"><a href="#《黑客与画家》" class="headerlink" title="《黑客与画家》"></a>《黑客与画家》</h1><p>时间：2021.04</p><p>关键词：【美国】 保罗·格雷厄姆&#x2F;硅谷&#x2F;互联网（纸质书）</p><p>记录：</p><ul><li>黑客已经被人们错认为是一个贬义词了，但其本义是精通计算机编程的人；</li><li>作者是硅管著名的创业家，被称为硅谷创业之父</li><li>摘抄</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 黑客与画家</span><br><br><span class="hljs-section">## 前言</span><br><br><span class="hljs-bullet">-</span> 保罗·格雷厄姆（1965年—），英文名Paul Graham，美国著名程序员、[<span class="hljs-string">风险投资家</span>](<span class="hljs-link">https://baike.baidu.com/item/风险投资家/7648980</span>)、博客和技术作家。<br><br><span class="hljs-bullet">-</span> LISP是一种通用高级计算机程序语言，长期以来垄断[<span class="hljs-string">人工智能</span>](<span class="hljs-link">https://baike.baidu.com/item/人工智能/9180</span>)领域的应用。LISP作为应用人工智能而设计的语言，是第一个声明式系内[<span class="hljs-string">函数式程序设计</span>](<span class="hljs-link">https://baike.baidu.com/item/函数式程序设计</span>)语言，有别于命令式系内过程式的[<span class="hljs-string">C</span>](<span class="hljs-link">https://baike.baidu.com/item/C/7252092</span>)、[<span class="hljs-string">Fortran</span>](<span class="hljs-link">https://baike.baidu.com/item/Fortran</span>)和面向对象的[<span class="hljs-string">Java</span>](<span class="hljs-link">https://baike.baidu.com/item/Java/85979</span>)、[<span class="hljs-string">C#</span>](<span class="hljs-link">https://baike.baidu.com/item/C%23</span>)等[<span class="hljs-string">结构化程序设计</span>](<span class="hljs-link">https://baike.baidu.com/item/结构化程序设计</span>)语言。<br><br><span class="hljs-bullet">  -</span> LISP名称源自列表处理（LISt Processing）的英语缩写，由来自麻省理工学院的人工智能研究先驱[<span class="hljs-string">约翰·麦卡锡</span>](<span class="hljs-link">https://baike.baidu.com/item/约翰·麦卡锡/858197</span>)（John McCarthy）在1958年基于[<span class="hljs-string">λ演算</span>](<span class="hljs-link">https://baike.baidu.com/item/λ演算</span>)所创造，采用抽象数据列表与[<span class="hljs-string">递归</span>](<span class="hljs-link">https://baike.baidu.com/item/递归/1740695</span>)作符号演算来衍生人工智能。<br><br><span class="hljs-bullet">-</span> 罗伯特·莫里斯<br><br><span class="hljs-bullet">-</span> 网景<br><br><span class="hljs-bullet">-</span> Viaweb<br><br><span class="hljs-bullet">-</span> 特雷弗·布莱克韦尔<br><br><span class="hljs-bullet">-</span> 雅虎兼并Viaweb 改名yahoo store<br><br><span class="hljs-bullet">-</span> 我们生活中的一切都正在成为计算机。所以，如果你想理解我们目前的世界以及它的未来动向，那么多了解一些黑客的想法会对你有帮助<br><br><span class="hljs-bullet">-</span> Y Combinator<br><br><span class="hljs-bullet">-</span> 特别关注用户需要什么<br><br><span class="hljs-bullet">-</span> 想要把握这个时代，就必须理解计算机<br><br><span class="hljs-bullet">-</span> 理解计算机的关键，则是要理解计算机背后的人<br><br><span class="hljs-bullet">-</span> hack hacking hacker<br><br><span class="hljs-bullet">-</span> 黑客伦理<br><br><span class="hljs-bullet">  -</span> 使用计算机以及所有有助于了解这个世界本质的事物都不应受到任何限制。任何事情都应该亲手尝试<br><span class="hljs-bullet">  -</span> 信息应该全部免费<br><span class="hljs-bullet">  -</span> 不相信权威，提倡去中心化<br><span class="hljs-bullet">  -</span> 判断一名黑客的水平应该看他的技术能力，而不是看他的学历，年龄或地位等其他标准<br><span class="hljs-bullet">  -</span> 你可以用计算机创造美和艺术<br><span class="hljs-bullet">  -</span> 计算机使生活更美好<br><br><span class="hljs-bullet">-</span> 黑客价值观的核心原则:分享 开放 民主 计算机的自由使用 进步<br><br><span class="hljs-bullet">-</span> Unix 丹尼斯·里奇   肯·汤普森<br><br><span class="hljs-bullet">-</span> 《计算机程序设计艺术》  高德纳<br><br><span class="hljs-bullet">-</span> Linux  莱纳斯·拓沃兹<br><br><span class="hljs-bullet">-</span> 开源运动   埃里克·雷蒙德<br><br><span class="hljs-bullet">-</span> 微软 比尔·盖茨<br><br><span class="hljs-bullet">-</span> hacker:优秀的程序员<br><br><span class="hljs-bullet">-</span> cracker：入侵计算机系统的人<br><br><span class="hljs-bullet">-</span> 和画家一样，黑客只是怀有一门特殊手艺，有创造天赋的普通人<br><br><span class="hljs-bullet">-</span> 编程是一种艺术创造，黑客就是艺术家<br><br><span class="hljs-bullet">-</span> 声称一种语言优于另一种语言被认为是不礼貌的行为。<br><br><span class="hljs-bullet">-</span> “没办法，这些书呆子看上去正在接管世界。我最好能懂一点他们正在干的事情，这样就不会被他们整出来的下一个东西吓唬到了。”<br><br><br><span class="hljs-section">## 为什么书呆子不受欢迎</span><br><br><span class="hljs-bullet">-</span> 书呆子与高智商 正相关<br><span class="hljs-bullet">-</span> 书呆子与受欢迎 负相关<br><span class="hljs-bullet">-</span> 他们真的不想自己受欢迎<br><span class="hljs-bullet">-</span> “任何一种艺术，不管是否重要，如果你想要在该领域出类拔萃，就必须全身心投入。”<br><span class="hljs-bullet">-</span> 青少年时时刻刻都想融入群体之中<br><span class="hljs-bullet">-</span> 书呆子不受欢迎的真正原因，是他们脑子里想着别的事情<br><span class="hljs-bullet">-</span> 在一个人产生良知之前，折磨就是一种娱乐<br><span class="hljs-bullet">-</span> 在任何社会等级制度中那些对自己没信息的人就会通过虐待他们眼中的下等人来突显自己的身份。<br><span class="hljs-bullet">-</span> 一个政客，他想让选民忘记糟糕的国内局势，方法就是为国家找出一个敌人，哪怕敌人并不真的存在，他也可以创造一个出来<br><span class="hljs-bullet">-</span> 不受欢迎是一种传染病，虽然善良的孩子不会去欺负书呆子，但是未来保护自己，也仍然会与书呆子保持距离<br><span class="hljs-bullet">-</span> 人生的最糟糕事情是在11岁到14岁<br><span class="hljs-bullet">-</span> 真实世界的关键并非在于它是由成年人组成的，而在于它的庞大规模使得你做的每件事都能产生真正意义上的结果<br><span class="hljs-bullet">-</span> 真实世界的特点是：它及其庞大<br><span class="hljs-bullet">-</span> 昂起头看世界<br><span class="hljs-bullet">-</span> 逃离这种空虚生活的唯一办法，就是向它屈服<br><br><span class="hljs-section">## 黑客与画家</span><br><br><span class="hljs-bullet">-</span> 创造优美事物的方式往往不是从头做起，而是在现有的成果的基础上做些小小的调整，或者将已有的关掉用比较新的方式组合起来<br><span class="hljs-bullet">-</span> 唯一有效的外部考核就是时间。经过岁月的洗礼，优美的东西生存发展的机会更大，丑陋的东西往往会被淘汰。<br><span class="hljs-bullet">-</span> 编程语言是用来帮助思考程序的，而不是用来表达你已经想好的程序的<br><span class="hljs-bullet">-</span> 真正竞争软件设计的战场是新兴领域的市场，这里还没有人建立过防御工事<br><span class="hljs-bullet">-</span> 你有一份为了赚钱的工作，还有一份为了爱好的工作<br><span class="hljs-bullet">-</span> 应该定期地从头开始，不要长年累月地在一个项目上不断工作<br><span class="hljs-bullet">-</span> 黑客的出发点是原创，最终得到一个优美的结果；而科学家的出发点是别人优美的结果，最终得到原创性<br><span class="hljs-bullet">-</span> 开源运动<br><span class="hljs-bullet">-</span> 从他人的角度思考问题正是成功的奥秘所在<br><span class="hljs-bullet">-</span> 判断一个人是否具有换位思考的能力有一个好办法，那就是看他怎么向没有技术背景的人解释技术问题<br><span class="hljs-bullet">-</span> 程序写出来是给人看的，附带能在机器上运行<br><span class="hljs-bullet">-</span> 编程到底能够有多酷，取决于我们能够用这种新媒介做出怎样的工作<br><br><span class="hljs-section">## 不能说的话</span><br><br><span class="hljs-bullet">-</span> 回顾过去。<br><span class="hljs-bullet">  -</span> 我们可以去找那些过去被认为理所当然，如今却被认为不可思议的事情。<br><span class="hljs-bullet">-</span> 硬科学与软科学<br><span class="hljs-bullet">-</span> 过去与现在之间的变化往往不是因为对错，而是因为社会观念变了<br><span class="hljs-bullet">-</span> 当代观念与不同时期的古代观念diff一下<br><span class="hljs-bullet">  -</span> diff 计算机术语，用来比较同一个软件不同版本源代码之间的差异<br><span class="hljs-bullet">-</span> 将我们的观念与其他文化的观念diff一下<br><span class="hljs-bullet">  -</span> 最好的办法是亲自去看看<br><span class="hljs-bullet">-</span> 观察禁忌是如何产生的 <br><span class="hljs-bullet">-</span> 为了在全社会制造出一个禁忌，负责实施的团体必定既不是特别强大也不是特别弱小<br><span class="hljs-bullet">-</span> 如果一个团体强大到无比自信，它根本不会在乎别人的抨击<br><span class="hljs-bullet">-</span> 优秀的作品往往来自于其他人忽略的想法，而最被忽视的想法就是那些被禁止的思想观点<br><span class="hljs-bullet">-</span> 与笨蛋辩论，你也会变成笨蛋<br><span class="hljs-bullet">-</span> 自由思考比畅所欲言更重要<br><span class="hljs-bullet">-</span> 在思想和言论之间划一条明确的界限<br><span class="hljs-bullet">  -</span> 在心里无所不想，但是不一定要说出来<br><span class="hljs-bullet">-</span> 在心里默默思考那些最无法无天的想法<br><span class="hljs-bullet">-</span> 你的思想是一个地下组织，绝不要把那里发生的事情一股脑说给外人听<br><span class="hljs-bullet">-</span> 守口如瓶，笑脸相迎<br><span class="hljs-bullet">  -</span> 你要对每一个人微笑，但是不要说出自己的真实想法<br><span class="hljs-bullet">-</span> 小时候，每个人都会鼓励你不断成长，变成一个心智成熟、不再耍小孩子脾气的人。但是，很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人<br><span class="hljs-bullet">-</span> 如果你自己就是潮水的一部分，怎么能看见潮流的方向呢？<br><span class="hljs-bullet">-</span> 你只能永远保持质疑。问自己，什么话是我不能说的？为什么？<br><span class="hljs-bullet">-</span> <br><br><span class="hljs-section">## 良好的坏习惯</span><br><br><span class="hljs-bullet">-</span> 黑客是不服从管教的，这就是他们的本性，这也是美国人的本性，这就是为什么硅谷出现在美国<br><span class="hljs-bullet">-</span> 对于适当的不服从管教，保持宽容不会有太大的坏处，反而很有利于美国的国家优势，它使得美国不仅能吸引聪明人，还能吸引那些很自负的人<br><span class="hljs-bullet">-</span> Michael Rabin遇到难题的时候，会把问题重新定义成一个较简单的形式，同时一定会假想一个对手正在与他比赛谁能更快地解决问题<br><span class="hljs-bullet">-</span> 很自负的人必须培养出敏锐的感觉，及时发现周围情势的变化，知道怎样才能脱身<br><br><span class="hljs-section">## 另一条路</span><br><br><span class="hljs-bullet">-</span> 软件从桌面转移到服务器端<br><span class="hljs-bullet">-</span> 管理企业<br><span class="hljs-bullet">  -</span> 做出用户喜欢的产品<br><span class="hljs-bullet">  -</span> 保证开支小于收入<br><span class="hljs-bullet">-</span> 如果你不打算自己动手设计和开发，那就不要创业<br><span class="hljs-bullet">-</span> 微软的恐怖之处在于，它大到可以开发任何软件，就像一座能够行走的大山<br><br><span class="hljs-section">## 如何创造财富</span><br><br><span class="hljs-bullet">-</span> 财富才是你的目标，金钱不是。<br><span class="hljs-bullet">-</span> 大饼谬论<br><span class="hljs-bullet">-</span> 目前还存在的最大的手工艺人群体就是程序员<br><span class="hljs-bullet">-</span> 我们这个世界，你向下沉沦或者向上奋进都取决于你自己，不能把原因推给外界<br><span class="hljs-bullet">-</span> 对于大多数人来说，最好的选择可能是为某个现存的公司打工<br><span class="hljs-bullet">-</span> 工作就是在一个组织中，与许多人共同合作，做出某种人们需要的东西<br><span class="hljs-bullet">-</span> 现实是你在工作上投入的精力越多，就越能产生规模效应<br><span class="hljs-bullet">-</span> 销售员是单独工作的，大多数雇员则是集体工作的 <br><span class="hljs-bullet">-</span> <span class="hljs-strong">**可测量性和可放大性**</span><br><span class="hljs-bullet">  -</span> 你的职位产生的业绩应该是可测量的<br><span class="hljs-bullet">  -</span> 你做出的决定能够产生巨大的效应<br><span class="hljs-bullet">-</span> 小团队=可测量性<br><span class="hljs-bullet">  -</span> 乔布斯：“创业的成败取决于最早加入公司的那十个人”<br><span class="hljs-bullet">  -</span> 团队越大，每个人的贡献就越接近于整体的平均值<br><span class="hljs-bullet">-</span> 高科技=可放大性<br><span class="hljs-bullet">  -</span> 创业公司通过发明新技术盈利，所以具备可放大性<br><span class="hljs-bullet">  -</span> 大多数因为创造财富而发财的人都是通过开发新技术而实现的<br><span class="hljs-bullet">  -</span> 选择公司要解决什么问题应该以问题的难度为指引，而且此后的各种决策都应该以此为原则<br><span class="hljs-bullet">  -</span> 创业公司就像游击队一样，喜欢选择不易生存的深山老林作为根据地，政府的正规军无法追到那种地方<br><span class="hljs-bullet">  -</span> 你为竞争对手设置的壁垒有多高<br><span class="hljs-bullet">  -</span> 最好的防御就是进攻<br><span class="hljs-bullet">  -</span> 如果你开发出来的技术是竞争对手难于复制的，那就够了，你不需要依靠其他防御手段了。一开始就选择较难的问题，此后的各种决策都选择较难的那个选项<br><span class="hljs-bullet">  -</span> 真正创业以后，你的竞争对手决定了你到底要多辛苦，而他们做出的决定都是一样的：你能吃多少苦，我们就能吃多少苦<br><span class="hljs-bullet">  -</span> 你开办创业公司不单纯地为了解决问题，而是为了解决那些用户关心的问题<br><span class="hljs-bullet">  -</span> 用户的数量是判断公司表现好坏的指标<br><span class="hljs-bullet">  -</span> 过早优化<br><span class="hljs-bullet">    -</span> 尽快拿出1.0版本然后根据用户的反应而不是自己的猜测进行软件优化<br><span class="hljs-bullet">  -</span> 原则：创造人们需要的东西，也就是创造财富<br><span class="hljs-bullet">  -</span> 缓慢工作的后果并不仅仅是延迟了技术革新，而且很可能会扼杀技术革新<br><span class="hljs-bullet">  -</span> 只有在快速获得巨大的利益的激励下，你才会去挑战那些困难的问题<br><span class="hljs-bullet">  -</span> <br></code></pre></td></tr></table></figure><h1 id="《呐喊》"><a href="#《呐喊》" class="headerlink" title="《呐喊》"></a>《呐喊》</h1><p>时间：2021.07</p><p>关键词：【中国】鲁迅&#x2F;小说集（电子书）</p><p>记录：</p><ul><li>《狂人日记》《孔乙己》《药》《明天》《一件小事》《风波》《头发》《阿Q正传》《白光》《端午节》《鸭的喜剧》《社戏》《兔和猫》</li><li>看了觉醒年代，突然对那个时代充满了好奇，对鲁迅先生的作品充满了好奇；</li><li>《狂人日记》是中国第一篇白话文小说，在新文化运动中有着重要的作用，对封建吃人般的现状有是深刻的批判；</li></ul><h1 id="《彷徨》"><a href="#《彷徨》" class="headerlink" title="《彷徨》"></a>《彷徨》</h1><p>时间：2021.07</p><p>关键词：【中国】鲁迅&#x2F;小说集（电子书）</p><p>记录：</p><ul><li>《祝福》《在酒楼上》《幸福的家庭》《肥皂》《长明灯》《示众》《高老夫子》《孤独者》《伤逝》《弟兄》《离婚》</li><li>《祝福》应该是这里面最出名的吧，祥林嫂形象的刻画深入人心；</li></ul><h1 id="刘慈欣短篇科幻小说"><a href="#刘慈欣短篇科幻小说" class="headerlink" title="刘慈欣短篇科幻小说"></a>刘慈欣短篇科幻小说</h1><h2 id="《流浪地球》"><a href="#《流浪地球》" class="headerlink" title="《流浪地球》"></a>《流浪地球》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>小说流浪地球与电影的最大区别在于，电影中的高潮是地球受木星强大的引力所影响超过了洛希极限，刘培强驾驶飞船点燃木星，使得地球摆脱了木星的吸引，在引力弹弓效应影响下，地球的速度达到太阳系的逃逸速度，可以冲出太阳系；小说的高潮是，对太阳毁灭的质疑，对流浪地球的质疑，导致地球上发生叛乱，打算重新回到地球之前的轨道，但在这时，太阳发生了氦闪，太阳不再存在，地球真正成为流浪的孩子，直到找到新的恒星。</li></ul><h2 id="《朝闻道》"><a href="#《朝闻道》" class="headerlink" title="《朝闻道》"></a>《朝闻道》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>科学家丁仪等创造了人类最大的粒子加速器——爱因斯坦赤道，打算一举找到宇宙的最终真理，探寻宇宙大一统模型；</li><li>但这被宇宙排险者阻止了，因为这个加速器会导致整个宇宙的毁灭，宇宙排险者不允许地球人继续探索宇宙的大一统模型，但是丁仪等科学家心有不甘，想通过宇宙排险者知道宇宙的真理，于是与排险者达成协议，排险者告诉科学家真理，10分钟之后，排险者杀掉这些科学家；</li><li>如果你有机会知道宇宙的真理，然后杀掉你，这笔交易你会做吗？我想我的答案是：YES！</li></ul><h2 id="《赡养人类》"><a href="#《赡养人类》" class="headerlink" title="《赡养人类》"></a>《赡养人类》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>讽刺资本主义的残酷与腐朽，资本主义对资产的运作使得贫富差距越来越大，乃至空气的所有权都集中在某个人手中；</li><li>教育可以让穷人变成富人，但是教育成本高到一定程度时，穷人只会是穷人，富人会越来越富有，乃至穷人和富人变成两个物种。</li></ul><h2 id="《鲸歌》"><a href="#《鲸歌》" class="headerlink" title="《鲸歌》"></a>《鲸歌》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>鲸歌中的科幻元素我觉得并不是很多，这是刘慈欣1999年发表的作品，讲述的只是一个非常简单的故事；</li><li>人类利用鲸鱼做非法贩毒，鲸鱼却被非法的捕鲸船所杀。</li><li>高科技与道德之间的平衡是人类一直所寻求的，科技再怎么发达都必须有道德的束缚。</li></ul><h2 id="《地火》"><a href="#《地火》" class="headerlink" title="《地火》"></a>《地火》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>《地火》讲述的是矿工之子刘欣为改变传统、落后的煤炭工业而进行的一场气化煤实验，憧憬无限美好，结局却悲恸天地。《地火》是一部典型的煤矿题材作品。它以煤的地下气化开采为故事主线，表现自然灾害、技术进步和人类生存等宏大主题。在《地火》中，乌托邦式的科学幻想与落后无奈的客观现实激烈碰撞；对科学理想的热情赞颂与对盲目非科学理性的冷静批判交织进行。</li><li>《地火》这篇作品，我觉得是刘慈欣这几篇短篇小说中，完成度非常高的，也是最具有反思意义的；</li><li>当我们面对一种新的技术，这种技术对人类目前的现状会产生非常大的影响，但是我们必须得抑制住自己的激动心情，必须冷静思考，我们能否驾驭这种力量，我们是否对其充分了解，有完整的应急措施。</li><li>我觉得越是重大的科学成果，在真正应用时，越是得充分地，理性地考虑，一个非常的典型地例子，核电站。</li></ul><h2 id="《地球大炮》"><a href="#《地球大炮》" class="headerlink" title="《地球大炮》"></a>《地球大炮》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>这篇小说我觉得前期部分，个人评价是，我觉得不是很好，特别是复仇的动机很难成立；</li><li>科学家的孩子受到科学家的思想的影响，所作出的东西对人类产生了不好的成果，那么责任在于在科学家自己?我觉得这个值得仔细考虑；</li><li>《地球大炮》与《地火》所表达的情感有些类似，都是科学技术的发展对人类社会会产生影响，这个影响或许是好的，但有时候也可能是坏的，甚至给人类带来巨大的灾难，但从长远看来，这项新的科学技术对人类可能产生积极的影响，我们不应该害怕短期的结果不好而放弃，人类对未知的探索精神是永远不能放弃的，是人类最宝贵的品质之一。</li></ul><h2 id="《带上她的眼睛》"><a href="#《带上她的眼睛》" class="headerlink" title="《带上她的眼睛》"></a>《带上她的眼睛》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>这部作品中，并没有很宏大的世界观，也没有很多高科技，科幻的元素也不多，但深深地震撼了我！</li><li>宇航员即使已经飞到太空中，可以看到宇宙的壮观，但是他们仍然惦记着地球上的花草树木，日出日落，渴望感受地球上的阳光，地球上的风雨！</li><li>这篇文章的高潮部分在于，“她”不是宇航员，而是地航员，深入地底探索，但是过程中出现了意外，  她被永久地困在了地底下，将孤独一辈子，在与地面断了联系的时间中，在她的余生中，她最惦记的还是地球的自然元素。</li><li>我们没有被困住，自然对我们来说触手可及，我们不应该对此麻木，更应该去拥抱自然，去发现美好。</li></ul><h2 id="《诗云》"><a href="#《诗云》" class="headerlink" title="《诗云》"></a>《诗云》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>超越李白的诗词不是被挑选出来的，而是被创造出来的；</li><li>技术就是再强大，也有其做不到的方面；</li></ul><h2 id="《白垩纪往事》"><a href="#《白垩纪往事》" class="headerlink" title="《白垩纪往事》"></a>《白垩纪往事》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>恐龙是有强大的大脑，但却有笨拙（巨大）的双手，恐龙是思考者，蚂蚁没有强大的大脑，但是可以从事精密制造等，这篇作品的前期所写的是恐龙与蚂蚁之间相互合作，互利共生，也只有这两者紧密合作，才可以共赢；但两者毕竟是两种不同的物种，当两者之间的矛盾与猜忌达到一定程度时，这个平衡关系将被打破，最后两败俱生。</li><li>很难做一个结论说，两者之间究竟应该怎么样，两种关系都会带来好处，也会带来坏处！</li><li>从人类角度看待这种问题，人类既有强大的大脑，也有灵活的双手，人类是很幸运的；但是将问题放大，整个世界也确实被分成两部分，发达国家和发展中国家，发达国家就是恐龙，发展中国家就是蚂蚁！</li></ul><h2 id="《全频带阻塞干扰》"><a href="#《全频带阻塞干扰》" class="headerlink" title="《全频带阻塞干扰》"></a>《全频带阻塞干扰》</h2><p>时间：2021.07</p><p>关键词：【中国】刘慈欣&#x2F;短篇小说（电子书）</p><p>记录：</p><ul><li>这部作品中关于战争的元素太多了，对未来的战争也充满了思考；</li><li>电磁波技术的应用，使得现代化战争可以在千里之外便可以调动战场上的士兵与武器，但是电子干扰技术的出现，使得电磁波不再是万分的安全，往极端了考虑，当使用全频带阻塞干扰时，敌我双方都是战场上的瞎子，信息作战将完全失效。</li></ul><h1 id="《消失的13级台阶》"><a href="#《消失的13级台阶》" class="headerlink" title="《消失的13级台阶》"></a>《消失的13级台阶》</h1><p>时间：2021.07</p><p>关键词：【日本】高野和明&#x2F;悬疑&#x2F;推理&#x2F;长篇小说（电子书）</p><p>记录：</p><ul><li>这本书的翻译真的非常棒，非常的通俗易懂，没有不流畅的地方，在读的时候还以为这本书本身就是中文创作的；</li><li>故事开始首先讲述的是树原亮在监狱中担惊受怕的样子，因为他被认定为一起恶性的抢劫杀人案的凶手，且被判处死刑，随时可能被带走，执行绞刑；</li><li>之后小说开启了一个新的分支，纯一因为过失杀人被判处两年刑期，但是现在被假释了，提前三个月出狱，当他回到家时他发现因为自己成为了杀人犯，整个家庭都要垮了；</li><li>之后管教官南乡找到纯一，给纯一一份工作，协助南乡为树原亮翻案，就这样小说展开了，小说所讲述的便是两位推理查案的过程；</li><li>小说主体部分结构是非常好的，情节跌宕起伏，从一点点的线索，逐渐深入查找下去，最终找到真相；</li><li>同时这本书还有对社会的思考，正义与法律，死刑的对错等。</li></ul><h1 id="《克莱因壶》"><a href="#《克莱因壶》" class="headerlink" title="《克莱因壶》"></a>《克莱因壶》</h1><p>时间：2021.07</p><p>关键词：【日本】冈岛二人&#x2F;悬疑&#x2F;推理&#x2F;长篇小说（电子书）</p><p>记录：</p><ul><li><p>首先需要注意的是这本书的作者——冈岛二人</p><ul><li>冈嵨二人是两位推理作家井上泉及德山谆一所用的笔名。井上泉笔名井上梦人，1950年12月9日出生，福冈县人，曾从事电影制作及记者等。德山谆一，1943年8月1日出生，东京都人，法政大学经济学系肆业。二人于1981年以《希望明天好天气》参选江户川乱步奖，可惜未能获奖。翌年他们再接再厉，以《宝马血痕》再次参选江户川乱步奖，终于获奖，在推理文坛正式出道。后来，二人又出版了《第七年的威胁书》，这三本小说都是以日本赛马为主题。不过这类型的小说未能得到大众的青睐，二人于是转为改写以绑架为主题的小说，因此有“绑架的冈嵨”之称。1989年，二人凭《99%的诱拐》获得吉川英治文学新人奖。 </li><li>这是我第一次接触两位作家共创一部作品，并且行文流畅，完成度很高！</li><li>还有一个著名的推理小说家组合是埃勒里•奎因<ul><li>埃勒里·奎因（Ellery Queen）是美国推理小说家曼弗雷德·班宁顿·李（Manfred Bennington Lee，1905—1971年）和弗雷德里克·丹奈（Frederic Dannay，1905—1982年）表兄弟二人使用的笔名，他们开创了合著推理小说的先例。</li></ul></li></ul></li><li><p>克莱因壶即我们熟知的克莱因瓶，只是原文作者用来“壶”字，译者便翻译为“壶”；</p><ul><li><p>克莱因瓶，在<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037">数学</a>领域中是指一种无<a href="https://baike.baidu.com/item/%E5%AE%9A%E5%90%91/35699">定向</a>性的平面，比如<a href="https://baike.baidu.com/item/%E4%BA%8C%E7%BB%B4/380405">二维</a>平面，就没有“内部”和“外部”之分。克莱因瓶在<a href="https://baike.baidu.com/item/%E6%8B%93%E6%89%91%E5%AD%A6/769248">拓扑学</a>中是一个不可定向的<a href="https://baike.baidu.com/item/%E6%8B%93%E6%89%91%E7%A9%BA%E9%97%B4/1498597">拓扑空间</a>。克莱因瓶最初由德国几何学大家菲立克斯·克莱因 (Felix Klein) 提出。</p><p>著名<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6%E5%AE%B6/1210991">数学家</a>菲立克斯·克莱因在1882年发现了后来以他的名字命名的著名“瓶子”。</p><p>克莱因瓶的结构可表述为：一个瓶子底部有一个洞，现在延长瓶子的颈部，并且扭曲地进入<a href="https://baike.baidu.com/item/%E7%93%B6%E5%AD%90/15763">瓶子</a>内部，然后和底部的洞相连接。和我们平时用来喝水的杯子不一样，这个物体没有“<a href="https://baike.baidu.com/item/%E8%BE%B9/34481">边</a>”，它的<a href="https://baike.baidu.com/item/%E8%A1%A8%E9%9D%A2/5728753">表面</a>不会终结。它和球面不同 ，一只苍蝇可以从瓶子的内部直接飞到外部而不用穿过表面，即它没有<a href="https://baike.baidu.com/item/%E5%86%85%E5%A4%96/4637839">内外</a>之分。</p></li></ul></li><li><p>首先该作品的故事情节非常精彩，我几乎是一口气读完的，故事中出现了多次的反转，一次次的反转也引起了我的一次次推测，推测故事到底是怎么回事，推测主人公是在现实中还是在虚幻中；最后主人公发现了问题所在，并想要揭穿这个谎言，但这时候故事又迎来了一次反转，主人公被抓，当他醒来的时候被告知之前的都是虚拟的，这下子主人公彻底迷失了自我，已经不知道什么是现实，什么是虚幻了，最后主人公想通过自己的死来获得解脱，故事到此便戛然而止了，留给了读者的自由想象的空间。</p></li></ul><h1 id="《动物园》"><a href="#《动物园》" class="headerlink" title="《动物园》"></a>《动物园》</h1><p>时间：2021.07</p><p>关键词：【日本】乙一&#x2F;悬疑&#x2F;小说集（电子书）</p><p>记录：</p><p>总的来说，这部小说集的每一篇短篇小说的都有一点恐怖与黑暗，甚至有一点恶心，几乎每一篇都出现了杀人与尸体。</p><ul><li><p><strong>《小饰与阳子》</strong></p><ul><li>这篇故事讲述的是单亲母亲家庭暴力两个孩子，并对孩子充满了歧视；</li><li>双胞胎姐姐阳子被妈妈暴力对待，不给吃穿，暴力打骂，冷眼对待；</li><li>双胞胎妹妹小饰被妈妈温柔对待，吃饱穿暖，夸奖疼爱，娇生惯养；</li><li>妹妹小饰对待姐姐阳子的态度是，姐姐只吃自己吃剩下的东西，穿自己穿破的衣服，住在厨房里；</li><li>姐姐阳子对待妹妹小饰的态度是，妹妹对待自己比较好，但是在学校二人并不会交谈；</li><li>有一日阳子遇到了一个有爱心的老奶奶，因为孙女不看望自己，老奶奶长期独身一人，把阳子当作自己的孙女，并把自己的书借给了阳子；</li><li>有一日阳子借来的书被妈妈发现没收了，阳子偷着去妈妈房间里拿回来，却不小心打翻了花瓶，水洒到了妈妈的笔记本电脑上，阳子不知所措；</li><li>当阳子躲到外面时，遇到了小饰，并欺骗小饰说妈妈知道了是小饰打翻的花瓶，于是二人制定好计划，互换衣服，以躲避妈妈的责骂，穿成阳子衣服的小饰回到了家里，被暴走的妈妈从楼上扔下去了，假扮成小饰的阳子躲过了妈妈的责骂，但是她也决定离开这个危险的家庭；</li><li>小说中的妈妈看似区别对待两个女儿，其实事实上对两个女儿采取的都是极端的暴力，两个女儿都十分惧怕妈妈。</li></ul></li><li><p><strong>《七个房间》</strong></p><ul><li>我个人认为，这部小说是这十一篇中最好的一部。</li><li>故事发生在一个密室之中，主角是姐弟二人，不知为什么被别人抓到了这个黑暗想牢狱的房间中，因为弟弟身形较小，可以穿过下水道，便发现了这个上下连通的七个房间，并逐渐知道了这个密室的运行规则：有一个变态杀人犯每天杀一个人，循环进行，而六天之后，就是姐弟俩的死期；</li><li>最后，到姐弟俩死期的那一天，姐姐自己的勇敢与智慧，让弟弟逃出了房间，并释放了其他的关押者，姐姐独立面对了死亡；</li><li>作者把自己当成弟弟，以第一人称的口吻叙事，以小孩子的视角去看待死亡；作者注重对小说中人物的描写，描写人们面对死亡时的绝望心境。</li></ul></li><li><p><strong>《远离的夫妇》</strong></p><ul><li>作者再一次以小孩子的口吻叙述，起初还以为是什么灵异故事或是平行宇宙，到最后发现这是一个令人深思的故事，反映家庭，父母对孩子的影响；</li><li>小说中的我（小孩子）本来生活中一个幸福美满的家庭中，但是突然有一天，爸爸看不到了妈妈，妈妈看不到了爸爸，只有我能同时看到二人，妈妈的世界中爸爸因为车祸去世了，妈妈的世界中爸爸因为车祸去世了，但是我可以同时看到二人；</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">我窃笑了起来，因为很久以前他们两人每天就是像这样，实在太有趣了。虽然现在爸爸妈妈必须透过我才能交谈，但那不是问题，我重新感受到我们的确是三人一体的家庭。那段日子里，家里变得好温暖，气氛非常愉快。<br></code></pre></td></tr></table></figure><ul><li>但渐渐地，我发现我不能同时看到爸爸妈妈了，意味着我必须做出选择了，只能跟随一方生活了；</li><li>最终，我选择了妈妈，这意味者我看不到爸爸了。</li><li>这是故事的反转来了，我被带到一个房间中，一个人问我关于爸爸的事情，但我只知道爸爸出车祸离开了，我看不到在身后的爸爸。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“我了解了。”男人和妈妈谈了一阵子，点点头说道，“也就是说，你们夫妻吵了一架，之后就当对方死了一般过日子，而你们也这么告诉孩子，让他在这种状况中生活下去，结果慢慢地他就变成这样了……”<br>男人又望向我的身后，像在和某个人说话似的不时点着头。我也跟着转过头看，然而背后只是一片空旷的空间。<br></code></pre></td></tr></table></figure><ul><li>故事并不是什么灵异事件，作者别出心裁的写作方式，写作的视角让人耳目一新，也引发人的思考，如果一对夫妻形同陌路，那对于小孩的教育，人生观、价值观都有影响的。</li></ul></li><li><p><strong>《向阳之诗》</strong></p><ul><li>披着科幻的外衣，实则是对人的生于死的探讨。</li><li>我是被制作出来的一个没有血肉的机器人，只是为了当这个制造我的老人去世的时候，我将他埋葬。但是随着我经历了很多这个世界的事情，当老人去世的时候，我明白了什么是生，什么是死；</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在很久以前便灭绝的人类的孩子们，对自己的父母一定也是同样怀抱着类似的矛盾情绪活下去的，不是吗？我们都是一边学习着爱与死亡，往来于世界的向阳处与阴暗处活下去的，不是吗？<br></code></pre></td></tr></table></figure></li><li><p><strong>《动物园》</strong></p><ul><li>这是一篇自我欺骗的故事。</li><li>小说中的我杀了我的女朋友，但是我自我欺骗，认为凶手不是我，而是另有其人，于是我每天都在重复一件事情，就是找出凶手；</li><li>每天早上，我查看信箱时，都会发现一张照片，我已经受到很多张照片了，把照片按顺序播放出来，看到了是尸体逐渐腐烂的过程；</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在清晨的酷寒中，每当打开公寓生锈的信箱，看到里面又躺着一张照片，头晕目眩与嫌恶绝望同时袭来，我只能紧紧捏住照片呆立原地一动也不能动。每天早上都是这样。<br><br>在清晨的酷寒中，每当打开公寓生锈的信箱，看到里面又躺着一张照片，头晕目眩与嫌恶绝望同时袭来，我只能紧紧捏住照片呆立原地一动也不能动。每天早上都是这样。<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">我的每句话都是台词，都是我的演技。在我的内心，其实一直思考着完全不同的事情。但是不这么持续演下去，太过痛苦的现实只会让我崩溃。<br>也就是说，我只是一直装作不知道自己的事情。我忽略那一块，然后信誓旦旦地宣称要找出杀害她的凶手。不过我绝对不可能抓到凶手吧。因为，杀了她的人正是我。<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">我知道是自己杀了她。明明知道却仍打定主意要找到凶手，真是矛盾的举动吧。不过，我并非双重人格。<br></code></pre></td></tr></table></figure><ul><li>每天早上我看到这些照片时，我都打定主意要找到凶手，于是我踏上了追凶之路，重复着昨天的事情，当我找到她的尸体时，我发现在她尸体之上有三脚架和相机，我发现凶手竟是我自己，于是我下定决心要去自首，我拍下照片做完证据，放到自己的邮箱中，当第二天早上查看邮箱时，企图看到这张照片就去自首，但当我看到照片时，我又开始了自我欺骗，去重复之前的事情，去寻找那个本就不存在的凶手。</li></ul></li><li><p><strong>《把血液找出来》</strong></p><ul><li>这是一个搞笑且荒诞的黑色幽默故事。</li><li>经历过严重车祸的我，全身失去了感觉，因此受了伤流血我也意识不到。一天早上起来我满身是血，次子进来看到我，发现我身上插了一把菜刀；</li><li>随行医生是一位不务正业，95岁高龄的老庸医，第二任妻子只有25岁比次子还小，盼望着我赶紧死去，她获得遗产，长子三十多岁，也是盼望着我死去，好获得遗产和公司 ，去还债。即使打电话呼叫了救护车，但仍需要半个小时的时间出租车才能来，那老庸医又忘记了我的血袋放到哪里了，于是在吵吵闹闹中大家都在找装有血袋的箱子，真是荒诞；</li><li>当我因为失血过多，快死去的时候，我看到了次子邪魅的笑容，我明白了是次子啥的我。</li><li>文章看起来简单幽默，但无处不充满了人性的凉薄，让人心酸。</li></ul></li><li><p><strong>《寒冷的森林中的小白屋》</strong></p><ul><li>这一篇我看起来是真的感到很不舒服，害怕且恶心，无法想象用杀掉的人的尸体所堆起来的房子；</li><li>故事中的我自由丧父丧母，被伯母收养，住在她家的马厩中；</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">马厩的墙壁下半部是石头堆砌而成，上半部则是木板。墙里的石头并不是方正切割的石块，而是直接将圆圆的石头随意堆起来，再用灰泥填满缝隙。我总是望着墙壁进入梦乡。在马厩里睡觉，如果不贴着角落睡，会被马踩死。我数着眼前石头的数目，每块石头的形状都不同，每块看起来都像是人脸，或像手臂、脚跟，有时候也像胸口或后颈。<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">伯母家有两个男孩子和一个女孩子，那对兄弟经常来马厩玩，哥哥会拿棍子打我，弟弟忍着笑，而我流着血。<br>最过分的一次是他们拿绳子绑住马，马发狂踩到我，我的脸于是凹了下去。两兄弟慌慌张张地逃走了，事后却装做什么都不知道。<br>伯母家的红发女孩有时会来马厩，我们会在马厩里聊上几句。她不像伯母或她的兄弟那样出手打我。红发女孩偶尔会带书来，留在马厩里便离去。是红发女孩教我识字的，我很快就能看懂书了。<br></code></pre></td></tr></table></figure><ul><li>伯母家的兄弟二人捉弄我，让马🐎把我的鼻子（文中没有直说，但是应该是这样的）给踩踏没了；但是伯母家的红发姑娘和我一起看书；</li><li>伯母家的孩子长大后，我就被遗忘在这个马厩中了；</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">那对兄弟长大之后，除了打猎需要时会过来牵马匹之外，再也不靠近马厩；红发女孩去了远方的寄宿学校，不再出现了。后来伯母也不拿剩饭来给我，伯父则将田地全部卖给了别人。<br></code></pre></td></tr></table></figure><ul><li>终于有一天，我离开了这个马厩，走入了森林中，打算在森林中建造一个屋子，但是没找到合适的石头，于是我把碰到的人杀了，作为建造房子的材料。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">我盖了一栋四四方方箱子般简单的屋子，屋墙以人堆成，完全没有缝隙。当中有男有女，有旅人也有村民。我将尸体搬进森林之后，便脱掉他们身上的衣服。他们光着身体，全是白色的。<br>有的人以躺着的姿势被封进墙里，有的维持坐着的姿势；有人以手抱膝，有人的手环上了别人的颈子。这墙壁并不算薄，因为担心只堆一层强度不够，我特别多堆了几人份的厚度，一些地方还加入木材作为支撑。小屋快要完成了。材料不够用时我就外出寻找建材。屋墙逐渐增高。建材是白色的，所以这是一栋小白屋。<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">环顾四周，尽是一张张紧靠着的人脸。成了屋墙的人体以复杂的姿势一个接一个堆着，不论哪一个都睁眼看着我。跟马厩的墙壁很像。墙里的女人垂着长发，遮住了堆在下方的人的脸孔。<br><br>墙里的人们以复杂的姿势相互交缠。一个男人弯着手肘，紧邻着的人则配合他手肘的弯度扭曲着身体；一个直立于地面的少年以头部支撑着他上方的男女。人们手脚复杂交缠的模样，宛如大量的蛇被聚集到一处痛苦翻搅着，而我在他们的环伺之中抱膝入睡。<br></code></pre></td></tr></table></figure><ul><li>有一天，一个小姑娘来找她的弟弟，在我的房子里找到了，并向用自己代替弟弟，让我把弟弟还回去;</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">我爸爸疼爱弟弟更胜于我，因为他总是露出很恐怖的表情打我。自从弟弟不见之后，爸爸一直很伤心，他原本很期待和妈妈还有弟弟一起吃饭。我妈妈现在人在国外出差，我想在她回来之前把弟弟带回家去。拜托你，把弟弟还给我，好不好？<br><br>把小男孩从墙壁抽出来的时候必须用东西撑住墙壁，少女瞬间便钻进原本埋着小男孩的地方了。被我当成墙壁建材的小男孩仍保持直立不动的姿势，直接倒在地上。少女以和弟弟一模一样的姿势，不偏不倚地嵌进原来的空隙里。她仍穿着衣服，在白色尸体之中那是唯一的颜色。<br></code></pre></td></tr></table></figure><ul><li>小女孩嵌入其中，终于一天被饿死了，我决定把姐弟俩还回去；</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">小男孩仍躺在小屋旁。那个地方晒得到太阳，尸体已经开始腐烂，一抱起他，尸身便轻柔地粉碎。我也想送少女回家，因为她是如此深爱着她的父母。<br>我毫不犹豫地将少女从墙里抽出来。我抓住她单薄的肩膀一扯，屋子便开始倾斜。在我抱着她的尸身踏出入口的瞬间，尸体堆成的白色屋子便崩塌了。<br></code></pre></td></tr></table></figure><ul><li>当我抱着装着姐弟俩尸体的水果箱子时，我看到姐弟俩的母亲回来了，结果发现她是当年的红发姑娘，是我的朋友，是我的恩人，而我却伤害了她的子女；</li><li>我感情崩溃，回到了她家的马厩中……</li></ul></li><li><p><strong>《衣橱》</strong></p><ul><li>这是一篇典型的推理小说，故事的精彩之处是，作者让我们相信了美纪是杀害龙司的凶手，并且以认定美纪是凶手的心态去看事情的发展，潜意识认为美纪所做的所有的事情都是在洗白自己的嫌疑；</li><li>故事最后的时候，美纪做出解释时，我们仍然认为是美纪在狡辩，美纪仍然是凶手，直到冬美和美纪打开衣橱时，才发现凶手并不是美纪，而是一直在打酱油的一郎；</li><li>其实作者并没有直接说明凶手是一郎，但是根据原文最后的一段，可以推测是凶手就是一郎（作者没有直说，但是我认为一郎仍有可能洗脱嫌疑）。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">于是她缓缓地拉开门，下一秒钟便和全身大汗、透过衣橱缝隙一直瞪大眼窥视外头的我对上了视线。妹妹与妻子两人的脸上失去了血色，惨白得宛如死人。<br></code></pre></td></tr></table></figure><ul><li>这部作品的另一个巧妙之处是将凶手成几乎完全在打酱油，整篇文章没有几处写到了凶手，这非常好的将嫌疑转嫁到美纪身上；</li><li>另外还有，读完才发现这本书是以第一人称写的，其中的“我”就是一郎，也就是凶手，这个人称的发现也是在最后才能看出来。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">于是她缓缓地拉开门，下一秒钟便和全身大汗、透过衣橱缝隙一直瞪大眼窥视外头的我对上了视线。妹妹与妻子两人的脸上失去了血色，惨白得宛如死人。<br></code></pre></td></tr></table></figure></li><li><p><strong>《神的咒语》</strong></p><ul><li>这部小说与之前的《动物园》那一篇比较相似，也是讲的主人公带着虚假的面具。因为自己不能达到理想的状态里的那个人，只能带着虚假的面孔面对着这个世界。</li></ul></li><li><p><strong>《在即将坠落的飞机中》</strong></p><ul><li>这篇也充满了黑色幽默，属于荒诞小说一类。</li><li>故事中的我是一位女性，少年时代被一个男性所强暴，但是他现在有自己的生活，我多方打听获得了他的地址，我要搭乘飞机前去毁掉他的生活；</li><li>飞机座位边上是一个三十多岁的男性销售员，郁郁不得志，老婆离自己而去，他搭乘飞机便要去东京他的妻子的娘家中，然后把自己安乐死，让妻子一家难堪；</li><li>但是这架飞机被劫持了，劫机者是郁郁不得志的年轻人，已经第五次被T大学拒绝了，他母亲给他灌输的思想是他必须要考到T大学，否则他自己就是个废物，在历经了五次拒绝后，他计划劫机撞向T大学的宿舍楼；</li><li>我想安安静静的在这场坠机中死去，推销员想完成最后的心愿，推销出去这个安乐死的药；</li><li>最后我买了他的药，注射之后却没有死去，因为这个药是假的；</li><li>在一系列的巧合下，我把劫机犯枪杀了，阻止了劫机，我从医院逃出，到强暴男的家里，打算杀掉他的女儿，让他痛苦，但是我最后还是没有这么做，就离开了。</li><li>额……其实这篇文章没怎么看懂，总之就是很荒诞……</li></ul></li><li><p><strong>《从前，在太阳西沉的公园里》</strong></p><ul><li>这篇文章实在是太短了，估计也就1000多字吧。</li><li>故事描写了是一个安静祥和的公园，其中有个沙坑，一天我独自想看看这个沙坑有多深，在我往里面伸胳膊的时候，摸到了头发，再往里面伸手时，一只手抓住了我，并在我手上写下了“让我出去”（看到这里真的吓我一跳）。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">沙坑深处，我紧紧握住的拳头被某种外力硬是扳了开来，接着掌心传来某人指尖的轻微触感，在掌心里顺着某种规则移动，我察觉那指尖似乎正在写字。<br>“让我出去”<br>沙坑里的某人在我的掌心上这么写。<br>于是我将左臂也伸进沙坑的深处，在抓住我右腕的某人的手背上，以指尖写了字。<br>“不行”<br>沙坑里的某人很遗憾似的，松开了我的右腕，我把两条手臂抽出来之后便回家去了。那次之后，我再也不靠近沙坑。后来那个公园进行改建大楼工程的时候，我还去看了一下沙坑，然而沙坑的深度并不足以埋任何东西。<br></code></pre></td></tr></table></figure><ul><li>这就是故事的最后了，就结束了😰</li></ul></li></ul><h1 id="《告白》"><a href="#《告白》" class="headerlink" title="《告白》"></a>《告白》</h1><p>时间：2021.07</p><p>关键词：【日本】凑佳苗&#x2F;悬疑&#x2F;推理长篇小说（电子书）</p><p>记录：</p><ul><li>这是一本情节比较简单的悬疑小说，推理部分并不多，结果很多都是在书中直接地给出，我觉得这本书更多的不是让读者感到悬疑感，而是感到一种心理的震撼</li><li>《告白》是一部探讨青少年犯罪问题的长篇推理小说。小说主要围绕对未成年人保护法的不合理之处展开，并通过对两个少年犯罪原因的拷问，质疑了当今日本的教育和青少年成长的社会环境因素！</li><li>小说总共分为六个部分：<ul><li>神职者<ul><li>是以森口悠子老师的角度展开，正文就是老师在课堂上讲话，因为这是这学期的最后一课，也是老师职业生涯的最后一课；</li><li>因为这所学校是全国中学生乳制品推广运动的示范学校，学生们每天都必须要喝奶；</li><li>老师的告别讲话主要说了：<ul><li>自己的为什么要当教师，明星老师”劝世鲜师“；</li><li>学校的指定的一项制度：男学生有问题让男老师解决，女学生有问题让女老师解决；</li><li>自己的家庭单亲母亲，有一个女儿，男朋友得了艾滋病没有选择结婚；</li><li>女儿经常来学校让一位老太太帮忙照顾；</li><li>女儿喜欢小绵兔；</li><li>青少年犯罪问题；</li><li>小女儿的葬礼；</li><li>女儿在学校泳池溺亡不是意外而是被班上的两个同学杀害的；</li><li>分别讲了这两位同学的干的事情；</li><li>最后说，”劝世鲜师“就是自己的男朋友，她抽取了他的血液加入到了这两个杀害自己女儿的同学的牛奶中了</li></ul></li><li>其实者第一部分基本上把所所有的事情都交代了，后文主要讲的就是，围绕这两个杀人凶手的前因后果</li></ul></li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">由于犯人未成年,照片和姓名都没有公布。媒体只是在残忍的作案方式,以及凭推测得出的少女内心阴暗上大做文章,关键的真相却不明不白地被人渐渐淡忘了。<br><br>该案的此类报道只不过是在某些孩子心中的阴暗处植入了这种变态的没有一点儿人味的猎奇的犯罪者,只不过是在煽动可悲的孩子们崇拜愚蠢的罪犯而已,难道不是吗?<br><br>一旦尝到了甜头,当一次制裁结束后,为了获得新的快感就会找寻下一个制裁对象吧。一开始的目的是要谴责罪大恶极之人,渐渐就会变成想方设法去制造能够制裁的对象了。<br><br></code></pre></td></tr></table></figure><ul><li>殉教者<ul><li>班长北原美月</li><li>森口悠子老师辞职后，接替者是叫做维特（良辉）的男老师，新老师不知道班上之前发生了什么事情；</li><li>直树这学期没有来学校；修哉若无其事的来到了学校；</li><li>同学们都欺负恐吓修哉，在班主任知道后，同学们以为有人告密，并认为是班长美月干的事情，所有班长美月也成了同学们的欺负对象；</li><li>维特老师和美月每周都要去直树家送学习材料；</li><li>修哉告诉班长美月，自己没有被感染艾滋病；班长美月私下里检测了二人的牛奶盒子，发现其中根本就没有艾滋病病毒；</li></ul></li><li>慈爱者<ul><li>下村直树的二姐</li><li>下村直树的二姐在上大学，一天突然被告知弟弟直树杀了自己的母亲；</li><li>这一部分的内容主要是下村直树母亲的日记，日记中记录了：<ul><li>森口悠子老师家访说自己的儿子是杀人凶手，但她完全不信，认为是森口老师加害自己的儿子；</li><li>把自己儿子不去上学，性情大变也怪罪森口悠子老师；</li><li>直树不去上学校，不让别动自己的东西，上厕所细致打扫，每天都在打扫卫生，却对个人卫生完全不注意；</li><li>直树的新班主任良辉的家访搞得直树越来越烦躁，且对母亲的态度不好，大吼大叫；</li><li>直树做出一些不可思议的事情；</li><li>日记最后，母亲想要杀掉儿子直树，并自杀！</li></ul></li><li>日记之后就没有了，因为弟弟直树已经杀死了母亲了</li><li>从母亲的日记中，我们看到的是母亲非常不正确的教育方式，对儿子过多的管教，让儿子的性格是软弱，过分依赖母亲</li></ul></li><li>求道者<ul><li>下村直树</li><li>这部分主要讲下村直树是怎样与渡边修哉决定伤害班主任森口悠子的女儿的和喝掉班主任加了病毒的牛奶后的状态；</li><li>这部分非常清晰地看到直树是一个如此软弱其及其自私的人</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">只要去了学校,就一定会受到班上同学的制裁。那些家伙一定会狠狠地欺负我。早晚有一天会被他们杀死。我不可能去那种地方。<br><br>每天早上醒来,首先因为今天自己还活着而感激流泪。<br><br>要是把艾滋病病毒传染给了爸妈该怎么办啊?而且如果他们比我先发病、死掉的话,我也活不下去了。<br><br>长头发和长指甲,以及越来越肮脏的身体,就是我活着的证明。遮住眼睛和耳朵的头发也为我遮住了表情,让我不受那些家伙的侵害,并且告诉我,我还活着。<br><br>我最害怕的就是被赶出这个家。对我而言,那跟死了没两样。<br></code></pre></td></tr></table></figure><ul><li>信奉者<ul><li>渡边修哉</li><li>渡边修哉同学是一个及其聪明的同学，但是他看不起所有同学，和下村直树交往也只是为了利用他去犯罪；</li><li>修哉的家庭也是非常不幸福，母亲是高材生，因为生下他没法重新去搞研究，但是最后母亲抛弃了他，去搞研究了；</li><li>修哉所做的一切发明都是想引起母亲的注意力，让母亲找自己；</li><li>但是修哉发现，犯罪的青少年往往会被大肆报道，于是他决定犯罪，杀害班主任森口悠子的女儿，已让母亲重新回来；</li><li>班主任森口悠子的女儿没有被他的发明杀害，而是被下村扔到了泳池里淹死的，班主任因为未成年犯罪不会被追究而没有报警，所有修哉犯罪引起母亲注意的计划失败了；</li><li>因为喝掉了有病毒的牛奶，修哉想自己的病让母亲回来，但是自己并没有感染艾滋病；</li><li>修哉在于班长没有交往时，因为班长说自己恋母癖，将班长杀掉了；</li><li>最后，修哉决定去母亲的学校的研究室找母亲，没有见到母亲，但是知道了母亲已经结婚，并且将要生孩子了，修哉的心凉了，母亲把自己真的抛弃了；</li><li>最后，修哉决定在开学讲话上，引爆炸弹，炸死学校的人；</li></ul></li><li>传道者<ul><li>森口悠子</li><li>这一部分是修哉引爆炸弹，但是炸弹没有爆炸，班主任森口悠子给修哉打电话的内容；</li><li>班主任虽然离开了，但是一直关注着两位学生杀人犯，并且新班主任良辉是自己男朋友”劝世鲜师“的同学，在于良辉写信交流时，潜移默化地引导良辉老师做了一些事情，包括每周家访下村直树，班会该讲什么话等；</li><li>直树最后杀掉了母亲，自己也精神不正常了，达成了班主任的复仇计划；</li><li>森口也解释了自己本来已经把血液放到牛奶中了，但是男朋友”劝世鲜师“觉得，虽然自己的女儿被他们杀了，但是还是不应该这样报复他们，于是把牛奶换成新的了，这就是为什么班长美月没有在牛奶盒中检测道病毒；</li><li>森口也解释了为什么炸弹没有爆炸，因为被她移除了，移到了修哉母亲那里，所有修哉刚刚引爆炸弹实际上是炸死了自己的母亲，森口完成了最后的复仇！</li></ul></li><li>这部小说的分为好几个部分，每个部分都是每个人物的独白，这种形式非常像《罗生门》，但《罗生门》中每个人物都是美化自己，将故事说的有利于自己的方向，结果是每个人说的故事最后都是不一样的，但是《告白》中完全展式出来了每个角色最完整的内心，展示出了人物最根本的特征！</li></ul><p>译者最后对小说总结得很全面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">人性的善恶转变似乎只在一念之间，但绝不是偶然的。小说的结局虽然出人意料，却又在情理之中。可以说，小说对人性的刻画是全面而透彻的，不但通过少年犯罪案件引发的复仇深入剖析了社会弊端、人性丑恶，还不惜笔墨地描绘了人性美好的一面。作者通过写作这样一个反面的教训试图告诉人们，面对青春期的躁动与无知，趋善避恶，为青少年的健康成长营造良好的社会环境，不仅仅要依靠法律，家庭、教师乃至全社会都应承担起各自的责任。青少年犯罪问题犹如随时可能爆炸的定时炸弹，如果教育引导得法，可以避免罪行发生。反之，如果不顾法律，以恶制恶，只能导致恶性循环。《告白》尽管是虚构小说，却反映了非常现实的社会问题。本书通过深刻地剖析犯罪的动机和原因，反映了在物质文明高度发展的现代社会，亲情的缺失、精神的空虚造成了一个个不可挽回的悲剧，给人们以深刻的警示和启迪。<br></code></pre></td></tr></table></figure><h1 id="《白夜行》"><a href="#《白夜行》" class="headerlink" title="《白夜行》"></a>《白夜行》</h1><p>时间：2021.07</p><p>关键词：【日本】东野圭吾&#x2F;悬疑&#x2F;推理长篇小说（电子书）</p><p>记录：</p><ul><li><p>东野圭吾的作品在学生群体中应该是比较受欢迎的，很多同学也看过很多东野圭吾的作品，但是这本书是我第一次看</p></li><li><p>之前看的书都是读完之后再来更新内容，但是这本书太长了，读的时候也有不同的推理结果，于是一下内容是边读边写的</p></li><li><p>第一章</p><ul><li>讲的是桐原洋介被杀案，调查案件的警察是笹垣润三，出场的人物有桐原一家，桐原家当铺店长松浦勇，同时根据对桐原洋介的深入调查，出现了几个关键的人物——西本一家，第一章以西本雪穗发现母亲西本文代煤气中毒死亡结束，西本文代的死亡被认定为是意外身亡，(但事实是不是意外，我读到这里认为可能没有那么简单！)</li><li>第一章中我印象比较深刻的是对桐原亮司和西本雪穗的描写，我觉得这两个小孩或许是真正的主角（最初，我以为主角是警察笹垣润三，故事是围绕警察断案展开的，但是往后读了一点，发现这是不对的）<ul><li>判定主角是一男一女两个小孩的另一个证据是书的封面是一男一女两个牵手的小孩，所有主角是亮司和雪穗应该不会差！</li></ul></li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">女孩在和室背靠着壁橱坐下，开始看书。书的封底贴着标签，看来是在图书馆借的。<br>“你在看什么？”古贺向她搭话。<br>女孩默默地出示书的封面，古贺把脸凑过去看。<br>“哦……”发出了佩服的声音，“看这么难的书啊。”<br>“什么书？”笹垣问古贺。<br>“《飘》。”<br>“咦？”这下换笹垣惊讶了，“那个我看过电影。”<br><br>笹垣他们对话的时候，女孩头也不抬地继续看书，可能认为那是愚蠢的大人在讲废话消磨时间。或许古贺也感觉到这一点，便没再开口。他双手好像闲得发慌，以指尖敲餐桌，发出笃笃的声响。女孩抬起头来，一脸不悦地注视，他不得不停止手指的动作。<br><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正当笹垣往前探看时，眼角扫到楼梯的门无声地开了，他往那边看去，心头一震。<br>门后站着一个男孩，十岁左右，穿着长袖运动衫、牛仔裤，身材细瘦。<br>笹垣心头一震，并不是因为没有听到男孩下楼的声音，而是在眼神交会的一刹那，为男孩眼里蕴含的阴沉黑暗所冲击。<br></code></pre></td></tr></table></figure><ul><li>还有一个我认为比较重要的东西是少扣了两节的腰带：因为小说中基本推断出来不是因为吃饱了饭而松开的，那么肯定有更重要的原因！！！</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“我看，是被害人到了现场后，做了需要解开长裤皮带的事。然后系回来的时候放了两扣。不过，系回来的是本人还是凶手就不知道了。”<br></code></pre></td></tr></table></figure><ul><li>还有一个是永远洋介的钱去哪儿了，为什么桐原洋介在一个烂尾楼遇害，关于桐原洋介的事情还要很多未解之谜</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">听到这个问题，女职员略显迟疑，可能是难以判断客户的机密可以透露到什么程度。但是，最后她还是开口了：“他提前取出了定期存款。”“金额有多少？”她再度犹豫，舔了舔嘴唇，瞄一眼在远处的上司后，小声说：“一百万元整。”<br></code></pre></td></tr></table></figure><ul><li><p>第二章</p><ul><li>第二章写的是雪穗和亮司初中的时候，雪穗（小学在大江小学）在清华女子学园初中部，亮司在大江初中；</li><li>大江初中：秋吉雄一，菊池文彦，牟田俊，桐原亮司</li><li>清华初中：唐泽雪穗（西本雪穗母亲去世后没领养，改名为唐泽雪穗），川岛江利子，藤村都子</li><li>大江初中的秋吉雄一来清华初中拍唐泽雪穗的照片卖给牟田俊，唐泽雪穗对此视而不见；</li><li>菊池文彦和秋吉雄一用秋吉雄一的叔叔拍的一张照片，照片上拍到了桐原弥生子和松浦勇，来威胁桐原亮司，并打算查案；</li><li>有一天牟田俊要求秋吉雄一拍藤村都子的照片，虽然没有拍到，但是当天晚上，唐泽雪穗和川岛江利子发现藤村都子被人脱去衣服扔到一个仓库里，但是没有被强暴；</li><li>秋吉雄一，菊池文彦被作为嫌疑人接受警方调查，但最后均洗脱了嫌疑；</li><li>猜测<ul><li>看完这一章并没有什么明显的结果，对于第一章中的桐原洋介案件只是提到了一点</li><li>第一章中出现的人物只有亮司和雪穗在第二章中出现次数比较多，进一步证实，故事绝对是围着这两人展开的</li></ul></li></ul></li><li><p>第三章</p><ul><li><p>高中时期：亮司：集文管高中</p></li><li><p>第三章中没有出现雪穗</p></li><li><p>第三章主要讲述亮司作为皮条客给少妇找高中帅气男生的故事，其中的重要人物是园村友彦和西口奈美江，这两人可能在后文中还会出现；</p></li><li><p>园村友彦在于少妇做爱时，少妇暴毙，亮司给他洗清了嫌疑；</p><ul><li>亮司给园村友彦洗清嫌疑时，出现了一个女性来冒充已经死去的花冈夕子，这个女性是谁，文中没有明说，反正不是西口奈美江；</li><li>猜测<ul><li>男扮女装</li><li>雪穗</li></ul></li></ul></li><li><p>最后，亮司决定开一家电脑店，出售游戏程序，程序应该不是亮司自己写的，怎么来的文中没有明说，但应该算是一个关键点！</p></li><li><p>第四章</p><ul><li>高中时期：雪穗：清华高中</li><li>这一章讲的是雪穗高二时数学课有点弱，找了一个大学生家教补习数学课；</li><li>雪穗长得太好看了，以至于家教对雪穗有点感情<ul><li>（前面的剧情也有说，不动产管理处的工作人员对雪穗着迷，初中部拍摄雪穗的照片，高中时家教对雪穗有意思，我猜测这对小说发展应该有作用）</li><li>家教像多了解一下雪穗，查到了雪穗的身世</li></ul></li><li>还有一个分支剧情，家教正晴的项目组做了一个游戏，但这个游戏被一个公司正在出售，这个公司正是亮司的电脑公司；</li><li>程序是怎么泄露的整个项目组都说了一遍见过这个项目的所以人，没有泄露的可能，唯独家教正晴没有说出雪穗看过这个游戏<ul><li>我觉得板上钉钉了，绝对是雪穗偷偷复制了正晴的程序，给了亮司去售卖</li><li>这决定证明了亮司和雪穗不是那么简单，两人之间绝对有什么联系</li><li>这么说第三章中出现假冒夕子的女性是雪穗的可能更大了</li></ul></li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">略带棕色的长发遮住了雪穗的侧脸。她用左手中指把发丝挽在耳后，但仍遗漏了几根。正晴非常喜欢她这个拨头发的动作，看着她雪白光滑的脸颊，便会忍不住生出一股想吻她的冲动，从第一次上课便是如此。<br></code></pre></td></tr></table></figure><ul><li></li><li>还要一个令我震惊的事情，铃铛！！！！<ul><li>在家教正晴老师调查雪穗身世时，对于雪穗母亲死亡是不是意外想了很久，甚至正晴老师都想了是雪穗杀害了母亲</li><li>文中提到，雪穗母亲西本文代本身是个很忧郁的人，而雪穗虽然在一所烂的小学——大江小学，但是其言行举止非常不一般，这个原因在这一章做了一定的解释，雪穗在母亲生前也多次来唐泽礼子（现在的养母）的家中学习茶道花道，学习礼子的说话，雪穗说自己不喜欢自己的口音之类的话</li><li>所有真的有可能如正晴说的那样，是雪穗为了跟随礼子，而杀害了母亲</li></ul></li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“那时候要是我带了钥匙就好了。那我就不用去找不动产管理员，就可以早点发现了。”<br>“运气真是不好啊。”<br>“所以，我现在一定会把家里的钥匙带在身上。看，就像这样。”雪穗站起来，从挂在衣架上的制服的口袋里拿出钥匙给正晴看。<br>“好旧的钥匙圈啊。”正晴看了之后说。<br>“是呀。这个，那时候也串了家里的钥匙。可是偏偏就在那一天，我放在家里忘了带。”说着，她把钥匙放回口袋。<br>钥匙圈上的小铃铛发出了叮当的声响。<br><br>第一章中雪穗去找不动产管理员时<br><br>“想请您帮忙开门。”<br>“开门？”<br>“我没有钥匙，回不了家，我没有带钥匙。”<br><br><br>到了吉田公寓，田川站在一〇三室门前，先敲了敲门，然后叫“西本太太”，但无人回应。“你妈妈好像还没回来。”他回头对雪穗说。她轻轻点头，身上又传出了叮当的铃声。<br><br></code></pre></td></tr></table></figure><ul><li>第五章<ul><li>大学时期</li><li>清华大学：川岛江利子，唐泽雪穗，仓桥香苗</li><li>永明大学：筱冢一成</li><li>这一章围绕的是雪穗在社交舞蹈社而展开的</li><li>需要注意的是，这一章出现了第二章（初中时期）类似的案件，川岛江利子被人在卡车车厢脱光并拍了裸照，并把裸照发给了江利子的男朋友筱冢一成和川岛江利子自己，需要注意的是川岛江利子也没有被强暴，如此的相似，不能不让人联想；</li><li>猜测<ul><li>这两件事有雪穗参与，很可能亮司也参与其中</li><li>回忆一下第二章时，事件发生之前发生过什么事情——秋吉雄一没有拍雪穗，而是去拍了藤村都子；</li><li>这一章，川岛江利子被筱冢一成看上了，筱冢一成精心打扮川岛江利子，二人成为情侣，并且川岛江利子成为人群中的焦点，被很多男生喜欢；<ul><li>需要补充的是：川岛江利子之前就像是绿叶一样衬托着雪穗，川岛江利子什么东西都听雪穗的；</li></ul></li><li>第一件事情：拍照片的人不拍雪穗了，去拍藤村都子了，雪穗失去了焦点；</li><li>第二件事情：川岛江利子被精心打扮，成为焦点，雪穗不是焦点了；</li><li>两件事情是如此的相似，我大胆推测，这两件事情雪穗绝对脱不了干系！！！</li></ul></li><li>川岛江利子被侵害案件中，筱冢一成接到一通奇怪的跟仓桥香苗要钱的电话，这通电话直接将案件的嫌疑人指向了仓桥香苗！！！</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">清华有个姓仓桥的女人吧，仓桥香苗？”<br>“有是有，那又怎么样？”配合对方，一成讲起话来也不再客气。<br>“你去告诉那女人，叫她快点付钱。”<br>“钱？”<br>&quot;剩下的钱。事情我都给她办好了，当然要跟她收剩下的报酬。讲好的，订金十二万，尾款十三万。叫她赶快付钱，反正社费是她在管吧。”<br>“付什么钱？什么事情办好了？”<br>“这就不能告诉你了。”<br>“既然这样，要我传话不是很奇怪吗？”<br>对方低声笑了。“一点都不奇怪，由你来传话最有效果。”<br>“什么意思？”<br>“你说呢？”电话挂了。<br>一成只好放下听筒。刚上了年纪的门卫一脸惊讶，一成立刻离开办公室。<br>订金十二万，尾款十三万，一共二十五万……仓桥香苗付这些钱，究竟要那个人做什么？照电话里的声音听起来，那男子应非善类。<br>他说由一成传话效果最好，这句话也令人生疑。一<br>成想稍后再打电话问香苗，但总觉得百般不情愿。分手后，他们再也没交谈过，而且他现在满脑子都是江利子。<br></code></pre></td></tr></table></figure><p>- </p><ul><li>还有一个需要注意的事情——筱冢一成认为雪穗不简单，对雪穗心存戒心！！</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是他第一次正面看到唐泽雪穗，真是一张五官端正细致的面孔——他留下了这样的印象。<br>然而，当时，他对她猫咪般的双眼还产生了另一种感觉。现在回想起来，他发现可能就是因为这个感觉，才让他认为她不是一般的名门闺秀。她的眼神里有一种微妙得难以言喻的刺。但那并不是社交舞社社长无视她的存在，只顾和朋友讲话而自尊受伤的样子。那双眼睛里栖息的光并不属于那种类型。<br>那是更危险的光——这才是一成的感觉，可以说是隐含了卑劣下流的光。他认为真正的名门闺秀，眼神里不应栖息着那样的光。<br></code></pre></td></tr></table></figure><p>- </p><ul><li>新闻报道引出了第六章的内容</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这时，电视里传来新闻播报员的声音。“银行发生了盗领事件。存款人在毫不知情的状况下，户头遭到盗领。受害者是东京都内的上班族，本月十日到银行柜台提领存款时，发现应有两百万元左右的余额变成零。调查结果发现，存款是于三协银行府中分行由银行卡分七次提领，最后一次提款是四月二十二日。被害人是在银行推广下，于一九七九年办理银行卡，但卡片一直放在办公室的办公桌内，从未使用。警方研判极有可能是银行卡遭到伪造，现正展开调——”<br></code></pre></td></tr></table></figure><ul><li><p>第六章</p><ul><li><p>亮司派有彦男扮女装去银行取钱，用的银行卡应该是复制来的卡，提取了20万；</p><ul><li>这里出现了男扮女装，所以说夕子暴毙之后，有人假扮她有也可能是男扮女装，也有可能确实是雪穗，这个暂时推测不出来</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“十一点？”友彦歪着头，“不对，怎么可能……”<br>“服务生见到她了。”奈美江说。<br>“服务生？”<br>“听说有女人打电话给客房服务台，说浴室没有洗发精，要他们送过去。服务生送过去的时候，是花冈夕子来拿的。”<br>“不对，这太奇怪了。我离开酒店的时候……”友彦没继续往下说，因为奈美江开始摇头：“这是服务生说的，他在十一点左右把洗发精交给女性客人。那个房间的女性客人，不就是花冈夕子吗？”<br>原来是有人假扮花冈夕子。那天，夕子戴着很大的太阳镜。只要梳类似的发型，再戴上那副眼镜，要骗过服务生应该不难。<br>那么，是谁冒充花冈夕子的呢？<br></code></pre></td></tr></table></figure><ul><li>第三章的这段对话中，可以推测是假扮夕子的人说过话，但是第六章中男扮女装不能说话，且不能直面别人，所有更有可能是雪穗假扮了夕子！</li></ul></li><li><p>有彦在读信和大学工学院电机系，除了电机系以外的课，其他的课都在认真上，因为亮司这样要求他，亮司没有继续升学，因为他自己说没有钱；</p></li><li><p>这一章讲了亮司继续售卖游戏卡碟赚钱已经行不通了，亮司后和有彦着手破解银行卡；</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">拿到这台二手编码器不久，桐原伪造了一张银行卡。友彦并不知道原卡的持有人是谁，因为那张卡停留在桐原手边只有几个小时。桐原似乎用那张伪卡分两次提了二十几万元。惊人的是他竟然从磁卡记载的数据中破解了密码。<br></code></pre></td></tr></table></figure><ul><li><p>这个分两次取了二十万很有意思，并且这张卡只在桐原手里几个小时，这很难不让人联想到舞蹈社的银行卡，因为雪穗参与过舞蹈社的财务整理问题；</p></li><li><p>在整理完财务后，雪穗说把这张卡交给仓桥香苗，在此之前雪穗很可能已经会把这张卡给了亮司；</p></li><li><p>如果这样说的话，川岛江利子被侵害，仓桥香苗被索要二十万（定金和尾款）很可能就是雪穗和亮司策划的；</p></li><li><p>那么初中时代的藤村都子被侵害案件，也是二人策划的，亮司拿到了菊池文彦钱包上的挂件放到了被侵害的现场，把嫌疑转移到他身上了，因为菊池文彦和秋吉雄一之前用照片威胁过亮司，并且之后菊池文彦的照片不见了，至于去哪儿了，暂时未知！</p></li><li><p>本章还有一件事是西口奈美江被杀</p><ul><li><p>西口的流氓男友榎本宏利用她的职务之便帮他挪用银行钱款，被发现后，银行和榎本宏都在追查她，她决定逃跑；</p></li><li><p>亮司和有彦协助她逃跑，躲到了名古屋酒店，但是不久就被杀害了</p></li><li><p>被杀害之后，卡里的钱被全部转走，但是钱最后去哪儿了呢？？</p></li><li><p>在奈美江出逃是，亮司给了奈美江乔装打扮用的东西，并且说让她取钱的时候带上</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">友彦也从旁边探头去看，袋子里是卷度很夸张的女用假发、太阳镜和口罩。<br>款项确实是奈美江本人用卡领取的，因为自动取款机的监控设备拍到一个乔装过的女人，提款时使用的假发、太阳镜和口罩已于她的行李中找到。<br></code></pre></td></tr></table></figure><ul><li>奈美江被取走的钱我感觉不是她自己取的，很有可能是亮司取的，人也是亮司杀害的！</li></ul></li></ul></li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">桐原不会原谅犯同样错误的笨蛋，这一点他十分清楚。<br><br><br>“这件事我很久以前跟亮说过。我想，这次他一定很受不了我。”奈美江拿起放在桌上的打火机，点着香烟。<br>“为什么？”<br>“因为我重蹈覆辙，亮最讨厌别人这样，不是吗？”<br><br><br>桐原没有任何回应，反而问他：“榎本的事你听说了吗？”<br>“嗯。”<br>“那女人很傻吧？”<br>“咦……”<br>“榎本从一开始就是故意接近奈美江，想必是打算利用她在银行里的职位骗钱。她出车祸被流氓找麻烦，肯定是榎本一手设计的。连这么简单的手法都没发现，她脑袋有病啊。那女人以前就是这样，一遇到男人就栽进去，半点判断力都不剩。”<br>友彦无可反驳，只有猛吞口水，但胃好像吞了铅块般沉重。他心里完全没有桐原这种想法。那天，友彦提早回家，等着奈美江的电话。<br></code></pre></td></tr></table></figure><ul><li><p>第七章</p><ul><li><p>应该是雪穗毕业之后的时间点</p></li><li><p>这一章出现了两个新人物：</p><ul><li>高宫诚<ul><li>就职于东西电装东京总公司专利部</li><li>永明大学毕业，曾担任舞蹈社副社长</li><li>在舞蹈社与雪穗恋爱，因为雪穗之前怀孕并堕胎了，诚开始考虑与雪穗的婚姻问题，现在即将与雪穗结婚</li><li>但在结婚之前遇到了三泽千都留，并且喜欢上了她，对于是不是结婚很迷茫</li></ul></li><li>三泽千都留<ul><li>东西电装的派遣员工</li><li>喜欢高宫诚，但是因为他即将结婚了，没有说出来</li></ul></li></ul></li><li><p>这一章的前部分注意就是介绍这两人的基本情况，高宫诚即将与雪穗结婚，三泽千都留在东电工作完成后打算回老家札幌；两人彼此都有感觉，但是没有说出来</p></li><li><p>在高宫诚与唐泽雪穗结婚前夕，高宫诚决定去找三泽千都留去表白</p></li><li><p>高宫诚先于三泽千都留到达了酒店，一直等待也没有等来三泽千都留，因为三泽千都留决定取消预约了</p><ul><li>三泽千都留到达预定酒店时有一位警察说这个酒店有犯罪嫌疑人，警察正在安排监视，但是因为房间都被团体预约了，所以拜托三泽千都留让出她的房间，警察会安排三泽千都留到另一家酒店</li></ul></li><li><p>高宫诚在酒店读报纸的时候，发现有客人没有预约，直接来前台现定的房间，所以他认为没有团体预约；</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">原来没有预约，空房也很多啊，诚想。今晚这里似乎没有团体客人。<br></code></pre></td></tr></table></figure></li><li><p>高宫诚在等待的时候，看到了报纸上的一则新闻</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">即使如此，仍有一则报道引起了他的兴趣，内容与窃听有关。<br>自去年起，共产党成员遭警方窃听事件频传。为此，各界对维护公共安全的做法议论纷纷。<br>但是，诚关心的并不是这类政治议题，他在意的是发现窃听的过程。<br>电话噪声增多和音量变小，是促使电话所有人委托NTT（日本电信电话公司）调查的原因。<br>我家应该没问题吧，他想，他的电话也出现了报道中描述的情形。<br>只不过，他实在想不出窃听他的电话有什么用处。<br></code></pre></td></tr></table></figure><ul><li><p>虽然诚没有意识到自己的电话的问题，但是我大胆猜测，诚一定被监听了，且安排的人是雪穗！！！‘</p><ul><li>雪穗非常聪明，她不会看不出诚最近心不在焉的</li><li>在高宫诚与筱冢一成计划时，雪穗突然拜访，并且突然出现在他的门前听到了他的讲话，还说一些理由让高宫诚与自己逛街，这些绝对是雪穗安排的；</li><li>按照之前的章节的编排推测<ul><li>第一章出现了雪穗和亮司</li><li>第二章出现了雪穗和亮司</li><li>第三章只有亮司，但是那个冒充夕子的女的极大的可能是雪穗</li><li>第四章只有雪穗，但是正晴的程序应该是被雪穗复制的然后给了亮司</li><li>第五章只有雪穗，但是江利子被侵害很大可能有亮司的参与</li><li>第六章只有亮司，但是我猜测奈美江的钱被取走可能是雪穗（猜测，把握不是很大）</li><li>第七章只有雪穗，但是凭空出现的警察极有可能是亮司（猜测，有一点点把握）</li></ul></li><li>所以，雪穗与高宫诚结婚绝对是雪穗在一手操控着（我基于以上推测出的）！！！<ul><li>正如筱冢一成所想的那样，雪穗真的不简单；</li></ul></li></ul></li></ul></li></ul></li><li><p>第八章</p><ul><li><p>介绍了亮司电脑店的情况，出现了新的任务中岛弘惠，是有彦的女朋友，中岛弘惠与有彦恋爱，两年前中岛弘惠怀孕堕胎，有彦为了时刻提醒自己时刻把验孕器放在钱包里，这个验孕器被亮司借走过几天！</p><ul><li><p>这自然而然地让人想到，两年前，雪穗用验孕棒检测出怀疑了，所以亮司一定时把有彦女朋友的验孕棒借给了雪穗，然后雪穗给高宫诚看过，并告诉他怀孕了，自己回去堕胎！！！</p></li><li><p>所以正如上一章所猜想的，雪穗与高宫诚的婚姻是雪穗在操控着！！</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">友彦问他要做什么，他说想拿去给一个人看，没有多说什么。归还时，桐原带着别有含意的冷笑，说：“男人真好应付，一听到怀孕，就举双手投降。”<br></code></pre></td></tr></table></figure></li></ul></li><li><p>有彦一开始就很崇拜亮司，但是对他的了解很少，他总结了亮司之前干过的事情，其中就有：窃听！！！！与上一章联系上了！大胆猜测应该是雪穗让亮司去窃听高宫诚!</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">以前，桐原热衷伪造银行卡，并亲身用伪卡盗取过别人的钱，友彦也帮过他的忙。虽然不知道桐原靠那些赚了多少，但可以肯定，绝对不止一两百万。<br>不久之前，桐原热衷窃听。友彦并不知道他是受谁之托、窃听谁的电话，但他曾几度找友彦讨论有效的方法。<br></code></pre></td></tr></table></figure></li><li><p>亮司的电脑店一度濒临关闭，一个叫金城的人让亮司做一款高尔夫游戏，实际上是盗版游戏，才让店没有破产</p></li><li><p>金城让亮司盗版超级马里奥游戏，但是亮司拒绝了</p></li><li><p>松浦勇来店里找亮司了，亮司见到他的表情，表示亮司可能不愿意见到他；</p></li><li><p>松浦勇是金城找来说服亮司帮他售卖盗版超级马里奥的；</p></li><li><p>松浦勇和有彦的对话很有玄机！我<strong>大胆猜测</strong>一波：<strong>桐原亮司杀死的自己的父亲桐原洋介</strong></p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“哦……”友彦想，简直就像推理小说。“桐原那时怎么样？”<br>“亮啊，那小子是被害人的儿子，社会都很同情他。命案发生的时候，我们说他跟我和他妈妈在一起。”<br>“你们说？”这种说法引起了友彦的注意，“什么意思？”<br>“没什么。”松浦露出泛黄的牙齿，“我问你，亮是怎么跟你说我的？只说我是以前他们家雇用的人吗？”<br>“怎么说……他说您是他的恩人，说是您养活了他和他妈妈。”<br>是吗，恩人？”松浦耸耸肩，“很好，我的确算是他的恩人，所以他在我面前抬不起头来。”<br></code></pre></td></tr></table></figure><ul><li><p>桐原说：“我的人生就像在白夜里走路。”桐原说的这句话解释了这本书为什么叫做《白夜行》，但是“白夜”是什么，还不得知；</p></li><li><p>桐原剪纸，剪出来的形状就是书的封面图，但是我绝对封面上的小孩不应该指的是亮司和雪穗吗？</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">纸张已经变成一个男孩与一个女孩手牵手的图案。男孩戴着帽子，女孩头上系着大大的蝴蝶结，非常精致。<br>“真了不起，”友彦说，“我都不知道你还有这项本领。”<br>“就当是预祝你们结婚！”<br>“谢谢！”弘惠道了谢，小心翼翼地把剪纸放在旁边的玻璃柜上。<br></code></pre></td></tr></table></figure><ul><li><p>亮司决定把电脑店交给有彦和弘惠全权打理；</p></li><li><p>“盗版”马里奥出事了，桐原突然离开了电脑店，也搬家了，有彦联系不到亮司了；</p></li><li><p>有警察来找有彦文化，这个警察就是第一章出现过的笹垣润三，笹垣润三还知道墙上挂的小孩的剪纸是亮司剪的；</p></li><li><p>还有一个需要注意的事情是：亮司为什么一直保存着从家里拿来的剪刀✂，剪纸也是用这把剪刀✂剪出来的；有彦看亮司的抽屉时发现剪刀✂消失了；再结合桐原洋介是被刺死的，如果按照之前的猜测，是亮司杀了父亲，那么这把剪刀✂很可能就是凶器！</p></li><li><p>这一章看似没有出现雪穗，但是如果之前的猜测（假怀孕，窃听）都是正确的话，这一章就出现了雪穗</p></li></ul></li><li><p>第九章</p><ul><li><p>东西电装公司在做一款软件,但是这软件被一家东京的公司提前发布了,并且发布的软件与东电做的软件一模一样</p></li><li><p>高宫诚与雪穗的婚后生活令高宫诚不满,结婚后雪穗当家庭主妇,之后雪穗搞起了股票,但是被诚呵责了;之后,雪穗一个朋友邀请雪穗一起经营服装店,并让高宫诚买下了那家店.因为雪穗忙于工作,照顾不了家,让高宫诚很不满;</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">高尔夫教室？”诚躺在加大的单人床上，看着妻子映在梳妆镜里的脸问。从新婚起，他们就分床睡，雪穗睡单人床。<br></code></pre></td></tr></table></figure><ul><li><p>雪穗提议和高宫诚一起去学习高尔夫,但是雪穗又突然说工作忙,不去了,高宫诚在学习高尔夫时再一次遇到了三泽千都留,并与三泽千都留交往越来越深;</p></li><li><p>东电公司开内部会议,讨论软件泄露的原因,可能是从公司内部泄露的,高宫诚想起自己的用户名和密码就写在自己的工作证后面;</p></li><li><p>一日,雪穗将要去意大利进货,并让滨本夏美在家里住下,明早一早一起去意大利;</p></li><li><p>那一晚上,雪穗与高宫诚吵架,高宫诚喝酒;早上起来的时候,雪穗说高宫诚晚上打了自己;</p></li><li><p>高宫诚与三泽千都留交往更深,高宫诚说了结婚前一晚上的事情,并与三泽千都留开放;</p></li><li><p>雪穗和律师说她要和高宫诚离婚,因为高宫诚喜欢上了别的女人,并且家暴,家暴的见证人是那晚上住在家里的<strong>滨本夏美</strong>;</p></li><li><p>猜测</p><ul><li>很明显,高宫诚与三泽千都留重新见面是雪穗安排的巧合;雪穗和高宫诚的婚姻完全掌握在雪穗的手中;</li><li>雪穗被高宫诚家暴,存疑,因为眼睛带着眼罩,高宫诚也不知道自己究竟打没打雪穗;</li><li>雪穗被高宫诚家暴时恰好<strong>滨本夏美</strong>住在她家,作为见证人,过于巧合!!!</li><li>东电公司软件泄露估计就是雪穗通过高宫诚复制到的软件,然后给了桐原亮司!</li></ul></li></ul></li><li><p>第十章</p><ul><li>今枝直巳在高尔夫球场遇到了高宫诚;金枝曾经调查东电公司软件被盗窃案件;</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">今枝想，高尔夫球教室果然没有白上。是的，高宫曾经在这里的高尔夫球教室上课，还和此处的女学员交往。稍作思索，今枝便想起了那名女学员的名字——三泽千都留。<br></code></pre></td></tr></table></figure><ul><li><p>今枝直巳调查东电公司软件被盗窃案件时,可疑人物时秋吉雄一(大江初中,搞摄影的)</p></li><li><p>今枝直巳发现秋吉雄一几乎不和人联系,只有听到寻呼时出门打公共电话,反侦察能力强;</p></li><li><p>今枝直巳在监控秋吉雄一时发现,秋吉雄一找私家侦探,之后秋吉雄一在跟踪三泽千都留,见到三泽千都留与高宫诚约会后便结束了跟踪;今枝直巳没有找到软件盗版的信息,只发现了了高宫诚婚内出轨三泽千都留,之后结束了调查软件盗版事件;</p></li><li><p>今枝直巳在高尔夫球场遇到高宫诚并且发现了三泽千都留已经成了高宫诚的妻子,且怀孕了;</p></li><li><p>筱冢康晴和筱冢一成去了雪穗的服装店，然后爱上了雪穗，即使雪穗迟疑不决；因为筱冢一成认为雪穗有问题，找侦探今枝直巳调查雪穗；筱冢一成认为雪穗的钱有问题；筱冢一成察觉出来了每一个与雪穗有密切关系的人都遭遇了不幸：高宫诚、川岛江利子、筱冢一成他自己；</p></li><li><p>今枝直巳去雪穗的服装店与雪穗进行了第一次正面交锋，从言语中明显地看出来雪穗应该已经识破了今枝直巳</p><ul><li>今枝直巳带的表；</li><li>衣服与人的气质</li></ul></li><li><p>今枝直巳找到了雪穗的同学元冈邦子，从那里获得了一些流言，放出流言的人和雪穗关系很不好，但是之后放出流言的人被侵害了，雪穗和同学发现了她并照顾她，关系变得好了起来；</p><ul><li>元冈邦子没有直接告诉今枝直巳放出流言的人是谁，但是从前文看，整个人是藤村都子；</li><li>按照前面的推测，藤村都子受侵害与雪穗有关；</li></ul></li><li><p>今枝直巳找到了川岛江利子调查雪穗，但是谈到藤村都子时，川岛江利子拒绝了；</p><ul><li>川岛江利子很早就有了怀疑雪穗的想法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">不知从什么时候起，江利子心里便暗藏着一个想象。一开始，只是一闪而过的念头，后来便慢慢发展成一个故事。然而，这件事她绝对不能说出口。因为她认为这种想象非常邪恶，绝不能让别人发现自己心中有这种想法，她也努力要自己抛开这种愚蠢的幻想。<br>但这念头在她心中盘踞，不肯消失，这让她万分厌恶自己。每当受到雪穗温柔对待，她都认为自己是个卑鄙小人。但同时，还是有一个再三审视这个想象的自己。这真的只是想象？难道不是事实吗？其实，这才是她疏远雪穗的最大原因，内心不断扩大的疑惑与自我厌恶让她无法负荷。<br></code></pre></td></tr></table></figure></li></ul></li><li><p>第十一章</p><ul><li><p>今枝直巳向筱冢一成汇报调查情况：今枝直巳觉得雪穗不接受筱冢康晴是因为她喜欢筱冢一成；</p></li><li><p>菅原绘里家里遭人闯入，电话被人动过；菅原绘里给今枝直巳打电话求助，今枝直巳上门发现了电话被装了窃听器，所以刚刚的电话已经被窃听了，所以今枝直巳的本名泄露了；</p></li><li><p>今枝直巳推断是在雪穗的精品服装店是，在换衣服的时候，钱包里的信息被人偷看了，又因为留下信息的时候地址和电话留下的是假的，所以雪穗认定他们不是来买衣服的，并且今枝直巳带着借的筱冢一成的名表，不惜名贵手表，借给人去调查雪穗，雪穗估计也能明白事情的严重性；</p></li><li><p>笹垣润三来找今枝直巳（看这一段的时候吓死了，以为是杀手来处理今枝直巳的）；</p></li><li><p>笹垣润三说，之前的盗版超级马里奥游戏案件中，松浦勇和一个男人（应该是桐原亮司）消失了，笹垣润三认为这个男人藏在雪穗身边；</p></li><li><p>笹垣润三问今枝直巳一个照片上的人见没见过，今枝直巳说是没见过，但是内心有很大的冲击（我觉得这应该是一个伏笔），笹垣润三认为，这个人和雪穗是互利共生关系，这个人就是桐原亮司！！！！！</p><ul><li>这很明显，笹垣润三已经查出来雪穗和亮司应该有联系，且是重要的关系——互利共生！</li></ul></li><li><p>今枝直巳发现笹垣润三不知道窃听器的事情，说明还有其他人在调查今枝直！！！！</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;你可能嫌我多事，不过，我有句话很想告诉委托你调查唐泽雪穗的人。”“什么话？”笹垣的嘴角扭曲。“最好不要娶那女人，她可不是普通的狐狸精。”“嗯，”今枝点点头，“这我知道。”笹垣也点点头，开门走出。<br></code></pre></td></tr></table></figure></li><li><p>今枝直巳再一次翻看很多年前东西电装软件被盗版案件，其中未解之处是：秋吉雄一是什么来路；但是笹垣润三给今枝直巳展式亮司的照片后发现，之前的秋吉雄一是亮司假扮的；</p></li><li><p>今枝直巳还发现有很多疑点</p><ul><li>秋吉雄一（亮司）一直在监督三泽千都留，第一次看到三泽千都留来高尔夫球场打球是三年前的四月初，那个时候高宫诚并没有来球场；两周后，高宫诚才来的球场，且与三泽千都留交谈密切；<ul><li>推理:<ol><li>首先假设雪穗和亮司就是互利共生的关系，亮司帮雪穗调查高宫诚外遇事件！说不通的点是为什么委托桐原亮司而不是专业的侦探；</li><li>亮司跟踪的是三泽千都留而不是高宫诚，如果是调查外遇事件的话，外遇对象已经确定了，为什么还得要继续调查，这说不通啊；</li><li>第三个疑点是，从高宫诚和三泽千都留到了球场之后，秋吉雄一（亮司）便不再继续跟踪，高宫诚的外遇越来越厉害，雪穗这么精明的人为什么不采取措施，听任事情的发展；</li></ol></li><li>这么来说，今枝直巳能想到的原因是：雪穗想和高宫诚离婚，但是雪穗这么精明的人不会等待着机会到来，很有可能是主动创造高宫诚出轨的机会；<ul><li>这么来说，高宫诚再次遇到三泽千都留就是雪穗安排的！！实锤！</li></ul></li></ul></li></ul></li><li><p>今枝直巳给高宫诚打电话约他出来，想问他和三泽千都留是怎么认识的，电话中还说了笹垣润三已经来找过高宫诚了，来询问雪穗的事情，并且已经告诉了笹垣润三今枝的名字和职业；这么说，窃听器和笹垣润三一点关系都没有，那么装窃听器的还另有其人！！</p></li><li><p>今枝直巳回到家里遇袭了（完蛋了，虽然侦探角色出现的非常晚，但是我最喜欢这人了，很有可能是遇害了）；</p></li></ul></li><li><p>第十二章</p><ul><li><p>这一章首先出场了新人物——栗原典子；</p></li><li><p>栗原典子与秋吉雄一（亮司）同居；</p></li><li><p>栗原典子是帝都大学附属医院药剂师，碰巧在路上见到了秋吉雄一（亮司），在与秋吉雄一（亮司）吃过几次饭后顺理成章成立男女朋友；</p></li><li><p>雪穗养母唐泽礼子病危，筱冢康晴让筱冢一成去看望雪穗，一成内心很排斥，一成已经有好几个月联系不上今枝直巳了（我猜测可能遇害了，因为太接近真相了）；</p></li><li><p>栗原典子与秋吉雄一（亮司）做爱，但是栗原典子发现秋吉雄一（亮司）从来没有射出来过，她以为是和她做爱没有快感，觉得很委屈；</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“我这辈子，从来没有在女人体内射精过。就算我想，也出不来。”<br>“你是说……迟泄？”<br>“应该是，而且很严重。”<br>“真不敢相信。你不是在开玩笑吧？”<br></code></pre></td></tr></table></figure><ul><li>这一写秋吉雄一（亮司）在女人体内不射精其实很突兀，暂时看了没有什么明显的作用，所以我推测这可能是一个伏笔；</li></ul></li><li><p>秋吉雄一（亮司）说想要写小说，问栗原典子有没有氰化钾；</p></li><li><p>秋吉雄一（亮司）假借写小说为由向栗原典子借用氰化钾，并且与她讨论怎么使用能让人致死；讨论出的手法正是今枝直巳遭遇的；</p><ul><li>所以说今枝直巳已经遇害，是秋吉雄一（亮司）做的；</li></ul></li><li><p>在杀害今枝直巳后，秋吉雄一（亮司）回家，关于行踪和栗原典子说了谎，氰化钾也使用了一大半；</p><ul><li>总觉得与栗原典子的这一部分内容很微妙，似乎处处都有暗示解答一些问题的细节；</li></ul></li><li><p>笹垣润三来找一成谈话关于今枝直巳；</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">一成握住听筒的手一紧，一股紧张感从脚边爬上来，心中的不安也加深了。此人怎么会知道今枝？他怎么会知道今枝与我的关系？一成相信从事那类工作的人，即使遭到警方盘问，也不会轻易透露委托人的姓名。<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">一成也递出名片交换，然而看到对方的名片，他不禁有些迷惑。因为上面既没有警局名，也没有部门与职衔，只印着“笹垣润三”，以及住址和电话。住址是在大阪府八尾市。“基本上，如果不是十分有必要，我不用印有警察字样的名片。”笹垣的笑容让脸上的皱纹显得更深，“以前，我用的警察名片曾被人拿去做坏事。从此，我只用个人名义的名片。”<br>“可是……”一成发现了一件重要的事，“十八年，命案的时效已经过了。”“是啊。”“可您还在继续追查？”<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“你对于直呼她的名字这件事，应该不介意。至于原因，筱冢先生，因为你自己也是这样。”说着，笹垣拍拍提包，“要再听一次刚才那卷带子吗？你是这么说的：关于唐泽雪穗的调查，后来怎么样了？请与我联系。”<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“我猜，”笹垣低声说，“今枝先生很可能查到了什么。”“您这话有什么根据？”笹垣点点头。“昨天，我稍稍查看了今枝先生的事务所，与唐泽雪穗有关的资料全部消失了，一张照片都没留下。”“啊！”一成睁大了眼睛，“这就表示……”“以目前状况来说，今枝先生不可能不向筱冢先生通报一声就不知去向。这样一来，能想到的最可能的答案只有一个——有人造成今枝先生失踪。说得更清楚一点，那个人害怕今枝先生的调查。”<br>一成的话让笹垣的脸如能剧面具般失去表情。他说：“我认为，他还活着的可能性极低。”<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">一成翻看背面，上面写着“桐原亮司”。“桐原……亮司，这是谁？”“一个像幽灵一样的人。”“幽灵？”“筱冢先生，请你把这张照片上的面孔和这个名字牢记在心。一旦看到他，无论是什么时候，都请立刻和我联络。”<br></code></pre></td></tr></table></figure><ul><li><p>谈话内容主要就是今枝直巳很可能已经遇害了，被杀害了，因为调查到了一些东西；</p></li><li><p>笹垣与一成谈话，对雪穗达成统一战线；</p></li><li><p>秋吉雄一（亮司）要回大阪老家收集工作收集资料，栗原典子非得要跟着他一块去，栗原典子想要趁着这个机会了解秋吉雄一（亮司）；</p></li><li><p>雪穗养母礼子去世，康晴派一成去给雪穗帮忙；从雪穗和一成的对话中，应该可以推断出雪穗已经发现了一成在调查她；</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“因为……”雪穗先垂下眼睛，又再次抬起，她眼眶泛红，珠泪欲滴，“筱冢先生讨厌我呀。”<br>“这我就不知道了。也许你对我和诚离婚不满，也许还有别的理由。只是我确实感觉到，你躲着我，讨厌我。”<br></code></pre></td></tr></table></figure><ul><li>一成面对眼前这个弱女子有点沦陷了,开始了自我怀疑；</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">突然间，连自己都无法说明的感情从心底泉涌而出，简直像是封印在内心深处的东西获得了释放，甚至连他都不知道自己拥有这样的感情。这份感情逐渐转变为冲动，他的眼睛注视着雪穗雪白的脖子。正当他的心防就要瓦解的那一刹那，电话响了。他回过神来，抽回放在她肩上的手。<br></code></pre></td></tr></table></figure><ul><li><p>一成有了雪穗会不会安乐死了母亲唐泽礼子，因为新店即将开业，唐泽礼子是个累赘，或者说安排桐原亮司做的安乐死；</p></li><li><p>雪穗的魔力太厉害了，差点就使得一成沦陷了，还好一成足够理智；</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">他伸手握住把手，准备开门。然而，就在他打开门的前一瞬，忽觉背后有人。不必回头，他也知道雪穗就站在身后。<br>她纤细的手触碰着他的背。“其实，我好怕，”她说，“我好怕孤零零一个人。”一成自知内心正剧烈起伏。想直接转身面对她的冲动，如浪涛般排山倒海而来，他发现警示信号已由黄灯变成红灯。现在要是看见她的双眼，一定难敌她的魔力。<br></code></pre></td></tr></table></figure></li><li><p>第十三章</p><ul><li><p>今枝失踪后，菅原绘里搬到侦探事务所继续调查今枝的失踪案件，也维系着今枝事务所的工作；</p></li><li><p>在此期间有个叫川上的女的；</p></li><li><p>还有一个姓栗原（秋吉）的人来问朋友之前有没有来找过今枝先生帮忙</p><ul><li>这里应该指的是栗原典子来调查秋吉雄一（亮司），因为秋吉雄一（亮司）用氰化钾杀害今枝之后回家，栗原典子在他的包里看到过今枝的名片；</li></ul></li><li><p>第一章时候出现的古贺（娶了笹垣妻子笹垣克子的侄女织江）再次出现，因为担心笹垣润三一把年纪了，又继续调查桐原洋介案件；</p></li><li><p>专案组之前认定出车祸死的寺崎忠夫就是凶手，但是笹垣润三不这样认为，并且暗中调查了十多年；</p></li><li><p>笹垣润三现在怀疑是雪穗杀掉了桐原洋介，并且西本文代的死与雪穗有很大的关系；</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“有一株芽应该在那时就摘掉，因为没摘，芽一天天成长茁壮，长大了还开了花，而且是作恶的花。”笹垣张开嘴，让酒流进咽喉。<br>古贺松开领带和衬衫的第一颗纽扣。“你是说唐泽雪穗？”<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“在她还是西本雪穗的时候。桐原洋介被杀的第二年，西本文代也死了。从那件案子后，我对那女孩的看法就变了。”<br>“那件案子好像是被当作意外结案了。可是，老爹到最后都坚持那不是单纯的意外死亡。”<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“那女孩不会把这种事放在心上。她隐瞒母亲自杀还有另一个理由。可能这对她来说才是最重要的，那就是形象。母亲死于意外会引起世人同情，但若是自杀，就会被别人以有色眼光看待，怀疑背后有什么不单纯的原因。为将来着想，要选哪一边应该很清楚。”<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">笹垣嗯了一声，把烟灰缸拉过来。“寺崎死于车祸后，从他车里找到了一个登喜路打火机。你还记得吗？”<br>“当时大家怀疑是遇害的当铺老板的东西，但查不出来，就不了了之了。”<br>“我认为那就是被害人的打火机，但凶手不是寺崎。照我的推论，想让寺崎背黑锅的人如果不是把那东西偷偷放在他那里，就是找了什么借口给了他。”<br></code></pre></td></tr></table></figure><ul><li><p>之前以为是一个打酱油的又出现了：这个人是之前栗原典子在婚介所认识的一个男人，这个男人非常爱慕栗原典子，经常在医院附近监视栗原典子，但同时他也发现，不只是自己在监视栗原典子，秋吉雄一（亮司）也在监视栗原典子，他把这件事告诉了栗原典子，栗原典子觉得很震惊，因为从秋吉雄一（亮司）监视她，到她遇到秋吉雄一（亮司）有一年的事件，看来她遇到秋吉雄一（亮司）都是这个人安排的，是有目的地仅仅她自己的；</p></li><li><p>康晴最后还是娶了雪穗，康晴的女儿非常不喜欢雪穗，因为对母亲的悼念；</p></li><li><p>笹垣润三来找筱冢一成，告诉他这19年来所有的调查成果；</p></li><li><p>关于桐原洋介被杀，起初笹垣润三认为是雪穗干的，但是有很多说不通的地方；于是他只能猜测是桐原亮司杀了自己的父亲；</p></li><li><p>笹垣润三根据雪穗和亮司都看书推测出了二人一直都有联系，并找到了相关证据；</p></li><li><p>关于初中时候的藤村都子强暴案，笹垣润三是这样推测的：藤村都子散播雪穗的流言，雪穗痛恨藤村都子，秋吉雄一和菊池文彦用照片威胁亮司；于是雪穗和亮司想出来一箭双雕的计划：雪穗在市场上给了菊池文彦妈妈一张电影票，菊池文彦得到电影票时去电影院，路上正好被亮司看到了，亮司把之前从菊池文彦身上偷的挂件放在藤村都子被侵害现场，让警方怀疑菊池文彦；但是亮司为菊池文彦做了不在场证明，菊池文彦洗脱了嫌疑；之后亮司威胁菊池文彦交出照片并且不再调查桐原洋介被杀案件；</p></li><li><p>筱冢一成目前是被贬职了，因为有人告密筱冢一成泄露公司内部消息；筱冢一成认为有人陷害自己，正在独自调查，目前已经确定是有黑客从帝都大学附属医院处入侵了公司网络；而之前笹垣润三去今枝侦探所时菅原绘里说，有个帝都大学附属医院的药剂师来过，并且亮司精通电脑，所有猜测一成被陷害大概率就是亮司做的！</p></li><li><p>筱冢康晴一家人除了女儿美佳外都出去了，这时一男子借口送快递来找美佳，美佳被快递男强暴了，雪穗回来后看到了；</p><ul><li>之前美佳和雪穗的关系一直不好，为什么偏偏美佳自己在家的时候又快递，为什么美佳被强暴之后，雪穗第一个看到了？</li><li>这绝对（都不是猜测的语气了，我现在都在恨雪穗这个人了）是雪穗和亮司策划的</li></ul></li><li><p>笹垣润三来找栗原典子谈话，关于为什么去今枝侦探所，笹垣润三出示了亮司的照片，但她说不认识；笹垣润三看到了相册，那是之前，秋吉雄一（亮司）和栗原典子去大版的时候，她偷偷拍的，拍了桐原当铺和那栋废弃大楼，笹垣润三看出来她一直在说谎，在隐瞒，于是向她说了，照片中的人就是桐原亮司；</p></li><li><p>雪穗保密美佳被强暴的秘密，从而消除了自己在这个家的威胁；同时雪穗也说出自己小时候也被强暴过（不知真假）（结尾给出了解答，应该是真的）；</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这时，美佳明白了，这一切将成为她们两人之间的秘密，成为自己和全世界最讨厌的女人之间的秘密……<br>雪穗没有回答，默默地开始解开睡袍的带子。睡袍滑落，朦胧浮现出一具白皙的胴体。美佳还不及出声，雪穗已钻上床。美佳想躲，却被用力压住了，力道比她想象的大得多。美佳呈大字形被压在床上，一对丰满的乳房在美佳胸部上方晃动。“别这样！”“是这样吗？”雪穗问道，“你是被这样压住的吗？”美佳别开脸，但脸颊却被抓住，被用力扳回来。“不要转开你的眼睛，看这边，看着我。”美佳怯怯地看雪穗。雪穗那一双微微上扬的大眼睛正俯看着美佳，脸孔近得似乎感觉得到她的鼻息。“想睡的时候，就会想起被强暴那时候对不对？”雪穗说，“不敢闭上眼睛，怕睡着了会做梦，对不对？”“嗯。”美佳小声回答。雪穗点点头。“记住我现在的面孔。快想起被强暴的事的时候，就想起我，想起我曾经对你这样。”雪穗跨坐在美佳身上，按住她的双肩，美佳完全无法动弹。“还是你宁愿想起强暴你的人，也不愿想起我？”<br>美佳摇头。看到她的反应，雪穗露出了一丝微笑。“好孩子，不要怕，你很快就会重新站起来，我会保护你的。”雪穗用双手捧住美佳的脸颊，然后像是在玩味肌肤的触感一般移动手掌，“我也有跟你同样的经历，不，我更凄惨。”美佳差点惊呼失声，雪穗伸出食指抵住她的唇。<br>“那时，我比现在的你更小，真的还是小孩子。但是，恶魔不会因为你是小孩子就放过你。而且，恶魔还不止一个。”“不会吧……”美佳喃喃地说，却没有发出声音。“现在的你，就是那时的我。”雪穗压在美佳身上，双手抱住美佳的头，“真可怜。”<br>这一瞬间，美佳心里好像有什么东西爆开了，感觉就像以前被切断的某根神经又被连了起来。通过那根神经，悲伤的情绪如洪水般流进美佳的心里。美佳在雪穗怀里放声大哭。<br></code></pre></td></tr></table></figure><ul><li><p>筱冢一成和笹垣润三来到康晴家里，见到了雪穗，笹垣润三感觉出雪穗好像还认识自己；</p></li><li><p>筱冢一成和笹垣润三告诉了康晴雪穗的真面目，康晴大发雷霆，让他们滚蛋，并且用力扔了高尔夫球，高尔夫秋反弹到了仙人掌盆栽上，打碎了花盆，里面有一个绿色的太阳镜镜片!!!!!(可能是什么关键证据，我一时没想出来)</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;是康晴哥扔的高尔夫球，不知打到了什么。”<br>“咦！有没有受伤？”<br>“受伤的是盆栽，人没事。”女佣嘴里喊着“哎呀呀呀”，看向并排摆放的盆栽。“糟糕，夫人的仙人掌……”<br>“她的仙人掌？”<br>“是夫人从大阪带回来的，啊！花盆整个都破了。”一成走到女佣身边查看。<br>“她对栽培仙人掌感兴趣？”<br>“不，听说是夫人去世的母亲喜欢。”<br>“哦，听你这么一说，我想起来了，的确。我在她母亲的葬礼时听她说过。”<br>一成再度准备离开，女佣惊呼了一声：“哎呀！”<br>“怎么了？”一成问。<br>女佣从破了的花盆中捡起一样东西。“里面有这个。”一成看了看。“是玻璃，应该是太阳镜的镜片。”<br>“好像是，大概本来就混在土里。”女佣偏着头，仍把东西放在盆栽的碎片上。<br>“怎么了？”笹垣也有点好奇，走近他们。<br>“哦，没什么，盆栽的土里有玻璃碎片。”一成指着破了的盆栽说。<br>笹垣朝那边看，扁平的玻璃碎片映入他眼中。看来的确是太阳镜的镜片，大约是从中破掉的，他小心地拾起。一眨眼过后，他全身的血液都沸腾起来。几段记忆复苏，令人目不暇接地交错，很快形成一条路径。<br>“你说，仙人掌是从大阪拿来的？”他压低声音问。<br>“是，本来在她母亲家里。”<br>“那时盆栽放在院子里吗？”<br>“是的，摆在院子里。笹垣先生，有什么不对？”一成也察觉他神情有异。<br>“现在还不知道。”笹垣拿起玻璃镜片对着阳光。<br>镜片呈现浅浅的绿色。<br></code></pre></td></tr></table></figure><ul><li>“R＆Y”大阪第一家店的开业正在准备，大阪店的经营管理实际上交由夏美负责。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。你明白吧？我从来就没有太阳，所以不怕失去。”<br></code></pre></td></tr></table></figure><ul><li>笹垣润三来找桐原弥生子；桐原洋介被杀后，当铺被堂弟接管，松浦勇卷着钱跑了，桐原弥生子开了一家咖啡店，亮司上高中之后也离开了她；</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">命案发生时，去当铺的客人说门上了锁。对此，松浦的说法是他进了保险库，而你和儿子在看电视。但这不是事实，其实你和松浦在里面房间的床上，是不是？”<br></code></pre></td></tr></table></figure><ul><li>所以亮司没有不在场证明！！！</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">一九八八年至一九八九年间，埼玉和东京接连有四名幼女遇害。弥生子看新闻得知这桩“连续诱拐幼女命案”正在审理中。辩方凭精神鉴定的结果提出反证，但对于专挑幼女下手的心态，她并不感到诧异。她早就知道具有这种变态心理的男子不在少数。<br>“如果能早点知道那件事就好了。”笹垣低声说。<br>“哪件？”<br>“你老公的兴趣。”<br>“哦……”弥生子想笑，脸颊却怪异地抽筋了。她这才明白，笹垣原来是为了引出这个话题，才提起宫崎勤。<br>“那件事能有什么帮助吗？”她问。<br>“何止是帮助，要是案发时就知道，调查方向就会有一百八十度的改变。”<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">“小亮好像又出去了。”松浦的声音在耳际响起。他压在弥生子身上，鬓边冒着汗水。松浦是听到有人踩着屋瓦的声音才这么说的。弥生子也早就知道，亮司会从窗户爬到屋外，沿着屋顶跑出去。但她从来没有就此事对亮司说过什么，他不在家，她才方便与情郎幽会。那天也是一样。他回来的时候，瓦片发出轻微的声响。但是……<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">当笹垣在筱冢家看到仙人掌盆栽里的玻璃碎片，一个念头便从他脑海里闪过，那便是松浦勇失踪时的装扮。有好几个人供称“他经常戴着绿色镜片的雷朋太阳镜”。笹垣托古贺调查玻璃碎片。他的直觉是正确的，那的确是雷朋的镜片，而且上面残留的一小块指纹，也与从松浦房间采得的本人指纹极为近似，一致率高达百分之九十八以上。<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown">事情的真相<br>弥生子是在五年前向他提起那件事的，当时她醉得相当厉害。正因如此，才会毫不隐瞒。“现在我才敢说，我老公那方面根本就不行。其实，他本来不是那样，是后来慢慢变了。他不碰女人，却去碰那些……要怎么说？走偏锋。那叫恋童癖是不是？对小女孩有兴趣。还去向有门路的人买了一大堆那类怪照片。那些照片？他一死，我马上就处理掉了，这还用说吗？”<br>她接下来的话更令笹垣惊愕。<br>“有一次，松浦跟我说过一件很奇怪的事。他说，老板好像在买小女孩。我问他买小女孩是什么意思，他告诉我，就是出钱叫年龄很小的小女孩跟他上床。我吓了一跳，说竟然有那种店。松浦笑我，说老板娘以前分明是那一行出身的，却什么都不知道，这年头，父母都靠卖女儿来过日子了。”<br>听到这些，笹垣脑海里刮起了一阵风暴，一切思绪都混乱了。但在风暴过后，过去绝望地看不见的东西，如拨云见日般清晰可见。<br>弥生子还没有说完：“不久，我老公开始做些莫名其妙的事。跑去问认识的律师，要领养别人的孩子当养女要办哪些手续？当我拿这件事质问他，他就大发脾气，说跟我无关。这样还不够，还说要跟我离婚。我想，那时他的脑袋大概就有问题了。”<br>笹垣认为，这是关键所在。<br>桐原洋介经常前往西本母女的公寓，目的并不在于西本文代，他看上的是女儿。想必他曾多次买过她的身体，那老公寓里的房间便是用来进行这种丑恶交易的地方。这时，笹垣理所当然产生了一个疑问：顾客是否只有桐原洋介一人？比如死于车祸的寺崎忠夫又如何？专案组将他视为西本文代的情人，但没人能够断定寺崎没有与桐原洋介相同的癖好。遗憾的是如今这些都无法证明了。即使当时尚另有嫖客，也已无从追查。能够确定的只有桐原洋介。<br>桐原洋介的一百万元，果真是向西本文代提出的交易金额，但那笔钱不是要她当情妇，而是领养她女儿的代价。想必是在数度买春后，他希望将她女儿据为己有。洋介离开后，文代独自在公园荡秋千。她心里有什么样的思绪在摇摆呢？洋介和文代谈完后，便前往图书馆，迎接俘获了自己的心的美少女。<br>接下来的经过，笹垣能够在脑海里清楚地描绘：桐原洋介带着女孩进入那栋大楼。女孩曾经抵抗吗？笹垣推测可能没有。洋介一定是这样对她说的：我已经付了一百万给你妈妈……连要想象在那个尘埃遍布的房间里发生了什么都令人厌恶。<br>然而，如果有人看到那一光景……笹垣不相信亮司当时是在通风管中玩耍，从自家二楼离开的他应是走向图书馆。他可能经常这样和雪穗碰面，向她展示自己拿手的剪纸。唯有那家图书馆，才是他们两人的心灵休憩之处。<br>但那天，亮司却在图书馆旁看到了奇异的景象：父亲和雪穗走在一起。他尾随他们进了那栋大楼。他们在里面做什么？男孩感觉到一股无法形容的不安。要窥伺他们只有一个办法，他不假思索地爬进通风管。<br>于是，他可能看到了最不堪的一幕。<br>那一瞬间，在男孩心中，父亲只是一头丑恶的野兽。他的肉体一定被悲伤与憎恶支配了。<br>至今，笹垣仍记得桐原洋介所受的伤，那也是男孩心头的伤。<br>杀了父亲后，亮司让雪穗先行逃走。在门后堆放砖块，应该是小孩子绞尽脑汁想出来的做法，希望借此多少延迟命案被发现的时间。随后，他再度钻进通风管。一想到他是抱着何种心情在通风管中爬行，笹垣便感到心痛。事后，他们两人如何协调约定不得而知。笹垣推测，多半没有协调约定这回事，他们只是想保护自己的灵魂。结果，雪穗从不以真面目示人，亮司则至今仍在黑暗的通风管中徘徊。<br>亮司杀松浦的直接动机，应该是因为松浦握有他的不在场证明的秘密。松浦或许是在机缘巧合下发现亮司可能犯下弑父之罪，他极可能向亮司暗示此事，要挟他参与那次仿冒游戏软件的行动。<br>但笹垣认为亮司还有一个动机。因为没人能够断定桐原洋介的恋童癖不是肇始于弥生子的红杏出墙。在那个二楼的密室中，亮司必然被迫无数次听见母亲与松浦间的丑态。都是那个男人害我的父母发了狂——他如此认定也毫不为奇。<br></code></pre></td></tr></table></figure><ul><li>笹垣润三在雪穗新开的大阪商店等待了一天都不见桐原亮司出现，正在准备放弃的时候，笹垣润三看到了有个小孩拿着剪纸，是圣诞老人给的，笹垣润三发现桐原亮司一直都在，在假扮圣诞老人，在暗中保护雪穗；于是对桐原亮司进行了追捕，追捕过程中，桐原亮司用那把剪刀刺死了自己!</li></ul>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">那是桐原视若珍宝的剪刀，那把改变他人生的剪刀！<br></code></pre></td></tr></table></figure>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">感觉到有人，笹垣抬起头来。雪穗就站在身边，如雪般白皙的脸庞正俯向桐原。<br>“这个人……是谁？”笹垣看着她的眼睛。<br>雪穗像人偶般面无表情。她答道：“我不知道。雇用临时工都由店长全权负责。”<br>话音未落，一个年轻女子便从旁出现。她脸色铁青，以微弱的声音说：“我是店长滨本。”<br>警察们开始采取行动。<br>有人采取保护现场的措施，有人准备对店长展开侦讯，还有人搭着笹垣的肩，要他离开尸体。<br>笹垣脚步蹒跚地走出警察们的圈子。<br>只见雪穗正沿扶梯上楼，她的背影犹如白色的影子。<br>她一次都没有回头。<br></code></pre></td></tr></table></figure><ul><li>总结<ul><li>这故事真的非常精彩了，故事中一共出现了大概四五十个人物，作者用一篇谋杀案，引出了如此庞大的故事体系真的太厉害了！！</li><li>从第一章开始发现主角是雪穗和亮司，第二章更加确认了这二人是绝对的主角！</li><li>这本书一个非常巧妙地地方是，这两个绝对地主角在书中没有任何描写说二人见面或交谈等，表面上看二人是完全没有什么联系的，但是所有的事情都是二人策划的！</li></ul></li></ul><p><img src="https://murhyimgur.oss-cn-beijing.aliyuncs.com/img/%E7%99%BD%E5%A4%9C%E8%A1%8C.png" alt="白夜行"></p><h1 id="《解忧杂货店》"><a href="#《解忧杂货店》" class="headerlink" title="《解忧杂货店》"></a>《解忧杂货店》</h1><p>时间：2021.08</p><p>关键词：【日本】东野圭吾&#x2F;悬疑温情长篇小说（电子书）</p><p>记录：</p><ul><li>第一章 回答在牛奶箱里</li><li>第二章 深夜的口琴声</li><li>第三章 在思域车上等到天亮</li><li>第四章 听着披头士默祷</li><li>第五章 来自天上的祈祷</li></ul><blockquote><p>回答在牛奶箱里<br>“我比任何人都爱你，想要永远和你在一起。如果我放弃比赛就能让你好起来，我会毫不犹豫地放弃。但如果不是这样，我希望坚持我的梦想。因为一直以来追寻着梦想，我才活出了自我，而你喜欢的也正是这样的我。我没有一刻忘记过你，但请让我去追逐梦想吧。”</p><p>听着披头士默祷<br>在家人的问题上，我认为除非某个家人去追求更好的发展，否则，全家人应该尽可能团结在一起。如果因为讨厌或是无法信赖等原因各奔东西，就不是真正的家人。</p><p>在思域车上等到天亮<br>“这么多年咨询信看下来，让我逐渐明白了一件事。很多时候，咨询的人心里已经有了答案，来咨询只是想确认自己的决定是对的。所以有些人读过回信后，会再次写信过来，大概就是因为回答的内容和他的想法不一样吧。”</p><p>在思域车上等到天亮<br>“不管是骚扰还是恶作剧，写这些信给浪矢杂货店的人，和普通的咨询者在本质上是一样的。他们都是内心破了个洞，重要的东西正在从那个破洞中逐渐消失。证据就是，这样的人也一定会来拿回信，他会来查看牛奶箱。因为他很想知道，浪矢爷爷会怎样回复自己的信。你想想看，就算是瞎编的烦恼，要一口气想出三十个也不简单，既然费了那么多心思，怎么可能不想知道答案？所以我不但要写回信，而且要好好思考后再写。人的心声是绝对不能无视的。”</p><p>听着披头士默祷<br>人与人之间情断义绝，并不需要什么具体的理由。就算表面上有，也很可能只是心已经离开的结果，事后才编出的借口而已。因为倘若心没有离开，当将会导致关系破裂的事态发生时，理应有人努力去挽救。如果没有，说明关系早已经破裂。</p><p>深夜的口琴声<br>我想我应该重新审视自己了。仔细想想，我在追寻梦想上太固执己见了，或许其中有死要面子的成分。<br>可是说来惭愧，我还没能下定决心，还想在追求音乐的道路上再坚持一阵子。<br>然后，我意识到了我真正的烦恼是什么。<br>其实很久以前，我就知道自己应该怎样选择，只是一直无法下决心舍弃梦想。到现在，我依然不知道怎样才能做到这一点。</p><p>在天上祈祷<br>如果说，来找我咨询烦恼的人是迷途的羔羊，通常他们手上都有地图，却没有看地图，或是不知道自己目前的位置。<br>但我相信你不属于任何一种情况，你画的地图是一张白纸，所以，即使想决定目的地，也不知道路在哪里。<br>地图是白纸当然很伤脑筋，任何人都会布置所措。<br>但是不妨换一个角度思考，正因为是白纸，所以可以画任何地图，一切都掌握在你自己手上。你很自由，充满了无限可能。这是很棒的事，我衷心祈祷你可以相信自己，无悔地燃烧自己.</p></blockquote><p>在读之前，以为这也是一本纯悬疑的小说，但是随着读的越来越多，发现更像一本温情的小说，并且每一章好像都没啥关系，比较分散，再加上正好要开学了，也没什么心情读书了，于是这么一搁置将近搁置了一个月。回到学校之后，又拿起来继续读了，好像只花了三天的空闲时间就读完了，这本书前期比较拖沓，很容易读不下去，但是随着越往后读，才发现悬疑与温情并存，并且悬疑也不是那种让人一点也读不懂，靠细节来推理的悬疑，作者用很平淡的语言叙述了一个简单的故事，但是再故事结构上非常的巧妙，这就造成了一种悬疑感，而不是为了悬疑而悬疑。<br>读到最后的时候，整个故事都串起来了，所有的人物都通过浪矢杂货店和丸光园联系在了一起，而只有为什么会联系在一起，文中通过后任的孤儿院院长讲出，这背后是浪矢雄治与皆月晓子的一段爱情故事。<br>故事巧妙的环状结构，让每个人都拯救了别人，也让别人救赎了自己！<br>最喜欢的情节就是敦也为了测试投了一张白纸，浪矢爷爷收到后，认真的回复了，这也是他的最后一封解忧信，因为信件的内容是在最后给出的，我觉得这不仅是给迷途中的三人的，也是给读者的！</p><p>有点遗憾的是读这本书的时间跨度有点大了，读后面的时候前面的事件记得有点混乱了！有机会得话再拿出来读一下！</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">信的内容如下：<br><br>以下这段话是给无名氏朋友的。<br>我这个老头子反复思索了你特地寄来一张白纸的理由。因为我觉得这一定是件很重要的事，不能随随便便地答复。我开动快要糊涂的脑筋想了又想，最后理解为，这代表没有地图。<br>如果把来找我咨询的人比喻成迷途的羔羊，通常他们手上都有地图，却没有去看，或是不知道自己目前的位置。<br>但我相信你不属于这两种情况。<br>你的地图是一张白纸，所以即使想决定目的地，也不知道路在哪里。地图是一张白纸，这当然很伤脑筋。任何人都会不知所措。<br>可是换个角度来看，正因为是一张白纸，才可以随心所欲地描绘地图。一切全在你自己。对你来说，一切都是自由的，在你面前是无限的可能。这可是很棒的事啊。我衷心祈祷你可以相信自己，无悔地燃烧自己的人生。<br>我以后应该不会再回答烦恼咨询了。感谢你在最后问了一个很有价值的难题。<br><br>浪矢杂货店<br><br></code></pre></td></tr></table></figure><p>时间轴</p><blockquote><p>引自知乎 司徒晓峰：<a href="https://zhuanlan.zhihu.com/p/34653933">https://zhuanlan.zhihu.com/p/34653933</a></p><p>19XX，皆月晓子和浪矢雄治相遇相爱分开。</p><p>1969年，皆月晓子病逝。</p><p>1970年，浩介向浪矢咨询是否要跟随父母连夜逃跑，浩介离开父母，进入丸光园，认识同在丸光园的晴美。</p><p>1979年，浪矢爷爷病重，搬出杂货店</p><p>1979年11月，月兔咨询是选择照顾病重男友，还是继续奥运会选拔集训。并告诉晴美浪矢杂货店。克郎咨询是选择继续留在东京做音乐还是回家继承鱼店生意。晴美咨询是继续当白领上班还是辞职做陪酒小姐。</p><p>1980年，浪矢爷爷回杂货店收到三十多封从未来寄回来的感谢信。</p><p>1980年9月13日，浪矢爷爷病逝，杂货店神秘氛围消失。</p><p>1988年平安夜，克郎在丸光园演奏《重生》，天才少女小芹第一次听完就记住了旋律。</p><p>1988年圣诞节，丸光园失火克郎救小芹弟弟，在医院去世。晴美、浩介回来帮忙，晴美已经开了自己的公司，浩介已经成为木雕师。</p><p>2012年9月12日，敦也、翔太和幸平去晴美家偷东西，与晴美相遇。</p><p>2012年9月13日，浪矢爷爷三十三周年祭日，浩介寄出感谢信。</p><p>敦也、翔太、幸平凌晨进入杂货店，收到从过去寄来的信，并以浪矢杂货店的名义回复。自己向过去寄出的白纸也收到浪矢爷爷的回信。晴美的感谢信被三人看到。三人离开把物品归还晴美，并去自首。</p><p>脉络清晰以后，发现几乎所有的人和事都与丸光园和浪矢杂货店有关，皆月晓子和浪矢雄治一段既冲动又克制的爱情完美的解答了这一切。两位心地善良的人都在尽自己的力量帮助身边的人。看似平行的两条线，却因为有共同帮助过的人而相交。丸光园为孤独的人提供了生活的依托，浪矢杂货店为孤独的心灵点亮了希望之光。</p><p>浩介、晴美、敦也、翔太……他们就像皆月和浪矢的孩子，在父母的庇佑和引导下逐渐认清了自己，相信自己，就像浪矢爷爷最后那封回信说的，无悔地燃烧自己的人生。</p><p>感谢东野，又是一本暖心的书。</p></blockquote><h1 id="《房思琪的初恋乐园》"><a href="#《房思琪的初恋乐园》" class="headerlink" title="《房思琪的初恋乐园》"></a>《房思琪的初恋乐园》</h1><p>时间：2021.09</p><p>关键词：【中国】林奕含&#x2F;女性&#x2F;自我保护&#x2F;儿童性侵&#x2F;家庭暴力（电子书）</p><p>记录：</p><ul><li>第1章 乐园<ul><li>第一章做铺垫比较多，整体节奏有点慢，有点无聊，但是可以看出来为后文再做铺垫；</li><li>作者文笔有点……怎么说的，轻飘飘的感觉，很多语句读着不是很通顺，可能是中国台湾地区的说话习惯问题吧；</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.刘怡婷要过好几年才会理解，运用一个你其实并不懂的词，这根本是犯罪，就像一个人心中没有爱却说我爱你一样。<br><br>2.一个最坚贞的圆实际上就是最排外的圆。<br><br>3.有的人戴眼镜，仿佛是用镜片搜集灰尘皮屑，有的人眼镜的银丝框却像勾引人趴上去的栅栏。有的人长得高，只给你一种揠苗助长之感，有的人就是风，是雨林。<br><br>4.后来她才知道那是一维在伊纹心里放养了一只名叫“害怕”的小兽，小兽在冲撞伊纹五官的栅栏。那是痛楚的蒙太奇。<br><br>5.从哪一刻开始失以毫厘，以至于如今差以千里。她们平行、肩并肩的人生，思琪在哪里歪斜了。<br><br>6.怡婷读着读着，像一个小孩吃饼，碎口碎口地，再怎么小心，掉在地上的饼干还是永远比嘴里的多。终于看懂了。怡婷全身的毛孔都气喘发作，隔着眼泪的薄膜茫然四顾，觉得好吵，才发现自己刚刚在鸦号，一声声号哭像狩猎时被射中的禽鸟一只只声音缠绕着身体坠下来。甚且，根本没有人会猎鸦。为什么你没有告诉我？盯着日期看，那是五年前的秋天，那年，张阿姨的女儿终于结婚了，伊纹姐姐搬来没多久，一维哥哥刚刚开始打她，今年她们高中毕业，那年她们十三岁。<br><br>7.“为什么是我不会？为什么不是我不要？为什么不是你不可以？直到现在，我才知道这整起事件很可以化约成这第一幕：他硬插进来，而我为此道歉。”<br></code></pre></td></tr></table></figure><ul><li>第2章 失乐园<ul><li>第二章看出来了作者文笔的老练，很多很懂深层的意思都通过隐藏在了文字之中；</li><li>这一部分写了房思琪是怎样被李国华诱奸，到对李国华畸形的爱，到最后发疯；</li><li>伊纹姐姐被不断家暴，她爱着不喝酒的一维，却一维酒后的家暴让她想要逃离；当她怀孕之后，一维一开始表现得非常好，伊纹以为一维已经改过了，可是，一维喝酒后的家暴让她流产，她死心了；</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs markdown">思琪知道，一个搪瓷娃娃小女孩卖弄聪明，只会让容貌显得张牙舞爪。而怡婷知道，一个丑小女孩耍小聪明，别人只觉得疯癫。<br><br>好险有彼此。否则她们都要被自己对世界的心得噎死了。<br><br>一维哥哥跟伊纹姐姐的家，有整整一面的书墙，隔层做得很深，书推到最底，前面摆着琳琅满目的艺术品，从前在钱爷爷家就看过的。<br><br>很有一种躲藏的意味。也有一种呼救的感觉。<br><br>有一种人，像一幅好画，先是赞叹整体，接下来连油画颜料提笔的波浪尖都可看，一辈子看不完。<br><br>她们从女孩到青少女，往来借书听书无数次，从没有听说伊纹姐姐打破过什么东西。她们不知道，每一次把手擦拭干净，小心翼翼地拿下沉重的艺术品，小心拖鞋小心地毯，小心手汗小心指纹，是老钱太太罚伊纹的精致苦刑。她的罪不但是让老钱太太的儿子从一堵墙之隔变成一面天花板，更是因为老钱太太深处知道自己儿子配不上她。那时候伊纹姐姐还成天短袖短裤的。<br><br>一维凌晨两三点回家，她躺在床上，可以看见锁和钥互相咬合的样子。凭着烟味酒味也知道他走近了，可也没地方逃。<br><br>伊纹婚礼当天早上彩排的时候看着工作人员滚开红地毯，突然有一种要被不知名的长红舌头吞噬的想象。<br><br>她后来才了解，说婚礼是一个女人一生中最美的时刻，意思不但是女人里外的美要开始下坡，而且暗示女人要自动自发地把所有的性吸引力收到潘多拉的盒子里。<br><br>晞晞在椅子上转来转去，对客厅的陈设感到不耐烦，对文化不耐烦。<br><br>李国华开始大谈客厅的摆饰。话语本能地在美女面前膨胀，像阳具一样。二十多岁的女人也不是完全不可以。<br><br>李国华心想，才一杯，亢成这样，不是因为茶。反正她安全，钱家是绝对不能惹的。而且几年她就要三十了？<br><br>不知道思琪怡婷，两个那么讨厌被教训的小女生竟会喜欢李老师。好端端的漂亮东西被他讲成文化的舍利子。还是教书的人放不下？其实无知也很好。等等陪孩子们念书。接着一维下班又要找我。<br><br>李国华知道自己被判定是安全的，第一次感谢岁月。<br><br>他不碰有钱人家的小孩，因为麻烦。而且看看刘怡婷那张麻脸，她们说不定爱的是彼此。<br><br>晞晞才小她们两岁，相较之下却像文盲，又要强，念图文书念得粗声大气，没仔细听还以为是电视机里有小太监在宣圣旨。<br><br>李老师是故意任晞晞笨的，因为他最清楚，识字多的人会做出什么样的事。<br><br>被他带去公寓的美丽女孩们都醉倒在粉色信封之海里。<br><br>一个丑女孩拼着要赢过几万考生，夜灯比正午太阳还热烈，高压之下，对无忧的学生生涯的乡愁、对幸福蓝图的妄想，全都移情到李老师身上。她们在交换改考卷的空当讨论到他，说多亏李老师才爱上语文，不自觉这句话的本质是，多亏语文考试，李老师才有人爱。不自觉期待去补习的情绪中性的成分。不自觉她们的欲望其实是绝望。<br><br>下一句忘记了，无所谓，反正不在“教育部”颁布的那几十篇必读里。<br><br>为所有在健康教育的课堂勤抄笔记却没有一点性常识的少女干杯。为他们插进了联考的巨大空虚干杯。<br><br>李国华在思考。数了几个女生，他发现奸污一个崇拜你的小女生是让她离不开他最快的途径。<br><br>最终让李国华决心走这一步的是房思琪的自尊心。一个如此精致的小孩是不会说出去的，因为这太脏了。自尊心往往是一根伤人伤己的针，但是在这里，自尊心会缝起她的嘴。<br><br>张太太一面双手举杯说哪里配得上，一面回家就对张先生说：“钱一维打跑几个女朋友我不是不知道，今天就是穷死也不让婉如嫁过去。”<br><br>婉如结婚搬去新加坡以后，张太太逢人就讲为晚辈担心婚事而婚事竟成的快感。很快地把伊纹介绍给一维。<br><br>伊纹不喜欢李国华这人，不喜欢他整个砸破她和思琪怡婷的时光。<br><br>但是她总觉得怪怪的，李国华的眼睛里有一种研究的意味。很久以后，伊纹才会知道，李国华想要在她脸上预习思琪将来的表情。<br><br>李国华对着天花板说：“这是老师爱你的方式，你懂吗？你不要生我的气，你是读过书的人，应该知道美丽是不属于它自己的。你那么美，但总也不可能属于全部的人，那只好属于我了。你知道吗？你是我的。你喜欢老师，老师喜欢你，我们没有做不对的事情。这是两个互相喜欢的人能做的最极致的事情，你不可以生我的气。你不知道我花了多大的勇气才走到这一步。第一次见到你我就知道你是我命中注定的小天使。你知道我读你的作文，你说：‘在爱里，我时常看见天堂。这个天堂有涮着白金色鬃毛的马匹成对地亲吻，一点点的土腥气蒸上来。’我从不背学生的作文，但是刚刚我真的在你身上尝到了天堂。一面拿着红笔我一面看见你咬着笔杆写下这句话的样子。你为什么就不离开我的脑子呢？你可以责备我走太远。你可以责备我做太过。但是你能责备我的爱吗？你能责备自己的美吗？更何况，再过几天就是教师节了，你是全世界最好的教师节礼物。”<br><br>李国华觉得自己讲得很好。平时讲课的效果出来了。他知道她下礼拜还是会到。下下个礼拜亦然。<br><br>喜欢一维笑眯眯。喜欢一维看到粉红色的东西就买给她，从粉红色的铅笔到粉红色的跑车。喜欢在视听室看电影的时候一维抱着家庭号的冰淇淋就吃起来，用手拍了拍自己的肩窝说这是你的座位。喜欢一维一款上衣买七种颜色。喜欢一维用五种语言说我爱你。喜欢一维跟空气跳华尔兹。喜欢一维闭上眼睛摸她的脸说要把她背起来。喜欢一维抬起头问她一个国字怎么写，再把她在空中比画的手指拿过去含在嘴里。喜欢一维快乐。喜欢一维。可是，一维把她打得多惨啊！<br><br>什么是真的？什么又是假的？说不定真与假不是相对，说不定世界上存在绝对的假。她被捅破、被刺杀。但老师说爱她，如果她也爱老师，那就是爱。做爱。美美地做一场永夜的爱。<br><br>房妈妈说：“那刚好，不如老师你帮我们带思琪去吧，我们夫妻这两天忙。”<br><br>刚刚在饭桌上，思琪用面包涂奶油的口气对妈妈说：“我们的家教好像什么都有，就是没有性教育。”妈妈诧异地看着她，回答：“什么性教育？性教育是给那些需要性的人。所谓教育不就是这样吗？”思琪一时间明白了，在这个故事中父母将永远缺席，他们旷课了，却自以为是还没开学。<br><br>刘墉的书，夹着影剧版的女生。这人比我想的还要滑稽。<br><br>我已经脏了。脏有脏的快乐。要去想干净就太苦了。<br><br>而思琪往前看，只看到年轻的出租车司机透过后视镜看了他们一眼，眼神像钝钝的刀。他们之间的距离就像他们眼中各自的风景一样遥远。出租车直驶进小旅馆里。<br><br>对于怡婷来说，作文日是一个礼拜光辉灿烂的开始。对思琪而言，作文日是长长的白昼里一再闯进来的一个浓稠的黑夜。<br><br>初一的教师节以后她从未长大。李国华压在她身上，不要她长大。而且她对生命的上进心，对活着的热情，对存在原本圆睁的大眼睛，或无论叫它什么，被人从下面伸进她的身体，整个地捏爆了。<br><br>伊纹说：“我们都不要说对不起了，该说对不起的不是我们。”<br><br>思琪说：“姐姐，我不知道决定要爱上一个人竟可以这么容易。”<br><br>那是早已停止长大的房思琪第一次也是最后一次看对一个人。（注：指的是毛毛）<br><br>李国华只是聚餐的时候轻描淡写两句：“我忙归忙，在台北的时候帮忙照看一下还是可以的。”李老师的风度气派给房妈妈刘妈妈喂了定心丸。思琪在聚餐的圆桌上也并不变脸，只是默默把寿司下不能食用的云纹纸吃下去。<br><br>后来怡婷在日记里读到这一段，思琪写了：“无论是哪一种爱，他最残暴的爱，我最无知的爱，爱总有一种宽待爱以外的人的性质。虽然我再也吃不下眼前的马卡龙─‘少女的酥胸’─我已经知道，联想、象征、隐喻，是世界上最危险的东西。”<br><br>桃花跟他的名气和财富来得一样快，他偶尔会有错觉，名利是教书的附加价值，粉红色情书才是目的。铜钱是臭的，情书是香的。<br><br>不需要什么自我批斗，这一步很容易跨出去。跟有没有太太完全无关。学生爱他，总不好浪费资源，这地球上的真感情也不是太多。<br><br>小旅馆在巷子口，巷子在路的右边，房间窗外有树，树上有叶子，而阳具在内裤里。那么美的东西，不拿是糟蹋了。<br><br>他甩她一巴掌，扔粉笔回黑板沟的手势，令女学生着迷的手势。<br><br>两百个人一堂的补习班，总是男生在教室的左半边，而女生在右半边。他发现整整有半个世界为他打开双腿。<br><br>初恋长跑几年就结婚了，他才知道太太松弛的阴道是多狭隘，而小女学生们逼仄的小穴是多么辽阔！温良恭俭让。<br><br>第三个礼拜，饼干在补习班楼下等他，她说：“老师，你带我去那个地方好不好？”李国华看见饼干，马上想到，那天，她内裤给撕破了，想是没有穿内裤走回去的，想见那风景，腹股起了一阵神圣的骚动。<br><br>看到饼干的眼睛有泪，才问出事情经过。饼干的男朋友抽烟，三根烟的时间，他就决定跟饼干分手。饼干哭得比在小旅馆里还厉害，问为什么？男朋友把第四根烟丢在地上，才抽了四分之一。烟是饼干男朋友唯一的奢侈品。“我干吗跟脏掉的饼干在一起？”饼干求他留下。“所以你刚刚才给我！脏死了，干。”<br><br>从此二十多年，李国华发现世界有的是漂亮的女生拥护他，爱戴他。他发现社会对性的禁忌感太方便了，强暴一个女生，全世界都觉得是她自己的错，连她都觉得是自己的错。罪恶感又会把她赶回他身边。<br><br>思琪在家一面整理行李，一面用一种天真的口吻对妈妈说：“听说学校有个同学跟老师在一起。”“谁？”“不认识。”“这么小年纪就这么骚。”思琪不说话了。她一瞬间决定从此一辈子不说话了。<br><br>她当然不是因为认床所以睡不好，她睡不好，因为每一个晚上她都梦到一只阳具在她眼前，插进她的下体，在梦里她总以为梦以外的现实有人正在用东西堵她的身子。后来上了高中，她甚至害怕睡着，每天半夜酗咖啡。从十三岁到十八岁，五年，两千个晚上，一模一样的梦。<br><br>思琪看着看着，竟然流下了眼泪。她多么嫉妒能大声说出来的爱。爱情会豢养它自己，都是爱情让人贪心。我爱他！<br><br>“怡婷，我早已不是我自己了，那是我对自己的乡愁。”<br><br>可是她要活下去，她不能不喜欢自己，也就是说，她不能不喜欢老师。<br><br>这一切，这世界，是房思琪素未谋面的故乡。<br><br>那年教师节，是从房思琪人生的所有黑夜中舀出最黑的一个夜。想到这里也发现自己无时不刻在想老师。既非想念亦非思考，就是横在脑子里。<br>她没有办法说出口：其实是我配不上你们。我是馊掉的橙子汁和浓汤，我是爬满虫卵的玫瑰和百合，我是一个灯火流丽的都市里明明存在却没有人看得到也没有人需要的北极星。那些男生天真而蛮勇的喜欢是世界上最珍贵的感情。除了她对老师的感情之外。<br><br>思琪用一种超龄的低音说：“我觉得李老师怪怪的。”伊纹看着她，看着她眼睛前的眼泪干掉，眼神变得非常紧致的样子。<br><br>一个该上课时不上课而下课了拼命上课的男人。<br><br>他一面说：“我要在你身上发泄生活的压力。这是我爱你的方式。”<br><br>班主任叫蔡良，很习惯帮补习班里的男老师们打点女学生。偶尔太寂寞了蔡良也会跑去李国华的小公寓睡。<br><br>更何况，每一个被她直载进李国华的小公寓的小女学生，全都潜意识地认为女人一定维护女人，欢喜地被安全带绑在副驾驶座上。<br><br>她一心告诉自己，每一个嘬吸小女生的乳的老男人都是站在世界的极点酗饮着永昼的青春，她载去老师们的公寓的小女生其实个个是王子，是她们吻醒了老师们的年轻。老师们总要有动力上课，不是她牺牲那几个女学生，她是造福其他、广大的学生。这是蔡良思辨之后的道德抉择，这是蔡良的正义。<br><br>是一维哥哥自己先把相扣的手指松开，变成巴掌和拳头的。<br><br>早在公元之前，最早的中文诗歌就把女人比喻成花朵，当一个人说她是花，她只觉得被扔进不费脑筋的作文模板，浩浩汤汤的巨河里。只有老师把她比作花的时候她相信他说的是另一种花，没有其他人看过的花。<br><br>一个人被监禁虐待了几年，即使出来过活，从此身份也不会是便利商店的常客，粉红色爱好者，女儿，妈妈，而永远是幸存者。<br><br>可是老师，世界上称这个情况叫偷腥，鱼腥味的腥，她忍住没说出口。<br><br>他也常常说：“我们的结局，不要说悲剧，反正一定不是喜剧的，只希望你回想起来有过快乐，以后遇到好男生你就跟着走吧。”<br><br>。你在我身上这样，你要我相信世间还有恋爱？你要我假装不知道世界上有被撕开的女孩，在校园里跟人家手牵手逛操场？你能命令我的脑子不要每天梦到你，直梦到我害怕睡觉？你要一个好男生接受我这样的女生─就连我自己也接受不了自己？你要我在对你的爱之外学会另一种爱？但是思琪从没有说话，她只是含起眼皮，关掉眼睛，等着他的嘴唇袭上来。<br><br>这时候，往下竟看见对面那公寓管理员又在看她，脚钉在地上，脖子折断似磕在后颈，也没有报警或喊叫的意思。仿佛他抬头看的是雨或是云。思琪心里只出现一个想法：这太丢脸了。<br><br>把她弓起来抱到床上。思琪像只毛毛虫蜷起身来，终于哭出来：“今天没办法。”“为什么？”“这个地方让我觉得自己像妓女。”<br><br>那是房思琪从初一的教师节第一次失去记忆以来，第两百或第三百次灵魂离开肉体。<br><br>伊纹整个人白得像一间刚粉刷而没有门的房间，墙壁白得要滴下口水，步步压缩、进逼，围困毛毛的一生。<br><br>那么美的笑容，如果不是永远被保护在玻璃雪花水晶球里，就是受伤。<br><br>思琪指着地上自己的衣裤，说：“你这是对学生不礼貌。”李国华沉默了。沉默像冰河一样长。“我爱你，我也是会有罪恶感的，你可以不要增加我的罪恶感吗？”<br><br>李国华想到书里提到的创伤后压力症候群，以前叫作退伍军人病的。创伤后压力症候群的症状之一就是受害人会自责，充满罪恶感。<br><br>李国华只带思琪去他在内湖的别墅那么一次。<br><br>一尊尊足有小孩高的木雕随意观音，一个跌在另一个身上，有的甚至给新来的磕掉了口鼻。无数个观音隔着一扇扇贝壳屏风和一幅幅苏绣百子图，隔着经年的灰尘，从最幽深处向思琪微笑。思琪感到一丝羞辱，淡淡地说：“看不懂。”他狡猾到有一种憨直之色，问她：“当初给你上作文课，你怎么可能不懂。你那么聪明。”<br><br>问他可不可以拜托同补习班的老师帮晞晞补习，他只说了两字：“不好。”她隐隐约约感觉他的意思是那些人不好，而不是这个主意不好。<br><br>只是，这次一维回家的时候带了一瓶大吟酿，伊纹看见长形木盒的脸色，就像看着亲人的棺材。<br><br>只有吃完饭一维叫她拿酒出来的时候她才像醒了一样。<br><br>伊纹隐约感觉思琪在掩盖某种惨伤，某种大到她自己也一眼望之不尽的烂疮。<br><br>只有那天思琪说了一句，今天雨大到“像有个天神在用盆地舀水洗身子”，伊纹才感觉思琪对这个梦幻中的创伤已经认命了。<br><br>“老师，你爱我吗？”“当然，我在世界上最爱的人就是你，从来没想到我这么老了竟然才找到了知音，比爱女儿还爱你，想到竟然都不觉得对女儿抱歉，都是你的错，你太美了。”<br><br>思琪隔天回到她和怡婷的家，才发现他直接把那沓钱塞进她的书包。马上想到，这人倒是很爱随便把东西塞到别人里面，还要别人表现得欢天喜地。她充满痛楚，快乐地笑了。<br><br>大起胆子问他：“做的时候你最喜欢我什么？”他只答了四个字：“娇喘微微。”思琪很惊诧。知道是《红楼梦》里形容黛玉初登场的句子。她几乎要哭了，问他：“《红楼梦》对老师来说就是这样吗？”他毫不迟疑：“《红楼梦》《楚辞》《史记》《庄子》，一切对我来说都是这四个字。”<br><br>一刹那，她对这段关系的贪婪，嚷闹，亦生亦灭，亦垢亦净，梦幻与诅咒，就全部了然了。<br><br>整个蝉叫得像电钻螺丝钉的夏天，伊纹都没有出现。柠檬蛋糕还是永永远远的，毛毛先生也一样。<br><br>毛毛念伊纹这两个字，就好像他从刚出生以来就有人反复教他这个词，刻骨铭心地。毛毛看见她的墨镜下流出了眼泪，伊纹马上摘了墨镜，别过头去擦眼泪。毛毛一瞬间看见她的眼睛不是给打的，只是哭肿了，但是那血脉的颜色仿佛比乌云颜色的瘀青看了更叫人心惊。<br><br>大家都说她太白了，白得像石膏雕塑。她总是会想象一双手伸进自己的肚子，擦亮一支火柴，肚子内壁只刻着那句老师对她说的：“雕塑，是借由破坏来创造。”<br><br>伊纹默默把青鸟坠子的绒布盒子啪地夹起来，关了一个还有一个。<br><br>其实，我听见你夜哭比谁都难受，可是我不理解那哭的意思。<br><br>我会猜想，如果是我去那边，我会不会做得更好？每次你从那边回来，我在房间听你在隔壁哭，不知道为什么，我连你的痛苦也嫉妒。我觉得那边并不在他方，而是横亘在我们之间。如果不幸福，为什么要继续呢？希望你早点睡。希望你不要再喝酒。希望你不要酗咖啡。<br><br>写实主义里，爱上一个人，因为他可爱，一个人死了，因为他该死，讨厌的角色作者就在阁楼放一把火让他摔死─但现实不是这样的，人生不是这样的。我从来都是从书上得知世界的惨痛、忏伤，而二手的坏情绪在现实生活中袭击我的时候，我来不及翻书写一篇论文回击它，我总是半个身体卡在书中间，不确定是要缩回里面，还是干脆挣脱出来。<br><br>我想告诉你，无论什么事都可以跟我说，从小得像蜉蝣，到大得像黑洞的事情。<br><br>思琪问李国华，又似自言自语：“我有时候想起来都不知道老师怎么舍得，我那时那么小。”<br>最后，他开口了：“那时候你是小孩，但是我可不是。”<br><br>一维拿鸡尾酒戒出来，伊纹一看就叹了一声：“哦，天啊，这根本是我梦里的花园，一维，你真了解我，你真好。”<br><br>李国华很少看错人，但是他看错郭晓奇了。<br><br>她不知道她花了大半辈子才接受了一个恶魔而恶魔竟能抛下她。她才知道最肮脏的不是肮脏，是连肮脏都嫌弃她。她被地狱流放了。有什么地方比地狱更卑鄙、更痛苦呢？<br><br>那些男人见了她多半很讶异，赴约前一心以为交友网站上晓奇少报了体重或多报了上围。有人甚至布道起来：“你还这么年轻漂亮，何必呢？”晓奇睁大了眼睛问：“何必什么？”男人便不说话了，只是静静地脱衣服。每一个要与陌生男子见面的日子都是高音的日子。大学课堂上老师说什么渐渐听不到了。<br><br>电影里接吻了就要结束，而现实生活中，接吻只是个开始。<br><br>郭晓奇的二一通知单 从学校寄回家里的时候，她对家人宣布说不再上学了。郭妈妈哭着说她乖巧的小孩哪里去了。晓奇说那个女生高三的时候就已经死了。郭妈妈问高三是什么意思。晓奇只说了三个字：李国华。<br><br>随着时间开始腐烂，直到下午，她看见熟悉的皮鞋裤脚下了出租车，她张嘴叫喊的时候发现自己发不出声音，也马上发现车的另一边下来了一个小女生。显然比她小了多年。看着他们进电梯，晓奇还以为自己会瞎掉。<br><br>李国华选的地点，说是人少，其实他知道郭家在做小吃摊，光是饭店的装潢就可以吓掉他们一半。李师母特地从高雄北上，和李国华坐在桌的那一端，郭家坐一头。<br><br>郭爸爸郭妈妈穿得比参加喜宴还庄重。晓奇的表情像是她砸破了自己最珍爱的玻璃杯。<br><br>最后郭爸爸和李老师争着付账。回家的路上郭爸爸对郭妈妈说：“好险没有认真争，大饭店喝个饮料就那么贵。”<br><br>回到家，师母也不愿意坐下休息，只是站着，枯着头，让眼泪流到脖子上。“几次了？”她的声音是死水的咸。李国华站在师母面前，用三颗星星的口吻说：“就那么一次。”他想到死水这譬喻的时候，想起高中一年级时化学老师说过一句话“喝海水的人是渴死的”─他从来也没有弄懂过渗透压，才读了文组，但是这话的诗意一直刻在他心里。现在那调皮又晦涩的诗意又浮出来了。“我有什么理由相信你？”李国华明白这句话背后的意思是：请给我理由相信你。他瘫坐在地上，说：“我清清白白二十年，做爸爸的人，希望女儿在外面遇到什么样的人，自然会做什么样的人。”“那怎么会有这一次？”他的声音飞出更多星星：“求你原谅我，是她诱惑我的，蔡良说她有问题要问我，是她硬要的，就那么一次。”师母的声音开始发抖：“她怎么诱惑你？”他用大手抹了眼睛：“是她，是她主动的，从头到尾都是她主动的。”声音又大起来，“天啊，那简直是一场噩梦！”“但是你有兴奋吧，不然怎么可能？”“有，我的身体有，她很顽强，没有一个男人不会兴奋的，但是我发誓，我的脑子一点也不兴奋。”“但你说你爱她。”“爱她？什么时候？刚刚吗？我根本不爱她，刚刚那样说，只是怕她爸爸妈妈发怒，你不知道她是怎样的人，我不知道她为什么要设计我，她还威胁我，跟我要了几十万去乱花，她还威胁我买名牌给她。”“你可以跟我讨论啊！”“我怎么敢，我已经犯下滔天大错，我恨自己，我只能一直去补那个洞。”“这事情多久了？”他折着颈子，很低很低地回答了：“两年了，她反复拿这件事威胁我，我好痛苦，可是我知道你现在更痛苦，是我对不起你。”师母起身去拿绣花卫生纸盒。“怎么可能你一个大男人的力气抵不过一个高中女生？”“所以我说对不起你，天啊，那个时候，我不知道怎么跟你解释，她真的是，我根本动都不敢动，我好怕她会受伤，她真的很，她很，她，她，她就是骚，她根本就是一个骚货！”李国华淹在自己的大手里无泪地大哭了，“我不会说这是全天下男人都会犯的错，是我没能控制好自己，我不该被她诱惑，我错了，请你原谅我。”师母坐到他对面默默擤鼻子。他继续说：“看你这样痛苦，我真是个垃圾，我根本不该被她勾引的，我真是垃圾，人渣，废物，我去死算了。”一面说一面拿起桌上的宝特瓶狠敲自己的头。师母慢动作把宝特瓶抢下来。<br><br>他们对坐着，望进宝特瓶里面。宝特瓶里的橘红色饮料渐渐缓静，将死将善的样子。半小时后，师母开口了：“我们什么也不要告诉晞晞。”<br><br>一打开就是老师的回讯：“我从来没有爱过你，我从头到尾都是欺骗你，每个人都这样跟你说你还不信？你不要再打电话来了，我的太太很不能谅解。”晓奇迟迟地看了一遍又一遍短信，突然想到一幕：老师用蠢笨的表情按手机，傻憨地笑说“我是洞穴里的原始人，我不会发短信”。也从没写东西给她过。原来他不要任何证据落在她这里。她还爱他这么多年。她的眼泪掉到手机荧幕上，泪滴把“老师”两个字扭曲、放大。<br><br>他马上洗了脸，跑回房，开了灯，掀被子，发现睡在右手的伊纹下身全是血。一维突然想起昨天半夜回家，他用皮鞋尖猛踢伊纹。窄皮鞋头如一窝尖头毒蛇疯蹿出去。伊纹抱紧双腿，他只能踢她的背。他想起伊纹一直说不要不要，不要不要。原来，伊纹说的是宝宝，宝宝。<br><br>“对不起，伊纹，我的亲亲，我们可以再生一个。”伊纹看着他，就像他是由她所不懂的语言所写成。“伊纹宝贝？你没事最重要，不是吗？”一维看着伊纹全身颤抖，隆隆的马达，催到极限，眼看要发动的时候，又整个人熄灭了。<br><br>“一维，你听我说，刚刚在梦里我就知道宝宝没了，或许这是注定的，我也不希望宝宝出生在这样的家庭里。宝宝很好，宝宝为我好，宝宝让我回到一个人。你懂吗？”<br><br>思琪说话了：“为什么这个世界是这个样子？为什么所谓教养就是受苦的人该闭嘴？为什么打人的人上电视上广告广告牌？姐姐，我好失望，但我不是对你失望，这个世界，或是生活、命运，或叫它神，或无论叫它什么，它好差劲，我现在读小说，如果读到赏善罚恶的好结局，我就会哭，我宁愿大家承认人间有一些痛苦是不能和解的，我最讨厌人说经过痛苦才成为更好的人，我好希望大家承认有些痛苦是毁灭的，我讨厌大团圆的抒情传统，讨厌王子跟公主在一起，正面思考是多么媚俗！可是姐姐，你知道我更恨什么吗？我宁愿我是一个媚俗的人，我宁愿无知，也不想要看过世界的背面。”<br><br>后来怡婷在日记里读到这一段，思琪写了：“其实我第一次想到死的时候就已经死了。人生如衣物，如此容易被剥夺。”<br><br>每检阅一个回应，晓奇就像被杀了一刀。原来，人对他者的痛苦是毫无想象力的，<br><br>原来这就是对老师不忠的感觉，好痛苦。<br><br>李国华深深吸了一口气，佩服自己的耐性。温良恭俭让。好险以前陆战队有学过，这里打单结，那里打平结。她的手脚像溺水。“不要，不要！”该露的要露出来。这里再打一个八字结，那里再打一个双套结。她的手腕脚踝被绳子磨肿。“不要！不要！不要！不要！”没错，像螃蟹一样。不能固定脖子，死了就真的不好玩了。<br><br>“不要，不。”房思琪的呼叫声蜂拥出脏腑，在喉头塞车了。没错，就是这个感觉。就是这个感觉，盯着架上的书，开始看不懂上面的中文字。渐渐听不到老师说的话，只看见口型在拉扯，像怡婷和我从小做的那样，像岩石从泉水间喷出来。太好了，灵魂要离开身体了，我会忘记现在的屈辱，等我再回来的时候，我又会是完好如初的。<br><br>完成了。房妈妈前几天送我的螃蟹也是绑成这样。李国华谦虚地笑了。温良恭俭让。温暖的是体液，良莠的是体力，恭喜的是初血，俭省的是保险套，让步的是人生。<br><br>这次，房思琪搞错了，她的灵魂离开以后，再也没有回来了。<br><br>过几天，郭晓奇家的铁卷门被泼了红漆。而信箱里静静躺着一封信，信里头只有一张照片，照的是螃蟹思琪。<br></code></pre></td></tr></table></figure><ul><li>第3章 复乐园</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs markdown">怡婷上台北，伊纹和毛毛先生下高雄，在高铁站分手之后，伊纹才哭出来。<br><br>伊纹生气了：“为什么我要回答这个问题？你是我的谁？”毛毛发现自己的心下起大雨，有一只湿狗一跛一跛哀哀在雨中哭。毛毛低声说：“我出门了。”门静静地关起来，就像从来没有被开过。<br><br>“伊纹，我只是对自己很失望，我以为我唯一的美德就是知足，但是面对你我真的很贪心，或许我潜意识都不敢承认我想要在你空虚寂寞的时候溜进来。我多么希望我是不求回报在付出，可是我不是。我不敢问你爱我吗？我害怕你的答案。我知道钱一维是故意把领带忘在这里的。我跟你说过，我愿意放弃我拥有的一切去换取你用看他的眼神看我一眼，那是真的。但是，也许我的一切只值他的一条领带。我们都是学艺术的人，可是我犯了艺术最大的禁忌，那就是以谦虚来自满。我不该骗自己说能陪你就够了，你幸福就好了，因为我其实想要更多。我真的很爱你，但我不是无私的人，很抱歉让你失望了。”<br><br>怡婷看完了日记，她不是过去的怡婷了。她灵魂的双胞胎在她楼下、在她旁边，被污染，被涂鸦，被当成厨余。日记就像月球从不能看见的背面，她才知道这个世界的烂疮比世界本身还大。她灵魂的双胞胎。<br><br>怡婷把日记翻到会背了，她感觉那些事简直像发生在她身上。会背了之后拿去给伊纹姐姐。有生以来第二次看到姐姐哭。<br><br>晓奇现在待在家里帮忙小吃摊的生意。忙一整天，身上的汗像是她也在蒸笼里蒸过一样。每天睡前晓奇都会祷告：上帝，请你赐给我一个好男生，他愿意和我与我的记忆共度一生。<br><br>有时候李国华在秘密小公寓的淋浴间低头看着自己，他会想起房思琪。想到自己谨慎而疯狂，明媚而膨胀的自我，整个留在思琪里面。而思琪又被他纠缠拉扯回幼儿园的词汇量，他的秘密，他的自我，就出不去思琪的嘴巴，被锁在她身体里。甚至到了最后，她还相信他爱她。这就是话语的重量。<br><br>伊纹跟怡婷说：“怡婷，你才十八岁，你有选择，你可以假装世界上没有人以强暴小女孩为乐；假装从没有小女孩被强暴；假装思琪从不存在；假装你从未跟另一个人共享奶嘴、钢琴，从未有另一个人与你有一模一样的胃口和思绪，你可以过一个资产阶级和平安逸的日子；假装世界上没有精神上的癌；假装世界上没有一个地方有铁栏杆，栏杆背后人人精神癌到了末期；你可以假装世界上只有马卡龙、手冲咖啡和进口文具。但是你也可以选择经历所有思琪曾经感受过的痛楚，学习所有她为了抵御这些痛楚付出的努力，从你们出生相处的时光，到你从日记里读来的时光。你要替思琪上大学，念研究所，谈恋爱，结婚，生小孩，也许会被退学，也许会离婚，也许会死胎。但是，思琪连那种最庸俗、呆钝、刻板的人生都没有办法经历。你懂吗？你要经历并牢牢记住她所有的思想、思绪、感情、感觉，记忆与幻想、她的爱、讨厌、恐惧、失重、荒芜、柔情和欲望，你要紧紧拥抱着思琪的痛苦，你可以变成思琪，然后，替她活下去，连思琪的份一起好好地活下去。”怡婷点点头。<br><br>“你可以把一切写下来，但是，写，不是为了救赎，不是升华，不是净化。虽然你才十八岁，虽然你有选择，但是如果你永远感到愤怒，那不是你不够仁慈，不够善良，不富同理心，什么人都有点理由，连奸污别人的人都有心理学、社会学上的理由，世界上只有被奸污是不需要理由的。你有选择─像人们常常讲的那些动词─你可以放下，跨出去，走出来，但是你也可以牢牢记着，不是你不宽容，而是世界上没有人应该被这样对待。思琪是在不知道自己的结局的情况下写下这些，她不知道自己现在已经没有了，可是，她的日记又如此清醒，像是她已经替所有不能接受的人─比如我─接受了这一切。怡婷，我请你永远不要否认你是幸存者，你是双胞胎里活下来的那一个。每次去找思琪，念书给她听，我不知道为什么总是想到家里的香氛蜡烛，白胖带泪的蜡烛总是让我想到那个词─尿失禁，这时候我就会想，思琪，她真的爱过，她的爱只是失禁了。忍耐不是美德，把忍耐当成美德是这个伪善的世界维持它扭曲的秩序的方式，生气才是美德。怡婷，你可以写一本生气的书，你想想，能看到你的书的人是多么幸运，他们不用接触，就可以看到世界的背面。”<br><br>伊纹说：“没办法的，我们都没办法从此过着幸福快乐的日子，诚实的人是没办法幸福的。”<br><br>刘怡婷顿悟，整个大楼故事里，她们的第一印象大错特错：衰老、脆弱的原来是伊纹姐姐，而始终坚强、勇敢的其实是老师。从辞典、书本上认识一个词，竟往往会认识成反面。她恍然觉得不是学文学的人，而是文学辜负了她们。<br><br>吴奶奶笑出更多皱纹：“还是当老师最好，每天跟年轻人在一起，都变年轻了。”<br><br>张太太把手围在李老师耳边，悄声说：“我就说不要给小孩子读文学嘛，你看读到发疯了这真是，连我，连我都宁愿看连续剧也不要看原著小说，要像你这样强壮才能读文啊，你说是不是啊？”<br><br>一维很痛苦。他知道“从前给她看那些书”的原话是“从前伊纹给她们看那些书”。<br><br>她们的大楼还是那样辉煌，丰硕，希腊式圆柱经年了也不曾被人摸出腰身。路人骑摩托车经过，巍峨的大楼就像拔地而出的神庙，路人往往会转过去，掀了安全帽的面盖，对后座的亲人说：“要是能住进这里，一辈子也算圆满了。”<br></code></pre></td></tr></table></figure><ul><li>书评</li></ul><blockquote><p>洛丽塔，不洛丽塔：二十一世纪的少女遇险记    张亦绚</p><p>五年初始，嫁入钱家的伊纹，是少女的忘年交，但在李国华的用计下，将其“文学保姆”的位置，让出给李国华。</p><p>在思琪与伊纹之间，存在某种“不幸的平等”。</p><p>伊纹鼓励怡婷不忘房思琪之痛─尽管不知内情的众人，尊敬李国华如故，并将房思琪疯掉一事，归咎于伊纹让她们“读太多文学”。</p><p>小说中的张太太，引出“嫁女儿”一线，似与诱奸无涉。但她不愿女儿嫁打人的钱一维，还介绍伊纹嫁钱家─此人麻木，与帮李国华牵线奸污学生的蔡良，可有一比。</p><p>任何关于性的暴力，都是整个社会一起完成的     蔡宜文  </p><p>任何关于性的暴力都是“社会性”的，或应该这么说，任何关于性的暴力，都不是由施暴者独立完成的，而是由整个社会协助施暴者完成。</p><p>在《房思琪的初恋乐园》，社会可能不仅仅是协助者，更往往就是施暴者本身。</p><p>李国华聪明，他十分理解这个社会面对性的暴力时，会站在施暴者的那一方。也因此他可以得到许多的“爱”，无论是房思琪的、郭晓奇的还是那一群在后面排队等待的小女孩的爱。</p></blockquote><blockquote><p>台湾女作家林奕含在自己婚礼上的致辞</p><p>嗨，大家好。我是今天的新娘，我叫林奕含。</p><p>今天是个喜气的日子，所以我理应说些喜气洋洋的话，但是很不幸的，我这个人本身就没有什么喜气，所以……</p><p>不知道从什么时候开始，台湾的婚礼开始有个习惯，就是新人常常要准备一些表演来自娱娱人，但是很不幸的，我没有那样的才艺。我不会唱歌，不会跳舞，不会拉小提琴，不会吹长笛……事实上，我这个人什么都不会。但我会写两个字，所以今天来说几句话。</p><p>哦！然后我要告诉大家，虽然我们两个好像很早结婚，但是我没有怀孕，我只是比较胖而已。</p><p>好，接下来讲的内容可能会比较严肃。</p><p>我今年二十五岁……欸，差几天就满二十五岁了。我从高中二年级，大概十六七岁的时候，就得了重度忧郁症，准确点来说是我从高中二年级开始了我与重度忧郁症共生的人生。后来遇到一些事情就在这上面加上了 PTSD，所谓的创伤后压力症候群。重郁症这件事情，他很像是失去一条腿或者是失去一双眼睛。</p><p>人人都告诉你说，“你要去听音乐啊”“你要去爬山啊”“去散心啊”“你跟朋友聊聊天啊”但 我知道不是那样的。</p><p>我失去了快乐这个能力，就像有人失去他的眼睛，然后再也拿不回来一样。但与其说是快乐，说的更准确一点，是热情。我失去了吃东西的热情，我失去了与人交际的热情，以至于到最后我失去了对生命的热情。有些症状是或许你们比较可以想象的。我常常会哭泣，然后脾气变得非常暴躁，然后我会自残。</p><p>另外一些是你们或许没有办法想象的。我会幻觉，我会幻听，我会解离，然后我自杀很多次，进过加护病房或是精神病房。因为是高中二年级的时候开始生病的，我每个礼拜二要上台北做深度心理治疗，每个礼拜五要到门诊拿药。这就有点接近我今天要谈的精神病污名化的核心——我是台南人，我在台南生病，但是为什么每一个人都告诉我，我要到一个没有人认识我的地方去治疗我的疾病？我为什么要上台北？当然后来也因为这个原因，我缺课太多，差一点没有办法从高中毕业。</p><p>前几年我的身体状况好点，我就重考。这几年一直处于没有工作也没有学业的状况，前几年身体好了一点，我就去重考，然后考上了政大中文系。在中文系念到第三年的时候，很不幸的，突然开始病情发作，所以我又再度休学。在我休学前那一阵子我常常发作解离。</p><p>所谓的解离呢，以前的人会叫他精神分裂，现在有一个比较优雅的名字叫做思觉失调。但我更喜欢用柏拉图的一句话来叙述他，就是灵肉对立。因为我肉体受到的创痛太大了，以至于我的灵魂要离开我的身体，我才能活下去。</p><p>我第一次解离是在我十九岁的时候。我永远都记得我站在离我的住所不远的大马路上，好像突然醒了过来，那时候正下着滂沱大雨，我好像被大雨给淋醒了一样。我低头看看自己，我的衣着很整齐，甚至仿佛打扮过，但是我根本不知道我什么时候出的门，去了哪里，又做了些什么。对我来说，解离的经验是比吃 100 颗止痛药，然后被推去加护病房里面洗胃还要痛苦的一个经验。</p><p>从中文系休学前几个月，我常常解离，还有另外一个症状是没有办法识字。我知道这听起来很荒谬，对，但就是我打开书我没有一个字看得懂。身为一个从小就如此爱慕、崇拜文字的人来说，是很挫折的一件事。</p><p>当然在这样的情况下我没有办法参加期末考，然后那时候正值期末考。我的那时候中文系的系主任就把我叫过去讲话。我请我的医生开了一张诊断证明，然后我就影印了很多份，寄给各个教授，跟他们解释说我为什么没有办法参加期末考。</p><p>这时候系主任与助教就坐在那个办公室里面，助教在那边看着我，然后他说：“精神病的学生我看多了，自残啊，自杀啊，我看你这样蛮好、蛮正常的。”然后这时候我的系主任对我说了九个字，这九个字我一辈子都不会忘记。他拎起我的诊断书，问我说：“你从哪里拿到这个的？”你-从-哪-里-拿-到-这-个-的。”</p><p>当下的我，我觉得我很懦弱。我就回答他说：“我从医院。”但我现在想我很后悔我没有跟他说：“主任，我没有笨到在一个，活在一个对精神病普遍存在扁平想象的社会里，用一张精神病的诊断书去逃避区区一个期末考试。然后你问我从哪里拿到的。从我’的屁眼啦！干！”我很想这样说，但我没有。</p><p>所以我要问的是，他是用什么东西来诊断我？是用我的坐姿，我的洋装，我的唇膏，或是我的口齿来诊断我吗？这个社会对精神疾患者的想象是什么？或我们说的难听一点，这个社会对精神疾患者的期待是什么？是不是我今天衣衫褴褛、口齿不清，然后六十天没有洗澡去找他，他就会相信我真的有精神病？又或者他觉得精神病根本不是病呢？</p><p>请试想一下今天你有一个晚辈，他得了白血病。 你绝对不会跟他说，“我早就跟你讲，你不要跟有得白血病的人来往，不然你自己也会得白血病。”不会这样说吧。 你也不会跟他说，“我跟你讲，都是你的意志力不够，你的抗压性太低，所以你才会得白血病。” 你也不会跟他说，“你为什么要一直去注意你的白血球呢？你看你的手指甲不是长得好好的吗？为什么要一直去想白血球呢？”你也绝对不会这样说。 你也更不会对他说，“为什么大家的白血球都可以乖乖的，你的白血球就是不乖呢？让白血球乖乖的很难吗？” 这些话听起来多么地荒谬，可是这些就是我这么多年来听到最多的一些话。</p><p>很多人问我说，为什么要休学，为什么可以不用工作，为什么休学一次休学两次，然后 bla bla bla 然后没有人知道我比任何人都还要不甘心。就是这个疾病，他剥削了我曾经引以为傲的一切。比如说我曾经没有任何缝隙的与我父母之间的关系，或者是我原本可能一帆风顺的恋爱，或是随着生病的时间越来越长，朋友一个一个地离去。甚至是我没有办法念书。天知道我多么地想要一张大学文凭。</p><p>还有，有吃过神经类或精神科药物的人都知道，吃了药以后你反应会变得很迟钝、会很嗜睡。我以前三位数的平方心算只要半秒就可以出来，我现在去小吃店连找个零钱都找不出来。还有吃其中一种药，我在两个月以内胖了二十公斤，甚至还有人问我说，“诶，你为什么不少吃一点。”所以有时候，你知道某一种无知他真的是很残酷的。</p><p>所以我从来没有做出任何选择。这么多年我一直在写文章，其实我从头到尾都只有讲一句话，就是：不是我不为，我是真的不能。</p><p>在中文系的时候，班上有遇到一些同学，他们是所谓的文青。他们简直恨不得能得忧郁症。他们觉得忧郁症是一件很诗情画意的事情。我站在我的疾病里，我看出去的苍白与荒芜。我只想告诉他们，这种愿望有多么地可耻。</p><p>我也认识很多所谓身处上流的人，他们生了病却没有办法去看病，因为面子或无论你叫他什么。我也知道有的人他生了病想要看病却没有钱去看病。比如说我一个月药费和心理咨商的费用就要超过一万台币。</p><p>今天是我们的订婚宴。想到婚礼这件事，我整天思考一些事情就是：今天我和B 站在这里不是因为我歌颂这个天纵英明的异性恋一夫一妻制度。我支持多元成家，也支持通奸除罪化。</p><p>我穿着白纱，白纱象征的是纯洁。可是从什么时候，所谓的纯洁从一种精神状态变成一种身体的状态，变成一片处女膜？或者比如说，人人都会说，“啊，这是一个女人一生中最美的时刻。”这句话是多么的父权。他说这是一个女人一生中最美的时刻，不是说你美。意思是说，从今以后无论你里或外的美都要开始走下坡。意思是，从今以后你要自动自发地把性吸引力收到潘多拉的盒子里。所以我觉得这句话很可笑。</p><p>跟B在一起这几年，教我最大的一件事情其实只有两个字，就是平等。我从来都是谁谁谁的女儿，谁谁谁的学生，谁谁谁的病人，但我从来不是我自己。我所拥有的只有我和我的病而已。然后跟阿帆在一起的时候，我是他女朋友，但不是他“的”女朋友。我是他未婚妻，但是不是他“的”未婚妻。我愿意成为他老婆，但我不是他“的”老婆。我坐享他的爱，但是我不会把他视为理所当然。</p><p>今天在这个场合，如果要说什么B是全世界最体贴我的人啦，全世界最了解我的人啦，全世界对我最好的人啦，然后我要用尽心力去爱他，经营我们的感情啦……我觉得这些都是废话，因为不然我们也不会站在这里。</p><p>关于新人这个词，今天我和B是新人。然后这个词让我想到我最喜欢的日本作家大江健三郎他说的新人。他常常在书里引用这个概念，就是他的书写不是写给存在这个世界上的大人们的，甚至也不是写给存在这个世界上的小孩，而是写给那些比最新的人还要新，给尚未出世的孩子们写的。</p><p>“新人”这个词出自《新约圣经》。使徒保罗叫耶稣基督为 new man。所以我在想，如果今天我是新人，如果我可以是新人，如果我可以成为新人，如果我可以成为一个新的人，那么我要成为一个什么样的人。</p><p>所以今天婚礼我就想到，我想成为一个对他人的痛苦有更多的想象力的人，我想成为可以告诉那些恨不得得精神病的孩子们这种愿望是不对的那种人，我想要成为可以让无论有钱或没有钱的人都毫无顾忌地去看病的那一种人，我想要成为可以实质上帮助精神病去污名化的那一种人。</p><p>最后我要感谢我的家人。我知道哥哥你很爱我，我知道你最爱我，但是你不会把他说出来。</p><p>我很谢谢你每天对我的关心，对我来说是我的精神粮食。然后很谢谢爸爸妈妈，虽然我没有长成那个你们从小所培育所期待，然后花很多心思所栽植的样子。没有长成那个样子，让你们失望了，我很抱歉。</p><p>（听到这里的时候，林爸回答：不会！）</p><p>今天我要结婚了，但你们不是失去一个女儿，而是多出一个儿子。同样的，我也要感谢卢爸爸、卢妈妈，就是谢谢你们生养出一个如此完美的大男孩。谢谢你们放心把他交给我，我一定会努力地好好照顾他，把他养胖。同样的，对卢爸爸、卢妈妈来说，我希望你们不要觉得失去一个儿子，而是多了一个女儿。然后希望芊雨，如果，如果我没有办法，因为我没有什么姐姐的样子，你可以把我当成朋友，我会很开心。</p><p>最后的最后，我要谢谢各位叔叔阿姨，就是在我跟B在台北有了一个新的小小的家的时候，都是各位在场的叔叔阿姨陪伴，帮我陪伴，我的爸妈。然后我最最深爱的，我的爸爸，跟我的妈妈，都是你们，虽然我爸就是当导游很罗嗦，我妈又不太能走。但真的很感谢你们，陪他们到处玩啊，吃美食啊，讲一些垃圾话啊，真的很谢谢你们。每次看到我妈传那种一群阿姨们倒在一起笑得很开心的照片，我就真的打从心底地感谢各位在场的叔叔阿姨。谢谢你们替我照顾我的爸妈。我真的非常感谢。</p><p>我今天要讲的就这样，谢谢。</p><p>（林妈妈说：我要敬我勇敢、美丽的女儿，她比我还要勇敢，她比我还要诚实。）</p></blockquote><h1 id="《无证之罪》"><a href="#《无证之罪》" class="headerlink" title="《无证之罪》"></a>《无证之罪》</h1><p>时间：2021.09</p><p>关键词：【中国】紫金陈&#x2F;悬疑&#x2F;犯罪（电子书）</p><p>记录：</p><ul><li>小说的故事情节和结构其实不算复杂，比较厉害的是作者的所写的的东西让读者认为骆闻是变态杀手；</li><li>小说并没有非常完美，有些地方还算有些硬伤的，比如骆闻让所有杀人凶手的线索指向李丰田；</li><li>影视化的《无证之罪》更好的是对李丰田这个形象的描述，但是小说这部分就有些单薄了；</li><li>代入法的判案有点意思！</li></ul><blockquote><p>只不过，如果一个案子非常复杂，就像数学上高次方程，理论上是无解的。唯一求解的办法只有，你先大致猜测未知数的解，然后把解代进去，验证你的猜测。现在这个案子，就像典型的无解方程组，无法用常规办法获得答案，只能先代入，再验证。</p></blockquote><h1 id="《长夜难明》"><a href="#《长夜难明》" class="headerlink" title="《长夜难明》"></a>《长夜难明》</h1><p>时间：2021.09</p><p>关键词：【中国】紫金陈&#x2F;悬疑&#x2F;犯罪（电子书）</p><p>记录：</p><ul><li>影视化的《沉默的真相》我只看过剧情的解说，觉得真的是非常棒的作品，看完了小说作品，这部小说也非常不错！</li><li>小说更重要的不是什么悬疑难案，而是众人演了一出戏，只为了一个公正！</li><li>这部作品比《无证之罪》要好了很多；</li></ul><h1 id="《秘密》"><a href="#《秘密》" class="headerlink" title="《秘密》"></a>《秘密》</h1><p>时间：2021.09</p><p>关键词：【日本】东野圭吾&#x2F;悬疑小说（电子书）</p><p>记录：</p><blockquote><p>1.独立的女人也可以当家庭主妇。我讨厌的是，因为不能自立而被迫当家庭主妇。<br>2.他心中不禁升起一股怒火，自己成了那些不合理之事的牺牲品。<br>3.公司就像一场人生游戏，在公司往上爬，就像人年纪增长一样。不想往上爬就相当于不想变老。</p></blockquote><p>说实话，这本书没怎么看懂！</p><h1 id="《放学后》"><a href="#《放学后》" class="headerlink" title="《放学后》"></a>《放学后》</h1><p>时间：2021.09</p><p>关键词：【日本】东野圭吾&#x2F;悬疑小说（电子书）</p><p>记录：</p><p>还不错！</p><p>书中有很多伏笔，最后的结局出人意料又在情理之中。</p><h1 id="《嫌疑人x的献身》"><a href="#《嫌疑人x的献身》" class="headerlink" title="《嫌疑人x的献身》"></a>《嫌疑人x的献身》</h1><p>时间：2021.10</p><p>关键词：【日本】东野圭吾&#x2F;悬疑小说（电子书）</p><p>记录：</p><ul><li>拖拖拉拉好久才读完这本书；</li><li>这本书本书是一部非常好的悬疑推理小说，但是我之前已经看过电影了，电影在小说的基础上基本上没有什么改动，所以大体情节我都知道了，因此读这本书的体验非常不好！</li></ul><h1 id="《果壳中的宇宙》"><a href="#《果壳中的宇宙》" class="headerlink" title="《果壳中的宇宙》"></a>《果壳中的宇宙》</h1><p>时间：2021.10</p><p>关键词：【英国】史蒂芬·霍金&#x2F;理论物理&#x2F;天体物理&#x2F;科普（电子书）</p><p>记录：</p><ul><li>《果壳中的宇宙》这一书名出自于莎士比亚名剧《哈姆雷特》。它的隐喻是如此之重。哈姆雷特认为，即便把他关在果壳中，仍然自以为是无限空间之王。</li></ul><p>没读完</p><hr><hr><hr><p><strong>2021年有两本看了一半的书籍，转到2022年记录了！</strong></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
